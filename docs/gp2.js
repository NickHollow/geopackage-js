(function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = global || self, factory(global.GeoPackageAPI = {}));
}(this, function (exports) { 'use strict';

            var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
              throw new Error('setTimeout has not been defined');
            }

            function defaultClearTimeout() {
              throw new Error('clearTimeout has not been defined');
            }

            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;

            if (typeof global$1.setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            }

            if (typeof global$1.clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
              if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
              } // if setTimeout wasn't available but was latter defined


              if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
              }

              try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
              } catch (e) {
                try {
                  // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                  return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                  // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                  return cachedSetTimeout.call(this, fun, 0);
                }
              }
            }

            function runClearTimeout(marker) {
              if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
              } // if clearTimeout wasn't available but was latter defined


              if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
              }

              try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
              } catch (e) {
                try {
                  // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                  return cachedClearTimeout.call(null, marker);
                } catch (e) {
                  // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                  // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                  return cachedClearTimeout.call(this, marker);
                }
              }
            }

            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
              if (!draining || !currentQueue) {
                return;
              }

              draining = false;

              if (currentQueue.length) {
                queue = currentQueue.concat(queue);
              } else {
                queueIndex = -1;
              }

              if (queue.length) {
                drainQueue();
              }
            }

            function drainQueue() {
              if (draining) {
                return;
              }

              var timeout = runTimeout(cleanUpNextTick);
              draining = true;
              var len = queue.length;

              while (len) {
                currentQueue = queue;
                queue = [];

                while (++queueIndex < len) {
                  if (currentQueue) {
                    currentQueue[queueIndex].run();
                  }
                }

                queueIndex = -1;
                len = queue.length;
              }

              currentQueue = null;
              draining = false;
              runClearTimeout(timeout);
            }

            function nextTick(fun) {
              var args = new Array(arguments.length - 1);

              if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                  args[i - 1] = arguments[i];
                }
              }

              queue.push(new Item(fun, args));

              if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
              }
            } // v8 likes predictible objects

            function Item(fun, array) {
              this.fun = fun;
              this.array = array;
            }

            Item.prototype.run = function () {
              this.fun.apply(null, this.array);
            };

            var title = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues

            var versions = {};
            var release = {};
            var config = {};

            function noop() {}

            var on = noop;
            var addListener = noop;
            var once = noop;
            var off = noop;
            var removeListener = noop;
            var removeAllListeners = noop;
            var emit = noop;
            function binding(name) {
              throw new Error('process.binding is not supported');
            }
            function cwd() {
              return '/';
            }
            function chdir(dir) {
              throw new Error('process.chdir is not supported');
            }
            function umask() {
              return 0;
            } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

            var performance = global$1.performance || {};

            var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
              return new Date().getTime();
            }; // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime


            function hrtime(previousTimestamp) {
              var clocktime = performanceNow.call(performance) * 1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor(clocktime % 1 * 1e9);

              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];

                if (nanoseconds < 0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }

              return [seconds, nanoseconds];
            }
            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }
            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var inited = false;

            function init() {
              inited = true;
              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

              for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }

              revLookup['-'.charCodeAt(0)] = 62;
              revLookup['_'.charCodeAt(0)] = 63;
            }

            function toByteArray(b64) {
              if (!inited) {
                init();
              }

              var i, j, l, tmp, placeHolders, arr;
              var len = b64.length;

              if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4');
              } // the number of equal signs (place holders)
              // if there are two placeholders, than the two characters before it
              // represent one byte
              // if there is only one, then the three characters before it represent 2 bytes
              // this is just a cheap hack to not do indexOf twice


              placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

              arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

              l = placeHolders > 0 ? len - 4 : len;
              var L = 0;

              for (i = 0, j = 0; i < l; i += 4, j += 3) {
                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                arr[L++] = tmp >> 16 & 0xFF;
                arr[L++] = tmp >> 8 & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              if (placeHolders === 2) {
                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                arr[L++] = tmp & 0xFF;
              } else if (placeHolders === 1) {
                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                arr[L++] = tmp >> 8 & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              return arr;
            }

            function tripletToBase64(num) {
              return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
            }

            function encodeChunk(uint8, start, end) {
              var tmp;
              var output = [];

              for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                output.push(tripletToBase64(tmp));
              }

              return output.join('');
            }

            function fromByteArray(uint8) {
              if (!inited) {
                init();
              }

              var tmp;
              var len = uint8.length;
              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

              var output = '';
              var parts = [];
              var maxChunkLength = 16383; // must be multiple of 3
              // go through the array every three bytes, we'll deal with trailing stuff later

              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
              } // pad the end with zeros, but make sure to not forget the extra bytes


              if (extraBytes === 1) {
                tmp = uint8[len - 1];
                output += lookup[tmp >> 2];
                output += lookup[tmp << 4 & 0x3F];
                output += '==';
              } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                output += lookup[tmp >> 10];
                output += lookup[tmp >> 4 & 0x3F];
                output += lookup[tmp << 2 & 0x3F];
                output += '=';
              }

              parts.push(output);
              return parts.join('');
            }

            var base64 = /*#__PURE__*/Object.freeze({
                        toByteArray: toByteArray,
                        fromByteArray: fromByteArray
            });

            function read(buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? nBytes - 1 : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];
              i += d;
              e = s & (1 << -nBits) - 1;
              s >>= -nBits;
              nBits += eLen;

              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & (1 << -nBits) - 1;
              e >>= -nBits;
              nBits += mLen;

              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }

              return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }
            function write(buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
              var i = isLE ? 0 : nBytes - 1;
              var d = isLE ? 1 : -1;
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);

                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }

                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }

                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = e << mLen | m;
              eLen += mLen;

              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            }

            var toString = {}.toString;
            var isArray = Array.isArray || function (arr) {
              return toString.call(arr) == '[object Array]';
            };

            var INSPECT_MAX_BYTES = 50;
            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.

             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */

            Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;
            /*
             * Export kMaxLength after typed array support is determined.
             */

            var _kMaxLength = kMaxLength();

            function kMaxLength() {
              return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }

            function createBuffer(that, length) {
              if (kMaxLength() < length) {
                throw new RangeError('Invalid typed array length');
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = new Uint8Array(length);
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                if (that === null) {
                  that = new Buffer(length);
                }

                that.length = length;
              }

              return that;
            }
            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */


            function Buffer(arg, encodingOrOffset, length) {
              if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                return new Buffer(arg, encodingOrOffset, length);
              } // Common case.


              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new Error('If encoding is specified then the first argument must be a string');
                }

                return allocUnsafe(this, arg);
              }

              return from(this, arg, encodingOrOffset, length);
            }
            Buffer.poolSize = 8192; // not used by this implementation
            // TODO: Legacy, not needed anymore. Remove in next major version.

            Buffer._augment = function (arr) {
              arr.__proto__ = Buffer.prototype;
              return arr;
            };

            function from(that, value, encodingOrOffset, length) {
              if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number');
              }

              if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length);
              }

              if (typeof value === 'string') {
                return fromString(that, value, encodingOrOffset);
              }

              return fromObject(that, value);
            }
            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/


            Buffer.from = function (value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length);
            };

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;
            }

            function assertSize(size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number');
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative');
              }
            }

            function alloc(that, size, fill, encoding) {
              assertSize(size);

              if (size <= 0) {
                return createBuffer(that, size);
              }

              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
              }

              return createBuffer(that, size);
            }
            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/


            Buffer.alloc = function (size, fill, encoding) {
              return alloc(null, size, fill, encoding);
            };

            function allocUnsafe(that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }

              return that;
            }
            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */


            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(null, size);
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */


            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(null, size);
            };

            function fromString(that, string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding');
              }

              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);
              var actual = that.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                that = that.slice(0, actual);
              }

              return that;
            }

            function fromArrayLike(that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);

              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }

              return that;
            }

            function fromArrayBuffer(that, array, byteOffset, length) {
              array.byteLength; // this throws if `array` is not a valid ArrayBuffer

              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds');
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds');
              }

              if (byteOffset === undefined && length === undefined) {
                array = new Uint8Array(array);
              } else if (length === undefined) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = array;
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                that = fromArrayLike(that, array);
              }

              return that;
            }

            function fromObject(that, obj) {
              if (internalIsBuffer(obj)) {
                var len = checked(obj.length) | 0;
                that = createBuffer(that, len);

                if (that.length === 0) {
                  return that;
                }

                obj.copy(that, 0, 0, len);
                return that;
              }

              if (obj) {
                if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
                  if (typeof obj.length !== 'number' || isnan(obj.length)) {
                    return createBuffer(that, 0);
                  }

                  return fromArrayLike(that, obj);
                }

                if (obj.type === 'Buffer' && isArray(obj.data)) {
                  return fromArrayLike(that, obj.data);
                }
              }

              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
            }

            function checked(length) {
              // Note: cannot use `length < kMaxLength()` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
              }

              return length | 0;
            }

            function SlowBuffer(length) {
              if (+length != length) {
                // eslint-disable-line eqeqeq
                length = 0;
              }

              return Buffer.alloc(+length);
            }
            Buffer.isBuffer = isBuffer;

            function internalIsBuffer(b) {
              return !!(b != null && b._isBuffer);
            }

            Buffer.compare = function compare(a, b) {
              if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
                throw new TypeError('Arguments must be Buffers');
              }

              if (a === b) return 0;
              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true;

                default:
                  return false;
              }
            };

            Buffer.concat = function concat(list, length) {
              if (!isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }

              if (list.length === 0) {
                return Buffer.alloc(0);
              }

              var i;

              if (length === undefined) {
                length = 0;

                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;

              for (i = 0; i < list.length; ++i) {
                var buf = list[i];

                if (!internalIsBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }

                buf.copy(buffer, pos);
                pos += buf.length;
              }

              return buffer;
            };

            function byteLength(string, encoding) {
              if (internalIsBuffer(string)) {
                return string.length;
              }

              if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength;
              }

              if (typeof string !== 'string') {
                string = '' + string;
              }

              var len = string.length;
              if (len === 0) return 0; // Use a for loop to avoid recursion

              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len;

                  case 'utf8':
                  case 'utf-8':
                  case undefined:
                    return utf8ToBytes(string).length;

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2;

                  case 'hex':
                    return len >>> 1;

                  case 'base64':
                    return base64ToBytes(string).length;

                  default:
                    if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }

            Buffer.byteLength = byteLength;

            function slowToString(encoding, start, end) {
              var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.
              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

              if (start === undefined || start < 0) {
                start = 0;
              } // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.


              if (start > this.length) {
                return '';
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return '';
              } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return '';
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end);

                  case 'ascii':
                    return asciiSlice(this, start, end);

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end);

                  case 'base64':
                    return base64Slice(this, start, end);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
            // Buffer instances.


            Buffer.prototype._isBuffer = true;

            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16() {
              var len = this.length;

              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits');
              }

              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }

              return this;
            };

            Buffer.prototype.swap32 = function swap32() {
              var len = this.length;

              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits');
              }

              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }

              return this;
            };

            Buffer.prototype.swap64 = function swap64() {
              var len = this.length;

              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits');
              }

              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }

              return this;
            };

            Buffer.prototype.toString = function toString() {
              var length = this.length | 0;
              if (length === 0) return '';
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };

            Buffer.prototype.equals = function equals(b) {
              if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
              if (this === b) return true;
              return Buffer.compare(this, b) === 0;
            };

            Buffer.prototype.inspect = function inspect() {
              var str = '';
              var max = INSPECT_MAX_BYTES;

              if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                if (this.length > max) str += ' ... ';
              }

              return '<Buffer ' + str + '>';
            };

            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (!internalIsBuffer(target)) {
                throw new TypeError('Argument must be a Buffer');
              }

              if (start === undefined) {
                start = 0;
              }

              if (end === undefined) {
                end = target ? target.length : 0;
              }

              if (thisStart === undefined) {
                thisStart = 0;
              }

              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index');
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }

              if (thisStart >= thisEnd) {
                return -1;
              }

              if (start >= end) {
                return 1;
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target) return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf


            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1; // Normalize byteOffset

              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }

              byteOffset = +byteOffset; // Coerce to Number.

              if (isNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : buffer.length - 1;
              } // Normalize byteOffset: negative offsets start from the end of the buffer


              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

              if (byteOffset >= buffer.length) {
                if (dir) return -1;else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;else return -1;
              } // Normalize val


              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              } // Finally, search either indexOf (if dir is true) or lastIndexOf


              if (internalIsBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1;
                }

                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]

                if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }

                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }

              throw new TypeError('val must be string, number or Buffer');
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();

                if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }

                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }

              var i;

              if (dir) {
                var foundIndex = -1;

                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

                for (i = byteOffset; i >= 0; i--) {
                  var found = true;

                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }

                  if (found) return i;
                }
              }

              return -1;
            }

            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };

            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };

            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;

              if (!length) {
                length = remaining;
              } else {
                length = Number(length);

                if (length > remaining) {
                  length = remaining;
                }
              } // must be an even number of digits


              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

              if (length > strLen / 2) {
                length = strLen / 2;
              }

              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }

              return i;
            }

            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }

            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }

            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }

            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }

            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }

            Buffer.prototype.write = function write(string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0; // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0; // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset | 0;

                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                } // legacy write(string, encoding, offset, length) - remove in v0.13

              } else {
                throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds');
              }

              if (!encoding) encoding = 'utf8';
              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length);

                  case 'ascii':
                    return asciiWrite(this, string, offset, length);

                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length);

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };

            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return fromByteArray(buf);
              } else {
                return fromByteArray(buf.slice(start, end));
              }
            }

            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;

              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }

                      break;

                    case 2:
                      secondByte = buf[i + 1];

                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];

                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];

                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }

                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res);
            } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety


            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;

              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
              } // Decode in chunks to avoid "call stack size exceeded".


              var res = '';
              var i = 0;

              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }

              return res;
            }

            function asciiSlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }

              return ret;
            }

            function latin1Slice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }

              return ret;
            }

            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;
              var out = '';

              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }

              return out;
            }

            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';

              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }

              return res;
            }

            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;
              var newBuf;

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);

                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }

              return newBuf;
            };
            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */


            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
            }

            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val;
            };

            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;

              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val;
            };

            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };

            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];

              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };

            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };

            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };

            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };

            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };

            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, true, 23, 4);
            };

            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, false, 23, 4);
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, true, 52, 8);
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, false, 52, 8);
            };

            function checkInt(buf, value, offset, ext, max, min) {
              if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;

              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;

              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = value & 0xff;
              return offset + 1;
            };

            function objectWriteUInt16(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffff + value + 1;

              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
              }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            function objectWriteUInt32(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffffffff + value + 1;

              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
              }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;

              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;

              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
              if (offset < 0) throw new RangeError('Index out of range');
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
              }

              write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
              }

              write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds');
              }

              if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
              if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

              if (end > this.length) end = this.length;

              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;
              var i;

              if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                // ascending copy from start
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
              }

              return len;
            }; // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])


            Buffer.prototype.fill = function fill(val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }

                if (val.length === 1) {
                  var code = val.charCodeAt(0);

                  if (code < 256) {
                    val = code;
                  }
                }

                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string');
                }

                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              } // Invalid ranges are not set to a default, so can range check early.


              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index');
              }

              if (end <= start) {
                return this;
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;
              if (!val) val = 0;
              var i;

              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
                var len = bytes.length;

                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this;
            }; // HELPER FUNCTIONS
            // ================


            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

            function base64clean(str) {
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

              if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

              while (str.length % 4 !== 0) {
                str = str + '=';
              }

              return str;
            }

            function stringtrim(str) {
              if (str.trim) return str.trim();
              return str.replace(/^\s+|\s+$/g, '');
            }

            function toHex(n) {
              if (n < 16) return '0' + n.toString(16);
              return n.toString(16);
            }

            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i); // is surrogate component

                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } // valid lead


                    leadSurrogate = codePoint;
                    continue;
                  } // 2 leads in a row


                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue;
                  } // valid surrogate pair


                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }

                leadSurrogate = null; // encode utf8

                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else {
                  throw new Error('Invalid code point');
                }
              }

              return bytes;
            }

            function asciiToBytes(str) {
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }

              return byteArray;
            }

            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray;
            }

            function base64ToBytes(str) {
              return toByteArray(base64clean(str));
            }

            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }

              return i;
            }

            function isnan(val) {
              return val !== val; // eslint-disable-line no-self-compare
            } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
            // The _isBuffer check is for Safari 5-7 support, because it's missing
            // Object.prototype.constructor. Remove this eventually


            function isBuffer(obj) {
              return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
            }

            function isFastBuffer(obj) {
              return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
            } // For Node v0.10 support. Remove this eventually.


            function isSlowBuffer(obj) {
              return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
            }

            var bufferEs6 = /*#__PURE__*/Object.freeze({
                        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
                        kMaxLength: _kMaxLength,
                        Buffer: Buffer,
                        SlowBuffer: SlowBuffer,
                        isBuffer: isBuffer
            });

            const wkt = {
              Point: 'POINT',
              LineString: 'LINESTRING',
              Polygon: 'POLYGON',
              MultiPoint: 'MULTIPOINT',
              MultiLineString: 'MULTILINESTRING',
              MultiPolygon: 'MULTIPOLYGON',
              GeometryCollection: 'GEOMETRYCOLLECTION'
            };
            const wkb = {
              Point: 1,
              LineString: 2,
              Polygon: 3,
              MultiPoint: 4,
              MultiLineString: 5,
              MultiPolygon: 6,
              GeometryCollection: 7
            };
            const geoJSON = {
              Point: 'Point',
              LineString: 'LineString',
              Polygon: 'Polygon',
              MultiPoint: 'MultiPoint',
              MultiLineString: 'MultiLineString',
              MultiPolygon: 'MultiPolygon',
              GeometryCollection: 'GeometryCollection'
            };

            function inherits(ctor, superCtor) {
              // implementation from standard node.js 'util' module
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }

            function BinaryWriter(size, allowResize) {
              this.buffer = new Buffer(size);
              this.position = 0;
              this.allowResize = allowResize;
            }

            function _write(write, size) {
              return function (value, noAssert) {
                this.ensureSize(size);
                write.call(this.buffer, value, this.position, noAssert);
                this.position += size;
              };
            }

            BinaryWriter.prototype.writeUInt8 = _write(Buffer.prototype.writeUInt8, 1);
            BinaryWriter.prototype.writeUInt16LE = _write(Buffer.prototype.writeUInt16LE, 2);
            BinaryWriter.prototype.writeUInt16BE = _write(Buffer.prototype.writeUInt16BE, 2);
            BinaryWriter.prototype.writeUInt32LE = _write(Buffer.prototype.writeUInt32LE, 4);
            BinaryWriter.prototype.writeUInt32BE = _write(Buffer.prototype.writeUInt32BE, 4);
            BinaryWriter.prototype.writeInt8 = _write(Buffer.prototype.writeInt8, 1);
            BinaryWriter.prototype.writeInt16LE = _write(Buffer.prototype.writeInt16LE, 2);
            BinaryWriter.prototype.writeInt16BE = _write(Buffer.prototype.writeInt16BE, 2);
            BinaryWriter.prototype.writeInt32LE = _write(Buffer.prototype.writeInt32LE, 4);
            BinaryWriter.prototype.writeInt32BE = _write(Buffer.prototype.writeInt32BE, 4);
            BinaryWriter.prototype.writeFloatLE = _write(Buffer.prototype.writeFloatLE, 4);
            BinaryWriter.prototype.writeFloatBE = _write(Buffer.prototype.writeFloatBE, 4);
            BinaryWriter.prototype.writeDoubleLE = _write(Buffer.prototype.writeDoubleLE, 8);
            BinaryWriter.prototype.writeDoubleBE = _write(Buffer.prototype.writeDoubleBE, 8);

            BinaryWriter.prototype.writeBuffer = function (buffer) {
              this.ensureSize(buffer.length);
              buffer.copy(this.buffer, this.position, 0, buffer.length);
              this.position += buffer.length;
            };

            BinaryWriter.prototype.writeVarInt = function (value) {
              var length = 1;

              while ((value & 0xFFFFFF80) !== 0) {
                this.writeUInt8(value & 0x7F | 0x80);
                value >>>= 7;
                length++;
              }

              this.writeUInt8(value & 0x7F);
              return length;
            };

            BinaryWriter.prototype.ensureSize = function (size) {
              if (this.buffer.length < this.position + size) {
                if (this.allowResize) {
                  var tempBuffer = new Buffer(this.position + size);
                  this.buffer.copy(tempBuffer, 0, 0, this.buffer.length);
                  this.buffer = tempBuffer;
                } else {
                  throw new RangeError('index out of range');
                }
              }
            };

            function encode(value) {
              return value << 1 ^ value >> 31;
            }

            function decode(value) {
              return value >> 1 ^ -(value & 1);
            }

            function Point(x, y, z, m, srid) {
              Geometry.call(this);
              this.x = x;
              this.y = y;
              this.z = z;
              this.m = m;
              this.srid = srid;
              this.hasZ = typeof this.z !== 'undefined';
              this.hasM = typeof this.m !== 'undefined';
            }

            inherits(Point, Geometry);

            Point.Z = function (x, y, z, srid) {
              var point = new Point(x, y, z, undefined, srid);
              point.hasZ = true;
              return point;
            };

            Point.M = function (x, y, m, srid) {
              var point = new Point(x, y, undefined, m, srid);
              point.hasM = true;
              return point;
            };

            Point.ZM = function (x, y, z, m, srid) {
              var point = new Point(x, y, z, m, srid);
              point.hasZ = true;
              point.hasM = true;
              return point;
            };

            Point._parseWkt = function (value, options) {
              var point = new Point();
              point.srid = options.srid;
              point.hasZ = options.hasZ;
              point.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return point;
              value.expectGroupStart();
              var coordinate = value.matchCoordinate(options);
              point.x = coordinate.x;
              point.y = coordinate.y;
              point.z = coordinate.z;
              point.m = coordinate.m;
              value.expectGroupEnd();
              return point;
            };

            Point._parseWkb = function (value, options) {
              var point = Point._readWkbPoint(value, options);

              point.srid = options.srid;
              return point;
            };

            Point._readWkbPoint = function (value, options) {
              return new Point(value.readDouble(), value.readDouble(), options.hasZ ? value.readDouble() : undefined, options.hasM ? value.readDouble() : undefined);
            };

            Point._parseTwkb = function (value, options) {
              var point = new Point();
              point.hasZ = options.hasZ;
              point.hasM = options.hasM;
              if (options.isEmpty) return point;
              point.x = decode(value.readVarInt()) / options.precisionFactor;
              point.y = decode(value.readVarInt()) / options.precisionFactor;
              point.z = options.hasZ ? decode(value.readVarInt()) / options.zPrecisionFactor : undefined;
              point.m = options.hasM ? decode(value.readVarInt()) / options.mPrecisionFactor : undefined;
              return point;
            };

            Point._readTwkbPoint = function (value, options, previousPoint) {
              previousPoint.x += decode(value.readVarInt()) / options.precisionFactor;
              previousPoint.y += decode(value.readVarInt()) / options.precisionFactor;
              if (options.hasZ) previousPoint.z += decode(value.readVarInt()) / options.zPrecisionFactor;
              if (options.hasM) previousPoint.m += decode(value.readVarInt()) / options.mPrecisionFactor;
              return new Point(previousPoint.x, previousPoint.y, previousPoint.z, previousPoint.m);
            };

            Point._parseGeoJSON = function (value) {
              return Point._readGeoJSONPoint(value.coordinates);
            };

            Point._readGeoJSONPoint = function (coordinates) {
              if (coordinates.length === 0) return new Point();
              if (coordinates.length > 2) return new Point(coordinates[0], coordinates[1], coordinates[2]);
              return new Point(coordinates[0], coordinates[1]);
            };

            Point.prototype.toWkt = function () {
              if (typeof this.x === 'undefined' && typeof this.y === 'undefined' && typeof this.z === 'undefined' && typeof this.m === 'undefined') return this._getWktType(wkt.Point, true);
              return this._getWktType(wkt.Point, false) + '(' + this._getWktCoordinate(this) + ')';
            };

            Point.prototype.toWkb = function (parentOptions) {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.Point, parentOptions);

              if (typeof this.x === 'undefined' && typeof this.y === 'undefined') {
                wkb$$1.writeDoubleLE(NaN);
                wkb$$1.writeDoubleLE(NaN);
                if (this.hasZ) wkb$$1.writeDoubleLE(NaN);
                if (this.hasM) wkb$$1.writeDoubleLE(NaN);
              } else {
                this._writeWkbPoint(wkb$$1);
              }

              return wkb$$1.buffer;
            };

            Point.prototype._writeWkbPoint = function (wkb$$1) {
              wkb$$1.writeDoubleLE(this.x);
              wkb$$1.writeDoubleLE(this.y);
              if (this.hasZ) wkb$$1.writeDoubleLE(this.z);
              if (this.hasM) wkb$$1.writeDoubleLE(this.m);
            };

            Point.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = typeof this.x === 'undefined' && typeof this.y === 'undefined';

              this._writeTwkbHeader(twkb, wkb.Point, precision, isEmpty);

              if (!isEmpty) this._writeTwkbPoint(twkb, precision, new Point(0, 0, 0, 0));
              return twkb.buffer;
            };

            Point.prototype._writeTwkbPoint = function (twkb, precision, previousPoint) {
              var x = this.x * precision.xyFactor;
              var y = this.y * precision.xyFactor;
              var z = this.z * precision.zFactor;
              var m = this.m * precision.mFactor;
              twkb.writeVarInt(encode(x - previousPoint.x));
              twkb.writeVarInt(encode(y - previousPoint.y));
              if (this.hasZ) twkb.writeVarInt(encode(z - previousPoint.z));
              if (this.hasM) twkb.writeVarInt(encode(m - previousPoint.m));
              previousPoint.x = x;
              previousPoint.y = y;
              previousPoint.z = z;
              previousPoint.m = m;
            };

            Point.prototype._getWkbSize = function () {
              var size = 1 + 4 + 8 + 8;
              if (this.hasZ) size += 8;
              if (this.hasM) size += 8;
              return size;
            };

            Point.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.Point;
              if (typeof this.x === 'undefined' && typeof this.y === 'undefined') geoJSON$$1.coordinates = [];else if (typeof this.z !== 'undefined') geoJSON$$1.coordinates = [this.x, this.y, this.z];else geoJSON$$1.coordinates = [this.x, this.y];
              return geoJSON$$1;
            };

            function LineString(points, srid) {
              Geometry.call(this);
              this.points = points || [];
              this.srid = srid;

              if (this.points.length > 0) {
                this.hasZ = this.points[0].hasZ;
                this.hasM = this.points[0].hasM;
              }
            }

            inherits(LineString, Geometry);

            LineString.Z = function (points, srid) {
              var lineString = new LineString(points, srid);
              lineString.hasZ = true;
              return lineString;
            };

            LineString.M = function (points, srid) {
              var lineString = new LineString(points, srid);
              lineString.hasM = true;
              return lineString;
            };

            LineString.ZM = function (points, srid) {
              var lineString = new LineString(points, srid);
              lineString.hasZ = true;
              lineString.hasM = true;
              return lineString;
            };

            LineString._parseWkt = function (value, options) {
              var lineString = new LineString();
              lineString.srid = options.srid;
              lineString.hasZ = options.hasZ;
              lineString.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return lineString;
              value.expectGroupStart();
              lineString.points.push.apply(lineString.points, value.matchCoordinates(options));
              value.expectGroupEnd();
              return lineString;
            };

            LineString._parseWkb = function (value, options) {
              var lineString = new LineString();
              lineString.srid = options.srid;
              lineString.hasZ = options.hasZ;
              lineString.hasM = options.hasM;
              var pointCount = value.readUInt32();

              for (var i = 0; i < pointCount; i++) lineString.points.push(Point._readWkbPoint(value, options));

              return lineString;
            };

            LineString._parseTwkb = function (value, options) {
              var lineString = new LineString();
              lineString.hasZ = options.hasZ;
              lineString.hasM = options.hasM;
              if (options.isEmpty) return lineString;
              var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
              var pointCount = value.readVarInt();

              for (var i = 0; i < pointCount; i++) lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

              return lineString;
            };

            LineString._parseGeoJSON = function (value) {
              var lineString = new LineString();
              if (value.coordinates.length > 0) lineString.hasZ = value.coordinates[0].length > 2;

              for (var i = 0; i < value.coordinates.length; i++) lineString.points.push(Point._readGeoJSONPoint(value.coordinates[i]));

              return lineString;
            };

            LineString.prototype.toWkt = function () {
              if (this.points.length === 0) return this._getWktType(wkt.LineString, true);
              return this._getWktType(wkt.LineString, false) + this._toInnerWkt();
            };

            LineString.prototype._toInnerWkt = function () {
              var innerWkt = '(';

              for (var i = 0; i < this.points.length; i++) innerWkt += this._getWktCoordinate(this.points[i]) + ',';

              innerWkt = innerWkt.slice(0, -1);
              innerWkt += ')';
              return innerWkt;
            };

            LineString.prototype.toWkb = function (parentOptions) {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.LineString, parentOptions);

              wkb$$1.writeUInt32LE(this.points.length);

              for (var i = 0; i < this.points.length; i++) this.points[i]._writeWkbPoint(wkb$$1);

              return wkb$$1.buffer;
            };

            LineString.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.points.length === 0;

              this._writeTwkbHeader(twkb, wkb.LineString, precision, isEmpty);

              if (this.points.length > 0) {
                twkb.writeVarInt(this.points.length);
                var previousPoint = new Point(0, 0, 0, 0);

                for (var i = 0; i < this.points.length; i++) this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
              }

              return twkb.buffer;
            };

            LineString.prototype._getWkbSize = function () {
              var coordinateSize = 16;
              if (this.hasZ) coordinateSize += 8;
              if (this.hasM) coordinateSize += 8;
              return 1 + 4 + 4 + this.points.length * coordinateSize;
            };

            LineString.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.LineString;
              geoJSON$$1.coordinates = [];

              for (var i = 0; i < this.points.length; i++) {
                if (this.hasZ) geoJSON$$1.coordinates.push([this.points[i].x, this.points[i].y, this.points[i].z]);else geoJSON$$1.coordinates.push([this.points[i].x, this.points[i].y]);
              }

              return geoJSON$$1;
            };

            function Polygon(exteriorRing, interiorRings, srid) {
              Geometry.call(this);
              this.exteriorRing = exteriorRing || [];
              this.interiorRings = interiorRings || [];
              this.srid = srid;

              if (this.exteriorRing.length > 0) {
                this.hasZ = this.exteriorRing[0].hasZ;
                this.hasM = this.exteriorRing[0].hasM;
              }
            }

            inherits(Polygon, Geometry);

            Polygon.Z = function (exteriorRing, interiorRings, srid) {
              var polygon = new Polygon(exteriorRing, interiorRings, srid);
              polygon.hasZ = true;
              return polygon;
            };

            Polygon.M = function (exteriorRing, interiorRings, srid) {
              var polygon = new Polygon(exteriorRing, interiorRings, srid);
              polygon.hasM = true;
              return polygon;
            };

            Polygon.ZM = function (exteriorRing, interiorRings, srid) {
              var polygon = new Polygon(exteriorRing, interiorRings, srid);
              polygon.hasZ = true;
              polygon.hasM = true;
              return polygon;
            };

            Polygon._parseWkt = function (value, options) {
              var polygon = new Polygon();
              polygon.srid = options.srid;
              polygon.hasZ = options.hasZ;
              polygon.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return polygon;
              value.expectGroupStart();
              value.expectGroupStart();
              polygon.exteriorRing.push.apply(polygon.exteriorRing, value.matchCoordinates(options));
              value.expectGroupEnd();

              while (value.isMatch([','])) {
                value.expectGroupStart();
                polygon.interiorRings.push(value.matchCoordinates(options));
                value.expectGroupEnd();
              }

              value.expectGroupEnd();
              return polygon;
            };

            Polygon._parseWkb = function (value, options) {
              var polygon = new Polygon();
              polygon.srid = options.srid;
              polygon.hasZ = options.hasZ;
              polygon.hasM = options.hasM;
              var ringCount = value.readUInt32();

              if (ringCount > 0) {
                var exteriorRingCount = value.readUInt32();

                for (var i = 0; i < exteriorRingCount; i++) polygon.exteriorRing.push(Point._readWkbPoint(value, options));

                for (i = 1; i < ringCount; i++) {
                  var interiorRing = [];
                  var interiorRingCount = value.readUInt32();

                  for (var j = 0; j < interiorRingCount; j++) interiorRing.push(Point._readWkbPoint(value, options));

                  polygon.interiorRings.push(interiorRing);
                }
              }

              return polygon;
            };

            Polygon._parseTwkb = function (value, options) {
              var polygon = new Polygon();
              polygon.hasZ = options.hasZ;
              polygon.hasM = options.hasM;
              if (options.isEmpty) return polygon;
              var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
              var ringCount = value.readVarInt();
              var exteriorRingCount = value.readVarInt();

              for (var i = 0; i < exteriorRingCount; i++) polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

              for (i = 1; i < ringCount; i++) {
                var interiorRing = [];
                var interiorRingCount = value.readVarInt();

                for (var j = 0; j < interiorRingCount; j++) interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

                polygon.interiorRings.push(interiorRing);
              }

              return polygon;
            };

            Polygon._parseGeoJSON = function (value) {
              var polygon = new Polygon();
              if (value.coordinates.length > 0 && value.coordinates[0].length > 0) polygon.hasZ = value.coordinates[0][0].length > 2;

              for (var i = 0; i < value.coordinates.length; i++) {
                if (i > 0) polygon.interiorRings.push([]);

                for (var j = 0; j < value.coordinates[i].length; j++) {
                  if (i === 0) polygon.exteriorRing.push(Point._readGeoJSONPoint(value.coordinates[i][j]));else polygon.interiorRings[i - 1].push(Point._readGeoJSONPoint(value.coordinates[i][j]));
                }
              }

              return polygon;
            };

            Polygon.prototype.toWkt = function () {
              if (this.exteriorRing.length === 0) return this._getWktType(wkt.Polygon, true);
              return this._getWktType(wkt.Polygon, false) + this._toInnerWkt();
            };

            Polygon.prototype._toInnerWkt = function () {
              var innerWkt = '((';

              for (var i = 0; i < this.exteriorRing.length; i++) innerWkt += this._getWktCoordinate(this.exteriorRing[i]) + ',';

              innerWkt = innerWkt.slice(0, -1);
              innerWkt += ')';

              for (i = 0; i < this.interiorRings.length; i++) {
                innerWkt += ',(';

                for (var j = 0; j < this.interiorRings[i].length; j++) {
                  innerWkt += this._getWktCoordinate(this.interiorRings[i][j]) + ',';
                }

                innerWkt = innerWkt.slice(0, -1);
                innerWkt += ')';
              }

              innerWkt += ')';
              return innerWkt;
            };

            Polygon.prototype.toWkb = function (parentOptions) {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.Polygon, parentOptions);

              if (this.exteriorRing.length > 0) {
                wkb$$1.writeUInt32LE(1 + this.interiorRings.length);
                wkb$$1.writeUInt32LE(this.exteriorRing.length);
              } else {
                wkb$$1.writeUInt32LE(0);
              }

              for (var i = 0; i < this.exteriorRing.length; i++) this.exteriorRing[i]._writeWkbPoint(wkb$$1);

              for (i = 0; i < this.interiorRings.length; i++) {
                wkb$$1.writeUInt32LE(this.interiorRings[i].length);

                for (var j = 0; j < this.interiorRings[i].length; j++) this.interiorRings[i][j]._writeWkbPoint(wkb$$1);
              }

              return wkb$$1.buffer;
            };

            Polygon.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.exteriorRing.length === 0;

              this._writeTwkbHeader(twkb, wkb.Polygon, precision, isEmpty);

              if (this.exteriorRing.length > 0) {
                twkb.writeVarInt(1 + this.interiorRings.length);
                twkb.writeVarInt(this.exteriorRing.length);
                var previousPoint = new Point(0, 0, 0, 0);

                for (var i = 0; i < this.exteriorRing.length; i++) this.exteriorRing[i]._writeTwkbPoint(twkb, precision, previousPoint);

                for (i = 0; i < this.interiorRings.length; i++) {
                  twkb.writeVarInt(this.interiorRings[i].length);

                  for (var j = 0; j < this.interiorRings[i].length; j++) this.interiorRings[i][j]._writeTwkbPoint(twkb, precision, previousPoint);
                }
              }

              return twkb.buffer;
            };

            Polygon.prototype._getWkbSize = function () {
              var coordinateSize = 16;
              if (this.hasZ) coordinateSize += 8;
              if (this.hasM) coordinateSize += 8;
              var size = 1 + 4 + 4;
              if (this.exteriorRing.length > 0) size += 4 + this.exteriorRing.length * coordinateSize;

              for (var i = 0; i < this.interiorRings.length; i++) size += 4 + this.interiorRings[i].length * coordinateSize;

              return size;
            };

            Polygon.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.Polygon;
              geoJSON$$1.coordinates = [];

              if (this.exteriorRing.length > 0) {
                var exteriorRing = [];

                for (var i = 0; i < this.exteriorRing.length; i++) {
                  if (this.hasZ) exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y, this.exteriorRing[i].z]);else exteriorRing.push([this.exteriorRing[i].x, this.exteriorRing[i].y]);
                }

                geoJSON$$1.coordinates.push(exteriorRing);
              }

              for (var j = 0; j < this.interiorRings.length; j++) {
                var interiorRing = [];

                for (var k = 0; k < this.interiorRings[j].length; k++) {
                  if (this.hasZ) interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y, this.interiorRings[j][k].z]);else interiorRing.push([this.interiorRings[j][k].x, this.interiorRings[j][k].y]);
                }

                geoJSON$$1.coordinates.push(interiorRing);
              }

              return geoJSON$$1;
            };

            function MultiPoint(points, srid) {
              Geometry.call(this);
              this.points = points || [];
              this.srid = srid;

              if (this.points.length > 0) {
                this.hasZ = this.points[0].hasZ;
                this.hasM = this.points[0].hasM;
              }
            }

            inherits(MultiPoint, Geometry);

            MultiPoint.Z = function (points, srid) {
              var multiPoint = new MultiPoint(points, srid);
              multiPoint.hasZ = true;
              return multiPoint;
            };

            MultiPoint.M = function (points, srid) {
              var multiPoint = new MultiPoint(points, srid);
              multiPoint.hasM = true;
              return multiPoint;
            };

            MultiPoint.ZM = function (points, srid) {
              var multiPoint = new MultiPoint(points, srid);
              multiPoint.hasZ = true;
              multiPoint.hasM = true;
              return multiPoint;
            };

            MultiPoint._parseWkt = function (value, options) {
              var multiPoint = new MultiPoint();
              multiPoint.srid = options.srid;
              multiPoint.hasZ = options.hasZ;
              multiPoint.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return multiPoint;
              value.expectGroupStart();
              multiPoint.points.push.apply(multiPoint.points, value.matchCoordinates(options));
              value.expectGroupEnd();
              return multiPoint;
            };

            MultiPoint._parseWkb = function (value, options) {
              var multiPoint = new MultiPoint();
              multiPoint.srid = options.srid;
              multiPoint.hasZ = options.hasZ;
              multiPoint.hasM = options.hasM;
              var pointCount = value.readUInt32();

              for (var i = 0; i < pointCount; i++) multiPoint.points.push(Geometry.parse(value, options));

              return multiPoint;
            };

            MultiPoint._parseTwkb = function (value, options) {
              var multiPoint = new MultiPoint();
              multiPoint.hasZ = options.hasZ;
              multiPoint.hasM = options.hasM;
              if (options.isEmpty) return multiPoint;
              var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
              var pointCount = value.readVarInt();

              for (var i = 0; i < pointCount; i++) multiPoint.points.push(Point._readTwkbPoint(value, options, previousPoint));

              return multiPoint;
            };

            MultiPoint._parseGeoJSON = function (value) {
              var multiPoint = new MultiPoint();
              if (value.coordinates.length > 0) multiPoint.hasZ = value.coordinates[0].length > 2;

              for (var i = 0; i < value.coordinates.length; i++) multiPoint.points.push(Point._parseGeoJSON({
                coordinates: value.coordinates[i]
              }));

              return multiPoint;
            };

            MultiPoint.prototype.toWkt = function () {
              if (this.points.length === 0) return this._getWktType(wkt.MultiPoint, true);
              var wkt$$1 = this._getWktType(wkt.MultiPoint, false) + '(';

              for (var i = 0; i < this.points.length; i++) wkt$$1 += this._getWktCoordinate(this.points[i]) + ',';

              wkt$$1 = wkt$$1.slice(0, -1);
              wkt$$1 += ')';
              return wkt$$1;
            };

            MultiPoint.prototype.toWkb = function () {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.MultiPoint);

              wkb$$1.writeUInt32LE(this.points.length);

              for (var i = 0; i < this.points.length; i++) wkb$$1.writeBuffer(this.points[i].toWkb({
                srid: this.srid
              }));

              return wkb$$1.buffer;
            };

            MultiPoint.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.points.length === 0;

              this._writeTwkbHeader(twkb, wkb.MultiPoint, precision, isEmpty);

              if (this.points.length > 0) {
                twkb.writeVarInt(this.points.length);
                var previousPoint = new Point(0, 0, 0, 0);

                for (var i = 0; i < this.points.length; i++) this.points[i]._writeTwkbPoint(twkb, precision, previousPoint);
              }

              return twkb.buffer;
            };

            MultiPoint.prototype._getWkbSize = function () {
              var coordinateSize = 16;
              if (this.hasZ) coordinateSize += 8;
              if (this.hasM) coordinateSize += 8;
              coordinateSize += 5;
              return 1 + 4 + 4 + this.points.length * coordinateSize;
            };

            MultiPoint.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.MultiPoint;
              geoJSON$$1.coordinates = [];

              for (var i = 0; i < this.points.length; i++) geoJSON$$1.coordinates.push(this.points[i].toGeoJSON().coordinates);

              return geoJSON$$1;
            };

            function MultiLineString(lineStrings, srid) {
              Geometry.call(this);
              this.lineStrings = lineStrings || [];
              this.srid = srid;

              if (this.lineStrings.length > 0) {
                this.hasZ = this.lineStrings[0].hasZ;
                this.hasM = this.lineStrings[0].hasM;
              }
            }

            inherits(MultiLineString, Geometry);

            MultiLineString.Z = function (lineStrings, srid) {
              var multiLineString = new MultiLineString(lineStrings, srid);
              multiLineString.hasZ = true;
              return multiLineString;
            };

            MultiLineString.M = function (lineStrings, srid) {
              var multiLineString = new MultiLineString(lineStrings, srid);
              multiLineString.hasM = true;
              return multiLineString;
            };

            MultiLineString.ZM = function (lineStrings, srid) {
              var multiLineString = new MultiLineString(lineStrings, srid);
              multiLineString.hasZ = true;
              multiLineString.hasM = true;
              return multiLineString;
            };

            MultiLineString._parseWkt = function (value, options) {
              var multiLineString = new MultiLineString();
              multiLineString.srid = options.srid;
              multiLineString.hasZ = options.hasZ;
              multiLineString.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return multiLineString;
              value.expectGroupStart();

              do {
                value.expectGroupStart();
                multiLineString.lineStrings.push(new LineString(value.matchCoordinates(options)));
                value.expectGroupEnd();
              } while (value.isMatch([',']));

              value.expectGroupEnd();
              return multiLineString;
            };

            MultiLineString._parseWkb = function (value, options) {
              var multiLineString = new MultiLineString();
              multiLineString.srid = options.srid;
              multiLineString.hasZ = options.hasZ;
              multiLineString.hasM = options.hasM;
              var lineStringCount = value.readUInt32();

              for (var i = 0; i < lineStringCount; i++) multiLineString.lineStrings.push(Geometry.parse(value, options));

              return multiLineString;
            };

            MultiLineString._parseTwkb = function (value, options) {
              var multiLineString = new MultiLineString();
              multiLineString.hasZ = options.hasZ;
              multiLineString.hasM = options.hasM;
              if (options.isEmpty) return multiLineString;
              var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
              var lineStringCount = value.readVarInt();

              for (var i = 0; i < lineStringCount; i++) {
                var lineString = new LineString();
                lineString.hasZ = options.hasZ;
                lineString.hasM = options.hasM;
                var pointCount = value.readVarInt();

                for (var j = 0; j < pointCount; j++) lineString.points.push(Point._readTwkbPoint(value, options, previousPoint));

                multiLineString.lineStrings.push(lineString);
              }

              return multiLineString;
            };

            MultiLineString._parseGeoJSON = function (value) {
              var multiLineString = new MultiLineString();
              if (value.coordinates.length > 0 && value.coordinates[0].length > 0) multiLineString.hasZ = value.coordinates[0][0].length > 2;

              for (var i = 0; i < value.coordinates.length; i++) multiLineString.lineStrings.push(LineString._parseGeoJSON({
                coordinates: value.coordinates[i]
              }));

              return multiLineString;
            };

            MultiLineString.prototype.toWkt = function () {
              if (this.lineStrings.length === 0) return this._getWktType(wkt.MultiLineString, true);
              var wkt$$1 = this._getWktType(wkt.MultiLineString, false) + '(';

              for (var i = 0; i < this.lineStrings.length; i++) wkt$$1 += this.lineStrings[i]._toInnerWkt() + ',';

              wkt$$1 = wkt$$1.slice(0, -1);
              wkt$$1 += ')';
              return wkt$$1;
            };

            MultiLineString.prototype.toWkb = function () {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.MultiLineString);

              wkb$$1.writeUInt32LE(this.lineStrings.length);

              for (var i = 0; i < this.lineStrings.length; i++) wkb$$1.writeBuffer(this.lineStrings[i].toWkb({
                srid: this.srid
              }));

              return wkb$$1.buffer;
            };

            MultiLineString.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.lineStrings.length === 0;

              this._writeTwkbHeader(twkb, wkb.MultiLineString, precision, isEmpty);

              if (this.lineStrings.length > 0) {
                twkb.writeVarInt(this.lineStrings.length);
                var previousPoint = new Point(0, 0, 0, 0);

                for (var i = 0; i < this.lineStrings.length; i++) {
                  twkb.writeVarInt(this.lineStrings[i].points.length);

                  for (var j = 0; j < this.lineStrings[i].points.length; j++) this.lineStrings[i].points[j]._writeTwkbPoint(twkb, precision, previousPoint);
                }
              }

              return twkb.buffer;
            };

            MultiLineString.prototype._getWkbSize = function () {
              var size = 1 + 4 + 4;

              for (var i = 0; i < this.lineStrings.length; i++) size += this.lineStrings[i]._getWkbSize();

              return size;
            };

            MultiLineString.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.MultiLineString;
              geoJSON$$1.coordinates = [];

              for (var i = 0; i < this.lineStrings.length; i++) geoJSON$$1.coordinates.push(this.lineStrings[i].toGeoJSON().coordinates);

              return geoJSON$$1;
            };

            function MultiPolygon(polygons, srid) {
              Geometry.call(this);
              this.polygons = polygons || [];
              this.srid = srid;

              if (this.polygons.length > 0) {
                this.hasZ = this.polygons[0].hasZ;
                this.hasM = this.polygons[0].hasM;
              }
            }

            inherits(MultiPolygon, Geometry);

            MultiPolygon.Z = function (polygons, srid) {
              var multiPolygon = new MultiPolygon(polygons, srid);
              multiPolygon.hasZ = true;
              return multiPolygon;
            };

            MultiPolygon.M = function (polygons, srid) {
              var multiPolygon = new MultiPolygon(polygons, srid);
              multiPolygon.hasM = true;
              return multiPolygon;
            };

            MultiPolygon.ZM = function (polygons, srid) {
              var multiPolygon = new MultiPolygon(polygons, srid);
              multiPolygon.hasZ = true;
              multiPolygon.hasM = true;
              return multiPolygon;
            };

            MultiPolygon._parseWkt = function (value, options) {
              var multiPolygon = new MultiPolygon();
              multiPolygon.srid = options.srid;
              multiPolygon.hasZ = options.hasZ;
              multiPolygon.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return multiPolygon;
              value.expectGroupStart();

              do {
                value.expectGroupStart();
                var exteriorRing = [];
                var interiorRings = [];
                value.expectGroupStart();
                exteriorRing.push.apply(exteriorRing, value.matchCoordinates(options));
                value.expectGroupEnd();

                while (value.isMatch([','])) {
                  value.expectGroupStart();
                  interiorRings.push(value.matchCoordinates(options));
                  value.expectGroupEnd();
                }

                multiPolygon.polygons.push(new Polygon(exteriorRing, interiorRings));
                value.expectGroupEnd();
              } while (value.isMatch([',']));

              value.expectGroupEnd();
              return multiPolygon;
            };

            MultiPolygon._parseWkb = function (value, options) {
              var multiPolygon = new MultiPolygon();
              multiPolygon.srid = options.srid;
              multiPolygon.hasZ = options.hasZ;
              multiPolygon.hasM = options.hasM;
              var polygonCount = value.readUInt32();

              for (var i = 0; i < polygonCount; i++) multiPolygon.polygons.push(Geometry.parse(value, options));

              return multiPolygon;
            };

            MultiPolygon._parseTwkb = function (value, options) {
              var multiPolygon = new MultiPolygon();
              multiPolygon.hasZ = options.hasZ;
              multiPolygon.hasM = options.hasM;
              if (options.isEmpty) return multiPolygon;
              var previousPoint = new Point(0, 0, options.hasZ ? 0 : undefined, options.hasM ? 0 : undefined);
              var polygonCount = value.readVarInt();

              for (var i = 0; i < polygonCount; i++) {
                var polygon = new Polygon();
                polygon.hasZ = options.hasZ;
                polygon.hasM = options.hasM;
                var ringCount = value.readVarInt();
                var exteriorRingCount = value.readVarInt();

                for (var j = 0; j < exteriorRingCount; j++) polygon.exteriorRing.push(Point._readTwkbPoint(value, options, previousPoint));

                for (j = 1; j < ringCount; j++) {
                  var interiorRing = [];
                  var interiorRingCount = value.readVarInt();

                  for (var k = 0; k < interiorRingCount; k++) interiorRing.push(Point._readTwkbPoint(value, options, previousPoint));

                  polygon.interiorRings.push(interiorRing);
                }

                multiPolygon.polygons.push(polygon);
              }

              return multiPolygon;
            };

            MultiPolygon._parseGeoJSON = function (value) {
              var multiPolygon = new MultiPolygon();
              if (value.coordinates.length > 0 && value.coordinates[0].length > 0 && value.coordinates[0][0].length > 0) multiPolygon.hasZ = value.coordinates[0][0][0].length > 2;

              for (var i = 0; i < value.coordinates.length; i++) multiPolygon.polygons.push(Polygon._parseGeoJSON({
                coordinates: value.coordinates[i]
              }));

              return multiPolygon;
            };

            MultiPolygon.prototype.toWkt = function () {
              if (this.polygons.length === 0) return this._getWktType(wkt.MultiPolygon, true);
              var wkt$$1 = this._getWktType(wkt.MultiPolygon, false) + '(';

              for (var i = 0; i < this.polygons.length; i++) wkt$$1 += this.polygons[i]._toInnerWkt() + ',';

              wkt$$1 = wkt$$1.slice(0, -1);
              wkt$$1 += ')';
              return wkt$$1;
            };

            MultiPolygon.prototype.toWkb = function () {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.MultiPolygon);

              wkb$$1.writeUInt32LE(this.polygons.length);

              for (var i = 0; i < this.polygons.length; i++) wkb$$1.writeBuffer(this.polygons[i].toWkb({
                srid: this.srid
              }));

              return wkb$$1.buffer;
            };

            MultiPolygon.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.polygons.length === 0;

              this._writeTwkbHeader(twkb, wkb.MultiPolygon, precision, isEmpty);

              if (this.polygons.length > 0) {
                twkb.writeVarInt(this.polygons.length);
                var previousPoint = new Point(0, 0, 0, 0);

                for (var i = 0; i < this.polygons.length; i++) {
                  twkb.writeVarInt(1 + this.polygons[i].interiorRings.length);
                  twkb.writeVarInt(this.polygons[i].exteriorRing.length);

                  for (var j = 0; j < this.polygons[i].exteriorRing.length; j++) this.polygons[i].exteriorRing[j]._writeTwkbPoint(twkb, precision, previousPoint);

                  for (j = 0; j < this.polygons[i].interiorRings.length; j++) {
                    twkb.writeVarInt(this.polygons[i].interiorRings[j].length);

                    for (var k = 0; k < this.polygons[i].interiorRings[j].length; k++) this.polygons[i].interiorRings[j][k]._writeTwkbPoint(twkb, precision, previousPoint);
                  }
                }
              }

              return twkb.buffer;
            };

            MultiPolygon.prototype._getWkbSize = function () {
              var size = 1 + 4 + 4;

              for (var i = 0; i < this.polygons.length; i++) size += this.polygons[i]._getWkbSize();

              return size;
            };

            MultiPolygon.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.MultiPolygon;
              geoJSON$$1.coordinates = [];

              for (var i = 0; i < this.polygons.length; i++) geoJSON$$1.coordinates.push(this.polygons[i].toGeoJSON().coordinates);

              return geoJSON$$1;
            };

            function GeometryCollection(geometries, srid) {
              Geometry.call(this);
              this.geometries = geometries || [];
              this.srid = srid;

              if (this.geometries.length > 0) {
                this.hasZ = this.geometries[0].hasZ;
                this.hasM = this.geometries[0].hasM;
              }
            }

            inherits(GeometryCollection, Geometry);

            GeometryCollection.Z = function (geometries, srid) {
              var geometryCollection = new GeometryCollection(geometries, srid);
              geometryCollection.hasZ = true;
              return geometryCollection;
            };

            GeometryCollection.M = function (geometries, srid) {
              var geometryCollection = new GeometryCollection(geometries, srid);
              geometryCollection.hasM = true;
              return geometryCollection;
            };

            GeometryCollection.ZM = function (geometries, srid) {
              var geometryCollection = new GeometryCollection(geometries, srid);
              geometryCollection.hasZ = true;
              geometryCollection.hasM = true;
              return geometryCollection;
            };

            GeometryCollection._parseWkt = function (value, options) {
              var geometryCollection = new GeometryCollection();
              geometryCollection.srid = options.srid;
              geometryCollection.hasZ = options.hasZ;
              geometryCollection.hasM = options.hasM;
              if (value.isMatch(['EMPTY'])) return geometryCollection;
              value.expectGroupStart();

              do {
                geometryCollection.geometries.push(Geometry.parse(value));
              } while (value.isMatch([',']));

              value.expectGroupEnd();
              return geometryCollection;
            };

            GeometryCollection._parseWkb = function (value, options) {
              var geometryCollection = new GeometryCollection();
              geometryCollection.srid = options.srid;
              geometryCollection.hasZ = options.hasZ;
              geometryCollection.hasM = options.hasM;
              var geometryCount = value.readUInt32();

              for (var i = 0; i < geometryCount; i++) geometryCollection.geometries.push(Geometry.parse(value, options));

              return geometryCollection;
            };

            GeometryCollection._parseTwkb = function (value, options) {
              var geometryCollection = new GeometryCollection();
              geometryCollection.hasZ = options.hasZ;
              geometryCollection.hasM = options.hasM;
              if (options.isEmpty) return geometryCollection;
              var geometryCount = value.readVarInt();

              for (var i = 0; i < geometryCount; i++) geometryCollection.geometries.push(Geometry.parseTwkb(value));

              return geometryCollection;
            };

            GeometryCollection._parseGeoJSON = function (value) {
              var geometryCollection = new GeometryCollection();

              for (var i = 0; i < value.geometries.length; i++) geometryCollection.geometries.push(Geometry._parseGeoJSON(value.geometries[i], true));

              if (geometryCollection.geometries.length > 0) geometryCollection.hasZ = geometryCollection.geometries[0].hasZ;
              return geometryCollection;
            };

            GeometryCollection.prototype.toWkt = function () {
              if (this.geometries.length === 0) return this._getWktType(wkt.GeometryCollection, true);
              var wkt$$1 = this._getWktType(wkt.GeometryCollection, false) + '(';

              for (var i = 0; i < this.geometries.length; i++) wkt$$1 += this.geometries[i].toWkt() + ',';

              wkt$$1 = wkt$$1.slice(0, -1);
              wkt$$1 += ')';
              return wkt$$1;
            };

            GeometryCollection.prototype.toWkb = function () {
              var wkb$$1 = new BinaryWriter(this._getWkbSize());
              wkb$$1.writeInt8(1);

              this._writeWkbType(wkb$$1, wkb.GeometryCollection);

              wkb$$1.writeUInt32LE(this.geometries.length);

              for (var i = 0; i < this.geometries.length; i++) wkb$$1.writeBuffer(this.geometries[i].toWkb({
                srid: this.srid
              }));

              return wkb$$1.buffer;
            };

            GeometryCollection.prototype.toTwkb = function () {
              var twkb = new BinaryWriter(0, true);
              var precision = Geometry.getTwkbPrecision(5, 0, 0);
              var isEmpty = this.geometries.length === 0;

              this._writeTwkbHeader(twkb, wkb.GeometryCollection, precision, isEmpty);

              if (this.geometries.length > 0) {
                twkb.writeVarInt(this.geometries.length);

                for (var i = 0; i < this.geometries.length; i++) twkb.writeBuffer(this.geometries[i].toTwkb());
              }

              return twkb.buffer;
            };

            GeometryCollection.prototype._getWkbSize = function () {
              var size = 1 + 4 + 4;

              for (var i = 0; i < this.geometries.length; i++) size += this.geometries[i]._getWkbSize();

              return size;
            };

            GeometryCollection.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = Geometry.prototype.toGeoJSON.call(this, options);
              geoJSON$$1.type = geoJSON.GeometryCollection;
              geoJSON$$1.geometries = [];

              for (var i = 0; i < this.geometries.length; i++) geoJSON$$1.geometries.push(this.geometries[i].toGeoJSON());

              return geoJSON$$1;
            };

            function BinaryReader(buffer, isBigEndian) {
              this.buffer = buffer;
              this.position = 0;
              this.isBigEndian = isBigEndian || false;
            }

            function _read(readLE, readBE, size) {
              return function () {
                var value;
                if (this.isBigEndian) value = readBE.call(this.buffer, this.position);else value = readLE.call(this.buffer, this.position);
                this.position += size;
                return value;
              };
            }

            BinaryReader.prototype.readUInt8 = _read(Buffer.prototype.readUInt8, Buffer.prototype.readUInt8, 1);
            BinaryReader.prototype.readUInt16 = _read(Buffer.prototype.readUInt16LE, Buffer.prototype.readUInt16BE, 2);
            BinaryReader.prototype.readUInt32 = _read(Buffer.prototype.readUInt32LE, Buffer.prototype.readUInt32BE, 4);
            BinaryReader.prototype.readInt8 = _read(Buffer.prototype.readInt8, Buffer.prototype.readInt8, 1);
            BinaryReader.prototype.readInt16 = _read(Buffer.prototype.readInt16LE, Buffer.prototype.readInt16BE, 2);
            BinaryReader.prototype.readInt32 = _read(Buffer.prototype.readInt32LE, Buffer.prototype.readInt32BE, 4);
            BinaryReader.prototype.readFloat = _read(Buffer.prototype.readFloatLE, Buffer.prototype.readFloatBE, 4);
            BinaryReader.prototype.readDouble = _read(Buffer.prototype.readDoubleLE, Buffer.prototype.readDoubleBE, 8);

            BinaryReader.prototype.readVarInt = function () {
              var nextByte,
                  result = 0,
                  bytesRead = 0;

              do {
                nextByte = this.buffer[this.position + bytesRead];
                result += (nextByte & 0x7F) << 7 * bytesRead;
                bytesRead++;
              } while (nextByte >= 0x80);

              this.position += bytesRead;
              return result;
            };

            function WktParser(value) {
              this.value = value;
              this.position = 0;
            }

            WktParser.prototype.match = function (tokens) {
              this.skipWhitespaces();

              for (var i = 0; i < tokens.length; i++) {
                if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
                  this.position += tokens[i].length;
                  return tokens[i];
                }
              }

              return null;
            };

            WktParser.prototype.matchRegex = function (tokens) {
              this.skipWhitespaces();

              for (var i = 0; i < tokens.length; i++) {
                var match = this.value.substring(this.position).match(tokens[i]);

                if (match) {
                  this.position += match[0].length;
                  return match;
                }
              }

              return null;
            };

            WktParser.prototype.isMatch = function (tokens) {
              this.skipWhitespaces();

              for (var i = 0; i < tokens.length; i++) {
                if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {
                  this.position += tokens[i].length;
                  return true;
                }
              }

              return false;
            };

            WktParser.prototype.matchType = function () {
              var geometryType = this.match([wkt.Point, wkt.LineString, wkt.Polygon, wkt.MultiPoint, wkt.MultiLineString, wkt.MultiPolygon, wkt.GeometryCollection]);
              if (!geometryType) throw new Error('Expected geometry type');
              return geometryType;
            };

            WktParser.prototype.matchDimension = function () {
              var dimension = this.match(['ZM', 'Z', 'M']);

              switch (dimension) {
                case 'ZM':
                  return {
                    hasZ: true,
                    hasM: true
                  };

                case 'Z':
                  return {
                    hasZ: true,
                    hasM: false
                  };

                case 'M':
                  return {
                    hasZ: false,
                    hasM: true
                  };

                default:
                  return {
                    hasZ: false,
                    hasM: false
                  };
              }
            };

            WktParser.prototype.expectGroupStart = function () {
              if (!this.isMatch(['('])) throw new Error('Expected group start');
            };

            WktParser.prototype.expectGroupEnd = function () {
              if (!this.isMatch([')'])) throw new Error('Expected group end');
            };

            WktParser.prototype.matchCoordinate = function (options) {
              var match;
              if (options.hasZ && options.hasM) match = this.matchRegex([/^(\S*)\s+(\S*)\s+(\S*)\s+([^\s,)]*)/]);else if (options.hasZ || options.hasM) match = this.matchRegex([/^(\S*)\s+(\S*)\s+([^\s,)]*)/]);else match = this.matchRegex([/^(\S*)\s+([^\s,)]*)/]);
              if (!match) throw new Error('Expected coordinates');
              if (options.hasZ && options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));else if (options.hasZ) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));else if (options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));else return new Point(parseFloat(match[1]), parseFloat(match[2]));
            };

            WktParser.prototype.matchCoordinates = function (options) {
              var coordinates = [];

              do {
                var startsWithBracket = this.isMatch(['(']);
                coordinates.push(this.matchCoordinate(options));
                if (startsWithBracket) this.expectGroupEnd();
              } while (this.isMatch([',']));

              return coordinates;
            };

            WktParser.prototype.skipWhitespaces = function () {
              while (this.position < this.value.length && this.value[this.position] === ' ') this.position++;
            };

            function Geometry() {
              this.srid = undefined;
              this.hasZ = false;
              this.hasM = false;
            }

            Geometry.parse = function (value, options) {
              var valueType = typeof value;
              if (valueType === 'string' || value instanceof WktParser) return Geometry._parseWkt(value);else if (isBuffer(value) || value instanceof BinaryReader) return Geometry._parseWkb(value, options);else throw new Error('first argument must be a string or Buffer');
            };

            Geometry._parseWkt = function (value) {
              var wktParser, srid;
              if (value instanceof WktParser) wktParser = value;else wktParser = new WktParser(value);
              var match = wktParser.matchRegex([/^SRID=(\d+);/]);
              if (match) srid = parseInt(match[1], 10);
              var geometryType = wktParser.matchType();
              var dimension = wktParser.matchDimension();
              var options = {
                srid: srid,
                hasZ: dimension.hasZ,
                hasM: dimension.hasM
              };

              switch (geometryType) {
                case wkt.Point:
                  return Point._parseWkt(wktParser, options);

                case wkt.LineString:
                  return LineString._parseWkt(wktParser, options);

                case wkt.Polygon:
                  return Polygon._parseWkt(wktParser, options);

                case wkt.MultiPoint:
                  return MultiPoint._parseWkt(wktParser, options);

                case wkt.MultiLineString:
                  return MultiLineString._parseWkt(wktParser, options);

                case wkt.MultiPolygon:
                  return MultiPolygon._parseWkt(wktParser, options);

                case wkt.GeometryCollection:
                  return GeometryCollection._parseWkt(wktParser, options);
              }
            };

            Geometry._parseWkb = function (value, parentOptions) {
              var binaryReader,
                  wkbType,
                  geometryType,
                  options = {};
              if (value instanceof BinaryReader) binaryReader = value;else binaryReader = new BinaryReader(value);
              binaryReader.isBigEndian = !binaryReader.readInt8();
              wkbType = binaryReader.readUInt32();
              options.hasSrid = (wkbType & 0x20000000) === 0x20000000;
              options.isEwkb = wkbType & 0x20000000 || wkbType & 0x40000000 || wkbType & 0x80000000;
              if (options.hasSrid) options.srid = binaryReader.readUInt32();
              options.hasZ = false;
              options.hasM = false;

              if (!options.isEwkb && (!parentOptions || !parentOptions.isEwkb)) {
                if (wkbType >= 1000 && wkbType < 2000) {
                  options.hasZ = true;
                  geometryType = wkbType - 1000;
                } else if (wkbType >= 2000 && wkbType < 3000) {
                  options.hasM = true;
                  geometryType = wkbType - 2000;
                } else if (wkbType >= 3000 && wkbType < 4000) {
                  options.hasZ = true;
                  options.hasM = true;
                  geometryType = wkbType - 3000;
                } else {
                  geometryType = wkbType;
                }
              } else {
                if (wkbType & 0x80000000) options.hasZ = true;
                if (wkbType & 0x40000000) options.hasM = true;
                geometryType = wkbType & 0xF;
              }

              switch (geometryType) {
                case wkb.Point:
                  return Point._parseWkb(binaryReader, options);

                case wkb.LineString:
                  return LineString._parseWkb(binaryReader, options);

                case wkb.Polygon:
                  return Polygon._parseWkb(binaryReader, options);

                case wkb.MultiPoint:
                  return MultiPoint._parseWkb(binaryReader, options);

                case wkb.MultiLineString:
                  return MultiLineString._parseWkb(binaryReader, options);

                case wkb.MultiPolygon:
                  return MultiPolygon._parseWkb(binaryReader, options);

                case wkb.GeometryCollection:
                  return GeometryCollection._parseWkb(binaryReader, options);

                default:
                  throw new Error('GeometryType ' + geometryType + ' not supported');
              }
            };

            Geometry.parseTwkb = function (value) {
              var binaryReader,
                  options = {};
              if (value instanceof BinaryReader) binaryReader = value;else binaryReader = new BinaryReader(value);
              var type = binaryReader.readUInt8();
              var metadataHeader = binaryReader.readUInt8();
              var geometryType = type & 0x0F;
              options.precision = decode(type >> 4);
              options.precisionFactor = Math.pow(10, options.precision);
              options.hasBoundingBox = metadataHeader >> 0 & 1;
              options.hasSizeAttribute = metadataHeader >> 1 & 1;
              options.hasIdList = metadataHeader >> 2 & 1;
              options.hasExtendedPrecision = metadataHeader >> 3 & 1;
              options.isEmpty = metadataHeader >> 4 & 1;

              if (options.hasExtendedPrecision) {
                var extendedPrecision = binaryReader.readUInt8();
                options.hasZ = (extendedPrecision & 0x01) === 0x01;
                options.hasM = (extendedPrecision & 0x02) === 0x02;
                options.zPrecision = decode((extendedPrecision & 0x1C) >> 2);
                options.zPrecisionFactor = Math.pow(10, options.zPrecision);
                options.mPrecision = decode((extendedPrecision & 0xE0) >> 5);
                options.mPrecisionFactor = Math.pow(10, options.mPrecision);
              } else {
                options.hasZ = false;
                options.hasM = false;
              }

              if (options.hasSizeAttribute) binaryReader.readVarInt();

              if (options.hasBoundingBox) {
                var dimensions = 2;
                if (options.hasZ) dimensions++;
                if (options.hasM) dimensions++;

                for (var i = 0; i < dimensions; i++) {
                  binaryReader.readVarInt();
                  binaryReader.readVarInt();
                }
              }

              switch (geometryType) {
                case wkb.Point:
                  return Point._parseTwkb(binaryReader, options);

                case wkb.LineString:
                  return LineString._parseTwkb(binaryReader, options);

                case wkb.Polygon:
                  return Polygon._parseTwkb(binaryReader, options);

                case wkb.MultiPoint:
                  return MultiPoint._parseTwkb(binaryReader, options);

                case wkb.MultiLineString:
                  return MultiLineString._parseTwkb(binaryReader, options);

                case wkb.MultiPolygon:
                  return MultiPolygon._parseTwkb(binaryReader, options);

                case wkb.GeometryCollection:
                  return GeometryCollection._parseTwkb(binaryReader, options);

                default:
                  throw new Error('GeometryType ' + geometryType + ' not supported');
              }
            };

            Geometry.parseGeoJSON = function (value) {
              return Geometry._parseGeoJSON(value);
            };

            Geometry._parseGeoJSON = function (value, isSubGeometry) {
              var geometry;

              switch (value.type) {
                case geoJSON.Point:
                  geometry = Point._parseGeoJSON(value);
                  break;

                case geoJSON.LineString:
                  geometry = LineString._parseGeoJSON(value);
                  break;

                case geoJSON.Polygon:
                  geometry = Polygon._parseGeoJSON(value);
                  break;

                case geoJSON.MultiPoint:
                  geometry = MultiPoint._parseGeoJSON(value);
                  break;

                case geoJSON.MultiLineString:
                  geometry = MultiLineString._parseGeoJSON(value);
                  break;

                case geoJSON.MultiPolygon:
                  geometry = MultiPolygon._parseGeoJSON(value);
                  break;

                case geoJSON.GeometryCollection:
                  geometry = GeometryCollection._parseGeoJSON(value);
                  break;

                default:
                  throw new Error('GeometryType ' + value.type + ' not supported');
              }

              if (value.crs && value.crs.type && value.crs.type === 'name' && value.crs.properties && value.crs.properties.name) {
                var crs = value.crs.properties.name;
                if (crs.indexOf('EPSG:') === 0) geometry.srid = parseInt(crs.substring(5));else if (crs.indexOf('urn:ogc:def:crs:EPSG::') === 0) geometry.srid = parseInt(crs.substring(22));else throw new Error('Unsupported crs: ' + crs);
              } else if (!isSubGeometry) {
                geometry.srid = 4326;
              }

              return geometry;
            };

            Geometry.prototype.toEwkt = function () {
              return 'SRID=' + this.srid + ';' + this.toWkt();
            };

            Geometry.prototype.toEwkb = function () {
              var ewkb = new BinaryWriter(this._getWkbSize() + 4);
              var wkb$$1 = this.toWkb();
              ewkb.writeInt8(1);
              ewkb.writeUInt32LE((wkb$$1.slice(1, 5).readUInt32LE(0) | 0x20000000) >>> 0, true);
              ewkb.writeUInt32LE(this.srid);
              ewkb.writeBuffer(wkb$$1.slice(5));
              return ewkb.buffer;
            };

            Geometry.prototype._getWktType = function (wktType, isEmpty) {
              var wkt$$1 = wktType;
              if (this.hasZ && this.hasM) wkt$$1 += ' ZM ';else if (this.hasZ) wkt$$1 += ' Z ';else if (this.hasM) wkt$$1 += ' M ';
              if (isEmpty && !this.hasZ && !this.hasM) wkt$$1 += ' ';
              if (isEmpty) wkt$$1 += 'EMPTY';
              return wkt$$1;
            };

            Geometry.prototype._getWktCoordinate = function (point) {
              var coordinates = point.x + ' ' + point.y;
              if (this.hasZ) coordinates += ' ' + point.z;
              if (this.hasM) coordinates += ' ' + point.m;
              return coordinates;
            };

            Geometry.prototype._writeWkbType = function (wkb$$1, geometryType, parentOptions) {
              var dimensionType = 0;

              if (typeof this.srid === 'undefined' && (!parentOptions || typeof parentOptions.srid === 'undefined')) {
                if (this.hasZ && this.hasM) dimensionType += 3000;else if (this.hasZ) dimensionType += 1000;else if (this.hasM) dimensionType += 2000;
              } else {
                if (this.hasZ) dimensionType |= 0x80000000;
                if (this.hasM) dimensionType |= 0x40000000;
              }

              wkb$$1.writeUInt32LE(dimensionType + geometryType >>> 0, true);
            };

            Geometry.getTwkbPrecision = function (xyPrecision, zPrecision, mPrecision) {
              return {
                xy: xyPrecision,
                z: zPrecision,
                m: mPrecision,
                xyFactor: Math.pow(10, xyPrecision),
                zFactor: Math.pow(10, zPrecision),
                mFactor: Math.pow(10, mPrecision)
              };
            };

            Geometry.prototype._writeTwkbHeader = function (twkb, geometryType, precision, isEmpty) {
              var type = (encode(precision.xy) << 4) + geometryType;
              var metadataHeader = (this.hasZ || this.hasM) << 3;
              metadataHeader += isEmpty << 4;
              twkb.writeUInt8(type);
              twkb.writeUInt8(metadataHeader);

              if (this.hasZ || this.hasM) {
                var extendedPrecision = 0;
                if (this.hasZ) extendedPrecision |= 0x1;
                if (this.hasM) extendedPrecision |= 0x2;
                twkb.writeUInt8(extendedPrecision);
              }
            };

            Geometry.prototype.toGeoJSON = function (options) {
              var geoJSON$$1 = {};

              if (this.srid) {
                if (options) {
                  if (options.shortCrs) {
                    geoJSON$$1.crs = {
                      type: 'name',
                      properties: {
                        name: 'EPSG:' + this.srid
                      }
                    };
                  } else if (options.longCrs) {
                    geoJSON$$1.crs = {
                      type: 'name',
                      properties: {
                        name: 'urn:ogc:def:crs:EPSG::' + this.srid
                      }
                    };
                  }
                }
              }

              return geoJSON$$1;
            };

            function globals (defs) {
              defs('EPSG:4326', "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
              defs('EPSG:4269', "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
              defs('EPSG:3857', "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
              defs.WGS84 = defs['EPSG:4326'];
              defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857

              defs.GOOGLE = defs['EPSG:3857'];
              defs['EPSG:900913'] = defs['EPSG:3857'];
              defs['EPSG:102113'] = defs['EPSG:3857'];
            }

            var PJD_3PARAM = 1;
            var PJD_7PARAM = 2;
            var PJD_WGS84 = 4; // WGS84 or equivalent

            var PJD_NODATUM = 5; // WGS84 or equivalent

            var SEC_TO_RAD = 4.84813681109535993589914102357e-6;
            var HALF_PI = Math.PI / 2; // ellipoid pj_set_ell.c

            var SIXTH = 0.1666666666666666667;
            /* 1/6 */

            var RA4 = 0.04722222222222222222;
            /* 17/360 */

            var RA6 = 0.02215608465608465608;
            var EPSLN = 1.0e-10; // you'd think you could use Number.EPSILON above but that makes
            // Mollweide get into an infinate loop.

            var D2R = 0.01745329251994329577;
            var R2D = 57.29577951308232088;
            var FORTPI = Math.PI / 4;
            var TWO_PI = Math.PI * 2; // SPI is slightly greater than Math.PI, so values that exceed the -180..180
            // degree range by a tiny amount don't get wrapped. This prevents points that
            // have drifted from their original location along the 180th meridian (due to
            // floating point error) from changing their sign.

            var SPI = 3.14159265359;

            var exports$1 = {};
            exports$1.greenwich = 0.0; //"0dE",

            exports$1.lisbon = -9.131906111111; //"9d07'54.862\"W",

            exports$1.paris = 2.337229166667; //"2d20'14.025\"E",

            exports$1.bogota = -74.080916666667; //"74d04'51.3\"W",

            exports$1.madrid = -3.687938888889; //"3d41'16.58\"W",

            exports$1.rome = 12.452333333333; //"12d27'8.4\"E",

            exports$1.bern = 7.439583333333; //"7d26'22.5\"E",

            exports$1.jakarta = 106.807719444444; //"106d48'27.79\"E",

            exports$1.ferro = -17.666666666667; //"17d40'W",

            exports$1.brussels = 4.367975; //"4d22'4.71\"E",

            exports$1.stockholm = 18.058277777778; //"18d3'29.8\"E",

            exports$1.athens = 23.7163375; //"23d42'58.815\"E",

            exports$1.oslo = 10.722916666667; //"10d43'22.5\"E"

            var units = {
              ft: {
                to_meter: 0.3048
              },
              'us-ft': {
                to_meter: 1200 / 3937
              }
            };

            var ignoredChar = /[\s_\-\/\(\)]/g;
            function match(obj, key) {
              if (obj[key]) {
                return obj[key];
              }

              var keys = Object.keys(obj);
              var lkey = key.toLowerCase().replace(ignoredChar, '');
              var i = -1;
              var testkey, processedKey;

              while (++i < keys.length) {
                testkey = keys[i];
                processedKey = testkey.toLowerCase().replace(ignoredChar, '');

                if (processedKey === lkey) {
                  return obj[testkey];
                }
              }
            }

            function projStr (defData) {
              var self = {};
              var paramObj = defData.split('+').map(function (v) {
                return v.trim();
              }).filter(function (a) {
                return a;
              }).reduce(function (p, a) {
                var split = a.split('=');
                split.push(true);
                p[split[0].toLowerCase()] = split[1];
                return p;
              }, {});
              var paramName, paramVal, paramOutname;
              var params = {
                proj: 'projName',
                datum: 'datumCode',
                rf: function (v) {
                  self.rf = parseFloat(v);
                },
                lat_0: function (v) {
                  self.lat0 = v * D2R;
                },
                lat_1: function (v) {
                  self.lat1 = v * D2R;
                },
                lat_2: function (v) {
                  self.lat2 = v * D2R;
                },
                lat_ts: function (v) {
                  self.lat_ts = v * D2R;
                },
                lon_0: function (v) {
                  self.long0 = v * D2R;
                },
                lon_1: function (v) {
                  self.long1 = v * D2R;
                },
                lon_2: function (v) {
                  self.long2 = v * D2R;
                },
                alpha: function (v) {
                  self.alpha = parseFloat(v) * D2R;
                },
                lonc: function (v) {
                  self.longc = v * D2R;
                },
                x_0: function (v) {
                  self.x0 = parseFloat(v);
                },
                y_0: function (v) {
                  self.y0 = parseFloat(v);
                },
                k_0: function (v) {
                  self.k0 = parseFloat(v);
                },
                k: function (v) {
                  self.k0 = parseFloat(v);
                },
                a: function (v) {
                  self.a = parseFloat(v);
                },
                b: function (v) {
                  self.b = parseFloat(v);
                },
                r_a: function () {
                  self.R_A = true;
                },
                zone: function (v) {
                  self.zone = parseInt(v, 10);
                },
                south: function () {
                  self.utmSouth = true;
                },
                towgs84: function (v) {
                  self.datum_params = v.split(",").map(function (a) {
                    return parseFloat(a);
                  });
                },
                to_meter: function (v) {
                  self.to_meter = parseFloat(v);
                },
                units: function (v) {
                  self.units = v;
                  var unit = match(units, v);

                  if (unit) {
                    self.to_meter = unit.to_meter;
                  }
                },
                from_greenwich: function (v) {
                  self.from_greenwich = v * D2R;
                },
                pm: function (v) {
                  var pm = match(exports$1, v);
                  self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;
                },
                nadgrids: function (v) {
                  if (v === '@null') {
                    self.datumCode = 'none';
                  } else {
                    self.nadgrids = v;
                  }
                },
                axis: function (v) {
                  var legalAxis = "ewnsud";

                  if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
                    self.axis = v;
                  }
                }
              };

              for (paramName in paramObj) {
                paramVal = paramObj[paramName];

                if (paramName in params) {
                  paramOutname = params[paramName];

                  if (typeof paramOutname === 'function') {
                    paramOutname(paramVal);
                  } else {
                    self[paramOutname] = paramVal;
                  }
                } else {
                  self[paramName] = paramVal;
                }
              }

              if (typeof self.datumCode === 'string' && self.datumCode !== "WGS84") {
                self.datumCode = self.datumCode.toLowerCase();
              }

              return self;
            }

            var NEUTRAL = 1;
            var KEYWORD = 2;
            var NUMBER = 3;
            var QUOTED = 4;
            var AFTERQUOTE = 5;
            var ENDED = -1;
            var whitespace = /\s/;
            var latin = /[A-Za-z]/;
            var keyword = /[A-Za-z84]/;
            var endThings = /[,\]]/;
            var digets = /[\d\.E\-\+]/; // const ignoredChar = /[\s_\-\/\(\)]/g;

            function Parser(text) {
              if (typeof text !== 'string') {
                throw new Error('not a string');
              }

              this.text = text.trim();
              this.level = 0;
              this.place = 0;
              this.root = null;
              this.stack = [];
              this.currentObject = null;
              this.state = NEUTRAL;
            }

            Parser.prototype.readCharicter = function () {
              var char = this.text[this.place++];

              if (this.state !== QUOTED) {
                while (whitespace.test(char)) {
                  if (this.place >= this.text.length) {
                    return;
                  }

                  char = this.text[this.place++];
                }
              }

              switch (this.state) {
                case NEUTRAL:
                  return this.neutral(char);

                case KEYWORD:
                  return this.keyword(char);

                case QUOTED:
                  return this.quoted(char);

                case AFTERQUOTE:
                  return this.afterquote(char);

                case NUMBER:
                  return this.number(char);

                case ENDED:
                  return;
              }
            };

            Parser.prototype.afterquote = function (char) {
              if (char === '"') {
                this.word += '"';
                this.state = QUOTED;
                return;
              }

              if (endThings.test(char)) {
                this.word = this.word.trim();
                this.afterItem(char);
                return;
              }

              throw new Error('havn\'t handled "' + char + '" in afterquote yet, index ' + this.place);
            };

            Parser.prototype.afterItem = function (char) {
              if (char === ',') {
                if (this.word !== null) {
                  this.currentObject.push(this.word);
                }

                this.word = null;
                this.state = NEUTRAL;
                return;
              }

              if (char === ']') {
                this.level--;

                if (this.word !== null) {
                  this.currentObject.push(this.word);
                  this.word = null;
                }

                this.state = NEUTRAL;
                this.currentObject = this.stack.pop();

                if (!this.currentObject) {
                  this.state = ENDED;
                }

                return;
              }
            };

            Parser.prototype.number = function (char) {
              if (digets.test(char)) {
                this.word += char;
                return;
              }

              if (endThings.test(char)) {
                this.word = parseFloat(this.word);
                this.afterItem(char);
                return;
              }

              throw new Error('havn\'t handled "' + char + '" in number yet, index ' + this.place);
            };

            Parser.prototype.quoted = function (char) {
              if (char === '"') {
                this.state = AFTERQUOTE;
                return;
              }

              this.word += char;
              return;
            };

            Parser.prototype.keyword = function (char) {
              if (keyword.test(char)) {
                this.word += char;
                return;
              }

              if (char === '[') {
                var newObjects = [];
                newObjects.push(this.word);
                this.level++;

                if (this.root === null) {
                  this.root = newObjects;
                } else {
                  this.currentObject.push(newObjects);
                }

                this.stack.push(this.currentObject);
                this.currentObject = newObjects;
                this.state = NEUTRAL;
                return;
              }

              if (endThings.test(char)) {
                this.afterItem(char);
                return;
              }

              throw new Error('havn\'t handled "' + char + '" in keyword yet, index ' + this.place);
            };

            Parser.prototype.neutral = function (char) {
              if (latin.test(char)) {
                this.word = char;
                this.state = KEYWORD;
                return;
              }

              if (char === '"') {
                this.word = '';
                this.state = QUOTED;
                return;
              }

              if (digets.test(char)) {
                this.word = char;
                this.state = NUMBER;
                return;
              }

              if (endThings.test(char)) {
                this.afterItem(char);
                return;
              }

              throw new Error('havn\'t handled "' + char + '" in neutral yet, index ' + this.place);
            };

            Parser.prototype.output = function () {
              while (this.place < this.text.length) {
                this.readCharicter();
              }

              if (this.state === ENDED) {
                return this.root;
              }

              throw new Error('unable to parse string "' + this.text + '". State is ' + this.state);
            };

            function parseString(txt) {
              var parser = new Parser(txt);
              return parser.output();
            }

            function mapit(obj, key, value) {
              if (Array.isArray(key)) {
                value.unshift(key);
                key = null;
              }

              var thing = key ? {} : obj;
              var out = value.reduce(function (newObj, item) {
                sExpr(item, newObj);
                return newObj;
              }, thing);

              if (key) {
                obj[key] = out;
              }
            }

            function sExpr(v, obj) {
              if (!Array.isArray(v)) {
                obj[v] = true;
                return;
              }

              var key = v.shift();

              if (key === 'PARAMETER') {
                key = v.shift();
              }

              if (v.length === 1) {
                if (Array.isArray(v[0])) {
                  obj[key] = {};
                  sExpr(v[0], obj[key]);
                  return;
                }

                obj[key] = v[0];
                return;
              }

              if (!v.length) {
                obj[key] = true;
                return;
              }

              if (key === 'TOWGS84') {
                obj[key] = v;
                return;
              }

              if (!Array.isArray(key)) {
                obj[key] = {};
              }

              var i;

              switch (key) {
                case 'UNIT':
                case 'PRIMEM':
                case 'VERT_DATUM':
                  obj[key] = {
                    name: v[0].toLowerCase(),
                    convert: v[1]
                  };

                  if (v.length === 3) {
                    sExpr(v[2], obj[key]);
                  }

                  return;

                case 'SPHEROID':
                case 'ELLIPSOID':
                  obj[key] = {
                    name: v[0],
                    a: v[1],
                    rf: v[2]
                  };

                  if (v.length === 4) {
                    sExpr(v[3], obj[key]);
                  }

                  return;

                case 'PROJECTEDCRS':
                case 'PROJCRS':
                case 'GEOGCS':
                case 'GEOCCS':
                case 'PROJCS':
                case 'LOCAL_CS':
                case 'GEODCRS':
                case 'GEODETICCRS':
                case 'GEODETICDATUM':
                case 'EDATUM':
                case 'ENGINEERINGDATUM':
                case 'VERT_CS':
                case 'VERTCRS':
                case 'VERTICALCRS':
                case 'COMPD_CS':
                case 'COMPOUNDCRS':
                case 'ENGINEERINGCRS':
                case 'ENGCRS':
                case 'FITTED_CS':
                case 'LOCAL_DATUM':
                case 'DATUM':
                  v[0] = ['name', v[0]];
                  mapit(obj, key, v);
                  return;

                default:
                  i = -1;

                  while (++i < v.length) {
                    if (!Array.isArray(v[i])) {
                      return sExpr(v, obj[key]);
                    }
                  }

                  return mapit(obj, key, v);
              }
            }

            var D2R$1 = 0.01745329251994329577;

            function rename(obj, params) {
              var outName = params[0];
              var inName = params[1];

              if (!(outName in obj) && inName in obj) {
                obj[outName] = obj[inName];

                if (params.length === 3) {
                  obj[outName] = params[2](obj[outName]);
                }
              }
            }

            function d2r(input) {
              return input * D2R$1;
            }

            function cleanWKT(wkt) {
              if (wkt.type === 'GEOGCS') {
                wkt.projName = 'longlat';
              } else if (wkt.type === 'LOCAL_CS') {
                wkt.projName = 'identity';
                wkt.local = true;
              } else {
                if (typeof wkt.PROJECTION === 'object') {
                  wkt.projName = Object.keys(wkt.PROJECTION)[0];
                } else {
                  wkt.projName = wkt.PROJECTION;
                }
              }

              if (wkt.UNIT) {
                wkt.units = wkt.UNIT.name.toLowerCase();

                if (wkt.units === 'metre') {
                  wkt.units = 'meter';
                }

                if (wkt.UNIT.convert) {
                  if (wkt.type === 'GEOGCS') {
                    if (wkt.DATUM && wkt.DATUM.SPHEROID) {
                      wkt.to_meter = wkt.UNIT.convert * wkt.DATUM.SPHEROID.a;
                    }
                  } else {
                    wkt.to_meter = wkt.UNIT.convert;
                  }
                }
              }

              var geogcs = wkt.GEOGCS;

              if (wkt.type === 'GEOGCS') {
                geogcs = wkt;
              }

              if (geogcs) {
                //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
                //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
                //}
                if (geogcs.DATUM) {
                  wkt.datumCode = geogcs.DATUM.name.toLowerCase();
                } else {
                  wkt.datumCode = geogcs.name.toLowerCase();
                }

                if (wkt.datumCode.slice(0, 2) === 'd_') {
                  wkt.datumCode = wkt.datumCode.slice(2);
                }

                if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {
                  wkt.datumCode = 'nzgd49';
                }

                if (wkt.datumCode === 'wgs_1984') {
                  if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {
                    wkt.sphere = true;
                  }

                  wkt.datumCode = 'wgs84';
                }

                if (wkt.datumCode.slice(-6) === '_ferro') {
                  wkt.datumCode = wkt.datumCode.slice(0, -6);
                }

                if (wkt.datumCode.slice(-8) === '_jakarta') {
                  wkt.datumCode = wkt.datumCode.slice(0, -8);
                }

                if (~wkt.datumCode.indexOf('belge')) {
                  wkt.datumCode = 'rnb72';
                }

                if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
                  wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\_18/, 'clrk');

                  if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {
                    wkt.ellps = 'intl';
                  }

                  wkt.a = geogcs.DATUM.SPHEROID.a;
                  wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
                }

                if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
                  wkt.datum_params = geogcs.DATUM.TOWGS84;
                }

                if (~wkt.datumCode.indexOf('osgb_1936')) {
                  wkt.datumCode = 'osgb36';
                }

                if (~wkt.datumCode.indexOf('osni_1952')) {
                  wkt.datumCode = 'osni52';
                }

                if (~wkt.datumCode.indexOf('tm65') || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {
                  wkt.datumCode = 'ire65';
                }

                if (wkt.datumCode === 'ch1903+') {
                  wkt.datumCode = 'ch1903';
                }

                if (~wkt.datumCode.indexOf('israel')) {
                  wkt.datumCode = 'isr93';
                }
              }

              if (wkt.b && !isFinite(wkt.b)) {
                wkt.b = wkt.a;
              }

              function toMeter(input) {
                var ratio = wkt.to_meter || 1;
                return input * ratio;
              }

              var renamer = function (a) {
                return rename(wkt, a);
              };

              var list = [['standard_parallel_1', 'Standard_Parallel_1'], ['standard_parallel_2', 'Standard_Parallel_2'], ['false_easting', 'False_Easting'], ['false_northing', 'False_Northing'], ['central_meridian', 'Central_Meridian'], ['latitude_of_origin', 'Latitude_Of_Origin'], ['latitude_of_origin', 'Central_Parallel'], ['scale_factor', 'Scale_Factor'], ['k0', 'scale_factor'], ['latitude_of_center', 'Latitude_Of_Center'], ['latitude_of_center', 'Latitude_of_center'], ['lat0', 'latitude_of_center', d2r], ['longitude_of_center', 'Longitude_Of_Center'], ['longitude_of_center', 'Longitude_of_center'], ['longc', 'longitude_of_center', d2r], ['x0', 'false_easting', toMeter], ['y0', 'false_northing', toMeter], ['long0', 'central_meridian', d2r], ['lat0', 'latitude_of_origin', d2r], ['lat0', 'standard_parallel_1', d2r], ['lat1', 'standard_parallel_1', d2r], ['lat2', 'standard_parallel_2', d2r], ['azimuth', 'Azimuth'], ['alpha', 'azimuth', d2r], ['srsCode', 'name']];
              list.forEach(renamer);

              if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {
                wkt.long0 = wkt.longc;
              }

              if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {
                wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);
                wkt.lat_ts = wkt.lat1;
              }
            }

            function wkt$1 (wkt) {
              var lisp = parseString(wkt);
              var type = lisp.shift();
              var name = lisp.shift();
              lisp.unshift(['name', name]);
              lisp.unshift(['type', type]);
              var obj = {};
              sExpr(lisp, obj);
              cleanWKT(obj);
              return obj;
            }

            function defs(name) {
              /*global console*/
              var that = this;

              if (arguments.length === 2) {
                var def = arguments[1];

                if (typeof def === 'string') {
                  if (def.charAt(0) === '+') {
                    defs[name] = projStr(arguments[1]);
                  } else {
                    defs[name] = wkt$1(arguments[1]);
                  }
                } else {
                  defs[name] = def;
                }
              } else if (arguments.length === 1) {
                if (Array.isArray(name)) {
                  return name.map(function (v) {
                    if (Array.isArray(v)) {
                      defs.apply(that, v);
                    } else {
                      defs(v);
                    }
                  });
                } else if (typeof name === 'string') {
                  if (name in defs) {
                    return defs[name];
                  }
                } else if ('EPSG' in name) {
                  defs['EPSG:' + name.EPSG] = name;
                } else if ('ESRI' in name) {
                  defs['ESRI:' + name.ESRI] = name;
                } else if ('IAU2000' in name) {
                  defs['IAU2000:' + name.IAU2000] = name;
                } else {
                  console.log(name);
                }

                return;
              }
            }

            globals(defs);

            function testObj(code) {
              return typeof code === 'string';
            }

            function testDef(code) {
              return code in defs;
            }

            var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];

            function testWKT(code) {
              return codeWords.some(function (word) {
                return code.indexOf(word) > -1;
              });
            }

            var codes = ['3857', '900913', '3785', '102113'];

            function checkMercator(item) {
              var auth = match(item, 'authority');

              if (!auth) {
                return;
              }

              var code = match(auth, 'epsg');
              return code && codes.indexOf(code) > -1;
            }

            function checkProjStr(item) {
              var ext = match(item, 'extension');

              if (!ext) {
                return;
              }

              return match(ext, 'proj4');
            }

            function testProj(code) {
              return code[0] === '+';
            }

            function parse(code) {
              if (testObj(code)) {
                //check to see if this is a WKT string
                if (testDef(code)) {
                  return defs[code];
                }

                if (testWKT(code)) {
                  var out = wkt$1(code); // test of spetial case, due to this being a very common and often malformed

                  if (checkMercator(out)) {
                    return defs['EPSG:3857'];
                  }

                  var maybeProjStr = checkProjStr(out);

                  if (maybeProjStr) {
                    return projStr(maybeProjStr);
                  }

                  return out;
                }

                if (testProj(code)) {
                  return projStr(code);
                }
              } else {
                return code;
              }
            }

            function extend (destination, source) {
              destination = destination || {};
              var value, property;

              if (!source) {
                return destination;
              }

              for (property in source) {
                value = source[property];

                if (value !== undefined) {
                  destination[property] = value;
                }
              }

              return destination;
            }

            function msfnz (eccent, sinphi, cosphi) {
              var con = eccent * sinphi;
              return cosphi / Math.sqrt(1 - con * con);
            }

            function sign (x) {
              return x < 0 ? -1 : 1;
            }

            function adjust_lon (x) {
              return Math.abs(x) <= SPI ? x : x - sign(x) * TWO_PI;
            }

            function tsfnz (eccent, phi, sinphi) {
              var con = eccent * sinphi;
              var com = 0.5 * eccent;
              con = Math.pow((1 - con) / (1 + con), com);
              return Math.tan(0.5 * (HALF_PI - phi)) / con;
            }

            function phi2z (eccent, ts) {
              var eccnth = 0.5 * eccent;
              var con, dphi;
              var phi = HALF_PI - 2 * Math.atan(ts);

              for (var i = 0; i <= 15; i++) {
                con = eccent * Math.sin(phi);
                dphi = HALF_PI - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //console.log("phi2z has NoConvergence");


              return -9999;
            }

            function init$1() {
              var con = this.b / this.a;
              this.es = 1 - con * con;

              if (!('x0' in this)) {
                this.x0 = 0;
              }

              if (!('y0' in this)) {
                this.y0 = 0;
              }

              this.e = Math.sqrt(this.es);

              if (this.lat_ts) {
                if (this.sphere) {
                  this.k0 = Math.cos(this.lat_ts);
                } else {
                  this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
                }
              } else {
                if (!this.k0) {
                  if (this.k) {
                    this.k0 = this.k;
                  } else {
                    this.k0 = 1;
                  }
                }
              }
            }
            /* Mercator forward equations--mapping lat,long to x,y
              --------------------------------------------------*/

            function forward(p) {
              var lon = p.x;
              var lat = p.y; // convert to radians

              if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
                return null;
              }

              var x, y;

              if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
                return null;
              } else {
                if (this.sphere) {
                  x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
                  y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
                } else {
                  var sinphi = Math.sin(lat);
                  var ts = tsfnz(this.e, lat, sinphi);
                  x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
                  y = this.y0 - this.a * this.k0 * Math.log(ts);
                }

                p.x = x;
                p.y = y;
                return p;
              }
            }
            /* Mercator inverse equations--mapping x,y to lat/long
              --------------------------------------------------*/

            function inverse(p) {
              var x = p.x - this.x0;
              var y = p.y - this.y0;
              var lon, lat;

              if (this.sphere) {
                lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
              } else {
                var ts = Math.exp(-y / (this.a * this.k0));
                lat = phi2z(this.e, ts);

                if (lat === -9999) {
                  return null;
                }
              }

              lon = adjust_lon(this.long0 + x / (this.a * this.k0));
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
            var merc = {
              init: init$1,
              forward: forward,
              inverse: inverse,
              names: names
            };

            function init$2() {//no-op for longlat
            }

            function identity(pt) {
              return pt;
            }
            var names$1 = ["longlat", "identity"];
            var longlat = {
              init: init$2,
              forward: identity,
              inverse: identity,
              names: names$1
            };

            var projs = [merc, longlat];
            var names$2 = {};
            var projStore = [];

            function add(proj, i) {
              var len = projStore.length;

              if (!proj.names) {
                console.log(i);
                return true;
              }

              projStore[len] = proj;
              proj.names.forEach(function (n) {
                names$2[n.toLowerCase()] = len;
              });
              return this;
            }
            function get(name) {
              if (!name) {
                return false;
              }

              var n = name.toLowerCase();

              if (typeof names$2[n] !== 'undefined' && projStore[names$2[n]]) {
                return projStore[names$2[n]];
              }
            }
            function start() {
              projs.forEach(add);
            }
            var projections = {
              start: start,
              add: add,
              get: get
            };

            var exports$2 = {};
            exports$2.MERIT = {
              a: 6378137.0,
              rf: 298.257,
              ellipseName: "MERIT 1983"
            };
            exports$2.SGS85 = {
              a: 6378136.0,
              rf: 298.257,
              ellipseName: "Soviet Geodetic System 85"
            };
            exports$2.GRS80 = {
              a: 6378137.0,
              rf: 298.257222101,
              ellipseName: "GRS 1980(IUGG, 1980)"
            };
            exports$2.IAU76 = {
              a: 6378140.0,
              rf: 298.257,
              ellipseName: "IAU 1976"
            };
            exports$2.airy = {
              a: 6377563.396,
              b: 6356256.910,
              ellipseName: "Airy 1830"
            };
            exports$2.APL4 = {
              a: 6378137,
              rf: 298.25,
              ellipseName: "Appl. Physics. 1965"
            };
            exports$2.NWL9D = {
              a: 6378145.0,
              rf: 298.25,
              ellipseName: "Naval Weapons Lab., 1965"
            };
            exports$2.mod_airy = {
              a: 6377340.189,
              b: 6356034.446,
              ellipseName: "Modified Airy"
            };
            exports$2.andrae = {
              a: 6377104.43,
              rf: 300.0,
              ellipseName: "Andrae 1876 (Den., Iclnd.)"
            };
            exports$2.aust_SA = {
              a: 6378160.0,
              rf: 298.25,
              ellipseName: "Australian Natl & S. Amer. 1969"
            };
            exports$2.GRS67 = {
              a: 6378160.0,
              rf: 298.2471674270,
              ellipseName: "GRS 67(IUGG 1967)"
            };
            exports$2.bessel = {
              a: 6377397.155,
              rf: 299.1528128,
              ellipseName: "Bessel 1841"
            };
            exports$2.bess_nam = {
              a: 6377483.865,
              rf: 299.1528128,
              ellipseName: "Bessel 1841 (Namibia)"
            };
            exports$2.clrk66 = {
              a: 6378206.4,
              b: 6356583.8,
              ellipseName: "Clarke 1866"
            };
            exports$2.clrk80 = {
              a: 6378249.145,
              rf: 293.4663,
              ellipseName: "Clarke 1880 mod."
            };
            exports$2.clrk58 = {
              a: 6378293.645208759,
              rf: 294.2606763692654,
              ellipseName: "Clarke 1858"
            };
            exports$2.CPM = {
              a: 6375738.7,
              rf: 334.29,
              ellipseName: "Comm. des Poids et Mesures 1799"
            };
            exports$2.delmbr = {
              a: 6376428.0,
              rf: 311.5,
              ellipseName: "Delambre 1810 (Belgium)"
            };
            exports$2.engelis = {
              a: 6378136.05,
              rf: 298.2566,
              ellipseName: "Engelis 1985"
            };
            exports$2.evrst30 = {
              a: 6377276.345,
              rf: 300.8017,
              ellipseName: "Everest 1830"
            };
            exports$2.evrst48 = {
              a: 6377304.063,
              rf: 300.8017,
              ellipseName: "Everest 1948"
            };
            exports$2.evrst56 = {
              a: 6377301.243,
              rf: 300.8017,
              ellipseName: "Everest 1956"
            };
            exports$2.evrst69 = {
              a: 6377295.664,
              rf: 300.8017,
              ellipseName: "Everest 1969"
            };
            exports$2.evrstSS = {
              a: 6377298.556,
              rf: 300.8017,
              ellipseName: "Everest (Sabah & Sarawak)"
            };
            exports$2.fschr60 = {
              a: 6378166.0,
              rf: 298.3,
              ellipseName: "Fischer (Mercury Datum) 1960"
            };
            exports$2.fschr60m = {
              a: 6378155.0,
              rf: 298.3,
              ellipseName: "Fischer 1960"
            };
            exports$2.fschr68 = {
              a: 6378150.0,
              rf: 298.3,
              ellipseName: "Fischer 1968"
            };
            exports$2.helmert = {
              a: 6378200.0,
              rf: 298.3,
              ellipseName: "Helmert 1906"
            };
            exports$2.hough = {
              a: 6378270.0,
              rf: 297.0,
              ellipseName: "Hough"
            };
            exports$2.intl = {
              a: 6378388.0,
              rf: 297.0,
              ellipseName: "International 1909 (Hayford)"
            };
            exports$2.kaula = {
              a: 6378163.0,
              rf: 298.24,
              ellipseName: "Kaula 1961"
            };
            exports$2.lerch = {
              a: 6378139.0,
              rf: 298.257,
              ellipseName: "Lerch 1979"
            };
            exports$2.mprts = {
              a: 6397300.0,
              rf: 191.0,
              ellipseName: "Maupertius 1738"
            };
            exports$2.new_intl = {
              a: 6378157.5,
              b: 6356772.2,
              ellipseName: "New International 1967"
            };
            exports$2.plessis = {
              a: 6376523.0,
              rf: 6355863.0,
              ellipseName: "Plessis 1817 (France)"
            };
            exports$2.krass = {
              a: 6378245.0,
              rf: 298.3,
              ellipseName: "Krassovsky, 1942"
            };
            exports$2.SEasia = {
              a: 6378155.0,
              b: 6356773.3205,
              ellipseName: "Southeast Asia"
            };
            exports$2.walbeck = {
              a: 6376896.0,
              b: 6355834.8467,
              ellipseName: "Walbeck"
            };
            exports$2.WGS60 = {
              a: 6378165.0,
              rf: 298.3,
              ellipseName: "WGS 60"
            };
            exports$2.WGS66 = {
              a: 6378145.0,
              rf: 298.25,
              ellipseName: "WGS 66"
            };
            exports$2.WGS7 = {
              a: 6378135.0,
              rf: 298.26,
              ellipseName: "WGS 72"
            };
            var WGS84 = exports$2.WGS84 = {
              a: 6378137.0,
              rf: 298.257223563,
              ellipseName: "WGS 84"
            };
            exports$2.sphere = {
              a: 6370997.0,
              b: 6370997.0,
              ellipseName: "Normal Sphere (r=6370997)"
            };

            function eccentricity(a, b, rf, R_A) {
              var a2 = a * a; // used in geocentric

              var b2 = b * b; // used in geocentric

              var es = (a2 - b2) / a2; // e ^ 2

              var e = 0;

              if (R_A) {
                a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
                a2 = a * a;
                es = 0;
              } else {
                e = Math.sqrt(es); // eccentricity
              }

              var ep2 = (a2 - b2) / b2; // used in geocentric

              return {
                es: es,
                e: e,
                ep2: ep2
              };
            }
            function sphere(a, b, rf, ellps, sphere) {
              if (!a) {
                // do we have an ellipsoid?
                var ellipse = match(exports$2, ellps);

                if (!ellipse) {
                  ellipse = WGS84;
                }

                a = ellipse.a;
                b = ellipse.b;
                rf = ellipse.rf;
              }

              if (rf && !b) {
                b = (1.0 - 1.0 / rf) * a;
              }

              if (rf === 0 || Math.abs(a - b) < EPSLN) {
                sphere = true;
                b = a;
              }

              return {
                a: a,
                b: b,
                rf: rf,
                sphere: sphere
              };
            }

            var exports$3 = {};
            exports$3.wgs84 = {
              towgs84: "0,0,0",
              ellipse: "WGS84",
              datumName: "WGS84"
            };
            exports$3.ch1903 = {
              towgs84: "674.374,15.056,405.346",
              ellipse: "bessel",
              datumName: "swiss"
            };
            exports$3.ggrs87 = {
              towgs84: "-199.87,74.79,246.62",
              ellipse: "GRS80",
              datumName: "Greek_Geodetic_Reference_System_1987"
            };
            exports$3.nad83 = {
              towgs84: "0,0,0",
              ellipse: "GRS80",
              datumName: "North_American_Datum_1983"
            };
            exports$3.nad27 = {
              nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
              ellipse: "clrk66",
              datumName: "North_American_Datum_1927"
            };
            exports$3.potsdam = {
              towgs84: "606.0,23.0,413.0",
              ellipse: "bessel",
              datumName: "Potsdam Rauenberg 1950 DHDN"
            };
            exports$3.carthage = {
              towgs84: "-263.0,6.0,431.0",
              ellipse: "clark80",
              datumName: "Carthage 1934 Tunisia"
            };
            exports$3.hermannskogel = {
              towgs84: "653.0,-212.0,449.0",
              ellipse: "bessel",
              datumName: "Hermannskogel"
            };
            exports$3.osni52 = {
              towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
              ellipse: "airy",
              datumName: "Irish National"
            };
            exports$3.ire65 = {
              towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
              ellipse: "mod_airy",
              datumName: "Ireland 1965"
            };
            exports$3.rassadiran = {
              towgs84: "-133.63,-157.5,-158.62",
              ellipse: "intl",
              datumName: "Rassadiran"
            };
            exports$3.nzgd49 = {
              towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
              ellipse: "intl",
              datumName: "New Zealand Geodetic Datum 1949"
            };
            exports$3.osgb36 = {
              towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
              ellipse: "airy",
              datumName: "Airy 1830"
            };
            exports$3.s_jtsk = {
              towgs84: "589,76,480",
              ellipse: 'bessel',
              datumName: 'S-JTSK (Ferro)'
            };
            exports$3.beduaram = {
              towgs84: '-106,-87,188',
              ellipse: 'clrk80',
              datumName: 'Beduaram'
            };
            exports$3.gunung_segara = {
              towgs84: '-403,684,41',
              ellipse: 'bessel',
              datumName: 'Gunung Segara Jakarta'
            };
            exports$3.rnb72 = {
              towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
              ellipse: "intl",
              datumName: "Reseau National Belge 1972"
            };

            function datum(datumCode, datum_params, a, b, es, ep2) {
              var out = {};

              if (datumCode === undefined || datumCode === 'none') {
                out.datum_type = PJD_NODATUM;
              } else {
                out.datum_type = PJD_WGS84;
              }

              if (datum_params) {
                out.datum_params = datum_params.map(parseFloat);

                if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
                  out.datum_type = PJD_3PARAM;
                }

                if (out.datum_params.length > 3) {
                  if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
                    out.datum_type = PJD_7PARAM;
                    out.datum_params[3] *= SEC_TO_RAD;
                    out.datum_params[4] *= SEC_TO_RAD;
                    out.datum_params[5] *= SEC_TO_RAD;
                    out.datum_params[6] = out.datum_params[6] / 1000000.0 + 1.0;
                  }
                }
              }

              out.a = a; //datum object also uses these values

              out.b = b;
              out.es = es;
              out.ep2 = ep2;
              return out;
            }

            function Projection(srsCode, callback) {
              if (!(this instanceof Projection)) {
                return new Projection(srsCode);
              }

              callback = callback || function (error) {
                if (error) {
                  throw error;
                }
              };

              var json = parse(srsCode);

              if (typeof json !== 'object') {
                callback(srsCode);
                return;
              }

              var ourProj = Projection.projections.get(json.projName);

              if (!ourProj) {
                callback(srsCode);
                return;
              }

              if (json.datumCode && json.datumCode !== 'none') {
                var datumDef = match(exports$3, json.datumCode);

                if (datumDef) {
                  json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;
                  json.ellps = datumDef.ellipse;
                  json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
                }
              }

              json.k0 = json.k0 || 1.0;
              json.axis = json.axis || 'enu';
              json.ellps = json.ellps || 'wgs84';
              var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
              var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
              var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);
              extend(this, json); // transfer everything over from the projection because we don't know what we'll need

              extend(this, ourProj); // transfer all the methods from the projection
              // copy the 4 things over we calulated in deriveConstants.sphere

              this.a = sphere_.a;
              this.b = sphere_.b;
              this.rf = sphere_.rf;
              this.sphere = sphere_.sphere; // copy the 3 things we calculated in deriveConstants.eccentricity

              this.es = ecc.es;
              this.e = ecc.e;
              this.ep2 = ecc.ep2; // add in the datum object

              this.datum = datumObj; // init the projection

              this.init(); // legecy callback from back in the day when it went to spatialreference.org

              callback(null, this);
            }

            Projection.projections = projections;
            Projection.projections.start();

            function compareDatums(source, dest) {
              if (source.datum_type !== dest.datum_type) {
                return false; // false, datums are not equal
              } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {
                // the tolerance for es is to ensure that GRS80 and WGS84
                // are considered identical
                return false;
              } else if (source.datum_type === PJD_3PARAM) {
                return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2];
              } else if (source.datum_type === PJD_7PARAM) {
                return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6];
              } else {
                return true; // datums are equal
              }
            } // cs_compare_datums()

            /*
             * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates
             * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),
             * according to the current ellipsoid parameters.
             *
             *    Latitude  : Geodetic latitude in radians                     (input)
             *    Longitude : Geodetic longitude in radians                    (input)
             *    Height    : Geodetic height, in meters                       (input)
             *    X         : Calculated Geocentric X coordinate, in meters    (output)
             *    Y         : Calculated Geocentric Y coordinate, in meters    (output)
             *    Z         : Calculated Geocentric Z coordinate, in meters    (output)
             *
             */

            function geodeticToGeocentric(p, es, a) {
              var Longitude = p.x;
              var Latitude = p.y;
              var Height = p.z ? p.z : 0; //Z value not always supplied

              var Rn;
              /*  Earth radius at location  */

              var Sin_Lat;
              /*  Math.sin(Latitude)  */

              var Sin2_Lat;
              /*  Square of Math.sin(Latitude)  */

              var Cos_Lat;
              /*  Math.cos(Latitude)  */

              /*
               ** Don't blow up if Latitude is just a little out of the value
               ** range as it may just be a rounding issue.  Also removed longitude
               ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
               */

              if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
                Latitude = -HALF_PI;
              } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
                Latitude = HALF_PI;
              } else if (Latitude < -HALF_PI) {
                /* Latitude out of range */
                //..reportError('geocent:lat out of range:' + Latitude);
                return {
                  x: -Infinity,
                  y: -Infinity,
                  z: p.z
                };
              } else if (Latitude > HALF_PI) {
                /* Latitude out of range */
                return {
                  x: Infinity,
                  y: Infinity,
                  z: p.z
                };
              }

              if (Longitude > Math.PI) {
                Longitude -= 2 * Math.PI;
              }

              Sin_Lat = Math.sin(Latitude);
              Cos_Lat = Math.cos(Latitude);
              Sin2_Lat = Sin_Lat * Sin_Lat;
              Rn = a / Math.sqrt(1.0e0 - es * Sin2_Lat);
              return {
                x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
                y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
                z: (Rn * (1 - es) + Height) * Sin_Lat
              };
            } // cs_geodetic_to_geocentric()

            function geocentricToGeodetic(p, es, a, b) {
              /* local defintions and variables */

              /* end-criterium of loop, accuracy of sin(Latitude) */
              var genau = 1e-12;
              var genau2 = genau * genau;
              var maxiter = 30;
              var P;
              /* distance between semi-minor axis and location */

              var RR;
              /* distance between center and location */

              var CT;
              /* sin of geocentric latitude */

              var ST;
              /* cos of geocentric latitude */

              var RX;
              var RK;
              var RN;
              /* Earth radius at location */

              var CPHI0;
              /* cos of start or old geodetic latitude in iterations */

              var SPHI0;
              /* sin of start or old geodetic latitude in iterations */

              var CPHI;
              /* cos of searched geodetic latitude */

              var SPHI;
              /* sin of searched geodetic latitude */

              var SDPHI;
              /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */

              var iter;
              /* # of continous iteration, max. 30 is always enough (s.a.) */

              var X = p.x;
              var Y = p.y;
              var Z = p.z ? p.z : 0.0; //Z value not always supplied

              var Longitude;
              var Latitude;
              var Height;
              P = Math.sqrt(X * X + Y * Y);
              RR = Math.sqrt(X * X + Y * Y + Z * Z);
              /*      special cases for latitude and longitude */

              if (P / a < genau) {
                /*  special case, if P=0. (X=0., Y=0.) */
                Longitude = 0.0;
                /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
                 *  of ellipsoid (=center of mass), Latitude becomes PI/2 */

                if (RR / a < genau) {
                  Latitude = HALF_PI;
                  Height = -b;
                  return {
                    x: p.x,
                    y: p.y,
                    z: p.z
                  };
                }
              } else {
                /*  ellipsoidal (geodetic) longitude
                 *  interval: -PI < Longitude <= +PI */
                Longitude = Math.atan2(Y, X);
              }
              /* --------------------------------------------------------------
               * Following iterative algorithm was developped by
               * "Institut for Erdmessung", University of Hannover, July 1988.
               * Internet: www.ife.uni-hannover.de
               * Iterative computation of CPHI,SPHI and Height.
               * Iteration of CPHI and SPHI to 10**-12 radian resp.
               * 2*10**-7 arcsec.
               * --------------------------------------------------------------
               */


              CT = Z / RR;
              ST = P / RR;
              RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
              CPHI0 = ST * (1.0 - es) * RX;
              SPHI0 = CT * RX;
              iter = 0;
              /* loop to find sin(Latitude) resp. Latitude
               * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */

              do {
                iter++;
                RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);
                /*  ellipsoidal (geodetic) height */

                Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);
                RK = es * RN / (RN + Height);
                RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
                CPHI = ST * (1.0 - RK) * RX;
                SPHI = CT * RX;
                SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
                CPHI0 = CPHI;
                SPHI0 = SPHI;
              } while (SDPHI * SDPHI > genau2 && iter < maxiter);
              /*      ellipsoidal (geodetic) latitude */


              Latitude = Math.atan(SPHI / Math.abs(CPHI));
              return {
                x: Longitude,
                y: Latitude,
                z: Height
              };
            } // cs_geocentric_to_geodetic()

            /****************************************************************/
            // pj_geocentic_to_wgs84( p )
            //  p = point to transform in geocentric coordinates (x,y,z)

            /** point object, nothing fancy, just allows values to be
                passed back and forth by reference rather than by value.
                Other point classes may be used as long as they have
                x and y properties, which will get modified in the transform method.
            */

            function geocentricToWgs84(p, datum_type, datum_params) {
              if (datum_type === PJD_3PARAM) {
                // if( x[io] === HUGE_VAL )
                //    continue;
                return {
                  x: p.x + datum_params[0],
                  y: p.y + datum_params[1],
                  z: p.z + datum_params[2]
                };
              } else if (datum_type === PJD_7PARAM) {
                var Dx_BF = datum_params[0];
                var Dy_BF = datum_params[1];
                var Dz_BF = datum_params[2];
                var Rx_BF = datum_params[3];
                var Ry_BF = datum_params[4];
                var Rz_BF = datum_params[5];
                var M_BF = datum_params[6]; // if( x[io] === HUGE_VAL )
                //    continue;

                return {
                  x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
                  y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
                  z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
                };
              }
            } // cs_geocentric_to_wgs84

            /****************************************************************/
            // pj_geocentic_from_wgs84()
            //  coordinate system definition,
            //  point to transform in geocentric coordinates (x,y,z)

            function geocentricFromWgs84(p, datum_type, datum_params) {
              if (datum_type === PJD_3PARAM) {
                //if( x[io] === HUGE_VAL )
                //    continue;
                return {
                  x: p.x - datum_params[0],
                  y: p.y - datum_params[1],
                  z: p.z - datum_params[2]
                };
              } else if (datum_type === PJD_7PARAM) {
                var Dx_BF = datum_params[0];
                var Dy_BF = datum_params[1];
                var Dz_BF = datum_params[2];
                var Rx_BF = datum_params[3];
                var Ry_BF = datum_params[4];
                var Rz_BF = datum_params[5];
                var M_BF = datum_params[6];
                var x_tmp = (p.x - Dx_BF) / M_BF;
                var y_tmp = (p.y - Dy_BF) / M_BF;
                var z_tmp = (p.z - Dz_BF) / M_BF; //if( x[io] === HUGE_VAL )
                //    continue;

                return {
                  x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
                  y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
                  z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
                };
              } //cs_geocentric_from_wgs84()

            }

            function checkParams(type) {
              return type === PJD_3PARAM || type === PJD_7PARAM;
            }

            function datum_transform (source, dest, point) {
              // Short cut if the datums are identical.
              if (compareDatums(source, dest)) {
                return point; // in this case, zero is sucess,
                // whereas cs_compare_datums returns 1 to indicate TRUE
                // confusing, should fix this
              } // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest


              if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
                return point;
              } // If this datum requires grid shifts, then apply it to geodetic coordinates.
              // Do we need to go through geocentric coordinates?


              if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) && !checkParams(dest.datum_type)) {
                return point;
              } // Convert to geocentric coordinates.


              point = geodeticToGeocentric(point, source.es, source.a); // Convert between datums

              if (checkParams(source.datum_type)) {
                point = geocentricToWgs84(point, source.datum_type, source.datum_params);
              }

              if (checkParams(dest.datum_type)) {
                point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);
              }

              return geocentricToGeodetic(point, dest.es, dest.a, dest.b);
            }

            function adjust_axis (crs, denorm, point) {
              var xin = point.x,
                  yin = point.y,
                  zin = point.z || 0.0;
              var v, t, i;
              var out = {};

              for (i = 0; i < 3; i++) {
                if (denorm && i === 2 && point.z === undefined) {
                  continue;
                }

                if (i === 0) {
                  v = xin;
                  t = 'x';
                } else if (i === 1) {
                  v = yin;
                  t = 'y';
                } else {
                  v = zin;
                  t = 'z';
                }

                switch (crs.axis[i]) {
                  case 'e':
                    out[t] = v;
                    break;

                  case 'w':
                    out[t] = -v;
                    break;

                  case 'n':
                    out[t] = v;
                    break;

                  case 's':
                    out[t] = -v;
                    break;

                  case 'u':
                    if (point[t] !== undefined) {
                      out.z = v;
                    }

                    break;

                  case 'd':
                    if (point[t] !== undefined) {
                      out.z = -v;
                    }

                    break;

                  default:
                    //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
                    return null;
                }
              }

              return out;
            }

            function common (array) {
              var out = {
                x: array[0],
                y: array[1]
              };

              if (array.length > 2) {
                out.z = array[2];
              }

              if (array.length > 3) {
                out.m = array[3];
              }

              return out;
            }

            function checkSanity (point) {
              checkCoord(point.x);
              checkCoord(point.y);
            }

            function checkCoord(num) {
              if (typeof Number.isFinite === 'function') {
                if (Number.isFinite(num)) {
                  return;
                }

                throw new TypeError('coordinates must be finite numbers');
              }

              if (typeof num !== 'number' || num !== num || !isFinite(num)) {
                throw new TypeError('coordinates must be finite numbers');
              }
            }

            function checkNotWGS(source, dest) {
              return (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84' || (dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84';
            }

            function transform(source, dest, point) {
              var wgs84;

              if (Array.isArray(point)) {
                point = common(point);
              }

              checkSanity(point); // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84

              if (source.datum && dest.datum && checkNotWGS(source, dest)) {
                wgs84 = new Projection('WGS84');
                point = transform(source, wgs84, point);
                source = wgs84;
              } // DGR, 2010/11/12


              if (source.axis !== 'enu') {
                point = adjust_axis(source, false, point);
              } // Transform source points to long/lat, if they aren't already.


              if (source.projName === 'longlat') {
                point = {
                  x: point.x * D2R,
                  y: point.y * D2R
                };
              } else {
                if (source.to_meter) {
                  point = {
                    x: point.x * source.to_meter,
                    y: point.y * source.to_meter
                  };
                }

                point = source.inverse(point); // Convert Cartesian to longlat
              } // Adjust for the prime meridian if necessary


              if (source.from_greenwich) {
                point.x += source.from_greenwich;
              } // Convert datums if needed, and if possible.


              point = datum_transform(source.datum, dest.datum, point); // Adjust for the prime meridian if necessary

              if (dest.from_greenwich) {
                point = {
                  x: point.x - dest.from_greenwich,
                  y: point.y
                };
              }

              if (dest.projName === 'longlat') {
                // convert radians to decimal degrees
                point = {
                  x: point.x * R2D,
                  y: point.y * R2D
                };
              } else {
                // else project
                point = dest.forward(point);

                if (dest.to_meter) {
                  point = {
                    x: point.x / dest.to_meter,
                    y: point.y / dest.to_meter
                  };
                }
              } // DGR, 2010/11/12


              if (dest.axis !== 'enu') {
                return adjust_axis(dest, true, point);
              }

              return point;
            }

            var wgs84 = Projection('WGS84');

            function transformer(from, to, coords) {
              var transformedArray, out, keys;

              if (Array.isArray(coords)) {
                transformedArray = transform(from, to, coords);

                if (coords.length === 3) {
                  return [transformedArray.x, transformedArray.y, transformedArray.z];
                } else {
                  return [transformedArray.x, transformedArray.y];
                }
              } else {
                out = transform(from, to, coords);
                keys = Object.keys(coords);

                if (keys.length === 2) {
                  return out;
                }

                keys.forEach(function (key) {
                  if (key === 'x' || key === 'y') {
                    return;
                  }

                  out[key] = coords[key];
                });
                return out;
              }
            }

            function checkProj(item) {
              if (item instanceof Projection) {
                return item;
              }

              if (item.oProj) {
                return item.oProj;
              }

              return Projection(item);
            }

            function proj4(fromProj, toProj, coord) {
              fromProj = checkProj(fromProj);
              var single = false;
              var obj;

              if (typeof toProj === 'undefined') {
                toProj = fromProj;
                fromProj = wgs84;
                single = true;
              } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {
                coord = toProj;
                toProj = fromProj;
                fromProj = wgs84;
                single = true;
              }

              toProj = checkProj(toProj);

              if (coord) {
                return transformer(fromProj, toProj, coord);
              } else {
                obj = {
                  forward: function (coords) {
                    return transformer(fromProj, toProj, coords);
                  },
                  inverse: function (coords) {
                    return transformer(toProj, fromProj, coords);
                  }
                };

                if (single) {
                  obj.oProj = toProj;
                }

                return obj;
              }
            }

            /**
             * UTM zones are grouped, and assigned to one of a group of 6
             * sets.
             *
             * {int} @private
             */
            var NUM_100K_SETS = 6;
            /**
             * The column letters (for easting) of the lower left value, per
             * set.
             *
             * {string} @private
             */

            var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';
            /**
             * The row letters (for northing) of the lower left value, per
             * set.
             *
             * {string} @private
             */

            var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';
            var A = 65; // A

            var I = 73; // I

            var O = 79; // O

            var V = 86; // V

            var Z = 90; // Z

            var mgrs = {
              forward: forward$1,
              inverse: inverse$1,
              toPoint: toPoint
            };
            /**
             * Conversion of lat/lon to MGRS.
             *
             * @param {object} ll Object literal with lat and lon properties on a
             *     WGS84 ellipsoid.
             * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for
             *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.
             * @return {string} the MGRS string for the given location and accuracy.
             */

            function forward$1(ll, accuracy) {
              accuracy = accuracy || 5; // default accuracy 1m

              return encode$1(LLtoUTM({
                lat: ll[1],
                lon: ll[0]
              }), accuracy);
            }
            /**
             * Conversion of MGRS to lat/lon.
             *
             * @param {string} mgrs MGRS string.
             * @return {array} An array with left (longitude), bottom (latitude), right
             *     (longitude) and top (latitude) values in WGS84, representing the
             *     bounding box for the provided MGRS reference.
             */

            function inverse$1(mgrs) {
              var bbox = UTMtoLL(decode$1(mgrs.toUpperCase()));

              if (bbox.lat && bbox.lon) {
                return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
              }

              return [bbox.left, bbox.bottom, bbox.right, bbox.top];
            }
            function toPoint(mgrs) {
              var bbox = UTMtoLL(decode$1(mgrs.toUpperCase()));

              if (bbox.lat && bbox.lon) {
                return [bbox.lon, bbox.lat];
              }

              return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
            }
            /**
             * Conversion from degrees to radians.
             *
             * @private
             * @param {number} deg the angle in degrees.
             * @return {number} the angle in radians.
             */

            function degToRad(deg) {
              return deg * (Math.PI / 180.0);
            }
            /**
             * Conversion from radians to degrees.
             *
             * @private
             * @param {number} rad the angle in radians.
             * @return {number} the angle in degrees.
             */


            function radToDeg(rad) {
              return 180.0 * (rad / Math.PI);
            }
            /**
             * Converts a set of Longitude and Latitude co-ordinates to UTM
             * using the WGS84 ellipsoid.
             *
             * @private
             * @param {object} ll Object literal with lat and lon properties
             *     representing the WGS84 coordinate to be converted.
             * @return {object} Object literal containing the UTM value with easting,
             *     northing, zoneNumber and zoneLetter properties, and an optional
             *     accuracy property in digits. Returns null if the conversion failed.
             */


            function LLtoUTM(ll) {
              var Lat = ll.lat;
              var Long = ll.lon;
              var a = 6378137.0; //ellip.radius;

              var eccSquared = 0.00669438; //ellip.eccsq;

              var k0 = 0.9996;
              var LongOrigin;
              var eccPrimeSquared;
              var N, T, C, A, M;
              var LatRad = degToRad(Lat);
              var LongRad = degToRad(Long);
              var LongOriginRad;
              var ZoneNumber; // (int)

              ZoneNumber = Math.floor((Long + 180) / 6) + 1; //Make sure the longitude 180.00 is in Zone 60

              if (Long === 180) {
                ZoneNumber = 60;
              } // Special zone for Norway


              if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {
                ZoneNumber = 32;
              } // Special zones for Svalbard


              if (Lat >= 72.0 && Lat < 84.0) {
                if (Long >= 0.0 && Long < 9.0) {
                  ZoneNumber = 31;
                } else if (Long >= 9.0 && Long < 21.0) {
                  ZoneNumber = 33;
                } else if (Long >= 21.0 && Long < 33.0) {
                  ZoneNumber = 35;
                } else if (Long >= 33.0 && Long < 42.0) {
                  ZoneNumber = 37;
                }
              }

              LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin
              // in middle of
              // zone

              LongOriginRad = degToRad(LongOrigin);
              eccPrimeSquared = eccSquared / (1 - eccSquared);
              N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
              T = Math.tan(LatRad) * Math.tan(LatRad);
              C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
              A = Math.cos(LatRad) * (LongRad - LongOriginRad);
              M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - 35 * eccSquared * eccSquared * eccSquared / 3072 * Math.sin(6 * LatRad));
              var UTMEasting = k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0;
              var UTMNorthing = k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0));

              if (Lat < 0.0) {
                UTMNorthing += 10000000.0; //10000000 meter offset for
                // southern hemisphere
              }

              return {
                northing: Math.round(UTMNorthing),
                easting: Math.round(UTMEasting),
                zoneNumber: ZoneNumber,
                zoneLetter: getLetterDesignator(Lat)
              };
            }
            /**
             * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience
             * class where the Zone can be specified as a single string eg."60N" which
             * is then broken down into the ZoneNumber and ZoneLetter.
             *
             * @private
             * @param {object} utm An object literal with northing, easting, zoneNumber
             *     and zoneLetter properties. If an optional accuracy property is
             *     provided (in meters), a bounding box will be returned instead of
             *     latitude and longitude.
             * @return {object} An object literal containing either lat and lon values
             *     (if no accuracy was provided), or top, right, bottom and left values
             *     for the bounding box calculated according to the provided accuracy.
             *     Returns null if the conversion failed.
             */


            function UTMtoLL(utm) {
              var UTMNorthing = utm.northing;
              var UTMEasting = utm.easting;
              var zoneLetter = utm.zoneLetter;
              var zoneNumber = utm.zoneNumber; // check the ZoneNummber is valid

              if (zoneNumber < 0 || zoneNumber > 60) {
                return null;
              }

              var k0 = 0.9996;
              var a = 6378137.0; //ellip.radius;

              var eccSquared = 0.00669438; //ellip.eccsq;

              var eccPrimeSquared;
              var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
              var N1, T1, C1, R1, D, M;
              var LongOrigin;
              var mu, phi1Rad; // remove 500,000 meter offset for longitude

              var x = UTMEasting - 500000.0;
              var y = UTMNorthing; // We must know somehow if we are in the Northern or Southern
              // hemisphere, this is the only time we use the letter So even
              // if the Zone letter isn't exactly correct it should indicate
              // the hemisphere correctly

              if (zoneLetter < 'N') {
                y -= 10000000.0; // remove 10,000,000 meter offset used
                // for southern hemisphere
              } // There are 60 zones with zone 1 being at West -180 to -174


              LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin
              // in middle of
              // zone

              eccPrimeSquared = eccSquared / (1 - eccSquared);
              M = y / k0;
              mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));
              phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + 151 * e1 * e1 * e1 / 96 * Math.sin(6 * mu); // double phi1 = ProjMath.radToDeg(phi1Rad);

              N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
              T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
              C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
              R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
              D = x / (N1 * k0);
              var lat = phi1Rad - N1 * Math.tan(phi1Rad) / R1 * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);
              lat = radToDeg(lat);
              var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
              lon = LongOrigin + radToDeg(lon);
              var result;

              if (utm.accuracy) {
                var topRight = UTMtoLL({
                  northing: utm.northing + utm.accuracy,
                  easting: utm.easting + utm.accuracy,
                  zoneLetter: utm.zoneLetter,
                  zoneNumber: utm.zoneNumber
                });
                result = {
                  top: topRight.lat,
                  right: topRight.lon,
                  bottom: lat,
                  left: lon
                };
              } else {
                result = {
                  lat: lat,
                  lon: lon
                };
              }

              return result;
            }
            /**
             * Calculates the MGRS letter designator for the given latitude.
             *
             * @private
             * @param {number} lat The latitude in WGS84 to get the letter designator
             *     for.
             * @return {char} The letter designator.
             */


            function getLetterDesignator(lat) {
              //This is here as an error flag to show that the Latitude is
              //outside MGRS limits
              var LetterDesignator = 'Z';

              if (84 >= lat && lat >= 72) {
                LetterDesignator = 'X';
              } else if (72 > lat && lat >= 64) {
                LetterDesignator = 'W';
              } else if (64 > lat && lat >= 56) {
                LetterDesignator = 'V';
              } else if (56 > lat && lat >= 48) {
                LetterDesignator = 'U';
              } else if (48 > lat && lat >= 40) {
                LetterDesignator = 'T';
              } else if (40 > lat && lat >= 32) {
                LetterDesignator = 'S';
              } else if (32 > lat && lat >= 24) {
                LetterDesignator = 'R';
              } else if (24 > lat && lat >= 16) {
                LetterDesignator = 'Q';
              } else if (16 > lat && lat >= 8) {
                LetterDesignator = 'P';
              } else if (8 > lat && lat >= 0) {
                LetterDesignator = 'N';
              } else if (0 > lat && lat >= -8) {
                LetterDesignator = 'M';
              } else if (-8 > lat && lat >= -16) {
                LetterDesignator = 'L';
              } else if (-16 > lat && lat >= -24) {
                LetterDesignator = 'K';
              } else if (-24 > lat && lat >= -32) {
                LetterDesignator = 'J';
              } else if (-32 > lat && lat >= -40) {
                LetterDesignator = 'H';
              } else if (-40 > lat && lat >= -48) {
                LetterDesignator = 'G';
              } else if (-48 > lat && lat >= -56) {
                LetterDesignator = 'F';
              } else if (-56 > lat && lat >= -64) {
                LetterDesignator = 'E';
              } else if (-64 > lat && lat >= -72) {
                LetterDesignator = 'D';
              } else if (-72 > lat && lat >= -80) {
                LetterDesignator = 'C';
              }

              return LetterDesignator;
            }
            /**
             * Encodes a UTM location as MGRS string.
             *
             * @private
             * @param {object} utm An object literal with easting, northing,
             *     zoneLetter, zoneNumber
             * @param {number} accuracy Accuracy in digits (1-5).
             * @return {string} MGRS string for the given UTM location.
             */


            function encode$1(utm, accuracy) {
              // prepend with leading zeroes
              var seasting = "00000" + utm.easting,
                  snorthing = "00000" + utm.northing;
              return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
            }
            /**
             * Get the two letter 100k designator for a given UTM easting,
             * northing and zone number value.
             *
             * @private
             * @param {number} easting
             * @param {number} northing
             * @param {number} zoneNumber
             * @return the two letter 100k designator for the given UTM location.
             */


            function get100kID(easting, northing, zoneNumber) {
              var setParm = get100kSetForZone(zoneNumber);
              var setColumn = Math.floor(easting / 100000);
              var setRow = Math.floor(northing / 100000) % 20;
              return getLetter100kID(setColumn, setRow, setParm);
            }
            /**
             * Given a UTM zone number, figure out the MGRS 100K set it is in.
             *
             * @private
             * @param {number} i An UTM zone number.
             * @return {number} the 100k set the UTM zone is in.
             */


            function get100kSetForZone(i) {
              var setParm = i % NUM_100K_SETS;

              if (setParm === 0) {
                setParm = NUM_100K_SETS;
              }

              return setParm;
            }
            /**
             * Get the two-letter MGRS 100k designator given information
             * translated from the UTM northing, easting and zone number.
             *
             * @private
             * @param {number} column the column index as it relates to the MGRS
             *        100k set spreadsheet, created from the UTM easting.
             *        Values are 1-8.
             * @param {number} row the row index as it relates to the MGRS 100k set
             *        spreadsheet, created from the UTM northing value. Values
             *        are from 0-19.
             * @param {number} parm the set block, as it relates to the MGRS 100k set
             *        spreadsheet, created from the UTM zone. Values are from
             *        1-60.
             * @return two letter MGRS 100k code.
             */


            function getLetter100kID(column, row, parm) {
              // colOrigin and rowOrigin are the letters at the origin of the set
              var index = parm - 1;
              var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
              var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index); // colInt and rowInt are the letters to build to return

              var colInt = colOrigin + column - 1;
              var rowInt = rowOrigin + row;
              var rollover = false;

              if (colInt > Z) {
                colInt = colInt - Z + A - 1;
                rollover = true;
              }

              if (colInt === I || colOrigin < I && colInt > I || (colInt > I || colOrigin < I) && rollover) {
                colInt++;
              }

              if (colInt === O || colOrigin < O && colInt > O || (colInt > O || colOrigin < O) && rollover) {
                colInt++;

                if (colInt === I) {
                  colInt++;
                }
              }

              if (colInt > Z) {
                colInt = colInt - Z + A - 1;
              }

              if (rowInt > V) {
                rowInt = rowInt - V + A - 1;
                rollover = true;
              } else {
                rollover = false;
              }

              if (rowInt === I || rowOrigin < I && rowInt > I || (rowInt > I || rowOrigin < I) && rollover) {
                rowInt++;
              }

              if (rowInt === O || rowOrigin < O && rowInt > O || (rowInt > O || rowOrigin < O) && rollover) {
                rowInt++;

                if (rowInt === I) {
                  rowInt++;
                }
              }

              if (rowInt > V) {
                rowInt = rowInt - V + A - 1;
              }

              var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
              return twoLetter;
            }
            /**
             * Decode the UTM parameters from a MGRS string.
             *
             * @private
             * @param {string} mgrsString an UPPERCASE coordinate string is expected.
             * @return {object} An object literal with easting, northing, zoneLetter,
             *     zoneNumber and accuracy (in meters) properties.
             */


            function decode$1(mgrsString) {
              if (mgrsString && mgrsString.length === 0) {
                throw "MGRSPoint coverting from nothing";
              }

              var length = mgrsString.length;
              var hunK = null;
              var sb = "";
              var testChar;
              var i = 0; // get Zone number

              while (!/[A-Z]/.test(testChar = mgrsString.charAt(i))) {
                if (i >= 2) {
                  throw "MGRSPoint bad conversion from: " + mgrsString;
                }

                sb += testChar;
                i++;
              }

              var zoneNumber = parseInt(sb, 10);

              if (i === 0 || i + 3 > length) {
                // A good MGRS string has to be 4-5 digits long,
                // ##AAA/#AAA at least.
                throw "MGRSPoint bad conversion from: " + mgrsString;
              }

              var zoneLetter = mgrsString.charAt(i++); // Should we check the zone letter here? Why not.

              if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {
                throw "MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString;
              }

              hunK = mgrsString.substring(i, i += 2);
              var set = get100kSetForZone(zoneNumber);
              var east100k = getEastingFromChar(hunK.charAt(0), set);
              var north100k = getNorthingFromChar(hunK.charAt(1), set); // We have a bug where the northing may be 2000000 too low.
              // How
              // do we know when to roll over?

              while (north100k < getMinNorthing(zoneLetter)) {
                north100k += 2000000;
              } // calculate the char index for easting/northing separator


              var remainder = length - i;

              if (remainder % 2 !== 0) {
                throw "MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString;
              }

              var sep = remainder / 2;
              var sepEasting = 0.0;
              var sepNorthing = 0.0;
              var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;

              if (sep > 0) {
                accuracyBonus = 100000.0 / Math.pow(10, sep);
                sepEastingString = mgrsString.substring(i, i + sep);
                sepEasting = parseFloat(sepEastingString) * accuracyBonus;
                sepNorthingString = mgrsString.substring(i + sep);
                sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
              }

              easting = sepEasting + east100k;
              northing = sepNorthing + north100k;
              return {
                easting: easting,
                northing: northing,
                zoneLetter: zoneLetter,
                zoneNumber: zoneNumber,
                accuracy: accuracyBonus
              };
            }
            /**
             * Given the first letter from a two-letter MGRS 100k zone, and given the
             * MGRS table set for the zone number, figure out the easting value that
             * should be added to the other, secondary easting value.
             *
             * @private
             * @param {char} e The first letter from a two-letter MGRS 100´k zone.
             * @param {number} set The MGRS table set for the zone number.
             * @return {number} The easting value for the given letter and set.
             */


            function getEastingFromChar(e, set) {
              // colOrigin is the letter at the origin of the set for the
              // column
              var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
              var eastingValue = 100000.0;
              var rewindMarker = false;

              while (curCol !== e.charCodeAt(0)) {
                curCol++;

                if (curCol === I) {
                  curCol++;
                }

                if (curCol === O) {
                  curCol++;
                }

                if (curCol > Z) {
                  if (rewindMarker) {
                    throw "Bad character: " + e;
                  }

                  curCol = A;
                  rewindMarker = true;
                }

                eastingValue += 100000.0;
              }

              return eastingValue;
            }
            /**
             * Given the second letter from a two-letter MGRS 100k zone, and given the
             * MGRS table set for the zone number, figure out the northing value that
             * should be added to the other, secondary northing value. You have to
             * remember that Northings are determined from the equator, and the vertical
             * cycle of letters mean a 2000000 additional northing meters. This happens
             * approx. every 18 degrees of latitude. This method does *NOT* count any
             * additional northings. You have to figure out how many 2000000 meters need
             * to be added for the zone letter of the MGRS coordinate.
             *
             * @private
             * @param {char} n Second letter of the MGRS 100k zone
             * @param {number} set The MGRS table set number, which is dependent on the
             *     UTM zone number.
             * @return {number} The northing value for the given letter and set.
             */


            function getNorthingFromChar(n, set) {
              if (n > 'V') {
                throw "MGRSPoint given invalid Northing " + n;
              } // rowOrigin is the letter at the origin of the set for the
              // column


              var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
              var northingValue = 0.0;
              var rewindMarker = false;

              while (curRow !== n.charCodeAt(0)) {
                curRow++;

                if (curRow === I) {
                  curRow++;
                }

                if (curRow === O) {
                  curRow++;
                } // fixing a bug making whole application hang in this loop
                // when 'n' is a wrong character


                if (curRow > V) {
                  if (rewindMarker) {
                    // making sure that this loop ends
                    throw "Bad character: " + n;
                  }

                  curRow = A;
                  rewindMarker = true;
                }

                northingValue += 100000.0;
              }

              return northingValue;
            }
            /**
             * The function getMinNorthing returns the minimum northing value of a MGRS
             * zone.
             *
             * Ported from Geotrans' c Lattitude_Band_Value structure table.
             *
             * @private
             * @param {char} zoneLetter The MGRS zone to get the min northing for.
             * @return {number}
             */


            function getMinNorthing(zoneLetter) {
              var northing;

              switch (zoneLetter) {
                case 'C':
                  northing = 1100000.0;
                  break;

                case 'D':
                  northing = 2000000.0;
                  break;

                case 'E':
                  northing = 2800000.0;
                  break;

                case 'F':
                  northing = 3700000.0;
                  break;

                case 'G':
                  northing = 4600000.0;
                  break;

                case 'H':
                  northing = 5500000.0;
                  break;

                case 'J':
                  northing = 6400000.0;
                  break;

                case 'K':
                  northing = 7300000.0;
                  break;

                case 'L':
                  northing = 8200000.0;
                  break;

                case 'M':
                  northing = 9100000.0;
                  break;

                case 'N':
                  northing = 0.0;
                  break;

                case 'P':
                  northing = 800000.0;
                  break;

                case 'Q':
                  northing = 1700000.0;
                  break;

                case 'R':
                  northing = 2600000.0;
                  break;

                case 'S':
                  northing = 3500000.0;
                  break;

                case 'T':
                  northing = 4400000.0;
                  break;

                case 'U':
                  northing = 5300000.0;
                  break;

                case 'V':
                  northing = 6200000.0;
                  break;

                case 'W':
                  northing = 7000000.0;
                  break;

                case 'X':
                  northing = 7900000.0;
                  break;

                default:
                  northing = -1.0;
              }

              if (northing >= 0.0) {
                return northing;
              } else {
                throw "Invalid zone letter: " + zoneLetter;
              }
            }

            function Point$1(x, y, z) {
              if (!(this instanceof Point$1)) {
                return new Point$1(x, y, z);
              }

              if (Array.isArray(x)) {
                this.x = x[0];
                this.y = x[1];
                this.z = x[2] || 0.0;
              } else if (typeof x === 'object') {
                this.x = x.x;
                this.y = x.y;
                this.z = x.z || 0.0;
              } else if (typeof x === 'string' && typeof y === 'undefined') {
                var coords = x.split(',');
                this.x = parseFloat(coords[0], 10);
                this.y = parseFloat(coords[1], 10);
                this.z = parseFloat(coords[2], 10) || 0.0;
              } else {
                this.x = x;
                this.y = y;
                this.z = z || 0.0;
              }

              console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');
            }

            Point$1.fromMGRS = function (mgrsStr) {
              return new Point$1(toPoint(mgrsStr));
            };

            Point$1.prototype.toMGRS = function (accuracy) {
              return forward$1([this.x, this.y], accuracy);
            };

            var version$1 = "2.5.0";

            var C00 = 1;
            var C02 = 0.25;
            var C04 = 0.046875;
            var C06 = 0.01953125;
            var C08 = 0.01068115234375;
            var C22 = 0.75;
            var C44 = 0.46875;
            var C46 = 0.01302083333333333333;
            var C48 = 0.00712076822916666666;
            var C66 = 0.36458333333333333333;
            var C68 = 0.00569661458333333333;
            var C88 = 0.3076171875;
            function pj_enfn (es) {
              var en = [];
              en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
              en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
              var t = es * es;
              en[2] = t * (C44 - es * (C46 + es * C48));
              t *= es;
              en[3] = t * (C66 - es * C68);
              en[4] = t * es * C88;
              return en;
            }

            function pj_mlfn (phi, sphi, cphi, en) {
              cphi *= sphi;
              sphi *= sphi;
              return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));
            }

            var MAX_ITER = 20;
            function pj_inv_mlfn (arg, es, en) {
              var k = 1 / (1 - es);
              var phi = arg;

              for (var i = MAX_ITER; i; --i) {
                /* rarely goes over 2 iterations */
                var s = Math.sin(phi);
                var t = 1 - es * s * s; //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
                //phi -= t * (t * Math.sqrt(t)) * k;

                t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
                phi -= t;

                if (Math.abs(t) < EPSLN) {
                  return phi;
                }
              } //..reportError("cass:pj_inv_mlfn: Convergence error");


              return phi;
            }

            // Heavily based on this tmerc projection implementation
            function init$3() {
              this.x0 = this.x0 !== undefined ? this.x0 : 0;
              this.y0 = this.y0 !== undefined ? this.y0 : 0;
              this.long0 = this.long0 !== undefined ? this.long0 : 0;
              this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

              if (this.es) {
                this.en = pj_enfn(this.es);
                this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
              }
            }
            /**
                Transverse Mercator Forward  - long/lat to x/y
                long/lat in radians
              */

            function forward$2(p) {
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon(lon - this.long0);
              var con;
              var x, y;
              var sin_phi = Math.sin(lat);
              var cos_phi = Math.cos(lat);

              if (!this.es) {
                var b = cos_phi * Math.sin(delta_lon);

                if (Math.abs(Math.abs(b) - 1) < EPSLN) {
                  return 93;
                } else {
                  x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
                  y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
                  b = Math.abs(y);

                  if (b >= 1) {
                    if (b - 1 > EPSLN) {
                      return 93;
                    } else {
                      y = 0;
                    }
                  } else {
                    y = Math.acos(y);
                  }

                  if (lat < 0) {
                    y = -y;
                  }

                  y = this.a * this.k0 * (y - this.lat0) + this.y0;
                }
              } else {
                var al = cos_phi * delta_lon;
                var als = Math.pow(al, 2);
                var c = this.ep2 * Math.pow(cos_phi, 2);
                var cs = Math.pow(c, 2);
                var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
                var t = Math.pow(tq, 2);
                var ts = Math.pow(t, 2);
                con = 1 - this.es * Math.pow(sin_phi, 2);
                al = al / Math.sqrt(con);
                var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);
                x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;
                y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /**
                Transverse Mercator Inverse  -  x/y to long/lat
              */

            function inverse$2(p) {
              var con, phi;
              var lat, lon;
              var x = (p.x - this.x0) * (1 / this.a);
              var y = (p.y - this.y0) * (1 / this.a);

              if (!this.es) {
                var f = Math.exp(x / this.k0);
                var g = 0.5 * (f - 1 / f);
                var temp = this.lat0 + y / this.k0;
                var h = Math.cos(temp);
                con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
                lat = Math.asin(con);

                if (y < 0) {
                  lat = -lat;
                }

                if (g === 0 && h === 0) {
                  lon = 0;
                } else {
                  lon = adjust_lon(Math.atan2(g, h) + this.long0);
                }
              } else {
                // ellipsoidal form
                con = this.ml0 + y / this.k0;
                phi = pj_inv_mlfn(con, this.es, this.en);

                if (Math.abs(phi) < HALF_PI) {
                  var sin_phi = Math.sin(phi);
                  var cos_phi = Math.cos(phi);
                  var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
                  var c = this.ep2 * Math.pow(cos_phi, 2);
                  var cs = Math.pow(c, 2);
                  var t = Math.pow(tan_phi, 2);
                  var ts = Math.pow(t, 2);
                  con = 1 - this.es * Math.pow(sin_phi, 2);
                  var d = x * Math.sqrt(con) / this.k0;
                  var ds = Math.pow(d, 2);
                  con = con * tan_phi;
                  lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
                  lon = adjust_lon(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
                } else {
                  lat = HALF_PI * sign(y);
                  lon = 0;
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$3 = ["Transverse_Mercator", "Transverse Mercator", "tmerc"];
            var tmerc = {
              init: init$3,
              forward: forward$2,
              inverse: inverse$2,
              names: names$3
            };

            function sinh (x) {
              var r = Math.exp(x);
              r = (r - 1 / r) / 2;
              return r;
            }

            function hypot (x, y) {
              x = Math.abs(x);
              y = Math.abs(y);
              var a = Math.max(x, y);
              var b = Math.min(x, y) / (a ? a : 1);
              return a * Math.sqrt(1 + Math.pow(b, 2));
            }

            function log1py (x) {
              var y = 1 + x;
              var z = y - 1;
              return z === 0 ? x : x * Math.log(y) / z;
            }

            function asinhy (x) {
              var y = Math.abs(x);
              y = log1py(y * (1 + y / (hypot(1, y) + 1)));
              return x < 0 ? -y : y;
            }

            function gatg (pp, B) {
              var cos_2B = 2 * Math.cos(2 * B);
              var i = pp.length - 1;
              var h1 = pp[i];
              var h2 = 0;
              var h;

              while (--i >= 0) {
                h = -h2 + cos_2B * h1 + pp[i];
                h2 = h1;
                h1 = h;
              }

              return B + h * Math.sin(2 * B);
            }

            function clens (pp, arg_r) {
              var r = 2 * Math.cos(arg_r);
              var i = pp.length - 1;
              var hr1 = pp[i];
              var hr2 = 0;
              var hr;

              while (--i >= 0) {
                hr = -hr2 + r * hr1 + pp[i];
                hr2 = hr1;
                hr1 = hr;
              }

              return Math.sin(arg_r) * hr;
            }

            function cosh (x) {
              var r = Math.exp(x);
              r = (r + 1 / r) / 2;
              return r;
            }

            function clens_cmplx (pp, arg_r, arg_i) {
              var sin_arg_r = Math.sin(arg_r);
              var cos_arg_r = Math.cos(arg_r);
              var sinh_arg_i = sinh(arg_i);
              var cosh_arg_i = cosh(arg_i);
              var r = 2 * cos_arg_r * cosh_arg_i;
              var i = -2 * sin_arg_r * sinh_arg_i;
              var j = pp.length - 1;
              var hr = pp[j];
              var hi1 = 0;
              var hr1 = 0;
              var hi = 0;
              var hr2;
              var hi2;

              while (--j >= 0) {
                hr2 = hr1;
                hi2 = hi1;
                hr1 = hr;
                hi1 = hi;
                hr = -hr2 + r * hr1 - i * hi1 + pp[j];
                hi = -hi2 + i * hr1 + r * hi1;
              }

              r = sin_arg_r * cosh_arg_i;
              i = cos_arg_r * sinh_arg_i;
              return [r * hr - i * hi, r * hi + i * hr];
            }

            // Heavily based on this etmerc projection implementation
            function init$4() {
              if (this.es === undefined || this.es <= 0) {
                throw new Error('incorrect elliptical usage');
              }

              this.x0 = this.x0 !== undefined ? this.x0 : 0;
              this.y0 = this.y0 !== undefined ? this.y0 : 0;
              this.long0 = this.long0 !== undefined ? this.long0 : 0;
              this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;
              this.cgb = [];
              this.cbg = [];
              this.utg = [];
              this.gtu = [];
              var f = this.es / (1 + Math.sqrt(1 - this.es));
              var n = f / (2 - f);
              var np = n;
              this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675))))));
              this.cbg[0] = n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));
              np = np * n;
              this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
              this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));
              np = np * n;
              this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
              this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));
              np = np * n;
              this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
              this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * (-24832 / 14175)));
              np = np * n;
              this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
              this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));
              np = np * n;
              this.cgb[5] = np * (601676 / 22275);
              this.cbg[5] = np * (444337 / 155925);
              np = Math.pow(n, 2);
              this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
              this.utg[0] = n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
              this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));
              this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
              this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));
              np = np * n;
              this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720))));
              this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));
              np = np * n;
              this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
              this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));
              np = np * n;
              this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
              this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));
              np = np * n;
              this.utg[5] = np * (-20648693 / 638668800);
              this.gtu[5] = np * (212378941 / 319334400);
              var Z = gatg(this.cbg, this.lat0);
              this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));
            }
            function forward$3(p) {
              var Ce = adjust_lon(p.x - this.long0);
              var Cn = p.y;
              Cn = gatg(this.cbg, Cn);
              var sin_Cn = Math.sin(Cn);
              var cos_Cn = Math.cos(Cn);
              var sin_Ce = Math.sin(Ce);
              var cos_Ce = Math.cos(Ce);
              Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
              Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));
              Ce = asinhy(Math.tan(Ce));
              var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);
              Cn = Cn + tmp[0];
              Ce = Ce + tmp[1];
              var x;
              var y;

              if (Math.abs(Ce) <= 2.623395162778) {
                x = this.a * (this.Qn * Ce) + this.x0;
                y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
              } else {
                x = Infinity;
                y = Infinity;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$3(p) {
              var Ce = (p.x - this.x0) * (1 / this.a);
              var Cn = (p.y - this.y0) * (1 / this.a);
              Cn = (Cn - this.Zb) / this.Qn;
              Ce = Ce / this.Qn;
              var lon;
              var lat;

              if (Math.abs(Ce) <= 2.623395162778) {
                var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);
                Cn = Cn + tmp[0];
                Ce = Ce + tmp[1];
                Ce = Math.atan(sinh(Ce));
                var sin_Cn = Math.sin(Cn);
                var cos_Cn = Math.cos(Cn);
                var sin_Ce = Math.sin(Ce);
                var cos_Ce = Math.cos(Ce);
                Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));
                Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);
                lon = adjust_lon(Ce + this.long0);
                lat = gatg(this.cgb, Cn);
              } else {
                lon = Infinity;
                lat = Infinity;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$4 = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc"];
            var etmerc = {
              init: init$4,
              forward: forward$3,
              inverse: inverse$3,
              names: names$4
            };

            function adjust_zone (zone, lon) {
              if (zone === undefined) {
                zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;

                if (zone < 0) {
                  return 0;
                } else if (zone > 60) {
                  return 60;
                }
              }

              return zone;
            }

            var dependsOn = 'etmerc';
            function init$5() {
              var zone = adjust_zone(this.zone, this.long0);

              if (zone === undefined) {
                throw new Error('unknown utm zone');
              }

              this.lat0 = 0;
              this.long0 = (6 * Math.abs(zone) - 183) * D2R;
              this.x0 = 500000;
              this.y0 = this.utmSouth ? 10000000 : 0;
              this.k0 = 0.9996;
              etmerc.init.apply(this);
              this.forward = etmerc.forward;
              this.inverse = etmerc.inverse;
            }
            var names$5 = ["Universal Transverse Mercator System", "utm"];
            var utm = {
              init: init$5,
              names: names$5,
              dependsOn: dependsOn
            };

            function srat (esinp, exp) {
              return Math.pow((1 - esinp) / (1 + esinp), exp);
            }

            var MAX_ITER$1 = 20;
            function init$6() {
              var sphi = Math.sin(this.lat0);
              var cphi = Math.cos(this.lat0);
              cphi *= cphi;
              this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
              this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
              this.phic0 = Math.asin(sphi / this.C);
              this.ratexp = 0.5 * this.C * this.e;
              this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));
            }
            function forward$4(p) {
              var lon = p.x;
              var lat = p.y;
              p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
              p.x = this.C * lon;
              return p;
            }
            function inverse$4(p) {
              var DEL_TOL = 1e-14;
              var lon = p.x / this.C;
              var lat = p.y;
              var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);

              for (var i = MAX_ITER$1; i > 0; --i) {
                lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI;

                if (Math.abs(lat - p.y) < DEL_TOL) {
                  break;
                }

                p.y = lat;
              }
              /* convergence failed */


              if (!i) {
                return null;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$6 = ["gauss"];
            var gauss = {
              init: init$6,
              forward: forward$4,
              inverse: inverse$4,
              names: names$6
            };

            function init$7() {
              gauss.init.apply(this);

              if (!this.rc) {
                return;
              }

              this.sinc0 = Math.sin(this.phic0);
              this.cosc0 = Math.cos(this.phic0);
              this.R2 = 2 * this.rc;

              if (!this.title) {
                this.title = "Oblique Stereographic Alternative";
              }
            }
            function forward$5(p) {
              var sinc, cosc, cosl, k;
              p.x = adjust_lon(p.x - this.long0);
              gauss.forward.apply(this, [p]);
              sinc = Math.sin(p.y);
              cosc = Math.cos(p.y);
              cosl = Math.cos(p.x);
              k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
              p.x = k * cosc * Math.sin(p.x);
              p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
              p.x = this.a * p.x + this.x0;
              p.y = this.a * p.y + this.y0;
              return p;
            }
            function inverse$5(p) {
              var sinc, cosc, lon, lat, rho;
              p.x = (p.x - this.x0) / this.a;
              p.y = (p.y - this.y0) / this.a;
              p.x /= this.k0;
              p.y /= this.k0;

              if (rho = Math.sqrt(p.x * p.x + p.y * p.y)) {
                var c = 2 * Math.atan2(rho, this.R2);
                sinc = Math.sin(c);
                cosc = Math.cos(c);
                lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
                lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
              } else {
                lat = this.phic0;
                lon = 0;
              }

              p.x = lon;
              p.y = lat;
              gauss.inverse.apply(this, [p]);
              p.x = adjust_lon(p.x + this.long0);
              return p;
            }
            var names$7 = ["Stereographic_North_Pole", "Oblique_Stereographic", "Polar_Stereographic", "sterea", "Oblique Stereographic Alternative", "Double_Stereographic"];
            var sterea = {
              init: init$7,
              forward: forward$5,
              inverse: inverse$5,
              names: names$7
            };

            function ssfn_(phit, sinphi, eccen) {
              sinphi *= eccen;
              return Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);
            }
            function init$8() {
              this.coslat0 = Math.cos(this.lat0);
              this.sinlat0 = Math.sin(this.lat0);

              if (this.sphere) {
                if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
                  this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));
                }
              } else {
                if (Math.abs(this.coslat0) <= EPSLN) {
                  if (this.lat0 > 0) {
                    //North pole
                    //trace('stere:north pole');
                    this.con = 1;
                  } else {
                    //South pole
                    //trace('stere:south pole');
                    this.con = -1;
                  }
                }

                this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));

                if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
                  this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
                }

                this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);
                this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
                this.cosX0 = Math.cos(this.X0);
                this.sinX0 = Math.sin(this.X0);
              }
            } // Stereographic forward equations--mapping lat,long to x,y

            function forward$6(p) {
              var lon = p.x;
              var lat = p.y;
              var sinlat = Math.sin(lat);
              var coslat = Math.cos(lat);
              var A, X, sinX, cosX, ts, rh;
              var dlon = adjust_lon(lon - this.long0);

              if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
                //case of the origine point
                //trace('stere:this is the origin point');
                p.x = NaN;
                p.y = NaN;
                return p;
              }

              if (this.sphere) {
                //trace('stere:sphere case');
                A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
                p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
                p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
                return p;
              } else {
                X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;
                cosX = Math.cos(X);
                sinX = Math.sin(X);

                if (Math.abs(this.coslat0) <= EPSLN) {
                  ts = tsfnz(this.e, lat * this.con, this.con * sinlat);
                  rh = 2 * this.a * this.k0 * ts / this.cons;
                  p.x = this.x0 + rh * Math.sin(lon - this.long0);
                  p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0); //trace(p.toString());

                  return p;
                } else if (Math.abs(this.sinlat0) < EPSLN) {
                  //Eq
                  //trace('stere:equateur');
                  A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
                  p.y = A * sinX;
                } else {
                  //other case
                  //trace('stere:normal case');
                  A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
                  p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
                }

                p.x = A * cosX * Math.sin(dlon) + this.x0;
              } //trace(p.toString());


              return p;
            } //* Stereographic inverse equations--mapping x,y to lat/long

            function inverse$6(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon, lat, ts, ce, Chi;
              var rh = Math.sqrt(p.x * p.x + p.y * p.y);

              if (this.sphere) {
                var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
                lon = this.long0;
                lat = this.lat0;

                if (rh <= EPSLN) {
                  p.x = lon;
                  p.y = lat;
                  return p;
                }

                lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);

                if (Math.abs(this.coslat0) < EPSLN) {
                  if (this.lat0 > 0) {
                    lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
                  } else {
                    lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
                  }
                } else {
                  lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
                }

                p.x = lon;
                p.y = lat;
                return p;
              } else {
                if (Math.abs(this.coslat0) <= EPSLN) {
                  if (rh <= EPSLN) {
                    lat = this.lat0;
                    lon = this.long0;
                    p.x = lon;
                    p.y = lat; //trace(p.toString());

                    return p;
                  }

                  p.x *= this.con;
                  p.y *= this.con;
                  ts = rh * this.cons / (2 * this.a * this.k0);
                  lat = this.con * phi2z(this.e, ts);
                  lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
                } else {
                  ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
                  lon = this.long0;

                  if (rh <= EPSLN) {
                    Chi = this.X0;
                  } else {
                    Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
                    lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
                  }

                  lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
                }
              }

              p.x = lon;
              p.y = lat; //trace(p.toString());

              return p;
            }
            var names$8 = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)"];
            var stere = {
              init: init$8,
              forward: forward$6,
              inverse: inverse$6,
              names: names$8,
              ssfn_: ssfn_
            };

            /*
              references:
                Formules et constantes pour le Calcul pour la
                projection cylindrique conforme à axe oblique et pour la transformation entre
                des systèmes de référence.
                http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
              */
            function init$9() {
              var phy0 = this.lat0;
              this.lambda0 = this.long0;
              var sinPhy0 = Math.sin(phy0);
              var semiMajorAxis = this.a;
              var invF = this.rf;
              var flattening = 1 / invF;
              var e2 = 2 * flattening - Math.pow(flattening, 2);
              var e = this.e = Math.sqrt(e2);
              this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
              this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
              this.b0 = Math.asin(sinPhy0 / this.alpha);
              var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
              var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
              var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
              this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
            }
            function forward$7(p) {
              var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
              var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
              var S = -this.alpha * (Sa1 + Sa2) + this.K; // spheric latitude

              var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4); // spheric longitude

              var I = this.alpha * (p.x - this.lambda0); // psoeudo equatorial rotation

              var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));
              var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));
              p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
              p.x = this.R * rotI + this.x0;
              return p;
            }
            function inverse$7(p) {
              var Y = p.x - this.x0;
              var X = p.y - this.y0;
              var rotI = Y / this.R;
              var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);
              var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
              var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));
              var lambda = this.lambda0 + I / this.alpha;
              var S = 0;
              var phy = b;
              var prevPhy = -1000;
              var iteration = 0;

              while (Math.abs(phy - prevPhy) > 0.0000001) {
                if (++iteration > 20) {
                  //...reportError("omercFwdInfinity");
                  return;
                } //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));


                S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
                prevPhy = phy;
                phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
              }

              p.x = lambda;
              p.y = phy;
              return p;
            }
            var names$9 = ["somerc"];
            var somerc = {
              init: init$9,
              forward: forward$7,
              inverse: inverse$7,
              names: names$9
            };

            /* Initialize the Oblique Mercator  projection
                ------------------------------------------*/

            function init$a() {
              this.no_off = this.no_off || false;
              this.no_rot = this.no_rot || false;

              if (isNaN(this.k0)) {
                this.k0 = 1;
              }

              var sinlat = Math.sin(this.lat0);
              var coslat = Math.cos(this.lat0);
              var con = this.e * sinlat;
              this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));
              this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);
              var t0 = tsfnz(this.e, this.lat0, sinlat);
              var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));

              if (dl * dl < 1) {
                dl = 1;
              }

              var fl;
              var gl;

              if (!isNaN(this.longc)) {
                //Central point and azimuth method
                if (this.lat0 >= 0) {
                  fl = dl + Math.sqrt(dl * dl - 1);
                } else {
                  fl = dl - Math.sqrt(dl * dl - 1);
                }

                this.el = fl * Math.pow(t0, this.bl);
                gl = 0.5 * (fl - 1 / fl);
                this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);
                this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;
              } else {
                //2 points method
                var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));
                var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));

                if (this.lat0 >= 0) {
                  this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
                } else {
                  this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
                }

                var hl = Math.pow(t1, this.bl);
                var ll = Math.pow(t2, this.bl);
                fl = this.el / hl;
                gl = 0.5 * (fl - 1 / fl);
                var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);
                var pl = (ll - hl) / (ll + hl);
                var dlon12 = adjust_lon(this.long1 - this.long2);
                this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * dlon12) / pl) / this.bl;
                this.long0 = adjust_lon(this.long0);
                var dlon10 = adjust_lon(this.long1 - this.long0);
                this.gamma0 = Math.atan(Math.sin(this.bl * dlon10) / gl);
                this.alpha = Math.asin(dl * Math.sin(this.gamma0));
              }

              if (this.no_off) {
                this.uc = 0;
              } else {
                if (this.lat0 >= 0) {
                  this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
                } else {
                  this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
                }
              }
            }
            /* Oblique Mercator forward equations--mapping lat,long to x,y
                ----------------------------------------------------------*/

            function forward$8(p) {
              var lon = p.x;
              var lat = p.y;
              var dlon = adjust_lon(lon - this.long0);
              var us, vs;
              var con;

              if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
                if (lat > 0) {
                  con = -1;
                } else {
                  con = 1;
                }

                vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));
                us = -1 * con * HALF_PI * this.al / this.bl;
              } else {
                var t = tsfnz(this.e, lat, Math.sin(lat));
                var ql = this.el / Math.pow(t, this.bl);
                var sl = 0.5 * (ql - 1 / ql);
                var tl = 0.5 * (ql + 1 / ql);
                var vl = Math.sin(this.bl * dlon);
                var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;

                if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {
                  vs = Number.POSITIVE_INFINITY;
                } else {
                  vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;
                }

                if (Math.abs(Math.cos(this.bl * dlon)) <= EPSLN) {
                  us = this.al * this.bl * dlon;
                } else {
                  us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;
                }
              }

              if (this.no_rot) {
                p.x = this.x0 + us;
                p.y = this.y0 + vs;
              } else {
                us -= this.uc;
                p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);
                p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);
              }

              return p;
            }
            function inverse$8(p) {
              var us, vs;

              if (this.no_rot) {
                vs = p.y - this.y0;
                us = p.x - this.x0;
              } else {
                vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);
                us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);
                us += this.uc;
              }

              var qp = Math.exp(-1 * this.bl * vs / this.al);
              var sp = 0.5 * (qp - 1 / qp);
              var tp = 0.5 * (qp + 1 / qp);
              var vp = Math.sin(this.bl * us / this.al);
              var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;
              var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);

              if (Math.abs(up - 1) < EPSLN) {
                p.x = this.long0;
                p.y = HALF_PI;
              } else if (Math.abs(up + 1) < EPSLN) {
                p.x = this.long0;
                p.y = -1 * HALF_PI;
              } else {
                p.y = phi2z(this.e, ts);
                p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);
              }

              return p;
            }
            var names$a = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "omerc"];
            var omerc = {
              init: init$a,
              forward: forward$8,
              inverse: inverse$8,
              names: names$a
            };

            function init$b() {
              // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north
              //double c_lat;                   /* center latitude                      */
              //double c_lon;                   /* center longitude                     */
              //double lat1;                    /* first standard parallel              */
              //double lat2;                    /* second standard parallel             */
              //double r_maj;                   /* major axis                           */
              //double r_min;                   /* minor axis                           */
              //double false_east;              /* x offset in meters                   */
              //double false_north;             /* y offset in meters                   */
              if (!this.lat2) {
                this.lat2 = this.lat1;
              } //if lat2 is not defined


              if (!this.k0) {
                this.k0 = 1;
              }

              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0; // Standard Parallels cannot be equal and on opposite sides of the equator

              if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
                return;
              }

              var temp = this.b / this.a;
              this.e = Math.sqrt(1 - temp * temp);
              var sin1 = Math.sin(this.lat1);
              var cos1 = Math.cos(this.lat1);
              var ms1 = msfnz(this.e, sin1, cos1);
              var ts1 = tsfnz(this.e, this.lat1, sin1);
              var sin2 = Math.sin(this.lat2);
              var cos2 = Math.cos(this.lat2);
              var ms2 = msfnz(this.e, sin2, cos2);
              var ts2 = tsfnz(this.e, this.lat2, sin2);
              var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));

              if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
                this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
              } else {
                this.ns = sin1;
              }

              if (isNaN(this.ns)) {
                this.ns = sin1;
              }

              this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
              this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);

              if (!this.title) {
                this.title = "Lambert Conformal Conic";
              }
            } // Lambert Conformal conic forward equations--mapping lat,long to x,y
            // -----------------------------------------------------------------

            function forward$9(p) {
              var lon = p.x;
              var lat = p.y; // singular cases :

              if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
                lat = sign(lat) * (HALF_PI - 2 * EPSLN);
              }

              var con = Math.abs(Math.abs(lat) - HALF_PI);
              var ts, rh1;

              if (con > EPSLN) {
                ts = tsfnz(this.e, lat, Math.sin(lat));
                rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
              } else {
                con = lat * this.ns;

                if (con <= 0) {
                  return null;
                }

                rh1 = 0;
              }

              var theta = this.ns * adjust_lon(lon - this.long0);
              p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
              p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;
              return p;
            } // Lambert Conformal Conic inverse equations--mapping x,y to lat/long
            // -----------------------------------------------------------------

            function inverse$9(p) {
              var rh1, con, ts;
              var lat, lon;
              var x = (p.x - this.x0) / this.k0;
              var y = this.rh - (p.y - this.y0) / this.k0;

              if (this.ns > 0) {
                rh1 = Math.sqrt(x * x + y * y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(x * x + y * y);
                con = -1;
              }

              var theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * x, con * y);
              }

              if (rh1 !== 0 || this.ns > 0) {
                con = 1 / this.ns;
                ts = Math.pow(rh1 / (this.a * this.f0), con);
                lat = phi2z(this.e, ts);

                if (lat === -9999) {
                  return null;
                }
              } else {
                lat = -HALF_PI;
              }

              lon = adjust_lon(theta / this.ns + this.long0);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$b = ["Lambert Tangential Conformal Conic Projection", "Lambert_Conformal_Conic", "Lambert_Conformal_Conic_2SP", "lcc"];
            var lcc = {
              init: init$b,
              forward: forward$9,
              inverse: inverse$9,
              names: names$b
            };

            function init$c() {
              this.a = 6377397.155;
              this.es = 0.006674372230614;
              this.e = Math.sqrt(this.es);

              if (!this.lat0) {
                this.lat0 = 0.863937979737193;
              }

              if (!this.long0) {
                this.long0 = 0.7417649320975901 - 0.308341501185665;
              }
              /* if scale not set default to 0.9999 */


              if (!this.k0) {
                this.k0 = 0.9999;
              }

              this.s45 = 0.785398163397448;
              /* 45 */

              this.s90 = 2 * this.s45;
              this.fi0 = this.lat0;
              this.e2 = this.es;
              this.e = Math.sqrt(this.e2);
              this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));
              this.uq = 1.04216856380474;
              this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
              this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
              this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
              this.k1 = this.k0;
              this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
              this.s0 = 1.37008346281555;
              this.n = Math.sin(this.s0);
              this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
              this.ad = this.s90 - this.uq;
            }
            /* ellipsoid */

            /* calculate xy from lat/lon */

            /* Constants, identical to inverse transform function */

            function forward$a(p) {
              var gfi, u, deltav, s, d, eps, ro;
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon(lon - this.long0);
              /* Transformation */

              gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);
              u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
              deltav = -delta_lon * this.alfa;
              s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
              d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
              eps = this.n * d;
              ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
              p.y = ro * Math.cos(eps) / 1;
              p.x = ro * Math.sin(eps) / 1;

              if (!this.czech) {
                p.y *= -1;
                p.x *= -1;
              }

              return p;
            }
            /* calculate lat/lon from xy */

            function inverse$a(p) {
              var u, deltav, s, d, eps, ro, fi1;
              var ok;
              /* Transformation */

              /* revert y, x*/

              var tmp = p.x;
              p.x = p.y;
              p.y = tmp;

              if (!this.czech) {
                p.y *= -1;
                p.x *= -1;
              }

              ro = Math.sqrt(p.x * p.x + p.y * p.y);
              eps = Math.atan2(p.y, p.x);
              d = eps / Math.sin(this.s0);
              s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
              u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
              deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
              p.x = this.long0 - deltav / this.alfa;
              fi1 = u;
              ok = 0;
              var iter = 0;

              do {
                p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);

                if (Math.abs(fi1 - p.y) < 0.0000000001) {
                  ok = 1;
                }

                fi1 = p.y;
                iter += 1;
              } while (ok === 0 && iter < 15);

              if (iter >= 15) {
                return null;
              }

              return p;
            }
            var names$c = ["Krovak", "krovak"];
            var krovak = {
              init: init$c,
              forward: forward$a,
              inverse: inverse$a,
              names: names$c
            };

            function mlfn (e0, e1, e2, e3, phi) {
              return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);
            }

            function e0fn (x) {
              return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));
            }

            function e1fn (x) {
              return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));
            }

            function e2fn (x) {
              return 0.05859375 * x * x * (1 + 0.75 * x);
            }

            function e3fn (x) {
              return x * x * x * (35 / 3072);
            }

            function gN (a, e, sinphi) {
              var temp = e * sinphi;
              return a / Math.sqrt(1 - temp * temp);
            }

            function adjust_lat (x) {
              return Math.abs(x) < HALF_PI ? x : x - sign(x) * Math.PI;
            }

            function imlfn (ml, e0, e1, e2, e3) {
              var phi;
              var dphi;
              phi = ml / e0;

              for (var i = 0; i < 15; i++) {
                dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");


              return NaN;
            }

            function init$d() {
              if (!this.sphere) {
                this.e0 = e0fn(this.es);
                this.e1 = e1fn(this.es);
                this.e2 = e2fn(this.es);
                this.e3 = e3fn(this.es);
                this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
              }
            }
            /* Cassini forward equations--mapping lat,long to x,y
              -----------------------------------------------------------------------*/

            function forward$b(p) {
              /* Forward equations
                  -----------------*/
              var x, y;
              var lam = p.x;
              var phi = p.y;
              lam = adjust_lon(lam - this.long0);

              if (this.sphere) {
                x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
                y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
              } else {
                //ellipsoid
                var sinphi = Math.sin(phi);
                var cosphi = Math.cos(phi);
                var nl = gN(this.a, this.e, sinphi);
                var tl = Math.tan(phi) * Math.tan(phi);
                var al = lam * Math.cos(phi);
                var asq = al * al;
                var cl = this.es * cosphi * cosphi / (1 - this.es);
                var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
                x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
                y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
              }

              p.x = x + this.x0;
              p.y = y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$b(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var x = p.x / this.a;
              var y = p.y / this.a;
              var phi, lam;

              if (this.sphere) {
                var dd = y + this.lat0;
                phi = Math.asin(Math.sin(dd) * Math.cos(x));
                lam = Math.atan2(Math.tan(x), Math.cos(dd));
              } else {
                /* ellipsoid */
                var ml1 = this.ml0 / this.a + y;
                var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);

                if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
                  p.x = this.long0;
                  p.y = HALF_PI;

                  if (y < 0) {
                    p.y *= -1;
                  }

                  return p;
                }

                var nl1 = gN(this.a, this.e, Math.sin(phi1));
                var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
                var tl1 = Math.pow(Math.tan(phi1), 2);
                var dl = x * this.a / nl1;
                var dsq = dl * dl;
                phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
                lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);
              }

              p.x = adjust_lon(lam + this.long0);
              p.y = adjust_lat(phi);
              return p;
            }
            var names$d = ["Cassini", "Cassini_Soldner", "cass"];
            var cass = {
              init: init$d,
              forward: forward$b,
              inverse: inverse$b,
              names: names$d
            };

            function qsfnz (eccent, sinphi) {
              var con;

              if (eccent > 1.0e-7) {
                con = eccent * sinphi;
                return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));
              } else {
                return 2 * sinphi;
              }
            }

            /*
              reference
                "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
                The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
              */

            var S_POLE = 1;
            var N_POLE = 2;
            var EQUIT = 3;
            var OBLIQ = 4;
            /* Initialize the Lambert Azimuthal Equal Area projection
              ------------------------------------------------------*/

            function init$e() {
              var t = Math.abs(this.lat0);

              if (Math.abs(t - HALF_PI) < EPSLN) {
                this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
              } else if (Math.abs(t) < EPSLN) {
                this.mode = this.EQUIT;
              } else {
                this.mode = this.OBLIQ;
              }

              if (this.es > 0) {
                var sinphi;
                this.qp = qsfnz(this.e, 1);
                this.mmf = 0.5 / (1 - this.es);
                this.apa = authset(this.es);

                switch (this.mode) {
                  case this.N_POLE:
                    this.dd = 1;
                    break;

                  case this.S_POLE:
                    this.dd = 1;
                    break;

                  case this.EQUIT:
                    this.rq = Math.sqrt(0.5 * this.qp);
                    this.dd = 1 / this.rq;
                    this.xmf = 1;
                    this.ymf = 0.5 * this.qp;
                    break;

                  case this.OBLIQ:
                    this.rq = Math.sqrt(0.5 * this.qp);
                    sinphi = Math.sin(this.lat0);
                    this.sinb1 = qsfnz(this.e, sinphi) / this.qp;
                    this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
                    this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
                    this.ymf = (this.xmf = this.rq) / this.dd;
                    this.xmf *= this.dd;
                    break;
                }
              } else {
                if (this.mode === this.OBLIQ) {
                  this.sinph0 = Math.sin(this.lat0);
                  this.cosph0 = Math.cos(this.lat0);
                }
              }
            }
            /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y
              -----------------------------------------------------------------------*/

            function forward$c(p) {
              /* Forward equations
                  -----------------*/
              var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
              var lam = p.x;
              var phi = p.y;
              lam = adjust_lon(lam - this.long0);

              if (this.sphere) {
                sinphi = Math.sin(phi);
                cosphi = Math.cos(phi);
                coslam = Math.cos(lam);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;

                  if (y <= EPSLN) {
                    return null;
                  }

                  y = Math.sqrt(2 / y);
                  x = y * cosphi * Math.sin(lam);
                  y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
                } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
                  if (this.mode === this.N_POLE) {
                    coslam = -coslam;
                  }

                  if (Math.abs(phi + this.phi0) < EPSLN) {
                    return null;
                  }

                  y = FORTPI - phi * 0.5;
                  y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));
                  x = y * Math.sin(lam);
                  y *= coslam;
                }
              } else {
                sinb = 0;
                cosb = 0;
                b = 0;
                coslam = Math.cos(lam);
                sinlam = Math.sin(lam);
                sinphi = Math.sin(phi);
                q = qsfnz(this.e, sinphi);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  sinb = q / this.qp;
                  cosb = Math.sqrt(1 - sinb * sinb);
                }

                switch (this.mode) {
                  case this.OBLIQ:
                    b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
                    break;

                  case this.EQUIT:
                    b = 1 + cosb * coslam;
                    break;

                  case this.N_POLE:
                    b = HALF_PI + phi;
                    q = this.qp - q;
                    break;

                  case this.S_POLE:
                    b = phi - HALF_PI;
                    q = this.qp + q;
                    break;
                }

                if (Math.abs(b) < EPSLN) {
                  return null;
                }

                switch (this.mode) {
                  case this.OBLIQ:
                  case this.EQUIT:
                    b = Math.sqrt(2 / b);

                    if (this.mode === this.OBLIQ) {
                      y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
                    } else {
                      y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
                    }

                    x = this.xmf * b * cosb * sinlam;
                    break;

                  case this.N_POLE:
                  case this.S_POLE:
                    if (q >= 0) {
                      x = (b = Math.sqrt(q)) * sinlam;
                      y = coslam * (this.mode === this.S_POLE ? b : -b);
                    } else {
                      x = y = 0;
                    }

                    break;
                }
              }

              p.x = this.a * x + this.x0;
              p.y = this.a * y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$c(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var x = p.x / this.a;
              var y = p.y / this.a;
              var lam, phi, cCe, sCe, q, rho, ab;

              if (this.sphere) {
                var cosz = 0,
                    rh,
                    sinz = 0;
                rh = Math.sqrt(x * x + y * y);
                phi = rh * 0.5;

                if (phi > 1) {
                  return null;
                }

                phi = 2 * Math.asin(phi);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  sinz = Math.sin(phi);
                  cosz = Math.cos(phi);
                }

                switch (this.mode) {
                  case this.EQUIT:
                    phi = Math.abs(rh) <= EPSLN ? 0 : Math.asin(y * sinz / rh);
                    x *= sinz;
                    y = cosz * rh;
                    break;

                  case this.OBLIQ:
                    phi = Math.abs(rh) <= EPSLN ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
                    x *= sinz * this.cosph0;
                    y = (cosz - Math.sin(phi) * this.sinph0) * rh;
                    break;

                  case this.N_POLE:
                    y = -y;
                    phi = HALF_PI - phi;
                    break;

                  case this.S_POLE:
                    phi -= HALF_PI;
                    break;
                }

                lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);
              } else {
                ab = 0;

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  x /= this.dd;
                  y *= this.dd;
                  rho = Math.sqrt(x * x + y * y);

                  if (rho < EPSLN) {
                    p.x = 0;
                    p.y = this.phi0;
                    return p;
                  }

                  sCe = 2 * Math.asin(0.5 * rho / this.rq);
                  cCe = Math.cos(sCe);
                  x *= sCe = Math.sin(sCe);

                  if (this.mode === this.OBLIQ) {
                    ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
                    q = this.qp * ab;
                    y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
                  } else {
                    ab = y * sCe / rho;
                    q = this.qp * ab;
                    y = rho * cCe;
                  }
                } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
                  if (this.mode === this.N_POLE) {
                    y = -y;
                  }

                  q = x * x + y * y;

                  if (!q) {
                    p.x = 0;
                    p.y = this.phi0;
                    return p;
                  }

                  ab = 1 - q / this.qp;

                  if (this.mode === this.S_POLE) {
                    ab = -ab;
                  }
                }

                lam = Math.atan2(x, y);
                phi = authlat(Math.asin(ab), this.apa);
              }

              p.x = adjust_lon(this.long0 + lam);
              p.y = phi;
              return p;
            }
            /* determine latitude from authalic latitude */

            var P00 = 0.33333333333333333333;
            var P01 = 0.17222222222222222222;
            var P02 = 0.10257936507936507936;
            var P10 = 0.06388888888888888888;
            var P11 = 0.06640211640211640211;
            var P20 = 0.01641501294219154443;

            function authset(es) {
              var t;
              var APA = [];
              APA[0] = es * P00;
              t = es * es;
              APA[0] += t * P01;
              APA[1] = t * P10;
              t *= es;
              APA[0] += t * P02;
              APA[1] += t * P11;
              APA[2] = t * P20;
              return APA;
            }

            function authlat(beta, APA) {
              var t = beta + beta;
              return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);
            }

            var names$e = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
            var laea = {
              init: init$e,
              forward: forward$c,
              inverse: inverse$c,
              names: names$e,
              S_POLE: S_POLE,
              N_POLE: N_POLE,
              EQUIT: EQUIT,
              OBLIQ: OBLIQ
            };

            function asinz (x) {
              if (Math.abs(x) > 1) {
                x = x > 1 ? 1 : -1;
              }

              return Math.asin(x);
            }

            function init$f() {
              if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
                return;
              }

              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2);
              this.e3 = Math.sqrt(this.es);
              this.sin_po = Math.sin(this.lat1);
              this.cos_po = Math.cos(this.lat1);
              this.t1 = this.sin_po;
              this.con = this.sin_po;
              this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);
              this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);
              this.sin_po = Math.sin(this.lat2);
              this.cos_po = Math.cos(this.lat2);
              this.t2 = this.sin_po;
              this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);
              this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);
              this.sin_po = Math.sin(this.lat0);
              this.cos_po = Math.cos(this.lat0);
              this.t3 = this.sin_po;
              this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);

              if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
                this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
              } else {
                this.ns0 = this.con;
              }

              this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
              this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
            }
            /* Albers Conical Equal Area forward equations--mapping lat,long to x,y
              -------------------------------------------------------------------*/

            function forward$d(p) {
              var lon = p.x;
              var lat = p.y;
              this.sin_phi = Math.sin(lat);
              this.cos_phi = Math.cos(lat);
              var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);
              var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
              var theta = this.ns0 * adjust_lon(lon - this.long0);
              var x = rh1 * Math.sin(theta) + this.x0;
              var y = this.rh - rh1 * Math.cos(theta) + this.y0;
              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$d(p) {
              var rh1, qs, con, theta, lon, lat;
              p.x -= this.x0;
              p.y = this.rh - p.y + this.y0;

              if (this.ns0 >= 0) {
                rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
                con = -1;
              }

              theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * p.x, con * p.y);
              }

              con = rh1 * this.ns0 / this.a;

              if (this.sphere) {
                lat = Math.asin((this.c - con * con) / (2 * this.ns0));
              } else {
                qs = (this.c - con * con) / this.ns0;
                lat = this.phi1z(this.e3, qs);
              }

              lon = adjust_lon(theta / this.ns0 + this.long0);
              p.x = lon;
              p.y = lat;
              return p;
            }
            /* Function to compute phi1, the latitude for the inverse of the
               Albers Conical Equal-Area projection.
            -------------------------------------------*/

            function phi1z(eccent, qs) {
              var sinphi, cosphi, con, com, dphi;
              var phi = asinz(0.5 * qs);

              if (eccent < EPSLN) {
                return phi;
              }

              var eccnts = eccent * eccent;

              for (var i = 1; i <= 25; i++) {
                sinphi = Math.sin(phi);
                cosphi = Math.cos(phi);
                con = eccent * sinphi;
                com = 1 - con * con;
                dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
                phi = phi + dphi;

                if (Math.abs(dphi) <= 1e-7) {
                  return phi;
                }
              }

              return null;
            }
            var names$f = ["Albers_Conic_Equal_Area", "Albers", "aea"];
            var aea = {
              init: init$f,
              forward: forward$d,
              inverse: inverse$d,
              names: names$f,
              phi1z: phi1z
            };

            /*
              reference:
                Wolfram Mathworld "Gnomonic Projection"
                http://mathworld.wolfram.com/GnomonicProjection.html
                Accessed: 12th November 2009
              */

            function init$g() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.sin_p14 = Math.sin(this.lat0);
              this.cos_p14 = Math.cos(this.lat0); // Approximation for projecting points to the horizon (infinity)

              this.infinity_dist = 1000 * this.a;
              this.rc = 1;
            }
            /* Gnomonic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$e(p) {
              var sinphi, cosphi;
              /* sin and cos value        */

              var dlon;
              /* delta longitude value      */

              var coslon;
              /* cos of longitude        */

              var ksp;
              /* scale factor          */

              var g;
              var x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              dlon = adjust_lon(lon - this.long0);
              sinphi = Math.sin(lat);
              cosphi = Math.cos(lat);
              coslon = Math.cos(dlon);
              g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
              ksp = 1;

              if (g > 0 || Math.abs(g) <= EPSLN) {
                x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
                y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
              } else {
                // Point is in the opposing hemisphere and is unprojectable
                // We still need to return a reasonable point, so we project
                // to infinity, on a bearing
                // equivalent to the northern hemisphere equivalent
                // This is a reasonable approximation for short shapes and lines that
                // straddle the horizon.
                x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
                y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$e(p) {
              var rh;
              /* Rho */

              var sinc, cosc;
              var c;
              var lon, lat;
              /* Inverse equations
                  -----------------*/

              p.x = (p.x - this.x0) / this.a;
              p.y = (p.y - this.y0) / this.a;
              p.x /= this.k0;
              p.y /= this.k0;

              if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {
                c = Math.atan2(rh, this.rc);
                sinc = Math.sin(c);
                cosc = Math.cos(c);
                lat = asinz(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);
                lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
                lon = adjust_lon(this.long0 + lon);
              } else {
                lat = this.phic0;
                lon = 0;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$g = ["gnom"];
            var gnom = {
              init: init$g,
              forward: forward$e,
              inverse: inverse$e,
              names: names$g
            };

            function iqsfnz (eccent, q) {
              var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));

              if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
                if (q < 0) {
                  return -1 * HALF_PI;
                } else {
                  return HALF_PI;
                }
              } //var phi = 0.5* q/(1-eccent*eccent);


              var phi = Math.asin(0.5 * q);
              var dphi;
              var sin_phi;
              var cos_phi;
              var con;

              for (var i = 0; i < 30; i++) {
                sin_phi = Math.sin(phi);
                cos_phi = Math.cos(phi);
                con = eccent * sin_phi;
                dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");


              return NaN;
            }

            /*
              reference:
                "Cartographic Projection Procedures for the UNIX Environment-
                A User's Manual" by Gerald I. Evenden,
                USGS Open File Report 90-284and Release 4 Interim Reports (2003)
            */

            function init$h() {
              //no-op
              if (!this.sphere) {
                this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
              }
            }
            /* Cylindrical Equal Area forward equations--mapping lat,long to x,y
                ------------------------------------------------------------*/

            function forward$f(p) {
              var lon = p.x;
              var lat = p.y;
              var x, y;
              /* Forward equations
                  -----------------*/

              var dlon = adjust_lon(lon - this.long0);

              if (this.sphere) {
                x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
                y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
              } else {
                var qs = qsfnz(this.e, Math.sin(lat));
                x = this.x0 + this.a * this.k0 * dlon;
                y = this.y0 + this.a * qs * 0.5 / this.k0;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long
                ------------------------------------------------------------*/

            function inverse$f(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon, lat;

              if (this.sphere) {
                lon = adjust_lon(this.long0 + p.x / this.a / Math.cos(this.lat_ts));
                lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));
              } else {
                lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);
                lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$h = ["cea"];
            var cea = {
              init: init$h,
              forward: forward$f,
              inverse: inverse$f,
              names: names$h
            };

            function init$i() {
              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0;
              this.lat0 = this.lat0 || 0;
              this.long0 = this.long0 || 0;
              this.lat_ts = this.lat_ts || 0;
              this.title = this.title || "Equidistant Cylindrical (Plate Carre)";
              this.rc = Math.cos(this.lat_ts);
            } // forward equations--mapping lat,long to x,y
            // -----------------------------------------------------------------

            function forward$g(p) {
              var lon = p.x;
              var lat = p.y;
              var dlon = adjust_lon(lon - this.long0);
              var dlat = adjust_lat(lat - this.lat0);
              p.x = this.x0 + this.a * dlon * this.rc;
              p.y = this.y0 + this.a * dlat;
              return p;
            } // inverse equations--mapping x,y to lat/long
            // -----------------------------------------------------------------

            function inverse$g(p) {
              var x = p.x;
              var y = p.y;
              p.x = adjust_lon(this.long0 + (x - this.x0) / (this.a * this.rc));
              p.y = adjust_lat(this.lat0 + (y - this.y0) / this.a);
              return p;
            }
            var names$i = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
            var eqc = {
              init: init$i,
              forward: forward$g,
              inverse: inverse$g,
              names: names$i
            };

            var MAX_ITER$2 = 20;
            function init$j() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles

              this.e = Math.sqrt(this.es);
              this.e0 = e0fn(this.es);
              this.e1 = e1fn(this.es);
              this.e2 = e2fn(this.es);
              this.e3 = e3fn(this.es);
              this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
            }
            /* Polyconic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$h(p) {
              var lon = p.x;
              var lat = p.y;
              var x, y, el;
              var dlon = adjust_lon(lon - this.long0);
              el = dlon * Math.sin(lat);

              if (this.sphere) {
                if (Math.abs(lat) <= EPSLN) {
                  x = this.a * dlon;
                  y = -1 * this.a * this.lat0;
                } else {
                  x = this.a * Math.sin(el) / Math.tan(lat);
                  y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
                }
              } else {
                if (Math.abs(lat) <= EPSLN) {
                  x = this.a * dlon;
                  y = -1 * this.ml0;
                } else {
                  var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
                  x = nl * Math.sin(el);
                  y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
                }
              }

              p.x = x + this.x0;
              p.y = y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$h(p) {
              var lon, lat, x, y, i;
              var al, bl;
              var phi, dphi;
              x = p.x - this.x0;
              y = p.y - this.y0;

              if (this.sphere) {
                if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
                  lon = adjust_lon(x / this.a + this.long0);
                  lat = 0;
                } else {
                  al = this.lat0 + y / this.a;
                  bl = x * x / this.a / this.a + al * al;
                  phi = al;
                  var tanphi;

                  for (i = MAX_ITER$2; i; --i) {
                    tanphi = Math.tan(phi);
                    dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
                    phi += dphi;

                    if (Math.abs(dphi) <= EPSLN) {
                      lat = phi;
                      break;
                    }
                  }

                  lon = adjust_lon(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));
                }
              } else {
                if (Math.abs(y + this.ml0) <= EPSLN) {
                  lat = 0;
                  lon = adjust_lon(this.long0 + x / this.a);
                } else {
                  al = (this.ml0 + y) / this.a;
                  bl = x * x / this.a / this.a + al * al;
                  phi = al;
                  var cl, mln, mlnp, ma;
                  var con;

                  for (i = MAX_ITER$2; i; --i) {
                    con = this.e * Math.sin(phi);
                    cl = Math.sqrt(1 - con * con) * Math.tan(phi);
                    mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
                    mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
                    ma = mln / this.a;
                    dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
                    phi -= dphi;

                    if (Math.abs(dphi) <= EPSLN) {
                      lat = phi;
                      break;
                    }
                  } //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);


                  cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
                  lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$j = ["Polyconic", "poly"];
            var poly = {
              init: init$j,
              forward: forward$h,
              inverse: inverse$h,
              names: names$j
            };

            function init$k() {
              this.A = [];
              this.A[1] = 0.6399175073;
              this.A[2] = -0.1358797613;
              this.A[3] = 0.063294409;
              this.A[4] = -0.02526853;
              this.A[5] = 0.0117879;
              this.A[6] = -0.0055161;
              this.A[7] = 0.0026906;
              this.A[8] = -0.001333;
              this.A[9] = 0.00067;
              this.A[10] = -0.00034;
              this.B_re = [];
              this.B_im = [];
              this.B_re[1] = 0.7557853228;
              this.B_im[1] = 0;
              this.B_re[2] = 0.249204646;
              this.B_im[2] = 0.003371507;
              this.B_re[3] = -0.001541739;
              this.B_im[3] = 0.041058560;
              this.B_re[4] = -0.10162907;
              this.B_im[4] = 0.01727609;
              this.B_re[5] = -0.26623489;
              this.B_im[5] = -0.36249218;
              this.B_re[6] = -0.6870983;
              this.B_im[6] = -1.1651967;
              this.C_re = [];
              this.C_im = [];
              this.C_re[1] = 1.3231270439;
              this.C_im[1] = 0;
              this.C_re[2] = -0.577245789;
              this.C_im[2] = -0.007809598;
              this.C_re[3] = 0.508307513;
              this.C_im[3] = -0.112208952;
              this.C_re[4] = -0.15094762;
              this.C_im[4] = 0.18200602;
              this.C_re[5] = 1.01418179;
              this.C_im[5] = 1.64497696;
              this.C_re[6] = 1.9660549;
              this.C_im[6] = 2.5127645;
              this.D = [];
              this.D[1] = 1.5627014243;
              this.D[2] = 0.5185406398;
              this.D[3] = -0.03333098;
              this.D[4] = -0.1052906;
              this.D[5] = -0.0368594;
              this.D[6] = 0.007317;
              this.D[7] = 0.01220;
              this.D[8] = 0.00394;
              this.D[9] = -0.0013;
            }
            /**
                New Zealand Map Grid Forward  - long/lat to x/y
                long/lat in radians
              */

            function forward$i(p) {
              var n;
              var lon = p.x;
              var lat = p.y;
              var delta_lat = lat - this.lat0;
              var delta_lon = lon - this.long0; // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
              // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.

              var d_phi = delta_lat / SEC_TO_RAD * 1E-5;
              var d_lambda = delta_lon;
              var d_phi_n = 1; // d_phi^0

              var d_psi = 0;

              for (n = 1; n <= 10; n++) {
                d_phi_n = d_phi_n * d_phi;
                d_psi = d_psi + this.A[n] * d_phi_n;
              } // 2. Calculate theta


              var th_re = d_psi;
              var th_im = d_lambda; // 3. Calculate z

              var th_n_re = 1;
              var th_n_im = 0; // theta^0

              var th_n_re1;
              var th_n_im1;
              var z_re = 0;
              var z_im = 0;

              for (n = 1; n <= 6; n++) {
                th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                th_n_re = th_n_re1;
                th_n_im = th_n_im1;
                z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
                z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
              } // 4. Calculate easting and northing


              p.x = z_im * this.a + this.x0;
              p.y = z_re * this.a + this.y0;
              return p;
            }
            /**
                New Zealand Map Grid Inverse  -  x/y to long/lat
              */

            function inverse$i(p) {
              var n;
              var x = p.x;
              var y = p.y;
              var delta_x = x - this.x0;
              var delta_y = y - this.y0; // 1. Calculate z

              var z_re = delta_y / this.a;
              var z_im = delta_x / this.a; // 2a. Calculate theta - first approximation gives km accuracy

              var z_n_re = 1;
              var z_n_im = 0; // z^0

              var z_n_re1;
              var z_n_im1;
              var th_re = 0;
              var th_im = 0;

              for (n = 1; n <= 6; n++) {
                z_n_re1 = z_n_re * z_re - z_n_im * z_im;
                z_n_im1 = z_n_im * z_re + z_n_re * z_im;
                z_n_re = z_n_re1;
                z_n_im = z_n_im1;
                th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
                th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
              } // 2b. Iterate to refine the accuracy of the calculation
              //        0 iterations gives km accuracy
              //        1 iteration gives m accuracy -- good enough for most mapping applications
              //        2 iterations bives mm accuracy


              for (var i = 0; i < this.iterations; i++) {
                var th_n_re = th_re;
                var th_n_im = th_im;
                var th_n_re1;
                var th_n_im1;
                var num_re = z_re;
                var num_im = z_im;

                for (n = 2; n <= 6; n++) {
                  th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                  th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                  th_n_re = th_n_re1;
                  th_n_im = th_n_im1;
                  num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
                  num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
                }

                th_n_re = 1;
                th_n_im = 0;
                var den_re = this.B_re[1];
                var den_im = this.B_im[1];

                for (n = 2; n <= 6; n++) {
                  th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                  th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                  th_n_re = th_n_re1;
                  th_n_im = th_n_im1;
                  den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
                  den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
                } // Complex division


                var den2 = den_re * den_re + den_im * den_im;
                th_re = (num_re * den_re + num_im * den_im) / den2;
                th_im = (num_im * den_re - num_re * den_im) / den2;
              } // 3. Calculate d_phi              ...                                    // and d_lambda


              var d_psi = th_re;
              var d_lambda = th_im;
              var d_psi_n = 1; // d_psi^0

              var d_phi = 0;

              for (n = 1; n <= 9; n++) {
                d_psi_n = d_psi_n * d_psi;
                d_phi = d_phi + this.D[n] * d_psi_n;
              } // 4. Calculate latitude and longitude
              // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.


              var lat = this.lat0 + d_phi * SEC_TO_RAD * 1E5;
              var lon = this.long0 + d_lambda;
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$k = ["New_Zealand_Map_Grid", "nzmg"];
            var nzmg = {
              init: init$k,
              forward: forward$i,
              inverse: inverse$i,
              names: names$k
            };

            /*
              reference
                "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
                The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
              */

            /* Initialize the Miller Cylindrical projection
              -------------------------------------------*/

            function init$l() {} //no-op

            /* Miller Cylindrical forward equations--mapping lat,long to x,y
                ------------------------------------------------------------*/

            function forward$j(p) {
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              var dlon = adjust_lon(lon - this.long0);
              var x = this.x0 + this.a * dlon;
              var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;
              p.x = x;
              p.y = y;
              return p;
            }
            /* Miller Cylindrical inverse equations--mapping x,y to lat/long
                ------------------------------------------------------------*/

            function inverse$j(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon = adjust_lon(this.long0 + p.x / this.a);
              var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$l = ["Miller_Cylindrical", "mill"];
            var mill = {
              init: init$l,
              forward: forward$j,
              inverse: inverse$j,
              names: names$l
            };

            var MAX_ITER$3 = 20;
            function init$m() {
              /* Place parameters in static storage for common use
                -------------------------------------------------*/
              if (!this.sphere) {
                this.en = pj_enfn(this.es);
              } else {
                this.n = 1;
                this.m = 0;
                this.es = 0;
                this.C_y = Math.sqrt((this.m + 1) / this.n);
                this.C_x = this.C_y / (this.m + 1);
              }
            }
            /* Sinusoidal forward equations--mapping lat,long to x,y
              -----------------------------------------------------*/

            function forward$k(p) {
              var x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                -----------------*/

              lon = adjust_lon(lon - this.long0);

              if (this.sphere) {
                if (!this.m) {
                  lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
                } else {
                  var k = this.n * Math.sin(lat);

                  for (var i = MAX_ITER$3; i; --i) {
                    var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
                    lat -= V;

                    if (Math.abs(V) < EPSLN) {
                      break;
                    }
                  }
                }

                x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
                y = this.a * this.C_y * lat;
              } else {
                var s = Math.sin(lat);
                var c = Math.cos(lat);
                y = this.a * pj_mlfn(lat, s, c, this.en);
                x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$k(p) {
              var lat, temp, lon, s;
              p.x -= this.x0;
              lon = p.x / this.a;
              p.y -= this.y0;
              lat = p.y / this.a;

              if (this.sphere) {
                lat /= this.C_y;
                lon = lon / (this.C_x * (this.m + Math.cos(lat)));

                if (this.m) {
                  lat = asinz((this.m * lat + Math.sin(lat)) / this.n);
                } else if (this.n !== 1) {
                  lat = asinz(Math.sin(lat) / this.n);
                }

                lon = adjust_lon(lon + this.long0);
                lat = adjust_lat(lat);
              } else {
                lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);
                s = Math.abs(lat);

                if (s < HALF_PI) {
                  s = Math.sin(lat);
                  temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat)); //temp = this.long0 + p.x / (this.a * Math.cos(lat));

                  lon = adjust_lon(temp);
                } else if (s - EPSLN < HALF_PI) {
                  lon = this.long0;
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$m = ["Sinusoidal", "sinu"];
            var sinu = {
              init: init$m,
              forward: forward$k,
              inverse: inverse$k,
              names: names$m
            };

            function init$n() {}
            /* Mollweide forward equations--mapping lat,long to x,y
                ----------------------------------------------------*/

            function forward$l(p) {
              /* Forward equations
                  -----------------*/
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon(lon - this.long0);
              var theta = lat;
              var con = Math.PI * Math.sin(lat);
              /* Iterate using the Newton-Raphson method to find theta
                  -----------------------------------------------------*/

              while (true) {
                var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
                theta += delta_theta;

                if (Math.abs(delta_theta) < EPSLN) {
                  break;
                }
              }

              theta /= 2;
              /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
                   this is done here because of precision problems with "cos(theta)"
                   --------------------------------------------------------------------------*/

              if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
                delta_lon = 0;
              }

              var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
              var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;
              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$l(p) {
              var theta;
              var arg;
              /* Inverse equations
                  -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              arg = p.y / (1.4142135623731 * this.a);
              /* Because of division by zero problems, 'arg' can not be 1.  Therefore
                   a number very close to one is used instead.
                   -------------------------------------------------------------------*/

              if (Math.abs(arg) > 0.999999999999) {
                arg = 0.999999999999;
              }

              theta = Math.asin(arg);
              var lon = adjust_lon(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));

              if (lon < -Math.PI) {
                lon = -Math.PI;
              }

              if (lon > Math.PI) {
                lon = Math.PI;
              }

              arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;

              if (Math.abs(arg) > 1) {
                arg = 1;
              }

              var lat = Math.asin(arg);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$n = ["Mollweide", "moll"];
            var moll = {
              init: init$n,
              forward: forward$l,
              inverse: inverse$l,
              names: names$n
            };

            function init$o() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              // Standard Parallels cannot be equal and on opposite sides of the equator
              if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
                return;
              }

              this.lat2 = this.lat2 || this.lat1;
              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2);
              this.e = Math.sqrt(this.es);
              this.e0 = e0fn(this.es);
              this.e1 = e1fn(this.es);
              this.e2 = e2fn(this.es);
              this.e3 = e3fn(this.es);
              this.sinphi = Math.sin(this.lat1);
              this.cosphi = Math.cos(this.lat1);
              this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);
              this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);

              if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
                this.ns = this.sinphi;
              } else {
                this.sinphi = Math.sin(this.lat2);
                this.cosphi = Math.cos(this.lat2);
                this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);
                this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);
                this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
              }

              this.g = this.ml1 + this.ms1 / this.ns;
              this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
              this.rh = this.a * (this.g - this.ml0);
            }
            /* Equidistant Conic forward equations--mapping lat,long to x,y
              -----------------------------------------------------------*/

            function forward$m(p) {
              var lon = p.x;
              var lat = p.y;
              var rh1;
              /* Forward equations
                  -----------------*/

              if (this.sphere) {
                rh1 = this.a * (this.g - lat);
              } else {
                var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);
                rh1 = this.a * (this.g - ml);
              }

              var theta = this.ns * adjust_lon(lon - this.long0);
              var x = this.x0 + rh1 * Math.sin(theta);
              var y = this.y0 + this.rh - rh1 * Math.cos(theta);
              p.x = x;
              p.y = y;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$m(p) {
              p.x -= this.x0;
              p.y = this.rh - p.y + this.y0;
              var con, rh1, lat, lon;

              if (this.ns >= 0) {
                rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
                con = -1;
              }

              var theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * p.x, con * p.y);
              }

              if (this.sphere) {
                lon = adjust_lon(this.long0 + theta / this.ns);
                lat = adjust_lat(this.g - rh1 / this.a);
                p.x = lon;
                p.y = lat;
                return p;
              } else {
                var ml = this.g - rh1 / this.a;
                lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);
                lon = adjust_lon(this.long0 + theta / this.ns);
                p.x = lon;
                p.y = lat;
                return p;
              }
            }
            var names$o = ["Equidistant_Conic", "eqdc"];
            var eqdc = {
              init: init$o,
              forward: forward$m,
              inverse: inverse$m,
              names: names$o
            };

            /* Initialize the Van Der Grinten projection
              ----------------------------------------*/

            function init$p() {
              //this.R = 6370997; //Radius of earth
              this.R = this.a;
            }
            function forward$n(p) {
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                -----------------*/

              var dlon = adjust_lon(lon - this.long0);
              var x, y;

              if (Math.abs(lat) <= EPSLN) {
                x = this.x0 + this.R * dlon;
                y = this.y0;
              }

              var theta = asinz(2 * Math.abs(lat / Math.PI));

              if (Math.abs(dlon) <= EPSLN || Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
                x = this.x0;

                if (lat >= 0) {
                  y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
                } else {
                  y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
                } //  return(OK);

              }

              var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);
              var asq = al * al;
              var sinth = Math.sin(theta);
              var costh = Math.cos(theta);
              var g = costh / (sinth + costh - 1);
              var gsq = g * g;
              var m = g * (2 / sinth - 1);
              var msq = m * m;
              var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);

              if (dlon < 0) {
                con = -con;
              }

              x = this.x0 + con; //con = Math.abs(con / (Math.PI * this.R));

              var q = asq + g;
              con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);

              if (lat >= 0) {
                //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
                y = this.y0 + con;
              } else {
                //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
                y = this.y0 - con;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /* Van Der Grinten inverse equations--mapping x,y to lat/long
              ---------------------------------------------------------*/

            function inverse$n(p) {
              var lon, lat;
              var xx, yy, xys, c1, c2, c3;
              var a1;
              var m1;
              var con;
              var th1;
              var d;
              /* inverse equations
                -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              con = Math.PI * this.R;
              xx = p.x / con;
              yy = p.y / con;
              xys = xx * xx + yy * yy;
              c1 = -Math.abs(yy) * (1 + xys);
              c2 = c1 - 2 * yy * yy + xx * xx;
              c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
              d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
              a1 = (c1 - c2 * c2 / 3 / c3) / c3;
              m1 = 2 * Math.sqrt(-a1 / 3);
              con = 3 * d / a1 / m1;

              if (Math.abs(con) > 1) {
                if (con >= 0) {
                  con = 1;
                } else {
                  con = -1;
                }
              }

              th1 = Math.acos(con) / 3;

              if (p.y >= 0) {
                lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
              } else {
                lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
              }

              if (Math.abs(xx) < EPSLN) {
                lon = this.long0;
              } else {
                lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$p = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
            var vandg = {
              init: init$p,
              forward: forward$n,
              inverse: inverse$n,
              names: names$p
            };

            function init$q() {
              this.sin_p12 = Math.sin(this.lat0);
              this.cos_p12 = Math.cos(this.lat0);
            }
            function forward$o(p) {
              var lon = p.x;
              var lat = p.y;
              var sinphi = Math.sin(p.y);
              var cosphi = Math.cos(p.y);
              var dlon = adjust_lon(lon - this.long0);
              var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;

              if (this.sphere) {
                if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
                  //North Pole case
                  p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
                  p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
                  //South Pole case
                  p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
                  p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
                  return p;
                } else {
                  //default case
                  cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
                  c = Math.acos(cos_c);
                  kp = c / Math.sin(c);
                  p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
                  p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
                  return p;
                }
              } else {
                e0 = e0fn(this.es);
                e1 = e1fn(this.es);
                e2 = e2fn(this.es);
                e3 = e3fn(this.es);

                if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
                  //North Pole case
                  Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
                  Ml = this.a * mlfn(e0, e1, e2, e3, lat);
                  p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
                  p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
                  //South Pole case
                  Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
                  Ml = this.a * mlfn(e0, e1, e2, e3, lat);
                  p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
                  p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
                  return p;
                } else {
                  //Default case
                  tanphi = sinphi / cosphi;
                  Nl1 = gN(this.a, this.e, this.sin_p12);
                  Nl = gN(this.a, this.e, sinphi);
                  psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
                  Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));

                  if (Az === 0) {
                    s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
                  } else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {
                    s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
                  } else {
                    s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
                  }

                  G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
                  H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
                  GH = G * H;
                  Hs = H * H;
                  s2 = s * s;
                  s3 = s2 * s;
                  s4 = s3 * s;
                  s5 = s4 * s;
                  c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
                  p.x = this.x0 + c * Math.sin(Az);
                  p.y = this.y0 + c * Math.cos(Az);
                  return p;
                }
              }
            }
            function inverse$o(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;

              if (this.sphere) {
                rh = Math.sqrt(p.x * p.x + p.y * p.y);

                if (rh > 2 * HALF_PI * this.a) {
                  return;
                }

                z = rh / this.a;
                sinz = Math.sin(z);
                cosz = Math.cos(z);
                lon = this.long0;

                if (Math.abs(rh) <= EPSLN) {
                  lat = this.lat0;
                } else {
                  lat = asinz(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);
                  con = Math.abs(this.lat0) - HALF_PI;

                  if (Math.abs(con) <= EPSLN) {
                    if (this.lat0 >= 0) {
                      lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));
                    } else {
                      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
                    }
                  } else {
                    /*con = cosz - this.sin_p12 * Math.sin(lat);
                    if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
                      //no-op, just keep the lon value as is
                    } else {
                      var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
                      lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
                    }*/
                    lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
                  }
                }

                p.x = lon;
                p.y = lat;
                return p;
              } else {
                e0 = e0fn(this.es);
                e1 = e1fn(this.es);
                e2 = e2fn(this.es);
                e3 = e3fn(this.es);

                if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
                  //North pole case
                  Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  M = Mlp - rh;
                  lat = imlfn(M / this.a, e0, e1, e2, e3);
                  lon = adjust_lon(this.long0 + Math.atan2(p.x, -1 * p.y));
                  p.x = lon;
                  p.y = lat;
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
                  //South pole case
                  Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  M = rh - Mlp;
                  lat = imlfn(M / this.a, e0, e1, e2, e3);
                  lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
                  p.x = lon;
                  p.y = lat;
                  return p;
                } else {
                  //default case
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  Az = Math.atan2(p.x, p.y);
                  N1 = gN(this.a, this.e, this.sin_p12);
                  cosAz = Math.cos(Az);
                  tmp = this.e * this.cos_p12 * cosAz;
                  A = -tmp * tmp / (1 - this.es);
                  B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
                  D = rh / N1;
                  Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
                  F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
                  psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
                  lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
                  lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));
                  p.x = lon;
                  p.y = lat;
                  return p;
                }
              }
            }
            var names$q = ["Azimuthal_Equidistant", "aeqd"];
            var aeqd = {
              init: init$q,
              forward: forward$o,
              inverse: inverse$o,
              names: names$q
            };

            function init$r() {
              //double temp;      /* temporary variable    */

              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.sin_p14 = Math.sin(this.lat0);
              this.cos_p14 = Math.cos(this.lat0);
            }
            /* Orthographic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$p(p) {
              var sinphi, cosphi;
              /* sin and cos value        */

              var dlon;
              /* delta longitude value      */

              var coslon;
              /* cos of longitude        */

              var ksp;
              /* scale factor          */

              var g, x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              dlon = adjust_lon(lon - this.long0);
              sinphi = Math.sin(lat);
              cosphi = Math.cos(lat);
              coslon = Math.cos(dlon);
              g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
              ksp = 1;

              if (g > 0 || Math.abs(g) <= EPSLN) {
                x = this.a * ksp * cosphi * Math.sin(dlon);
                y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$p(p) {
              var rh;
              /* height above ellipsoid      */

              var z;
              /* angle          */

              var sinz, cosz;
              /* sin of z and cos of z      */

              var con;
              var lon, lat;
              /* Inverse equations
                  -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              rh = Math.sqrt(p.x * p.x + p.y * p.y);
              z = asinz(rh / this.a);
              sinz = Math.sin(z);
              cosz = Math.cos(z);
              lon = this.long0;

              if (Math.abs(rh) <= EPSLN) {
                lat = this.lat0;
                p.x = lon;
                p.y = lat;
                return p;
              }

              lat = asinz(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);
              con = Math.abs(this.lat0) - HALF_PI;

              if (Math.abs(con) <= EPSLN) {
                if (this.lat0 >= 0) {
                  lon = adjust_lon(this.long0 + Math.atan2(p.x, -p.y));
                } else {
                  lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
                }

                p.x = lon;
                p.y = lat;
                return p;
              }

              lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$r = ["ortho"];
            var ortho = {
              init: init$r,
              forward: forward$p,
              inverse: inverse$p,
              names: names$r
            };

            // QSC projection rewritten from the original PROJ4
            /* constants */

            var FACE_ENUM = {
              FRONT: 1,
              RIGHT: 2,
              BACK: 3,
              LEFT: 4,
              TOP: 5,
              BOTTOM: 6
            };
            var AREA_ENUM = {
              AREA_0: 1,
              AREA_1: 2,
              AREA_2: 3,
              AREA_3: 4
            };
            function init$s() {
              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0;
              this.lat0 = this.lat0 || 0;
              this.long0 = this.long0 || 0;
              this.lat_ts = this.lat_ts || 0;
              this.title = this.title || "Quadrilateralized Spherical Cube";
              /* Determine the cube face from the center of projection. */

              if (this.lat0 >= HALF_PI - FORTPI / 2.0) {
                this.face = FACE_ENUM.TOP;
              } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {
                this.face = FACE_ENUM.BOTTOM;
              } else if (Math.abs(this.long0) <= FORTPI) {
                this.face = FACE_ENUM.FRONT;
              } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
                this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
              } else {
                this.face = FACE_ENUM.BACK;
              }
              /* Fill in useful values for the ellipsoid <-> sphere shift
               * described in [LK12]. */


              if (this.es !== 0) {
                this.one_minus_f = 1 - (this.a - this.b) / this.a;
                this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
              }
            } // QSC forward equations--mapping lat,long to x,y
            // -----------------------------------------------------------------

            function forward$q(p) {
              var xy = {
                x: 0,
                y: 0
              };
              var lat, lon;
              var theta, phi;
              var t, mu;
              /* nu; */

              var area = {
                value: 0
              }; // move lon according to projection's lon

              p.x -= this.long0;
              /* Convert the geodetic latitude to a geocentric latitude.
               * This corresponds to the shift from the ellipsoid to the sphere
               * described in [LK12]. */

              if (this.es !== 0) {
                //if (P->es != 0) {
                lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
              } else {
                lat = p.y;
              }
              /* Convert the input lat, lon into theta, phi as used by QSC.
               * This depends on the cube face and the area on it.
               * For the top and bottom face, we can compute theta and phi
               * directly from phi, lam. For the other faces, we must use
               * unit sphere cartesian coordinates as an intermediate step. */


              lon = p.x; //lon = lp.lam;

              if (this.face === FACE_ENUM.TOP) {
                phi = HALF_PI - lat;

                if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
                  area.value = AREA_ENUM.AREA_0;
                  theta = lon - HALF_PI;
                } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
                  area.value = AREA_ENUM.AREA_1;
                  theta = lon > 0.0 ? lon - SPI : lon + SPI;
                } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
                  area.value = AREA_ENUM.AREA_2;
                  theta = lon + HALF_PI;
                } else {
                  area.value = AREA_ENUM.AREA_3;
                  theta = lon;
                }
              } else if (this.face === FACE_ENUM.BOTTOM) {
                phi = HALF_PI + lat;

                if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
                  area.value = AREA_ENUM.AREA_0;
                  theta = -lon + HALF_PI;
                } else if (lon < FORTPI && lon >= -FORTPI) {
                  area.value = AREA_ENUM.AREA_1;
                  theta = -lon;
                } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
                  area.value = AREA_ENUM.AREA_2;
                  theta = -lon - HALF_PI;
                } else {
                  area.value = AREA_ENUM.AREA_3;
                  theta = lon > 0.0 ? -lon + SPI : -lon - SPI;
                }
              } else {
                var q, r, s;
                var sinlat, coslat;
                var sinlon, coslon;

                if (this.face === FACE_ENUM.RIGHT) {
                  lon = qsc_shift_lon_origin(lon, +HALF_PI);
                } else if (this.face === FACE_ENUM.BACK) {
                  lon = qsc_shift_lon_origin(lon, +SPI);
                } else if (this.face === FACE_ENUM.LEFT) {
                  lon = qsc_shift_lon_origin(lon, -HALF_PI);
                }

                sinlat = Math.sin(lat);
                coslat = Math.cos(lat);
                sinlon = Math.sin(lon);
                coslon = Math.cos(lon);
                q = coslat * coslon;
                r = coslat * sinlon;
                s = sinlat;

                if (this.face === FACE_ENUM.FRONT) {
                  phi = Math.acos(q);
                  theta = qsc_fwd_equat_face_theta(phi, s, r, area);
                } else if (this.face === FACE_ENUM.RIGHT) {
                  phi = Math.acos(r);
                  theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
                } else if (this.face === FACE_ENUM.BACK) {
                  phi = Math.acos(-q);
                  theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
                } else if (this.face === FACE_ENUM.LEFT) {
                  phi = Math.acos(-r);
                  theta = qsc_fwd_equat_face_theta(phi, s, q, area);
                } else {
                  /* Impossible */
                  phi = theta = 0;
                  area.value = AREA_ENUM.AREA_0;
                }
              }
              /* Compute mu and nu for the area of definition.
               * For mu, see Eq. (3-21) in [OL76], but note the typos:
               * compare with Eq. (3-14). For nu, see Eq. (3-38). */


              mu = Math.atan(12 / SPI * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
              t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));
              /* Apply the result to the real area. */

              if (area.value === AREA_ENUM.AREA_1) {
                mu += HALF_PI;
              } else if (area.value === AREA_ENUM.AREA_2) {
                mu += SPI;
              } else if (area.value === AREA_ENUM.AREA_3) {
                mu += 1.5 * SPI;
              }
              /* Now compute x, y from mu and nu */


              xy.x = t * Math.cos(mu);
              xy.y = t * Math.sin(mu);
              xy.x = xy.x * this.a + this.x0;
              xy.y = xy.y * this.a + this.y0;
              p.x = xy.x;
              p.y = xy.y;
              return p;
            } // QSC inverse equations--mapping x,y to lat/long
            // -----------------------------------------------------------------

            function inverse$q(p) {
              var lp = {
                lam: 0,
                phi: 0
              };
              var mu, nu, cosmu, tannu;
              var tantheta, theta, cosphi, phi;
              var t;
              var area = {
                value: 0
              };
              /* de-offset */

              p.x = (p.x - this.x0) / this.a;
              p.y = (p.y - this.y0) / this.a;
              /* Convert the input x, y to the mu and nu angles as used by QSC.
               * This depends on the area of the cube face. */

              nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
              mu = Math.atan2(p.y, p.x);

              if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {
                area.value = AREA_ENUM.AREA_0;
              } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {
                area.value = AREA_ENUM.AREA_1;
                mu -= HALF_PI;
              } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {
                area.value = AREA_ENUM.AREA_2;
                mu = mu < 0.0 ? mu + SPI : mu - SPI;
              } else {
                area.value = AREA_ENUM.AREA_3;
                mu += HALF_PI;
              }
              /* Compute phi and theta for the area of definition.
               * The inverse projection is not described in the original paper, but some
               * good hints can be found here (as of 2011-12-14):
               * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302
               * (search for "Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>") */


              t = SPI / 12 * Math.tan(mu);
              tantheta = Math.sin(t) / (Math.cos(t) - 1 / Math.sqrt(2));
              theta = Math.atan(tantheta);
              cosmu = Math.cos(mu);
              tannu = Math.tan(nu);
              cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));

              if (cosphi < -1) {
                cosphi = -1;
              } else if (cosphi > +1) {
                cosphi = +1;
              }
              /* Apply the result to the real area on the cube face.
               * For the top and bottom face, we can compute phi and lam directly.
               * For the other faces, we must use unit sphere cartesian coordinates
               * as an intermediate step. */


              if (this.face === FACE_ENUM.TOP) {
                phi = Math.acos(cosphi);
                lp.phi = HALF_PI - phi;

                if (area.value === AREA_ENUM.AREA_0) {
                  lp.lam = theta + HALF_PI;
                } else if (area.value === AREA_ENUM.AREA_1) {
                  lp.lam = theta < 0.0 ? theta + SPI : theta - SPI;
                } else if (area.value === AREA_ENUM.AREA_2) {
                  lp.lam = theta - HALF_PI;
                } else
                  /* area.value == AREA_ENUM.AREA_3 */
                  {
                    lp.lam = theta;
                  }
              } else if (this.face === FACE_ENUM.BOTTOM) {
                phi = Math.acos(cosphi);
                lp.phi = phi - HALF_PI;

                if (area.value === AREA_ENUM.AREA_0) {
                  lp.lam = -theta + HALF_PI;
                } else if (area.value === AREA_ENUM.AREA_1) {
                  lp.lam = -theta;
                } else if (area.value === AREA_ENUM.AREA_2) {
                  lp.lam = -theta - HALF_PI;
                } else
                  /* area.value == AREA_ENUM.AREA_3 */
                  {
                    lp.lam = theta < 0.0 ? -theta - SPI : -theta + SPI;
                  }
              } else {
                /* Compute phi and lam via cartesian unit sphere coordinates. */
                var q, r, s;
                q = cosphi;
                t = q * q;

                if (t >= 1) {
                  s = 0;
                } else {
                  s = Math.sqrt(1 - t) * Math.sin(theta);
                }

                t += s * s;

                if (t >= 1) {
                  r = 0;
                } else {
                  r = Math.sqrt(1 - t);
                }
                /* Rotate q,r,s into the correct area. */


                if (area.value === AREA_ENUM.AREA_1) {
                  t = r;
                  r = -s;
                  s = t;
                } else if (area.value === AREA_ENUM.AREA_2) {
                  r = -r;
                  s = -s;
                } else if (area.value === AREA_ENUM.AREA_3) {
                  t = r;
                  r = s;
                  s = -t;
                }
                /* Rotate q,r,s into the correct cube face. */


                if (this.face === FACE_ENUM.RIGHT) {
                  t = q;
                  q = -r;
                  r = t;
                } else if (this.face === FACE_ENUM.BACK) {
                  q = -q;
                  r = -r;
                } else if (this.face === FACE_ENUM.LEFT) {
                  t = q;
                  q = r;
                  r = -t;
                }
                /* Now compute phi and lam from the unit sphere coordinates. */


                lp.phi = Math.acos(-s) - HALF_PI;
                lp.lam = Math.atan2(r, q);

                if (this.face === FACE_ENUM.RIGHT) {
                  lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
                } else if (this.face === FACE_ENUM.BACK) {
                  lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);
                } else if (this.face === FACE_ENUM.LEFT) {
                  lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
                }
              }
              /* Apply the shift from the sphere to the ellipsoid as described
               * in [LK12]. */


              if (this.es !== 0) {
                var invert_sign;
                var tanphi, xa;
                invert_sign = lp.phi < 0 ? 1 : 0;
                tanphi = Math.tan(lp.phi);
                xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
                lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));

                if (invert_sign) {
                  lp.phi = -lp.phi;
                }
              }

              lp.lam += this.long0;
              p.x = lp.lam;
              p.y = lp.phi;
              return p;
            }
            /* Helper function for forward projection: compute the theta angle
             * and determine the area number. */

            function qsc_fwd_equat_face_theta(phi, y, x, area) {
              var theta;

              if (phi < EPSLN) {
                area.value = AREA_ENUM.AREA_0;
                theta = 0.0;
              } else {
                theta = Math.atan2(y, x);

                if (Math.abs(theta) <= FORTPI) {
                  area.value = AREA_ENUM.AREA_0;
                } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
                  area.value = AREA_ENUM.AREA_1;
                  theta -= HALF_PI;
                } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
                  area.value = AREA_ENUM.AREA_2;
                  theta = theta >= 0.0 ? theta - SPI : theta + SPI;
                } else {
                  area.value = AREA_ENUM.AREA_3;
                  theta += HALF_PI;
                }
              }

              return theta;
            }
            /* Helper function: shift the longitude. */


            function qsc_shift_lon_origin(lon, offset) {
              var slon = lon + offset;

              if (slon < -SPI) {
                slon += TWO_PI;
              } else if (slon > +SPI) {
                slon -= TWO_PI;
              }

              return slon;
            }

            var names$s = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
            var qsc = {
              init: init$s,
              forward: forward$q,
              inverse: inverse$q,
              names: names$s
            };

            // Robinson projection
            var COEFS_X = [[1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06], [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06], [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07], [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06], [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06], [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08], [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06], [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06], [0.9216, -0.00467746, -0.00010457, 4.81243e-06], [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06], [0.8679, -0.00609363, -0.000113898, 3.32484e-06], [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07], [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07], [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06], [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06], [0.6732, -0.00986209, -0.000199569, 1.91974e-05], [0.6213, -0.010418, 8.83923e-05, 6.24051e-06], [0.5722, -0.00906601, 0.000182, 6.24051e-06], [0.5322, -0.00677797, 0.000275608, 6.24051e-06]];
            var COEFS_Y = [[-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11], [0.0620, 0.0124, -1.26793e-09, 4.22642e-10], [0.1240, 0.0124, 5.07171e-09, -1.60604e-09], [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09], [0.2480, 0.0124002, 7.10039e-08, -2.24e-08], [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08], [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07], [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07], [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07], [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07], [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07], [0.6769, 0.011713, -3.20223e-05, -5.16405e-07], [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07], [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06], [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09], [0.8936, 0.00969686, -6.4636e-05, -8.547e-06], [0.9394, 0.00840947, -0.000192841, -4.2106e-06], [0.9761, 0.00616527, -0.000256, -4.2106e-06], [1.0000, 0.00328947, -0.000319159, -4.2106e-06]];
            var FXC = 0.8487;
            var FYC = 1.3523;
            var C1 = R2D / 5; // rad to 5-degree interval

            var RC1 = 1 / C1;
            var NODES = 18;

            var poly3_val = function (coefs, x) {
              return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
            };

            var poly3_der = function (coefs, x) {
              return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
            };

            function newton_rapshon(f_df, start, max_err, iters) {
              var x = start;

              for (; iters; --iters) {
                var upd = f_df(x);
                x -= upd;

                if (Math.abs(upd) < max_err) {
                  break;
                }
              }

              return x;
            }

            function init$t() {
              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0;
              this.long0 = this.long0 || 0;
              this.es = 0;
              this.title = this.title || "Robinson";
            }
            function forward$r(ll) {
              var lon = adjust_lon(ll.x - this.long0);
              var dphi = Math.abs(ll.y);
              var i = Math.floor(dphi * C1);

              if (i < 0) {
                i = 0;
              } else if (i >= NODES) {
                i = NODES - 1;
              }

              dphi = R2D * (dphi - RC1 * i);
              var xy = {
                x: poly3_val(COEFS_X[i], dphi) * lon,
                y: poly3_val(COEFS_Y[i], dphi)
              };

              if (ll.y < 0) {
                xy.y = -xy.y;
              }

              xy.x = xy.x * this.a * FXC + this.x0;
              xy.y = xy.y * this.a * FYC + this.y0;
              return xy;
            }
            function inverse$r(xy) {
              var ll = {
                x: (xy.x - this.x0) / (this.a * FXC),
                y: Math.abs(xy.y - this.y0) / (this.a * FYC)
              };

              if (ll.y >= 1) {
                // pathologic case
                ll.x /= COEFS_X[NODES][0];
                ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;
              } else {
                // find table interval
                var i = Math.floor(ll.y * NODES);

                if (i < 0) {
                  i = 0;
                } else if (i >= NODES) {
                  i = NODES - 1;
                }

                for (;;) {
                  if (COEFS_Y[i][0] > ll.y) {
                    --i;
                  } else if (COEFS_Y[i + 1][0] <= ll.y) {
                    ++i;
                  } else {
                    break;
                  }
                } // linear interpolation in 5 degree interval


                var coefs = COEFS_Y[i];
                var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i + 1][0] - coefs[0]); // find t so that poly3_val(coefs, t) = ll.y

                t = newton_rapshon(function (x) {
                  return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);
                }, t, EPSLN, 100);
                ll.x /= poly3_val(COEFS_X[i], t);
                ll.y = (5 * i + t) * D2R;

                if (xy.y < 0) {
                  ll.y = -ll.y;
                }
              }

              ll.x = adjust_lon(ll.x + this.long0);
              return ll;
            }
            var names$t = ["Robinson", "robin"];
            var robin = {
              init: init$t,
              forward: forward$r,
              inverse: inverse$r,
              names: names$t
            };

            function includedProjections (proj4) {
              proj4.Proj.projections.add(tmerc);
              proj4.Proj.projections.add(etmerc);
              proj4.Proj.projections.add(utm);
              proj4.Proj.projections.add(sterea);
              proj4.Proj.projections.add(stere);
              proj4.Proj.projections.add(somerc);
              proj4.Proj.projections.add(omerc);
              proj4.Proj.projections.add(lcc);
              proj4.Proj.projections.add(krovak);
              proj4.Proj.projections.add(cass);
              proj4.Proj.projections.add(laea);
              proj4.Proj.projections.add(aea);
              proj4.Proj.projections.add(gnom);
              proj4.Proj.projections.add(cea);
              proj4.Proj.projections.add(eqc);
              proj4.Proj.projections.add(poly);
              proj4.Proj.projections.add(nzmg);
              proj4.Proj.projections.add(mill);
              proj4.Proj.projections.add(sinu);
              proj4.Proj.projections.add(moll);
              proj4.Proj.projections.add(eqdc);
              proj4.Proj.projections.add(vandg);
              proj4.Proj.projections.add(aeqd);
              proj4.Proj.projections.add(ortho);
              proj4.Proj.projections.add(qsc);
              proj4.Proj.projections.add(robin);
            }

            proj4.defaultDatum = 'WGS84'; //default datum

            proj4.Proj = Projection;
            proj4.WGS84 = new proj4.Proj('WGS84');
            proj4.Point = Point$1;
            proj4.toPoint = common;
            proj4.defs = defs;
            proj4.transform = transform;
            proj4.mgrs = mgrs;
            proj4.version = version$1;
            includedProjections(proj4);

            var proj4$1 = proj4.hasOwnProperty('default') ? proj4.default : proj4; // Checks if `list` looks like a `[x, y]`.

            function isXY(list) {
              return list.length >= 2 && typeof list[0] === 'number' && typeof list[1] === 'number';
            }

            function traverseCoords(coordinates, callback) {
              if (isXY(coordinates)) return callback(coordinates);
              return coordinates.map(function (coord) {
                return traverseCoords(coord, callback);
              });
            } // Simplistic shallow clone that will work for a normal GeoJSON object.


            function clone(obj) {
              if (null == obj || 'object' !== typeof obj) return obj;
              var copy = obj.constructor();

              for (var attr in obj) {
                if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
              }

              return copy;
            }

            function traverseGeoJson(geometryCb, nodeCb, geojson) {
              if (geojson == null) return geojson;
              var r = clone(geojson);
              var self = traverseGeoJson.bind(this, geometryCb, nodeCb);

              switch (geojson.type) {
                case 'Feature':
                  r.geometry = self(geojson.geometry);
                  break;

                case 'FeatureCollection':
                  r.features = r.features.map(self);
                  break;

                case 'GeometryCollection':
                  r.geometries = r.geometries.map(self);
                  break;

                default:
                  geometryCb(r);
                  break;
              }

              if (nodeCb) nodeCb(r);
              return r;
            }

            function detectCrs(geojson, projs) {
              var crsInfo = geojson.crs,
                  crs;

              if (crsInfo === undefined) {
                throw new Error('Unable to detect CRS, GeoJSON has no "crs" property.');
              }

              if (crsInfo.type === 'name') {
                crs = projs[crsInfo.properties.name];
              } else if (crsInfo.type === 'EPSG') {
                crs = projs['EPSG:' + crsInfo.properties.code];
              }

              if (!crs) {
                throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));
              }

              return crs;
            }

            function determineCrs(crs, projs) {
              if (typeof crs === 'string' || crs instanceof String) {
                return projs[crs] || proj4$1.Proj(crs);
              }

              return crs;
            }

            function calcBbox(geojson) {
              var min = [Number.MAX_VALUE, Number.MAX_VALUE],
                  max = [-Number.MAX_VALUE, -Number.MAX_VALUE];
              traverseGeoJson(function (_gj) {
                traverseCoords(_gj.coordinates, function (xy) {
                  min[0] = Math.min(min[0], xy[0]);
                  min[1] = Math.min(min[1], xy[1]);
                  max[0] = Math.max(max[0], xy[0]);
                  max[1] = Math.max(max[1], xy[1]);
                });
              }, null, geojson);
              return [min[0], min[1], max[0], max[1]];
            }

            function reproject(geojson, from, to, projs) {
              projs = projs || {};

              if (!from) {
                from = detectCrs(geojson, projs);
              } else {
                from = determineCrs(from, projs);
              }

              to = determineCrs(to, projs);
              var transform = proj4$1(from, to).forward.bind(transform);

              var transformGeometryCoords = function (gj) {
                // No easy way to put correct CRS info into the GeoJSON,
                // and definitely wrong to keep the old, so delete it.
                if (gj.crs) {
                  delete gj.crs;
                }

                gj.coordinates = traverseCoords(gj.coordinates, transform);
              };

              var transformBbox = function (gj) {
                if (gj.bbox) {
                  gj.bbox = calcBbox(gj);
                }
              };

              return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);
            }

            var reproject_1 = {
              detectCrs: detectCrs,
              reproject: reproject,
              reverse: function (geojson) {
                return traverseGeoJson(function (gj) {
                  gj.coordinates = traverseCoords(gj.coordinates, function (xy) {
                    return [xy[1], xy[0]];
                  });
                }, null, geojson);
              },
              toWgs84: function (geojson, from, projs) {
                return reproject(geojson, from, proj4$1.WGS84, projs);
              }
            };

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.
            // resolves . and .. elements in a path array with directory names there
            // must be no slashes, empty elements, or device names (c:\) in the array
            // (so also no leading and trailing slashes - it does not distinguish
            // relative and absolute paths)
            function normalizeArray(parts, allowAboveRoot) {
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;

              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];

                if (last === '.') {
                  parts.splice(i, 1);
                } else if (last === '..') {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              } // if the path is allowed to go above the root, restore leading ..s


              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift('..');
                }
              }

              return parts;
            } // Split a filename into [root, dir, basename, ext], unix version
            // 'root' is just a slash, or nothing.


            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

            var splitPath = function (filename) {
              return splitPathRe.exec(filename).slice(1);
            }; // path.resolve([from ...], to)
            // posix version


            function resolve() {
              var resolvedPath = '',
                  resolvedAbsolute = false;

              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = i >= 0 ? arguments[i] : '/'; // Skip empty and invalid entries

                if (typeof path !== 'string') {
                  throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                  continue;
                }

                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
              } // At this point the path should be resolved to a full absolute path, but
              // handle relative paths to be safe (might happen when process.cwd() fails)
              // Normalize the path


              resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
                return !!p;
              }), !resolvedAbsolute).join('/');
              return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
            }
            // posix version

            function normalize(path) {
              var isPathAbsolute = isAbsolute(path),
                  trailingSlash = substr(path, -1) === '/'; // Normalize the path

              path = normalizeArray(filter(path.split('/'), function (p) {
                return !!p;
              }), !isPathAbsolute).join('/');

              if (!path && !isPathAbsolute) {
                path = '.';
              }

              if (path && trailingSlash) {
                path += '/';
              }

              return (isPathAbsolute ? '/' : '') + path;
            }

            function isAbsolute(path) {
              return path.charAt(0) === '/';
            } // posix version

            function join() {
              var paths = Array.prototype.slice.call(arguments, 0);
              return normalize(filter(paths, function (p, index) {
                if (typeof p !== 'string') {
                  throw new TypeError('Arguments to path.join must be strings');
                }

                return p;
              }).join('/'));
            } // path.relative(from, to)
            // posix version

            function relative(from, to) {
              from = resolve(from).substr(1);
              to = resolve(to).substr(1);

              function trim(arr) {
                var start = 0;

                for (; start < arr.length; start++) {
                  if (arr[start] !== '') break;
                }

                var end = arr.length - 1;

                for (; end >= 0; end--) {
                  if (arr[end] !== '') break;
                }

                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }

              var fromParts = trim(from.split('/'));
              var toParts = trim(to.split('/'));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;

              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }

              var outputParts = [];

              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
              }

              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join('/');
            }
            var sep = '/';
            var delimiter = ':';
            function dirname(path) {
              var result = splitPath(path),
                  root = result[0],
                  dir = result[1];

              if (!root && !dir) {
                // No dirname whatsoever
                return '.';
              }

              if (dir) {
                // It has a dirname, strip trailing slash
                dir = dir.substr(0, dir.length - 1);
              }

              return root + dir;
            }
            function basename(path, ext) {
              var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }

              return f;
            }
            function extname(path) {
              return splitPath(path)[3];
            }
            var path = {
              extname: extname,
              basename: basename,
              dirname: dirname,
              sep: sep,
              delimiter: delimiter,
              relative: relative,
              join: join,
              isAbsolute: isAbsolute,
              normalize: normalize,
              resolve: resolve
            };

            function filter(xs, f) {
              if (xs.filter) return xs.filter(f);
              var res = [];

              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs)) res.push(xs[i]);
              }

              return res;
            } // String.prototype.substr - negative index don't work in IE8


            var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
              return str.substr(start, len);
            } : function (str, start, len) {
              if (start < 0) start = str.length + start;
              return str.substr(start, len);
            };

            var fs = {};

            // calculate simplification data using optimized Douglas-Peucker algorithm
            function simplify(coords, first, last, sqTolerance) {
              var maxSqDist = sqTolerance;
              var mid = last - first >> 1;
              var minPosToMid = last - first;
              var index;
              var ax = coords[first];
              var ay = coords[first + 1];
              var bx = coords[last];
              var by = coords[last + 1];

              for (var i = first + 3; i < last; i += 3) {
                var d = getSqSegDist(coords[i], coords[i + 1], ax, ay, bx, by);

                if (d > maxSqDist) {
                  index = i;
                  maxSqDist = d;
                } else if (d === maxSqDist) {
                  // a workaround to ensure we choose a pivot close to the middle of the list,
                  // reducing recursion depth, for certain degenerate inputs
                  // https://github.com/mapbox/geojson-vt/issues/104
                  var posToMid = Math.abs(i - mid);

                  if (posToMid < minPosToMid) {
                    index = i;
                    minPosToMid = posToMid;
                  }
                }
              }

              if (maxSqDist > sqTolerance) {
                if (index - first > 3) simplify(coords, first, index, sqTolerance);
                coords[index + 2] = maxSqDist;
                if (last - index > 3) simplify(coords, index, last, sqTolerance);
              }
            } // square distance from a point to a segment

            function getSqSegDist(px, py, x, y, bx, by) {
              var dx = bx - x;
              var dy = by - y;

              if (dx !== 0 || dy !== 0) {
                var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);

                if (t > 1) {
                  x = bx;
                  y = by;
                } else if (t > 0) {
                  x += dx * t;
                  y += dy * t;
                }
              }

              dx = px - x;
              dy = py - y;
              return dx * dx + dy * dy;
            }

            function createFeature(id, type, geom, tags) {
              var feature = {
                id: typeof id === 'undefined' ? null : id,
                type: type,
                geometry: geom,
                tags: tags,
                minX: Infinity,
                minY: Infinity,
                maxX: -Infinity,
                maxY: -Infinity
              };
              calcBBox(feature);
              return feature;
            }

            function calcBBox(feature) {
              var geom = feature.geometry;
              var type = feature.type;

              if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {
                calcLineBBox(feature, geom);
              } else if (type === 'Polygon' || type === 'MultiLineString') {
                for (var i = 0; i < geom.length; i++) {
                  calcLineBBox(feature, geom[i]);
                }
              } else if (type === 'MultiPolygon') {
                for (i = 0; i < geom.length; i++) {
                  for (var j = 0; j < geom[i].length; j++) {
                    calcLineBBox(feature, geom[i][j]);
                  }
                }
              }
            }

            function calcLineBBox(feature, geom) {
              for (var i = 0; i < geom.length; i += 3) {
                feature.minX = Math.min(feature.minX, geom[i]);
                feature.minY = Math.min(feature.minY, geom[i + 1]);
                feature.maxX = Math.max(feature.maxX, geom[i]);
                feature.maxY = Math.max(feature.maxY, geom[i + 1]);
              }
            }

            function convert(data, options) {
              var features = [];

              if (data.type === 'FeatureCollection') {
                for (var i = 0; i < data.features.length; i++) {
                  convertFeature(features, data.features[i], options, i);
                }
              } else if (data.type === 'Feature') {
                convertFeature(features, data, options);
              } else {
                // single geometry or a geometry collection
                convertFeature(features, {
                  geometry: data
                }, options);
              }

              return features;
            }

            function convertFeature(features, geojson, options, index) {
              if (!geojson.geometry) return;
              var coords = geojson.geometry.coordinates;
              var type = geojson.geometry.type;
              var tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);
              var geometry = [];
              var id = geojson.id;

              if (options.promoteId) {
                id = geojson.properties[options.promoteId];
              } else if (options.generateId) {
                id = index || 0;
              }

              if (type === 'Point') {
                convertPoint(coords, geometry);
              } else if (type === 'MultiPoint') {
                for (var i = 0; i < coords.length; i++) {
                  convertPoint(coords[i], geometry);
                }
              } else if (type === 'LineString') {
                convertLine(coords, geometry, tolerance, false);
              } else if (type === 'MultiLineString') {
                if (options.lineMetrics) {
                  // explode into linestrings to be able to track metrics
                  for (i = 0; i < coords.length; i++) {
                    geometry = [];
                    convertLine(coords[i], geometry, tolerance, false);
                    features.push(createFeature(id, 'LineString', geometry, geojson.properties));
                  }

                  return;
                } else {
                  convertLines(coords, geometry, tolerance, false);
                }
              } else if (type === 'Polygon') {
                convertLines(coords, geometry, tolerance, true);
              } else if (type === 'MultiPolygon') {
                for (i = 0; i < coords.length; i++) {
                  var polygon = [];
                  convertLines(coords[i], polygon, tolerance, true);
                  geometry.push(polygon);
                }
              } else if (type === 'GeometryCollection') {
                for (i = 0; i < geojson.geometry.geometries.length; i++) {
                  convertFeature(features, {
                    id: id,
                    geometry: geojson.geometry.geometries[i],
                    properties: geojson.properties
                  }, options, index);
                }

                return;
              } else {
                throw new Error('Input data is not a valid GeoJSON object.');
              }

              features.push(createFeature(id, type, geometry, geojson.properties));
            }

            function convertPoint(coords, out) {
              out.push(projectX(coords[0]));
              out.push(projectY(coords[1]));
              out.push(0);
            }

            function convertLine(ring, out, tolerance, isPolygon) {
              var x0, y0;
              var size = 0;

              for (var j = 0; j < ring.length; j++) {
                var x = projectX(ring[j][0]);
                var y = projectY(ring[j][1]);
                out.push(x);
                out.push(y);
                out.push(0);

                if (j > 0) {
                  if (isPolygon) {
                    size += (x0 * y - x * y0) / 2; // area
                  } else {
                    size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length
                  }
                }

                x0 = x;
                y0 = y;
              }

              var last = out.length - 3;
              out[2] = 1;
              simplify(out, 0, last, tolerance);
              out[last + 2] = 1;
              out.size = Math.abs(size);
              out.start = 0;
              out.end = out.size;
            }

            function convertLines(rings, out, tolerance, isPolygon) {
              for (var i = 0; i < rings.length; i++) {
                var geom = [];
                convertLine(rings[i], geom, tolerance, isPolygon);
                out.push(geom);
              }
            }

            function projectX(x) {
              return x / 360 + 0.5;
            }

            function projectY(y) {
              var sin = Math.sin(y * Math.PI / 180);
              var y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;
              return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;
            }

            /* clip features between two axis-parallel lines:
             *     |        |
             *  ___|___     |     /
             * /   |   \____|____/
             *     |        |
             */

            function clip(features, scale, k1, k2, axis, minAll, maxAll, options) {
              k1 /= scale;
              k2 /= scale;
              if (minAll >= k1 && maxAll < k2) return features; // trivial accept
              else if (maxAll < k1 || minAll >= k2) return null; // trivial reject

              var clipped = [];

              for (var i = 0; i < features.length; i++) {
                var feature = features[i];
                var geometry = feature.geometry;
                var type = feature.type;
                var min = axis === 0 ? feature.minX : feature.minY;
                var max = axis === 0 ? feature.maxX : feature.maxY;

                if (min >= k1 && max < k2) {
                  // trivial accept
                  clipped.push(feature);
                  continue;
                } else if (max < k1 || min >= k2) {
                  // trivial reject
                  continue;
                }

                var newGeometry = [];

                if (type === 'Point' || type === 'MultiPoint') {
                  clipPoints(geometry, newGeometry, k1, k2, axis);
                } else if (type === 'LineString') {
                  clipLine(geometry, newGeometry, k1, k2, axis, false, options.lineMetrics);
                } else if (type === 'MultiLineString') {
                  clipLines(geometry, newGeometry, k1, k2, axis, false);
                } else if (type === 'Polygon') {
                  clipLines(geometry, newGeometry, k1, k2, axis, true);
                } else if (type === 'MultiPolygon') {
                  for (var j = 0; j < geometry.length; j++) {
                    var polygon = [];
                    clipLines(geometry[j], polygon, k1, k2, axis, true);

                    if (polygon.length) {
                      newGeometry.push(polygon);
                    }
                  }
                }

                if (newGeometry.length) {
                  if (options.lineMetrics && type === 'LineString') {
                    for (j = 0; j < newGeometry.length; j++) {
                      clipped.push(createFeature(feature.id, type, newGeometry[j], feature.tags));
                    }

                    continue;
                  }

                  if (type === 'LineString' || type === 'MultiLineString') {
                    if (newGeometry.length === 1) {
                      type = 'LineString';
                      newGeometry = newGeometry[0];
                    } else {
                      type = 'MultiLineString';
                    }
                  }

                  if (type === 'Point' || type === 'MultiPoint') {
                    type = newGeometry.length === 3 ? 'Point' : 'MultiPoint';
                  }

                  clipped.push(createFeature(feature.id, type, newGeometry, feature.tags));
                }
              }

              return clipped.length ? clipped : null;
            }

            function clipPoints(geom, newGeom, k1, k2, axis) {
              for (var i = 0; i < geom.length; i += 3) {
                var a = geom[i + axis];

                if (a >= k1 && a <= k2) {
                  newGeom.push(geom[i]);
                  newGeom.push(geom[i + 1]);
                  newGeom.push(geom[i + 2]);
                }
              }
            }

            function clipLine(geom, newGeom, k1, k2, axis, isPolygon, trackMetrics) {
              var slice = newSlice(geom);
              var intersect = axis === 0 ? intersectX : intersectY;
              var len = geom.start;
              var segLen, t;

              for (var i = 0; i < geom.length - 3; i += 3) {
                var ax = geom[i];
                var ay = geom[i + 1];
                var az = geom[i + 2];
                var bx = geom[i + 3];
                var by = geom[i + 4];
                var a = axis === 0 ? ax : ay;
                var b = axis === 0 ? bx : by;
                var exited = false;
                if (trackMetrics) segLen = Math.sqrt(Math.pow(ax - bx, 2) + Math.pow(ay - by, 2));

                if (a < k1) {
                  // ---|-->  | (line enters the clip region from the left)
                  if (b > k1) {
                    t = intersect(slice, ax, ay, bx, by, k1);
                    if (trackMetrics) slice.start = len + segLen * t;
                  }
                } else if (a > k2) {
                  // |  <--|--- (line enters the clip region from the right)
                  if (b < k2) {
                    t = intersect(slice, ax, ay, bx, by, k2);
                    if (trackMetrics) slice.start = len + segLen * t;
                  }
                } else {
                  addPoint(slice, ax, ay, az);
                }

                if (b < k1 && a >= k1) {
                  // <--|---  | or <--|-----|--- (line exits the clip region on the left)
                  t = intersect(slice, ax, ay, bx, by, k1);
                  exited = true;
                }

                if (b > k2 && a <= k2) {
                  // |  ---|--> or ---|-----|--> (line exits the clip region on the right)
                  t = intersect(slice, ax, ay, bx, by, k2);
                  exited = true;
                }

                if (!isPolygon && exited) {
                  if (trackMetrics) slice.end = len + segLen * t;
                  newGeom.push(slice);
                  slice = newSlice(geom);
                }

                if (trackMetrics) len += segLen;
              } // add the last point


              var last = geom.length - 3;
              ax = geom[last];
              ay = geom[last + 1];
              az = geom[last + 2];
              a = axis === 0 ? ax : ay;
              if (a >= k1 && a <= k2) addPoint(slice, ax, ay, az); // close the polygon if its endpoints are not the same after clipping

              last = slice.length - 3;

              if (isPolygon && last >= 3 && (slice[last] !== slice[0] || slice[last + 1] !== slice[1])) {
                addPoint(slice, slice[0], slice[1], slice[2]);
              } // add the final slice


              if (slice.length) {
                newGeom.push(slice);
              }
            }

            function newSlice(line) {
              var slice = [];
              slice.size = line.size;
              slice.start = line.start;
              slice.end = line.end;
              return slice;
            }

            function clipLines(geom, newGeom, k1, k2, axis, isPolygon) {
              for (var i = 0; i < geom.length; i++) {
                clipLine(geom[i], newGeom, k1, k2, axis, isPolygon, false);
              }
            }

            function addPoint(out, x, y, z) {
              out.push(x);
              out.push(y);
              out.push(z);
            }

            function intersectX(out, ax, ay, bx, by, x) {
              var t = (x - ax) / (bx - ax);
              out.push(x);
              out.push(ay + (by - ay) * t);
              out.push(1);
              return t;
            }

            function intersectY(out, ax, ay, bx, by, y) {
              var t = (y - ay) / (by - ay);
              out.push(ax + (bx - ax) * t);
              out.push(y);
              out.push(1);
              return t;
            }

            function wrap(features, options) {
              var buffer = options.buffer / options.extent;
              var merged = features;
              var left = clip(features, 1, -1 - buffer, buffer, 0, -1, 2, options); // left world copy

              var right = clip(features, 1, 1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy

              if (left || right) {
                merged = clip(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy

                if (left) merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center

                if (right) merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center
              }

              return merged;
            }

            function shiftFeatureCoords(features, offset) {
              var newFeatures = [];

              for (var i = 0; i < features.length; i++) {
                var feature = features[i],
                    type = feature.type;
                var newGeometry;

                if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {
                  newGeometry = shiftCoords(feature.geometry, offset);
                } else if (type === 'MultiLineString' || type === 'Polygon') {
                  newGeometry = [];

                  for (var j = 0; j < feature.geometry.length; j++) {
                    newGeometry.push(shiftCoords(feature.geometry[j], offset));
                  }
                } else if (type === 'MultiPolygon') {
                  newGeometry = [];

                  for (j = 0; j < feature.geometry.length; j++) {
                    var newPolygon = [];

                    for (var k = 0; k < feature.geometry[j].length; k++) {
                      newPolygon.push(shiftCoords(feature.geometry[j][k], offset));
                    }

                    newGeometry.push(newPolygon);
                  }
                }

                newFeatures.push(createFeature(feature.id, type, newGeometry, feature.tags));
              }

              return newFeatures;
            }

            function shiftCoords(points, offset) {
              var newPoints = [];
              newPoints.size = points.size;

              if (points.start !== undefined) {
                newPoints.start = points.start;
                newPoints.end = points.end;
              }

              for (var i = 0; i < points.length; i += 3) {
                newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);
              }

              return newPoints;
            }

            // Transforms the coordinates of each feature in the given tile from
            // mercator-projected space into (extent x extent) tile space.
            function transformTile(tile, extent) {
              if (tile.transformed) return tile;
              var z2 = 1 << tile.z,
                  tx = tile.x,
                  ty = tile.y,
                  i,
                  j,
                  k;

              for (i = 0; i < tile.features.length; i++) {
                var feature = tile.features[i],
                    geom = feature.geometry,
                    type = feature.type;
                feature.geometry = [];

                if (type === 1) {
                  for (j = 0; j < geom.length; j += 2) {
                    feature.geometry.push(transformPoint(geom[j], geom[j + 1], extent, z2, tx, ty));
                  }
                } else {
                  for (j = 0; j < geom.length; j++) {
                    var ring = [];

                    for (k = 0; k < geom[j].length; k += 2) {
                      ring.push(transformPoint(geom[j][k], geom[j][k + 1], extent, z2, tx, ty));
                    }

                    feature.geometry.push(ring);
                  }
                }
              }

              tile.transformed = true;
              return tile;
            }

            function transformPoint(x, y, extent, z2, tx, ty) {
              return [Math.round(extent * (x * z2 - tx)), Math.round(extent * (y * z2 - ty))];
            }

            function createTile(features, z, tx, ty, options) {
              var tolerance = z === options.maxZoom ? 0 : options.tolerance / ((1 << z) * options.extent);
              var tile = {
                features: [],
                numPoints: 0,
                numSimplified: 0,
                numFeatures: 0,
                source: null,
                x: tx,
                y: ty,
                z: z,
                transformed: false,
                minX: 2,
                minY: 1,
                maxX: -1,
                maxY: 0
              };

              for (var i = 0; i < features.length; i++) {
                tile.numFeatures++;
                addFeature(tile, features[i], tolerance, options);
                var minX = features[i].minX;
                var minY = features[i].minY;
                var maxX = features[i].maxX;
                var maxY = features[i].maxY;
                if (minX < tile.minX) tile.minX = minX;
                if (minY < tile.minY) tile.minY = minY;
                if (maxX > tile.maxX) tile.maxX = maxX;
                if (maxY > tile.maxY) tile.maxY = maxY;
              }

              return tile;
            }

            function addFeature(tile, feature, tolerance, options) {
              var geom = feature.geometry,
                  type = feature.type,
                  simplified = [];

              if (type === 'Point' || type === 'MultiPoint') {
                for (var i = 0; i < geom.length; i += 3) {
                  simplified.push(geom[i]);
                  simplified.push(geom[i + 1]);
                  tile.numPoints++;
                  tile.numSimplified++;
                }
              } else if (type === 'LineString') {
                addLine(simplified, geom, tile, tolerance, false, false);
              } else if (type === 'MultiLineString' || type === 'Polygon') {
                for (i = 0; i < geom.length; i++) {
                  addLine(simplified, geom[i], tile, tolerance, type === 'Polygon', i === 0);
                }
              } else if (type === 'MultiPolygon') {
                for (var k = 0; k < geom.length; k++) {
                  var polygon = geom[k];

                  for (i = 0; i < polygon.length; i++) {
                    addLine(simplified, polygon[i], tile, tolerance, true, i === 0);
                  }
                }
              }

              if (simplified.length) {
                var tags = feature.tags || null;

                if (type === 'LineString' && options.lineMetrics) {
                  tags = {};

                  for (var key in feature.tags) tags[key] = feature.tags[key];

                  tags['mapbox_clip_start'] = geom.start / geom.size;
                  tags['mapbox_clip_end'] = geom.end / geom.size;
                }

                var tileFeature = {
                  geometry: simplified,
                  type: type === 'Polygon' || type === 'MultiPolygon' ? 3 : type === 'LineString' || type === 'MultiLineString' ? 2 : 1,
                  tags: tags
                };

                if (feature.id !== null) {
                  tileFeature.id = feature.id;
                }

                tile.features.push(tileFeature);
              }
            }

            function addLine(result, geom, tile, tolerance, isPolygon, isOuter) {
              var sqTolerance = tolerance * tolerance;

              if (tolerance > 0 && geom.size < (isPolygon ? sqTolerance : tolerance)) {
                tile.numPoints += geom.length / 3;
                return;
              }

              var ring = [];

              for (var i = 0; i < geom.length; i += 3) {
                if (tolerance === 0 || geom[i + 2] > sqTolerance) {
                  tile.numSimplified++;
                  ring.push(geom[i]);
                  ring.push(geom[i + 1]);
                }

                tile.numPoints++;
              }

              if (isPolygon) rewind(ring, isOuter);
              result.push(ring);
            }

            function rewind(ring, clockwise) {
              var area = 0;

              for (var i = 0, len = ring.length, j = len - 2; i < len; j = i, i += 2) {
                area += (ring[i] - ring[j]) * (ring[i + 1] + ring[j + 1]);
              }

              if (area > 0 === clockwise) {
                for (i = 0, len = ring.length; i < len / 2; i += 2) {
                  var x = ring[i];
                  var y = ring[i + 1];
                  ring[i] = ring[len - 2 - i];
                  ring[i + 1] = ring[len - 1 - i];
                  ring[len - 2 - i] = x;
                  ring[len - 1 - i] = y;
                }
              }
            }

            function geojsonvt(data, options) {
              return new GeoJSONVT(data, options);
            }

            function GeoJSONVT(data, options) {
              options = this.options = extend$1(Object.create(this.options), options);
              var debug = options.debug;
              if (debug) console.time('preprocess data');
              if (options.maxZoom < 0 || options.maxZoom > 24) throw new Error('maxZoom should be in the 0-24 range');
              if (options.promoteId && options.generateId) throw new Error('promoteId and generateId cannot be used together.');
              var features = convert(data, options);
              this.tiles = {};
              this.tileCoords = [];

              if (debug) {
                console.timeEnd('preprocess data');
                console.log('index: maxZoom: %d, maxPoints: %d', options.indexMaxZoom, options.indexMaxPoints);
                console.time('generate tiles');
                this.stats = {};
                this.total = 0;
              }

              features = wrap(features, options); // start slicing from the top tile down

              if (features.length) this.splitTile(features, 0, 0, 0);

              if (debug) {
                if (features.length) console.log('features: %d, points: %d', this.tiles[0].numFeatures, this.tiles[0].numPoints);
                console.timeEnd('generate tiles');
                console.log('tiles generated:', this.total, JSON.stringify(this.stats));
              }
            }

            GeoJSONVT.prototype.options = {
              maxZoom: 14,
              // max zoom to preserve detail on
              indexMaxZoom: 5,
              // max zoom in the tile index
              indexMaxPoints: 100000,
              // max number of points per tile in the tile index
              tolerance: 3,
              // simplification tolerance (higher means simpler)
              extent: 4096,
              // tile extent
              buffer: 64,
              // tile buffer on each side
              lineMetrics: false,
              // whether to calculate line metrics
              promoteId: null,
              // name of a feature property to be promoted to feature.id
              generateId: false,
              // whether to generate feature ids. Cannot be used with promoteId
              debug: 0 // logging level (0, 1 or 2)

            };

            GeoJSONVT.prototype.splitTile = function (features, z, x, y, cz, cx, cy) {
              var stack = [features, z, x, y],
                  options = this.options,
                  debug = options.debug; // avoid recursion by using a processing queue

              while (stack.length) {
                y = stack.pop();
                x = stack.pop();
                z = stack.pop();
                features = stack.pop();
                var z2 = 1 << z,
                    id = toID(z, x, y),
                    tile = this.tiles[id];

                if (!tile) {
                  if (debug > 1) console.time('creation');
                  tile = this.tiles[id] = createTile(features, z, x, y, options);
                  this.tileCoords.push({
                    z: z,
                    x: x,
                    y: y
                  });

                  if (debug) {
                    if (debug > 1) {
                      console.log('tile z%d-%d-%d (features: %d, points: %d, simplified: %d)', z, x, y, tile.numFeatures, tile.numPoints, tile.numSimplified);
                      console.timeEnd('creation');
                    }

                    var key = 'z' + z;
                    this.stats[key] = (this.stats[key] || 0) + 1;
                    this.total++;
                  }
                } // save reference to original geometry in tile so that we can drill down later if we stop now


                tile.source = features; // if it's the first-pass tiling

                if (!cz) {
                  // stop tiling if we reached max zoom, or if the tile is too simple
                  if (z === options.indexMaxZoom || tile.numPoints <= options.indexMaxPoints) continue; // if a drilldown to a specific tile
                } else {
                  // stop tiling if we reached base zoom or our target tile zoom
                  if (z === options.maxZoom || z === cz) continue; // stop tiling if it's not an ancestor of the target tile

                  var m = 1 << cz - z;
                  if (x !== Math.floor(cx / m) || y !== Math.floor(cy / m)) continue;
                } // if we slice further down, no need to keep source geometry


                tile.source = null;
                if (features.length === 0) continue;
                if (debug > 1) console.time('clipping'); // values we'll use for clipping

                var k1 = 0.5 * options.buffer / options.extent,
                    k2 = 0.5 - k1,
                    k3 = 0.5 + k1,
                    k4 = 1 + k1,
                    tl,
                    bl,
                    tr,
                    br,
                    left,
                    right;
                tl = bl = tr = br = null;
                left = clip(features, z2, x - k1, x + k3, 0, tile.minX, tile.maxX, options);
                right = clip(features, z2, x + k2, x + k4, 0, tile.minX, tile.maxX, options);
                features = null;

                if (left) {
                  tl = clip(left, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);
                  bl = clip(left, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);
                  left = null;
                }

                if (right) {
                  tr = clip(right, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);
                  br = clip(right, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);
                  right = null;
                }

                if (debug > 1) console.timeEnd('clipping');
                stack.push(tl || [], z + 1, x * 2, y * 2);
                stack.push(bl || [], z + 1, x * 2, y * 2 + 1);
                stack.push(tr || [], z + 1, x * 2 + 1, y * 2);
                stack.push(br || [], z + 1, x * 2 + 1, y * 2 + 1);
              }
            };

            GeoJSONVT.prototype.getTile = function (z, x, y) {
              var options = this.options,
                  extent = options.extent,
                  debug = options.debug;
              if (z < 0 || z > 24) return null;
              var z2 = 1 << z;
              x = (x % z2 + z2) % z2; // wrap tile x coordinate

              var id = toID(z, x, y);
              if (this.tiles[id]) return transformTile(this.tiles[id], extent);
              if (debug > 1) console.log('drilling down to z%d-%d-%d', z, x, y);
              var z0 = z,
                  x0 = x,
                  y0 = y,
                  parent;

              while (!parent && z0 > 0) {
                z0--;
                x0 = Math.floor(x0 / 2);
                y0 = Math.floor(y0 / 2);
                parent = this.tiles[toID(z0, x0, y0)];
              }

              if (!parent || !parent.source) return null; // if we found a parent tile containing the original geometry, we can drill down from it

              if (debug > 1) console.log('found parent tile z%d-%d-%d', z0, x0, y0);
              if (debug > 1) console.time('drilling down');
              this.splitTile(parent.source, z0, x0, y0, z, x, y);
              if (debug > 1) console.timeEnd('drilling down');
              return this.tiles[id] ? transformTile(this.tiles[id], extent) : null;
            };

            function toID(z, x, y) {
              return ((1 << z) * y + x) * 32 + z;
            }

            function extend$1(dest, src) {
              for (var i in src) dest[i] = src[i];

              return dest;
            }

            var read$1 = function (buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? nBytes - 1 : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];
              i += d;
              e = s & (1 << -nBits) - 1;
              s >>= -nBits;
              nBits += eLen;

              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & (1 << -nBits) - 1;
              e >>= -nBits;
              nBits += mLen;

              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }

              return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            };

            var write$1 = function (buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
              var i = isLE ? 0 : nBytes - 1;
              var d = isLE ? 1 : -1;
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);

                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }

                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }

                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = e << mLen | m;
              eLen += mLen;

              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            };

            var ieee754 = {
              read: read$1,
              write: write$1
            };

            var pbf = Pbf;

            function Pbf(buf) {
              this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
              this.pos = 0;
              this.type = 0;
              this.length = this.buf.length;
            }

            Pbf.Varint = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum

            Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64

            Pbf.Bytes = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields

            Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

            var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
                SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
            Pbf.prototype = {
              destroy: function () {
                this.buf = null;
              },
              // === READING =================================================================
              readFields: function (readField, result, end) {
                end = end || this.length;

                while (this.pos < end) {
                  var val = this.readVarint(),
                      tag = val >> 3,
                      startPos = this.pos;
                  this.type = val & 0x7;
                  readField(tag, result, this);
                  if (this.pos === startPos) this.skip(val);
                }

                return result;
              },
              readMessage: function (readField, result) {
                return this.readFields(readField, result, this.readVarint() + this.pos);
              },
              readFixed32: function () {
                var val = readUInt32(this.buf, this.pos);
                this.pos += 4;
                return val;
              },
              readSFixed32: function () {
                var val = readInt32(this.buf, this.pos);
                this.pos += 4;
                return val;
              },
              // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)
              readFixed64: function () {
                var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
                this.pos += 8;
                return val;
              },
              readSFixed64: function () {
                var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
                this.pos += 8;
                return val;
              },
              readFloat: function () {
                var val = ieee754.read(this.buf, this.pos, true, 23, 4);
                this.pos += 4;
                return val;
              },
              readDouble: function () {
                var val = ieee754.read(this.buf, this.pos, true, 52, 8);
                this.pos += 8;
                return val;
              },
              readVarint: function (isSigned) {
                var buf = this.buf,
                    val,
                    b;
                b = buf[this.pos++];
                val = b & 0x7f;
                if (b < 0x80) return val;
                b = buf[this.pos++];
                val |= (b & 0x7f) << 7;
                if (b < 0x80) return val;
                b = buf[this.pos++];
                val |= (b & 0x7f) << 14;
                if (b < 0x80) return val;
                b = buf[this.pos++];
                val |= (b & 0x7f) << 21;
                if (b < 0x80) return val;
                b = buf[this.pos];
                val |= (b & 0x0f) << 28;
                return readVarintRemainder(val, isSigned, this);
              },
              readVarint64: function () {
                // for compatibility with v2.0.1
                return this.readVarint(true);
              },
              readSVarint: function () {
                var num = this.readVarint();
                return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
              },
              readBoolean: function () {
                return Boolean(this.readVarint());
              },
              readString: function () {
                var end = this.readVarint() + this.pos,
                    str = readUtf8(this.buf, this.pos, end);
                this.pos = end;
                return str;
              },
              readBytes: function () {
                var end = this.readVarint() + this.pos,
                    buffer = this.buf.subarray(this.pos, end);
                this.pos = end;
                return buffer;
              },
              // verbose for performance reasons; doesn't affect gzipped size
              readPackedVarint: function (arr, isSigned) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readVarint(isSigned));

                return arr;
              },
              readPackedSVarint: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readSVarint());

                return arr;
              },
              readPackedBoolean: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readBoolean());

                return arr;
              },
              readPackedFloat: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readFloat());

                return arr;
              },
              readPackedDouble: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readDouble());

                return arr;
              },
              readPackedFixed32: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readFixed32());

                return arr;
              },
              readPackedSFixed32: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readSFixed32());

                return arr;
              },
              readPackedFixed64: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readFixed64());

                return arr;
              },
              readPackedSFixed64: function (arr) {
                var end = readPackedEnd(this);
                arr = arr || [];

                while (this.pos < end) arr.push(this.readSFixed64());

                return arr;
              },
              skip: function (val) {
                var type = val & 0x7;
                if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {} else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;else if (type === Pbf.Fixed32) this.pos += 4;else if (type === Pbf.Fixed64) this.pos += 8;else throw new Error('Unimplemented type: ' + type);
              },
              // === WRITING =================================================================
              writeTag: function (tag, type) {
                this.writeVarint(tag << 3 | type);
              },
              realloc: function (min) {
                var length = this.length || 16;

                while (length < this.pos + min) length *= 2;

                if (length !== this.length) {
                  var buf = new Uint8Array(length);
                  buf.set(this.buf);
                  this.buf = buf;
                  this.length = length;
                }
              },
              finish: function () {
                this.length = this.pos;
                this.pos = 0;
                return this.buf.subarray(0, this.length);
              },
              writeFixed32: function (val) {
                this.realloc(4);
                writeInt32(this.buf, val, this.pos);
                this.pos += 4;
              },
              writeSFixed32: function (val) {
                this.realloc(4);
                writeInt32(this.buf, val, this.pos);
                this.pos += 4;
              },
              writeFixed64: function (val) {
                this.realloc(8);
                writeInt32(this.buf, val & -1, this.pos);
                writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
                this.pos += 8;
              },
              writeSFixed64: function (val) {
                this.realloc(8);
                writeInt32(this.buf, val & -1, this.pos);
                writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
                this.pos += 8;
              },
              writeVarint: function (val) {
                val = +val || 0;

                if (val > 0xfffffff || val < 0) {
                  writeBigVarint(val, this);
                  return;
                }

                this.realloc(4);
                this.buf[this.pos++] = val & 0x7f | (val > 0x7f ? 0x80 : 0);
                if (val <= 0x7f) return;
                this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);
                if (val <= 0x7f) return;
                this.buf[this.pos++] = (val >>>= 7) & 0x7f | (val > 0x7f ? 0x80 : 0);
                if (val <= 0x7f) return;
                this.buf[this.pos++] = val >>> 7 & 0x7f;
              },
              writeSVarint: function (val) {
                this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
              },
              writeBoolean: function (val) {
                this.writeVarint(Boolean(val));
              },
              writeString: function (str) {
                str = String(str);
                this.realloc(str.length * 4);
                this.pos++; // reserve 1 byte for short string length

                var startPos = this.pos; // write the string directly to the buffer and see how much was written

                this.pos = writeUtf8(this.buf, str, this.pos);
                var len = this.pos - startPos;
                if (len >= 0x80) makeRoomForExtraLength(startPos, len, this); // finally, write the message length in the reserved place and restore the position

                this.pos = startPos - 1;
                this.writeVarint(len);
                this.pos += len;
              },
              writeFloat: function (val) {
                this.realloc(4);
                ieee754.write(this.buf, val, this.pos, true, 23, 4);
                this.pos += 4;
              },
              writeDouble: function (val) {
                this.realloc(8);
                ieee754.write(this.buf, val, this.pos, true, 52, 8);
                this.pos += 8;
              },
              writeBytes: function (buffer) {
                var len = buffer.length;
                this.writeVarint(len);
                this.realloc(len);

                for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
              },
              writeRawMessage: function (fn, obj) {
                this.pos++; // reserve 1 byte for short message length
                // write the message directly to the buffer and see how much was written

                var startPos = this.pos;
                fn(obj, this);
                var len = this.pos - startPos;
                if (len >= 0x80) makeRoomForExtraLength(startPos, len, this); // finally, write the message length in the reserved place and restore the position

                this.pos = startPos - 1;
                this.writeVarint(len);
                this.pos += len;
              },
              writeMessage: function (tag, fn, obj) {
                this.writeTag(tag, Pbf.Bytes);
                this.writeRawMessage(fn, obj);
              },
              writePackedVarint: function (tag, arr) {
                this.writeMessage(tag, writePackedVarint, arr);
              },
              writePackedSVarint: function (tag, arr) {
                this.writeMessage(tag, writePackedSVarint, arr);
              },
              writePackedBoolean: function (tag, arr) {
                this.writeMessage(tag, writePackedBoolean, arr);
              },
              writePackedFloat: function (tag, arr) {
                this.writeMessage(tag, writePackedFloat, arr);
              },
              writePackedDouble: function (tag, arr) {
                this.writeMessage(tag, writePackedDouble, arr);
              },
              writePackedFixed32: function (tag, arr) {
                this.writeMessage(tag, writePackedFixed32, arr);
              },
              writePackedSFixed32: function (tag, arr) {
                this.writeMessage(tag, writePackedSFixed32, arr);
              },
              writePackedFixed64: function (tag, arr) {
                this.writeMessage(tag, writePackedFixed64, arr);
              },
              writePackedSFixed64: function (tag, arr) {
                this.writeMessage(tag, writePackedSFixed64, arr);
              },
              writeBytesField: function (tag, buffer) {
                this.writeTag(tag, Pbf.Bytes);
                this.writeBytes(buffer);
              },
              writeFixed32Field: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed32);
                this.writeFixed32(val);
              },
              writeSFixed32Field: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed32);
                this.writeSFixed32(val);
              },
              writeFixed64Field: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed64);
                this.writeFixed64(val);
              },
              writeSFixed64Field: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed64);
                this.writeSFixed64(val);
              },
              writeVarintField: function (tag, val) {
                this.writeTag(tag, Pbf.Varint);
                this.writeVarint(val);
              },
              writeSVarintField: function (tag, val) {
                this.writeTag(tag, Pbf.Varint);
                this.writeSVarint(val);
              },
              writeStringField: function (tag, str) {
                this.writeTag(tag, Pbf.Bytes);
                this.writeString(str);
              },
              writeFloatField: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed32);
                this.writeFloat(val);
              },
              writeDoubleField: function (tag, val) {
                this.writeTag(tag, Pbf.Fixed64);
                this.writeDouble(val);
              },
              writeBooleanField: function (tag, val) {
                this.writeVarintField(tag, Boolean(val));
              }
            };

            function readVarintRemainder(l, s, p) {
              var buf = p.buf,
                  h,
                  b;
              b = buf[p.pos++];
              h = (b & 0x70) >> 4;
              if (b < 0x80) return toNum(l, h, s);
              b = buf[p.pos++];
              h |= (b & 0x7f) << 3;
              if (b < 0x80) return toNum(l, h, s);
              b = buf[p.pos++];
              h |= (b & 0x7f) << 10;
              if (b < 0x80) return toNum(l, h, s);
              b = buf[p.pos++];
              h |= (b & 0x7f) << 17;
              if (b < 0x80) return toNum(l, h, s);
              b = buf[p.pos++];
              h |= (b & 0x7f) << 24;
              if (b < 0x80) return toNum(l, h, s);
              b = buf[p.pos++];
              h |= (b & 0x01) << 31;
              if (b < 0x80) return toNum(l, h, s);
              throw new Error('Expected varint not more than 10 bytes');
            }

            function readPackedEnd(pbf) {
              return pbf.type === Pbf.Bytes ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
            }

            function toNum(low, high, isSigned) {
              if (isSigned) {
                return high * 0x100000000 + (low >>> 0);
              }

              return (high >>> 0) * 0x100000000 + (low >>> 0);
            }

            function writeBigVarint(val, pbf) {
              var low, high;

              if (val >= 0) {
                low = val % 0x100000000 | 0;
                high = val / 0x100000000 | 0;
              } else {
                low = ~(-val % 0x100000000);
                high = ~(-val / 0x100000000);

                if (low ^ 0xffffffff) {
                  low = low + 1 | 0;
                } else {
                  low = 0;
                  high = high + 1 | 0;
                }
              }

              if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
                throw new Error('Given varint doesn\'t fit into 10 bytes');
              }

              pbf.realloc(10);
              writeBigVarintLow(low, high, pbf);
              writeBigVarintHigh(high, pbf);
            }

            function writeBigVarintLow(low, high, pbf) {
              pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
              low >>>= 7;
              pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
              low >>>= 7;
              pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
              low >>>= 7;
              pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
              low >>>= 7;
              pbf.buf[pbf.pos] = low & 0x7f;
            }

            function writeBigVarintHigh(high, pbf) {
              var lsb = (high & 0x07) << 4;
              pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 0x80 : 0);
              if (!high) return;
              pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
              if (!high) return;
              pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
              if (!high) return;
              pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
              if (!high) return;
              pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
              if (!high) return;
              pbf.buf[pbf.pos++] = high & 0x7f;
            }

            function makeRoomForExtraLength(startPos, len, pbf) {
              var extraLen = len <= 0x3fff ? 1 : len <= 0x1fffff ? 2 : len <= 0xfffffff ? 3 : Math.ceil(Math.log(len) / (Math.LN2 * 7)); // if 1 byte isn't enough for encoding message length, shift the data to the right

              pbf.realloc(extraLen);

              for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
            }

            function writePackedVarint(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);
            }

            function writePackedSVarint(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);
            }

            function writePackedFloat(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);
            }

            function writePackedDouble(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);
            }

            function writePackedBoolean(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);
            }

            function writePackedFixed32(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);
            }

            function writePackedSFixed32(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);
            }

            function writePackedFixed64(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);
            }

            function writePackedSFixed64(arr, pbf) {
              for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);
            } // Buffer code below from https://github.com/feross/buffer, MIT-licensed


            function readUInt32(buf, pos) {
              return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 0x1000000;
            }

            function writeInt32(buf, val, pos) {
              buf[pos] = val;
              buf[pos + 1] = val >>> 8;
              buf[pos + 2] = val >>> 16;
              buf[pos + 3] = val >>> 24;
            }

            function readInt32(buf, pos) {
              return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);
            }

            function readUtf8(buf, pos, end) {
              var str = '';
              var i = pos;

              while (i < end) {
                var b0 = buf[i];
                var c = null; // codepoint

                var bytesPerSequence = b0 > 0xEF ? 4 : b0 > 0xDF ? 3 : b0 > 0xBF ? 2 : 1;
                if (i + bytesPerSequence > end) break;
                var b1, b2, b3;

                if (bytesPerSequence === 1) {
                  if (b0 < 0x80) {
                    c = b0;
                  }
                } else if (bytesPerSequence === 2) {
                  b1 = buf[i + 1];

                  if ((b1 & 0xC0) === 0x80) {
                    c = (b0 & 0x1F) << 0x6 | b1 & 0x3F;

                    if (c <= 0x7F) {
                      c = null;
                    }
                  }
                } else if (bytesPerSequence === 3) {
                  b1 = buf[i + 1];
                  b2 = buf[i + 2];

                  if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                    c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | b2 & 0x3F;

                    if (c <= 0x7FF || c >= 0xD800 && c <= 0xDFFF) {
                      c = null;
                    }
                  }
                } else if (bytesPerSequence === 4) {
                  b1 = buf[i + 1];
                  b2 = buf[i + 2];
                  b3 = buf[i + 3];

                  if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                    c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | b3 & 0x3F;

                    if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                    }
                  }
                }

                if (c === null) {
                  c = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (c > 0xFFFF) {
                  c -= 0x10000;
                  str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
                  c = 0xDC00 | c & 0x3FF;
                }

                str += String.fromCharCode(c);
                i += bytesPerSequence;
              }

              return str;
            }

            function writeUtf8(buf, str, pos) {
              for (var i = 0, c, lead; i < str.length; i++) {
                c = str.charCodeAt(i); // code point

                if (c > 0xD7FF && c < 0xE000) {
                  if (lead) {
                    if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                    } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                    }
                  } else {
                    if (c > 0xDBFF || i + 1 === str.length) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                    } else {
                      lead = c;
                    }

                    continue;
                  }
                } else if (lead) {
                  buf[pos++] = 0xEF;
                  buf[pos++] = 0xBF;
                  buf[pos++] = 0xBD;
                  lead = null;
                }

                if (c < 0x80) {
                  buf[pos++] = c;
                } else {
                  if (c < 0x800) {
                    buf[pos++] = c >> 0x6 | 0xC0;
                  } else {
                    if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                    } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                    }

                    buf[pos++] = c >> 0x6 & 0x3F | 0x80;
                  }

                  buf[pos++] = c & 0x3F | 0x80;
                }
              }

              return pos;
            }

            var pointGeometry = Point$2;
            /**
             * A standalone point geometry with useful accessor, comparison, and
             * modification methods.
             *
             * @class Point
             * @param {Number} x the x-coordinate. this could be longitude or screen
             * pixels, or any other sort of unit.
             * @param {Number} y the y-coordinate. this could be latitude or screen
             * pixels, or any other sort of unit.
             * @example
             * var point = new Point(-77, 38);
             */

            function Point$2(x, y) {
              this.x = x;
              this.y = y;
            }

            Point$2.prototype = {
              /**
               * Clone this point, returning a new point that can be modified
               * without affecting the old one.
               * @return {Point} the clone
               */
              clone: function () {
                return new Point$2(this.x, this.y);
              },

              /**
               * Add this point's x & y coordinates to another point,
               * yielding a new point.
               * @param {Point} p the other point
               * @return {Point} output point
               */
              add: function (p) {
                return this.clone()._add(p);
              },

              /**
               * Subtract this point's x & y coordinates to from point,
               * yielding a new point.
               * @param {Point} p the other point
               * @return {Point} output point
               */
              sub: function (p) {
                return this.clone()._sub(p);
              },

              /**
               * Multiply this point's x & y coordinates by point,
               * yielding a new point.
               * @param {Point} p the other point
               * @return {Point} output point
               */
              multByPoint: function (p) {
                return this.clone()._multByPoint(p);
              },

              /**
               * Divide this point's x & y coordinates by point,
               * yielding a new point.
               * @param {Point} p the other point
               * @return {Point} output point
               */
              divByPoint: function (p) {
                return this.clone()._divByPoint(p);
              },

              /**
               * Multiply this point's x & y coordinates by a factor,
               * yielding a new point.
               * @param {Point} k factor
               * @return {Point} output point
               */
              mult: function (k) {
                return this.clone()._mult(k);
              },

              /**
               * Divide this point's x & y coordinates by a factor,
               * yielding a new point.
               * @param {Point} k factor
               * @return {Point} output point
               */
              div: function (k) {
                return this.clone()._div(k);
              },

              /**
               * Rotate this point around the 0, 0 origin by an angle a,
               * given in radians
               * @param {Number} a angle to rotate around, in radians
               * @return {Point} output point
               */
              rotate: function (a) {
                return this.clone()._rotate(a);
              },

              /**
               * Rotate this point around p point by an angle a,
               * given in radians
               * @param {Number} a angle to rotate around, in radians
               * @param {Point} p Point to rotate around
               * @return {Point} output point
               */
              rotateAround: function (a, p) {
                return this.clone()._rotateAround(a, p);
              },

              /**
               * Multiply this point by a 4x1 transformation matrix
               * @param {Array<Number>} m transformation matrix
               * @return {Point} output point
               */
              matMult: function (m) {
                return this.clone()._matMult(m);
              },

              /**
               * Calculate this point but as a unit vector from 0, 0, meaning
               * that the distance from the resulting point to the 0, 0
               * coordinate will be equal to 1 and the angle from the resulting
               * point to the 0, 0 coordinate will be the same as before.
               * @return {Point} unit vector point
               */
              unit: function () {
                return this.clone()._unit();
              },

              /**
               * Compute a perpendicular point, where the new y coordinate
               * is the old x coordinate and the new x coordinate is the old y
               * coordinate multiplied by -1
               * @return {Point} perpendicular point
               */
              perp: function () {
                return this.clone()._perp();
              },

              /**
               * Return a version of this point with the x & y coordinates
               * rounded to integers.
               * @return {Point} rounded point
               */
              round: function () {
                return this.clone()._round();
              },

              /**
               * Return the magitude of this point: this is the Euclidean
               * distance from the 0, 0 coordinate to this point's x and y
               * coordinates.
               * @return {Number} magnitude
               */
              mag: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
              },

              /**
               * Judge whether this point is equal to another point, returning
               * true or false.
               * @param {Point} other the other point
               * @return {boolean} whether the points are equal
               */
              equals: function (other) {
                return this.x === other.x && this.y === other.y;
              },

              /**
               * Calculate the distance from this point to another point
               * @param {Point} p the other point
               * @return {Number} distance
               */
              dist: function (p) {
                return Math.sqrt(this.distSqr(p));
              },

              /**
               * Calculate the distance from this point to another point,
               * without the square root step. Useful if you're comparing
               * relative distances.
               * @param {Point} p the other point
               * @return {Number} distance
               */
              distSqr: function (p) {
                var dx = p.x - this.x,
                    dy = p.y - this.y;
                return dx * dx + dy * dy;
              },

              /**
               * Get the angle from the 0, 0 coordinate to this point, in radians
               * coordinates.
               * @return {Number} angle
               */
              angle: function () {
                return Math.atan2(this.y, this.x);
              },

              /**
               * Get the angle from this point to another point, in radians
               * @param {Point} b the other point
               * @return {Number} angle
               */
              angleTo: function (b) {
                return Math.atan2(this.y - b.y, this.x - b.x);
              },

              /**
               * Get the angle between this point and another point, in radians
               * @param {Point} b the other point
               * @return {Number} angle
               */
              angleWith: function (b) {
                return this.angleWithSep(b.x, b.y);
              },

              /*
               * Find the angle of the two vectors, solving the formula for
               * the cross product a x b = |a||b|sin(θ) for θ.
               * @param {Number} x the x-coordinate
               * @param {Number} y the y-coordinate
               * @return {Number} the angle in radians
               */
              angleWithSep: function (x, y) {
                return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);
              },
              _matMult: function (m) {
                var x = m[0] * this.x + m[1] * this.y,
                    y = m[2] * this.x + m[3] * this.y;
                this.x = x;
                this.y = y;
                return this;
              },
              _add: function (p) {
                this.x += p.x;
                this.y += p.y;
                return this;
              },
              _sub: function (p) {
                this.x -= p.x;
                this.y -= p.y;
                return this;
              },
              _mult: function (k) {
                this.x *= k;
                this.y *= k;
                return this;
              },
              _div: function (k) {
                this.x /= k;
                this.y /= k;
                return this;
              },
              _multByPoint: function (p) {
                this.x *= p.x;
                this.y *= p.y;
                return this;
              },
              _divByPoint: function (p) {
                this.x /= p.x;
                this.y /= p.y;
                return this;
              },
              _unit: function () {
                this._div(this.mag());

                return this;
              },
              _perp: function () {
                var y = this.y;
                this.y = this.x;
                this.x = -y;
                return this;
              },
              _rotate: function (angle) {
                var cos = Math.cos(angle),
                    sin = Math.sin(angle),
                    x = cos * this.x - sin * this.y,
                    y = sin * this.x + cos * this.y;
                this.x = x;
                this.y = y;
                return this;
              },
              _rotateAround: function (angle, p) {
                var cos = Math.cos(angle),
                    sin = Math.sin(angle),
                    x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),
                    y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);
                this.x = x;
                this.y = y;
                return this;
              },
              _round: function () {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                return this;
              }
            };
            /**
             * Construct a point from an array if necessary, otherwise if the input
             * is already a Point, or an unknown type, return it unchanged
             * @param {Array<Number>|Point|*} a any kind of input value
             * @return {Point} constructed point, or passed-through value.
             * @example
             * // this
             * var point = Point.convert([0, 1]);
             * // is equivalent to
             * var point = new Point(0, 1);
             */

            Point$2.convert = function (a) {
              if (a instanceof Point$2) {
                return a;
              }

              if (Array.isArray(a)) {
                return new Point$2(a[0], a[1]);
              }

              return a;
            };

            var vectortilefeature = VectorTileFeature;

            function VectorTileFeature(pbf, end, extent, keys, values) {
              // Public
              this.properties = {};
              this.extent = extent;
              this.type = 0; // Private

              this._pbf = pbf;
              this._geometry = -1;
              this._keys = keys;
              this._values = values;
              pbf.readFields(readFeature, this, end);
            }

            function readFeature(tag, feature, pbf) {
              if (tag == 1) feature.id = pbf.readVarint();else if (tag == 2) readTag(pbf, feature);else if (tag == 3) feature.type = pbf.readVarint();else if (tag == 4) feature._geometry = pbf.pos;
            }

            function readTag(pbf, feature) {
              var end = pbf.readVarint() + pbf.pos;

              while (pbf.pos < end) {
                var key = feature._keys[pbf.readVarint()],
                    value = feature._values[pbf.readVarint()];

                feature.properties[key] = value;
              }
            }

            VectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];

            VectorTileFeature.prototype.loadGeometry = function () {
              var pbf = this._pbf;
              pbf.pos = this._geometry;
              var end = pbf.readVarint() + pbf.pos,
                  cmd = 1,
                  length = 0,
                  x = 0,
                  y = 0,
                  lines = [],
                  line;

              while (pbf.pos < end) {
                if (length <= 0) {
                  var cmdLen = pbf.readVarint();
                  cmd = cmdLen & 0x7;
                  length = cmdLen >> 3;
                }

                length--;

                if (cmd === 1 || cmd === 2) {
                  x += pbf.readSVarint();
                  y += pbf.readSVarint();

                  if (cmd === 1) {
                    // moveTo
                    if (line) lines.push(line);
                    line = [];
                  }

                  line.push(new pointGeometry(x, y));
                } else if (cmd === 7) {
                  // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90
                  if (line) {
                    line.push(line[0].clone()); // closePolygon
                  }
                } else {
                  throw new Error('unknown command ' + cmd);
                }
              }

              if (line) lines.push(line);
              return lines;
            };

            VectorTileFeature.prototype.bbox = function () {
              var pbf = this._pbf;
              pbf.pos = this._geometry;
              var end = pbf.readVarint() + pbf.pos,
                  cmd = 1,
                  length = 0,
                  x = 0,
                  y = 0,
                  x1 = Infinity,
                  x2 = -Infinity,
                  y1 = Infinity,
                  y2 = -Infinity;

              while (pbf.pos < end) {
                if (length <= 0) {
                  var cmdLen = pbf.readVarint();
                  cmd = cmdLen & 0x7;
                  length = cmdLen >> 3;
                }

                length--;

                if (cmd === 1 || cmd === 2) {
                  x += pbf.readSVarint();
                  y += pbf.readSVarint();
                  if (x < x1) x1 = x;
                  if (x > x2) x2 = x;
                  if (y < y1) y1 = y;
                  if (y > y2) y2 = y;
                } else if (cmd !== 7) {
                  throw new Error('unknown command ' + cmd);
                }
              }

              return [x1, y1, x2, y2];
            };

            VectorTileFeature.prototype.toGeoJSON = function (x, y, z) {
              var size = this.extent * Math.pow(2, z),
                  x0 = this.extent * x,
                  y0 = this.extent * y,
                  coords = this.loadGeometry(),
                  type = VectorTileFeature.types[this.type],
                  i,
                  j;

              function project(line) {
                for (var j = 0; j < line.length; j++) {
                  var p = line[j],
                      y2 = 180 - (p.y + y0) * 360 / size;
                  line[j] = [(p.x + x0) * 360 / size - 180, 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90];
                }
              }

              switch (this.type) {
                case 1:
                  var points = [];

                  for (i = 0; i < coords.length; i++) {
                    points[i] = coords[i][0];
                  }

                  coords = points;
                  project(coords);
                  break;

                case 2:
                  for (i = 0; i < coords.length; i++) {
                    project(coords[i]);
                  }

                  break;

                case 3:
                  coords = classifyRings(coords);

                  for (i = 0; i < coords.length; i++) {
                    for (j = 0; j < coords[i].length; j++) {
                      project(coords[i][j]);
                    }
                  }

                  break;
              }

              if (coords.length === 1) {
                coords = coords[0];
              } else {
                type = 'Multi' + type;
              }

              var result = {
                type: "Feature",
                geometry: {
                  type: type,
                  coordinates: coords
                },
                properties: this.properties
              };

              if ('id' in this) {
                result.id = this.id;
              }

              return result;
            }; // classifies an array of rings into polygons with outer rings and holes


            function classifyRings(rings) {
              var len = rings.length;
              if (len <= 1) return [rings];
              var polygons = [],
                  polygon,
                  ccw;

              for (var i = 0; i < len; i++) {
                var area = signedArea(rings[i]);
                if (area === 0) continue;
                if (ccw === undefined) ccw = area < 0;

                if (ccw === area < 0) {
                  if (polygon) polygons.push(polygon);
                  polygon = [rings[i]];
                } else {
                  polygon.push(rings[i]);
                }
              }

              if (polygon) polygons.push(polygon);
              return polygons;
            }

            function signedArea(ring) {
              var sum = 0;

              for (var i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {
                p1 = ring[i];
                p2 = ring[j];
                sum += (p2.x - p1.x) * (p1.y + p2.y);
              }

              return sum;
            }

            var vectortilelayer = VectorTileLayer;

            function VectorTileLayer(pbf, end) {
              // Public
              this.version = 1;
              this.name = null;
              this.extent = 4096;
              this.length = 0; // Private

              this._pbf = pbf;
              this._keys = [];
              this._values = [];
              this._features = [];
              pbf.readFields(readLayer, this, end);
              this.length = this._features.length;
            }

            function readLayer(tag, layer, pbf) {
              if (tag === 15) layer.version = pbf.readVarint();else if (tag === 1) layer.name = pbf.readString();else if (tag === 5) layer.extent = pbf.readVarint();else if (tag === 2) layer._features.push(pbf.pos);else if (tag === 3) layer._keys.push(pbf.readString());else if (tag === 4) layer._values.push(readValueMessage(pbf));
            }

            function readValueMessage(pbf) {
              var value = null,
                  end = pbf.readVarint() + pbf.pos;

              while (pbf.pos < end) {
                var tag = pbf.readVarint() >> 3;
                value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;
              }

              return value;
            } // return feature `i` from this layer as a `VectorTileFeature`


            VectorTileLayer.prototype.feature = function (i) {
              if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');
              this._pbf.pos = this._features[i];

              var end = this._pbf.readVarint() + this._pbf.pos;

              return new vectortilefeature(this._pbf, end, this.extent, this._keys, this._values);
            };

            var vectortile = VectorTile;

            function VectorTile(pbf, end) {
              this.layers = pbf.readFields(readTile, {}, end);
            }

            function readTile(tag, layers, pbf) {
              if (tag === 3) {
                var layer = new vectortilelayer(pbf, pbf.readVarint() + pbf.pos);
                if (layer.length) layers[layer.name] = layer;
              }
            }

            var VectorTile$1 = vectortile;
            var VectorTileFeature$1 = vectortilefeature;
            var VectorTileLayer$1 = vectortilelayer;
            var vectorTile = {
              VectorTile: VectorTile$1,
              VectorTileFeature: VectorTileFeature$1,
              VectorTileLayer: VectorTileLayer$1
            };

            var VectorTileFeature$2 = vectorTile.VectorTileFeature;
            var geojson_wrapper = GeoJSONWrapper; // conform to vectortile api

            function GeoJSONWrapper(features, options) {
              this.options = options || {};
              this.features = features;
              this.length = features.length;
            }

            GeoJSONWrapper.prototype.feature = function (i) {
              return new FeatureWrapper(this.features[i], this.options.extent);
            };

            function FeatureWrapper(feature, extent) {
              this.id = typeof feature.id === 'number' ? feature.id : undefined;
              this.type = feature.type;
              this.rawGeometry = feature.type === 1 ? [feature.geometry] : feature.geometry;
              this.properties = feature.tags;
              this.extent = extent || 4096;
            }

            FeatureWrapper.prototype.loadGeometry = function () {
              var rings = this.rawGeometry;
              this.geometry = [];

              for (var i = 0; i < rings.length; i++) {
                var ring = rings[i];
                var newRing = [];

                for (var j = 0; j < ring.length; j++) {
                  newRing.push(new pointGeometry(ring[j][0], ring[j][1]));
                }

                this.geometry.push(newRing);
              }

              return this.geometry;
            };

            FeatureWrapper.prototype.bbox = function () {
              if (!this.geometry) this.loadGeometry();
              var rings = this.geometry;
              var x1 = Infinity;
              var x2 = -Infinity;
              var y1 = Infinity;
              var y2 = -Infinity;

              for (var i = 0; i < rings.length; i++) {
                var ring = rings[i];

                for (var j = 0; j < ring.length; j++) {
                  var coord = ring[j];
                  x1 = Math.min(x1, coord.x);
                  x2 = Math.max(x2, coord.x);
                  y1 = Math.min(y1, coord.y);
                  y2 = Math.max(y2, coord.y);
                }
              }

              return [x1, y1, x2, y2];
            };

            FeatureWrapper.prototype.toGeoJSON = VectorTileFeature$2.prototype.toGeoJSON;

            var vtPbf = fromVectorTileJs;
            var fromVectorTileJs_1 = fromVectorTileJs;
            var fromGeojsonVt_1 = fromGeojsonVt;
            var GeoJSONWrapper_1 = geojson_wrapper;
            /**
             * Serialize a vector-tile-js-created tile to pbf
             *
             * @param {Object} tile
             * @return {Buffer} uncompressed, pbf-serialized tile data
             */

            function fromVectorTileJs(tile) {
              var out = new pbf();
              writeTile(tile, out);
              return out.finish();
            }
            /**
             * Serialized a geojson-vt-created tile to pbf.
             *
             * @param {Object} layers - An object mapping layer names to geojson-vt-created vector tile objects
             * @param {Object} [options] - An object specifying the vector-tile specification version and extent that were used to create `layers`.
             * @param {Number} [options.version=1] - Version of vector-tile spec used
             * @param {Number} [options.extent=4096] - Extent of the vector tile
             * @return {Buffer} uncompressed, pbf-serialized tile data
             */


            function fromGeojsonVt(layers, options) {
              options = options || {};
              var l = {};

              for (var k in layers) {
                l[k] = new geojson_wrapper(layers[k].features, options);
                l[k].name = k;
                l[k].version = options.version;
                l[k].extent = options.extent;
              }

              return fromVectorTileJs({
                layers: l
              });
            }

            function writeTile(tile, pbf) {
              for (var key in tile.layers) {
                pbf.writeMessage(3, writeLayer, tile.layers[key]);
              }
            }

            function writeLayer(layer, pbf) {
              pbf.writeVarintField(15, layer.version || 1);
              pbf.writeStringField(1, layer.name || '');
              pbf.writeVarintField(5, layer.extent || 4096);
              var i;
              var context = {
                keys: [],
                values: [],
                keycache: {},
                valuecache: {}
              };

              for (i = 0; i < layer.length; i++) {
                context.feature = layer.feature(i);
                pbf.writeMessage(2, writeFeature, context);
              }

              var keys = context.keys;

              for (i = 0; i < keys.length; i++) {
                pbf.writeStringField(3, keys[i]);
              }

              var values = context.values;

              for (i = 0; i < values.length; i++) {
                pbf.writeMessage(4, writeValue, values[i]);
              }
            }

            function writeFeature(context, pbf) {
              var feature = context.feature;

              if (feature.id !== undefined) {
                pbf.writeVarintField(1, feature.id);
              }

              pbf.writeMessage(2, writeProperties, context);
              pbf.writeVarintField(3, feature.type);
              pbf.writeMessage(4, writeGeometry, feature);
            }

            function writeProperties(context, pbf) {
              var feature = context.feature;
              var keys = context.keys;
              var values = context.values;
              var keycache = context.keycache;
              var valuecache = context.valuecache;

              for (var key in feature.properties) {
                var keyIndex = keycache[key];

                if (typeof keyIndex === 'undefined') {
                  keys.push(key);
                  keyIndex = keys.length - 1;
                  keycache[key] = keyIndex;
                }

                pbf.writeVarint(keyIndex);
                var value = feature.properties[key];
                var type = typeof value;

                if (type !== 'string' && type !== 'boolean' && type !== 'number') {
                  value = JSON.stringify(value);
                }

                var valueKey = type + ':' + value;
                var valueIndex = valuecache[valueKey];

                if (typeof valueIndex === 'undefined') {
                  values.push(value);
                  valueIndex = values.length - 1;
                  valuecache[valueKey] = valueIndex;
                }

                pbf.writeVarint(valueIndex);
              }
            }

            function command(cmd, length) {
              return (length << 3) + (cmd & 0x7);
            }

            function zigzag(num) {
              return num << 1 ^ num >> 31;
            }

            function writeGeometry(feature, pbf) {
              var geometry = feature.loadGeometry();
              var type = feature.type;
              var x = 0;
              var y = 0;
              var rings = geometry.length;

              for (var r = 0; r < rings; r++) {
                var ring = geometry[r];
                var count = 1;

                if (type === 1) {
                  count = ring.length;
                }

                pbf.writeVarint(command(1, count)); // moveto
                // do not write polygon closing path as lineto

                var lineCount = type === 3 ? ring.length - 1 : ring.length;

                for (var i = 0; i < lineCount; i++) {
                  if (i === 1 && type !== 1) {
                    pbf.writeVarint(command(2, lineCount - 1)); // lineto
                  }

                  var dx = ring[i].x - x;
                  var dy = ring[i].y - y;
                  pbf.writeVarint(zigzag(dx));
                  pbf.writeVarint(zigzag(dy));
                  x += dx;
                  y += dy;
                }

                if (type === 3) {
                  pbf.writeVarint(command(7, 1)); // closepath
                }
              }
            }

            function writeValue(value, pbf) {
              var type = typeof value;

              if (type === 'string') {
                pbf.writeStringField(1, value);
              } else if (type === 'boolean') {
                pbf.writeBooleanField(7, value);
              } else if (type === 'number') {
                if (value % 1 !== 0) {
                  pbf.writeDoubleField(3, value);
                } else if (value < 0) {
                  pbf.writeSVarintField(6, value);
                } else {
                  pbf.writeVarintField(5, value);
                }
              }
            }
            vtPbf.fromVectorTileJs = fromVectorTileJs_1;
            vtPbf.fromGeojsonVt = fromGeojsonVt_1;
            vtPbf.GeoJSONWrapper = GeoJSONWrapper_1;

            /**
             * SQLite query builder module.
             * @module db/sqliteQueryBuilder
             */

            /**
             * Utility class to build sql queries
             * @class
             */
            function SqliteQueryBuilder() {}
            /**
             * Replaces all whitespace in a column name with underscores
             * @param  {string} columnName column name to fix
             * @return {string}
             */


            SqliteQueryBuilder.fixColumnName = function (columnName) {
              return columnName.replace(/\W+/g, '_');
            };
            /**
             * Builds a query
             * @param  {Boolean} distinct whether query should be distinct or not
             * @param  {string} tables   table names to query, added to the query from clause
             * @param  {string[]} [columns=*]  columns to query for
             * @param  {string} [where]    where clause
             * @param  {string} [join]     join clause
             * @param  {string} [groupBy]  group by clause
             * @param  {string} [having]   having clause
             * @param  {string} [orderBy]  order by clause
             * @param  {Number} [limit]    limit
             * @param  {Number} [offset]   offset
             * @return {string}
             */


            SqliteQueryBuilder.buildQuery = function (distinct, tables, columns, where, join, groupBy, having, orderBy, limit, offset) {
              var query = '';

              if (isEmpty(groupBy) && !isEmpty(having)) {
                throw new Error('Illegal Arguments: having clauses require a groupBy clause');
              }

              query += 'select ';

              if (distinct) {
                query += 'distinct ';
              }

              if (columns && columns.length) {
                query = appendColumnsToString(columns, query);
              } else {
                query += '* ';
              }

              query += 'from ' + tables;

              if (join) {
                query += ' ' + join;
              }

              query = appendClauseToString(query, ' where ', where);
              query = appendClauseToString(query, ' group by ', groupBy);
              query = appendClauseToString(query, ' having ', having);
              query = appendClauseToString(query, ' order by ', orderBy);
              query = appendClauseToString(query, ' limit ', limit);
              query = appendClauseToString(query, ' offset ', offset);
              return query;
            };
            /**
             * Builds a count statement
             * @param  {string} tables table names to query for
             * @param  {string} [where]  where clause
             * @return {string} count statement
             */


            SqliteQueryBuilder.buildCount = function (tables, where) {
              var query = 'select count(*) as count from ' + tables;
              query = appendClauseToString(query, ' where ', where);
              return query;
            };
            /**
             * Builds an insert statement using the properties of the object
             * @param  {string} table  table to insert into
             * @param  {Object} object object to insert
             * @return {string} insert statement
             */


            SqliteQueryBuilder.buildInsert = function (table, object) {
              if (object.getColumnNames) {
                return SqliteQueryBuilder.buildInsertFromColumnNames(table, object);
              }

              var insert = 'insert into ' + table + ' (';
              var keys = '';
              var values = '';
              var first = true;

              for (var key in object) {
                if (object.hasOwnProperty(key)) {
                  if (!first) {
                    keys += ',';
                    values += ',';
                  }

                  first = false;
                  keys += key;
                  values += '$' + SqliteQueryBuilder.fixColumnName(key);
                }
              }

              insert += keys + ') values (' + values + ')';
              return insert;
            };
            /**
             * Builds an insert statement from the object.getColumnNames method
             * @param  {string} table  table to insert into
             * @param  {Object} object object with a getColumnNames method
             * @return {string} insert statement
             */


            SqliteQueryBuilder.buildInsertFromColumnNames = function (table, object) {
              var insert = 'insert into ' + table + ' (';
              var keys = '';
              var values = '';
              var first = true;
              var columnNames = object.getColumnNames();

              for (var i = 0; i < columnNames.length; i++) {
                var key = columnNames[i];

                if (!first) {
                  keys += ',';
                  values += ',';
                }

                first = false;
                keys += '"' + key + '"';
                values += '$' + SqliteQueryBuilder.fixColumnName(key);
              }

              insert += keys + ') values (' + values + ')';
              return insert;
            };
            /**
             * Builds an update or insert object to bind to a statement
             * @param  {Object} object object to create bind parameters from
             * @return {Object} bind parameters
             */


            SqliteQueryBuilder.buildUpdateOrInsertObject = function (object) {
              var insertOrUpdate = {};

              if (object.getColumnNames) {
                var columnNames = object.getColumnNames();

                for (var i = 0; i < columnNames.length; i++) {
                  insertOrUpdate[SqliteQueryBuilder.fixColumnName(columnNames[i])] = object.toDatabaseValue(columnNames[i]);
                }
              } else {
                for (var key in object) {
                  if (object.hasOwnProperty(key)) {
                    if (object.toDatabaseValue) {
                      insertOrUpdate[SqliteQueryBuilder.fixColumnName(key)] = object.toDatabaseValue(key);
                    } else {
                      if (typeof object[key] == 'boolean') {
                        insertOrUpdate[SqliteQueryBuilder.fixColumnName(key)] = object[key] ? 1 : 0;
                      } else {
                        insertOrUpdate[SqliteQueryBuilder.fixColumnName(key)] = object[key];
                      }
                    }
                  }
                }
              }

              return insertOrUpdate;
            };
            /**
             * Builds an update statement
             * @param  {string} table     table to update
             * @param  {Object} values    object with values to update
             * @param  {string} [where]     where clause
             * @param  {Array|Ojbect} [whereArgs] where bind parameters
             * @return {Object} object with a sql property containing the update statement and an args property with bind arguments
             */


            SqliteQueryBuilder.buildUpdate = function (table, values, where, whereArgs) {
              var args = [];
              var update = 'update ' + table + ' set ';
              var first = true;

              for (var columnName in values) {
                if (!first) {
                  update += ', ';
                }

                first = false;
                update += '"' + columnName + '"';
                args.push(values[columnName]);
                update += '=?';
              }

              if (whereArgs) {
                for (var i = 0; i < whereArgs.length; i++) {
                  args.push(whereArgs[i]);
                }
              }

              if (where) {
                update += ' where ';
                update += where;
              }

              return {
                sql: update,
                args: args
              };
            };
            /**
             * Builds an update from an object
             * @param  {string} table  table name to update
             * @param  {Object} object object with values to update
             * @return {string} update statement
             */


            SqliteQueryBuilder.buildObjectUpdate = function (table, object) {
              var update = 'update ' + table + ' set ';
              var first = true;

              if (object.getColumnNames) {
                var columnNames = object.getColumnNames();

                for (var i = 0; i < columnNames.length; i++) {
                  var key = columnNames[i];

                  if (!first) {
                    update += ', ';
                  }

                  first = false;
                  update += '"' + key + '"=';
                  update += '$' + SqliteQueryBuilder.fixColumnName(key);
                }
              } else {
                for (var key in object) {
                  if (!first) {
                    update += ', ';
                  }

                  first = false;

                  if (object.hasOwnProperty(key)) {
                    update += '"' + key + '"=';
                    update += '$' + SqliteQueryBuilder.fixColumnName(key);
                  }
                }
              }

              return update;
            };

            function appendClauseToString(string, name, clause) {
              if (clause) {
                string += name + clause;
              }

              return string;
            }

            function appendColumnsToString(columns, string) {
              if (!columns || columns.length == 0) return string;
              string += columnToAppend(columns[0]);

              for (var i = 1; i < columns.length; i++) {
                string += ', ' + columnToAppend(columns[i]);
              }

              string += ' ';
              return string;
            }

            function columnToAppend(column) {
              return column.indexOf('*') != -1 ? column : '"' + column + '"';
            }

            function isEmpty(string) {
              return !string || string.length === 0;
            }

            /**
             * @module dao/columnValues
             */

            /**
             * Structure to define columns in a table
             * @class ColumnValues
             */
            var ColumnValues = function () {
              this.values = {};
              this.columns = [];
            };
            /**
             * adds a column to the structure
             * @param  {string} columnName  name of column to add
             * @param  {module:user/userColumn~UserColumn} column column to add
             */

            ColumnValues.prototype.addColumn = function (columnName, column) {
              this.columns.push(columnName);
              this.values[columnName] = column;
            };
            /**
             * Gets the column by name
             * @param  {string} columnName name of column
             * @return {module:user/userColumn~UserColumn}            user column
             */


            ColumnValues.prototype.getValue = function (columnName) {
              return this.values[columnName];
            };

            /**
             * Dao module.
             * @module dao/dao
             */
            /**
             * Base DAO
             * @class Dao
             * @param  {module:geoPackage~GeoPackage} geoPackage GeoPackage object
             */

            class Dao {
              constructor(geoPackage) {
                /**
                 * GeoPackage object this dao belongs to
                 * @type {module:geoPackage~GeoPackage}
                 */
                this.geoPackage = geoPackage;
                /**
                 * Database connection to the sqlite file
                 * @type {module:db/geoPackageConnection~GeoPackageConnection}
                 */

                this.connection = geoPackage.getDatabase();
              }
              /**
               * Copies object properties from result object to the object
               * @param  {Object} object object to copy properties to
               * @param  {Object} result object to copy properties from
               */


              populateObjectFromResult(object, result) {
                if (!result) return;

                for (var key in result) {
                  object[key] = result[key];
                }
              }
              /**
               * Checks if the table exists
               * @return  {Boolean}
               */


              isTableExists() {
                var results = this.connection.get("SELECT name FROM sqlite_master WHERE type='table' AND name=?", [this.gpkgTableName]);
                return !!results;
              }
              /**
               * Refreshes the object by id
               * @param  {Object} object object to refresh
               * @return {Object}
               */


              refresh(object) {
                return this.queryForSameId(object);
              }
              /**
               * Query for object by id
               * @param  {object} id ID of the object to query for
               * @return {Object} object created from the raw database object
               */


              queryForId(id) {
                var whereString = this.buildPkWhere(id);
                var whereArgs = this.buildPkWhereArgs(id);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString);
                var result = this.connection.get(query, whereArgs);
                if (!result) return;
                var object = this.createObject(result); // TOOD something is wrong here

                this.populateObjectFromResult(object, result);
                return object;
              }

              queryForSameId(object) {
                var idArray = this.getMultiId(object);
                return this.queryForMultiId(idArray);
              }

              getMultiId(object) {
                var idValues = [];

                for (var i = 0; i < this.idColumns.length; i++) {
                  var idValue = object.values ? object.values[this.idColumns[i]] : object[this.idColumns[i]];

                  if (idValue !== undefined) {
                    idValues.push(idValue);
                  }
                }

                return idValues;
              }
              /**
               * Query for object by multi id
               * @param  {module:dao/columnValues~ColumnValues} idValues ColumnValues with the multi id
               * @return {Object} object created from the raw database object
               */


              queryForMultiId(idValues) {
                var whereString = this.buildPkWhere(idValues);
                var whereArgs = this.buildPkWhereArgs(idValues);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString);
                var result = this.connection.get(query, whereArgs);
                if (!result) return;
                var object = this.createObject(result);
                this.populateObjectFromResult(object, result);
                return object;
              }
              /**
               * Queries for all matches and returns them in the callback.  Be aware this pulls all results into memory
               * @param  {string} [where]     Optional where clause
               * @param  {object[]} [whereArgs] Optional where args array
               * @return {Object[]} raw object array from the database
               */


              queryForAll(where, whereArgs) {
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, where);
                return this.connection.all(query, whereArgs);
              }
              /**
               * Queries for all matches and returns them in the callback.  Be aware this pulls all results into memory
               * @param  {string} fieldName name of the field to query for
               * @param  {string} value     value of the like clause
               * @return {Object[]} raw object array from the database
               */


              queryForLike(fieldName, value) {
                var values = new ColumnValues();
                values.addColumn(fieldName, value);
                var where = this.buildWhereLike(values);
                var whereArgs = this.buildWhereArgs(value);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, where);
                return this.connection.all(query, whereArgs);
              }
              /**
               * Queries for all matches and returns them.  Only queries for the specified column name  Be aware this pulls all results into memory
               * @param {string}  columnName  name of the column to query for
               * @param {module:dao/columnValues~ColumnValues} [fieldValues] optional values to filter on
               * @return {Object[]} raw object array from the database
               */


              queryForColumns(columnName, fieldValues) {
                var where;
                var whereArgs;

                if (fieldValues) {
                  where = this.buildWhere(fieldValues);
                  whereArgs = this.buildWhereArgs(fieldValues);
                }

                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", [columnName], where);
                return this.connection.all(query, whereArgs);
              }
              /**
               * Queries for all items in the table with a page size and page number
               * @param  {Number} pageSize size of the chunk to query for
               * @param  {Number} page     chunk number to query for
               * @return {Object[]} raw object array from the database
               */


              queryForChunk(pageSize, page) {
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, undefined, undefined, undefined, undefined, this.idColumns[0], pageSize, page * pageSize);
                return this.connection.all(query);
              }
              /**
               * Iterate all items in the table one at a time.  If no parameters are passed, iterates the entire table.  Returns an Iterable object
               * @param  {string} [field]   field to filter on
               * @param  {Object} [value]   value to filter on
               * @param  {string} [groupBy] group by clause
               * @param  {string} [having]  having clause
               * @param  {string} [orderBy] order by clause
               * @return {Iterable} iterable of database objects
               */


              queryForEach(field, value, groupBy, having, orderBy) {
                if (!field) {
                  var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'");
                  return this.connection.each(query);
                } else {
                  var whereString = this.buildWhereWithFieldAndValue(field, value);
                  var whereArgs = this.buildWhereArgs(value);
                  var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString);
                  return this.connection.each(query, whereArgs);
                }
              }

              rawQueryForEach(query, queryArgs) {
                return this.connection.each(query, queryArgs);
              }
              /**
               * Iterate all rows in the table that match the given values.
               *
               * @param {module:dao/columnValues~ColumnValues} fieldValues column values to match
               * @return {Iterable<object>}
               * @todo this method will throw an error if the iterator is not exhausted
               */


              queryForFieldValues(fieldValues) {
                var whereString = this.buildWhere(fieldValues);
                var whereArgs = this.buildWhereArgs(fieldValues);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString);
                return this.connection.each(query, whereArgs);
              }
              /**
               * Query for and return the first row that matches the given values.
               *
               * @param {module:dao/columnValues~ColumnValues} fieldValues column values to match
               * @return {?object} the first matching row or null
               */


              queryForFirstFieldValues(fieldValues) {
                var whereString = this.buildWhere(fieldValues);
                var whereArgs = this.buildWhereArgs(fieldValues);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString);
                return this.connection.get(query, whereArgs);
              }
              /**
               * Iterate all matching objects
               * @param  {string} join      join clause
               * @param  {string} where     where clause
               * @param  {Object[]} whereArgs array of where query values
               * @param  {string[]} columns   columns to query for
               * @return {Iterable.<Object>}
               */


              queryJoinWhereWithArgs(join, where, whereArgs, columns) {
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", columns, where, join);
                return this.connection.each(query, whereArgs);
              }
              /**
               * Iterate all distinct matching rows in the table
               * @param  {string} where     where clause
               * @param  {Object[]} whereArgs array of where query values
               * @return {Iterable.<Object>}
               */


              queryWhereWithArgsDistinct(where, whereArgs) {
                var query = SqliteQueryBuilder.buildQuery(true, "'" + this.gpkgTableName + "'", undefined, where);
                return this.connection.each(query, whereArgs);
              }
              /**
               * Iterate all matching rows
               * @param  {string} [where]     where clause
               * @param  {Object[]} [whereArgs] array of where query values
               * @param  {string} [groupBy]   group by clause
               * @param  {string} [having]    having clause
               * @param  {string} [orderBy]   order by clause
               * @param  {string} [limit]     limit clause
               * @return {Iterable.<Object>}
               */


              queryWhere(where, whereArgs, groupBy, having, orderBy, limit) {
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, where, undefined, groupBy, having, orderBy, limit);
                return this.connection.each(query, whereArgs);
              }
              /**
               * Get the primary key where clause
               * @param  {Object|Object[]} idValue id
               * @return {string} primary key where clause
               */


              buildPkWhere(idValue) {
                if (Array.isArray(idValue)) {
                  var idValuesArray = idValue;
                  var idColumnValues = new ColumnValues();

                  for (var i = 0; i < idValuesArray.length; i++) {
                    idColumnValues.addColumn(this.idColumns[i], idValuesArray[i]);
                  }

                  return this.buildWhere(idColumnValues);
                }

                return this.buildWhereWithFieldAndValue(this.idColumns, idValue);
              }
              /**
               * Get the primary key where args
               * @param  {Object} idValue id
               * @return {Object[]} where args
               */


              buildPkWhereArgs(idValue) {
                if (Array.isArray(idValue)) {
                  var idValuesArray = idValue;
                  var values = [];

                  for (var i = 0; i < idValuesArray.length; i++) {
                    values = values.concat(this.buildWhereArgs(idValuesArray[i]));
                  }

                  return values;
                }

                return this.buildWhereArgs(idValue);
              }
              /**
               * Build where (or selection) LIKE statement for fields
               * @param  {module:dao/columnValues~ColumnValues} fields    columns and values
               * @param  {string} operation AND or OR
               * @return {string} where clause
               */


              buildWhereLike(fields, operation) {
                var whereString = '';

                for (var i = 0; i < fields.columns.length; i++) {
                  var column = fields.columns[i];

                  if (i) {
                    whereString += ' ' + operation + ' ';
                  }

                  whereString += this.buildWhereWithFieldAndValue(column, fields.getValue(column), 'like');
                }

                return whereString;
              }
              /**
               * Build where or selection statement for fields
               * @param  {module:dao/columnValues~ColumnValues} fields    columns and values
               * @param  {string} [operation=AND] AND or OR
               * @return {string} where clause
               */


              buildWhere(fields, operation) {
                operation = operation || 'and';
                var whereString = '';

                for (var i = 0; i < fields.columns.length; i++) {
                  var column = fields.columns[i];

                  if (i) {
                    whereString += ' ' + operation + ' ';
                  }

                  whereString += this.buildWhereWithFieldAndValue(column, fields.getValue(column));
                }

                return whereString;
              }

              buildWhereArgs(values) {
                var args = [];

                if (Array.isArray(values)) {
                  for (var i = 0; i < values.length; i++) {
                    var value = values[i];

                    if (value !== undefined && value !== null) {
                      args.push(value);
                    }
                  }
                } else if (values.columns) {
                  for (var i = 0; i < values.columns.length; i++) {
                    var column = values.columns[i];
                    var value = values.getValue(column);

                    if (value !== undefined && value !== null) {
                      args.push(value);
                    }
                  }
                } else {
                  if (values !== undefined || values !== null) {
                    args.push(values);
                  }
                }

                return args.count ? null : args;
              }
              /**
               * Builds a where clause from the field and value with an optional operation.  If the value is empty, 'is null' is added to the query for the field
               * @param  {string} field     field name
               * @param  {Object} [value]     optional value to filter on
               * @param  {string} [operation='='] optional operation
               * @return {string} where clause
               */


              buildWhereWithFieldAndValue(field, value, operation) {
                operation = operation || '=';
                var whereString = '' + field + ' ';

                if (value === undefined || value === null) {
                  whereString += "is null";
                } else {
                  whereString += operation + ' ?';
                }

                return whereString;
              }
              /**
               * Query for all rows in the table that match
               * @param  {string} field   field to match
               * @param  {string} value   value to match
               * @param  {string} [groupBy] group by clause
               * @param  {string} [having]  having clause
               * @param  {string} [orderBy] order by clause
               * @return {Object[]} array of raw database objects
               */


              queryForAllEq(field, value, groupBy, having, orderBy) {
                var whereString = this.buildWhereWithFieldAndValue(field, value);
                var whereArgs = this.buildWhereArgs(value);
                var query = SqliteQueryBuilder.buildQuery(false, "'" + this.gpkgTableName + "'", undefined, whereString, undefined, groupBy, having, orderBy);
                return this.connection.all(query, whereArgs);
              }
              /**
               * Count rows in the table optionally filtered by the parameters specified
               * @param  {module:dao/columnValues~ColumnValues|string} [fields] Either a ColumnValues object or a string specifying a field name
               * @param  {Object} [value]  value to filter on if fields is a string
               * @return {Number} count of objects
               */


              count(fields, value) {
                if (!fields) {
                  return this.connection.count(this.gpkgTableName);
                }

                var where;
                var whereArgs;
                var query;

                if (fields.columns) {
                  where = this.buildWhere(fields, 'and');
                  whereArgs = this.buildWhereArgs(fields);
                  query = SqliteQueryBuilder.buildCount("'" + this.gpkgTableName + "'", where);
                } else {
                  where = this.buildWhereWithFieldAndValue(fields, value);
                  whereArgs = this.buildWhereArgs(value);
                  query = SqliteQueryBuilder.buildCount("'" + this.gpkgTableName + "'", where);
                }

                var result = this.connection.get(query, whereArgs);
                if (!result) return 0;
                return result.count;
              }
              /**
               * Get the min of the column
               * @param  {string} column    column name
               * @param  {string} [where]     where clause
               * @param  {Object[]} [whereArgs] where args
               * @return {Number}
               */


              minOfColumn(column, where, whereArgs) {
                return this.connection.minOfColumn("'" + this.gpkgTableName + "'", column, where, whereArgs);
              }
              /**
               * Get the max of the column
               * @param  {string} column    column name
               * @param  {string} [where]     where clause
               * @param  {Object[]} [whereArgs] where args
               * @return {Number}
               */


              maxOfColumn(column, where, whereArgs) {
                return this.connection.maxOfColumn("'" + this.gpkgTableName + "'", column, where, whereArgs);
              }
              /**
               * Delete the object passed in.  Object is deleted by id
               * @param  {Object} object object to delete
               * @return {Number} number of objects deleted
               */


              delete(object) {
                if (object.getId) {
                  return this.deleteById(object.getId());
                }

                return this.deleteByMultiId(this.getMultiId(object));
              }
              /**
               * Delete the object specified by the id
               * @param  {Object} idValue id value
               * @return {Number} number of objects deleted
               */


              deleteById(idValue) {
                var where = this.buildPkWhere(idValue);
                var whereArgs = this.buildPkWhereArgs(idValue);
                return this.connection.delete("'" + this.gpkgTableName + "'", where, whereArgs);
              }
              /**
               * Delete the object specified by the ids
               * @param  {module:dao/columnValues~ColumnValues} idValue id values
               * @return {Number} number of objects deleted
               */


              deleteByMultiId(idValues) {
                var where = this.buildPkWhere(idValues);
                var whereArgs = this.buildPkWhereArgs(idValues);
                return this.connection.delete("'" + this.gpkgTableName + "'", where, whereArgs);
              }
              /**
               * Delete objects that match the query
               * @param  {string} where     where clause
               * @param  {Object[]} whereArgs where arguments
               * @return {Number} number of objects deleted
               */


              deleteWhere(where, whereArgs) {
                return this.connection.delete("'" + this.gpkgTableName + "'", where, whereArgs);
              }
              /**
               * Delete all objects in the table
               * @return {Number} number of objects deleted
               */


              deleteAll() {
                return this.connection.delete("'" + this.gpkgTableName + "'", null, null);
              }
              /**
               * Insert the object into the table
               * @param  {Object} object object to be inserted
               * @return {module:db/adapter~ROWID} id of the inserted object
               */


              create(object) {
                var sql = SqliteQueryBuilder.buildInsert("'" + this.gpkgTableName + "'", object);
                var insertObject = SqliteQueryBuilder.buildUpdateOrInsertObject(object);
                return this.connection.insert(sql, insertObject);
              }
              /**
               * Update all rows that match the query
               * @param  {module:dao/columnValues~ColumnValues} values    values to insert
               * @param  {string} where     where clause
               * @param  {Object[]} whereArgs where arguments
               * @return {module:db/adapter~DBWriteResult} from [`GeoPackageConnection.run()`]{@link module:db/geoPackageConnection~GeoPacakgeConnection#run}
               */


              updateWithValues(values, where, whereArgs) {
                var update = SqliteQueryBuilder.buildUpdate("'" + this.gpkgTableName + "'", values, where, whereArgs);
                return this.connection.run(update.sql, update.args);
              }
              /**
               * Update the object specified
               * @param  {Object} object object with updated values
               * @return {module:db/adapter~DBWriteResult} from [`GeoPackageConnection.run()`]{@link module:db/geoPackageConnection~GeoPacakgeConnection#run}
               */


              update(object) {
                var updateValues = SqliteQueryBuilder.buildUpdateOrInsertObject(object);
                var update = SqliteQueryBuilder.buildObjectUpdate("'" + this.gpkgTableName + "'", object);
                var multiId = this.getMultiId(object);

                if (multiId.length) {
                  var where = ' where ';

                  for (var i = 0; i < multiId.length; i++) {
                    where += '"' + this.idColumns[i] + '" = $' + SqliteQueryBuilder.fixColumnName(this.idColumns[i]);
                    updateValues[SqliteQueryBuilder.fixColumnName(this.idColumns[i])] = multiId[i];
                  }

                  update += where;
                }

                return this.connection.run(update, updateValues);
              }
              /**
               * Query for the given object by ID, and if it exists, update its database
               * record.  Otherwise, create a new database record from the given object.
               * Return a [`DBWriteResult`]{@link module:db/adapter~DBWriteResult} if an
               * update occurs, or a [`ROWID`]{@link module:db/adapter~ROWID} if a new record
               * is created.
               *
               * @param  {Object} object object to update or create
               * @return ({module:db/adapter~ROWID | {module:db/adapter~DBWriteResult})
               * @todo return only one type of value
               */


              createOrUpdate(object) {
                var existing = this.queryForSameId(object);

                if (!existing) {
                  return this.create(object);
                } else {
                  return this.update(object);
                }
              }
              /**
               * Drops this table
               * @return {Number} results of the drop
               */


              dropTable() {
                return this.connection.dropTable(this.gpkgTableName);
              }

              rename(newName) {
                var result = this.connection.run('ALTER TABLE ' + '"' + this.gpkgTableName + '" RENAME TO "' + newName + '"');
                this.gpkgTableName = newName;
              }

            }

            function globals$1 (defs) {
              defs('EPSG:4326', "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
              defs('EPSG:4269', "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
              defs('EPSG:3857', "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");
              defs.WGS84 = defs['EPSG:4326'];
              defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857

              defs.GOOGLE = defs['EPSG:3857'];
              defs['EPSG:900913'] = defs['EPSG:3857'];
              defs['EPSG:102113'] = defs['EPSG:3857'];
            }

            var PJD_3PARAM$1 = 1;
            var PJD_7PARAM$1 = 2;
            var PJD_WGS84$1 = 4; // WGS84 or equivalent

            var PJD_NODATUM$1 = 5; // WGS84 or equivalent

            var SEC_TO_RAD$1 = 4.84813681109535993589914102357e-6;
            var HALF_PI$1 = Math.PI / 2; // ellipoid pj_set_ell.c

            var SIXTH$1 = 0.1666666666666666667;
            /* 1/6 */

            var RA4$1 = 0.04722222222222222222;
            /* 17/360 */

            var RA6$1 = 0.02215608465608465608;
            var EPSLN$1 = typeof Number.EPSILON === 'undefined' ? 1.0e-10 : Number.EPSILON;
            var D2R$2 = 0.01745329251994329577;
            var R2D$1 = 57.29577951308232088;
            var FORTPI$1 = Math.PI / 4;
            var TWO_PI$1 = Math.PI * 2; // SPI is slightly greater than Math.PI, so values that exceed the -180..180
            // degree range by a tiny amount don't get wrapped. This prevents points that
            // have drifted from their original location along the 180th meridian (due to
            // floating point error) from changing their sign.

            var SPI$1 = 3.14159265359;

            var exports$4 = {};
            exports$4.greenwich = 0.0; //"0dE",

            exports$4.lisbon = -9.131906111111; //"9d07'54.862\"W",

            exports$4.paris = 2.337229166667; //"2d20'14.025\"E",

            exports$4.bogota = -74.080916666667; //"74d04'51.3\"W",

            exports$4.madrid = -3.687938888889; //"3d41'16.58\"W",

            exports$4.rome = 12.452333333333; //"12d27'8.4\"E",

            exports$4.bern = 7.439583333333; //"7d26'22.5\"E",

            exports$4.jakarta = 106.807719444444; //"106d48'27.79\"E",

            exports$4.ferro = -17.666666666667; //"17d40'W",

            exports$4.brussels = 4.367975; //"4d22'4.71\"E",

            exports$4.stockholm = 18.058277777778; //"18d3'29.8\"E",

            exports$4.athens = 23.7163375; //"23d42'58.815\"E",

            exports$4.oslo = 10.722916666667; //"10d43'22.5\"E"

            var units$1 = {
              ft: {
                to_meter: 0.3048
              },
              'us-ft': {
                to_meter: 1200 / 3937
              }
            };

            var ignoredChar$1 = /[\s_\-\/\(\)]/g;
            function match$1(obj, key) {
              if (obj[key]) {
                return obj[key];
              }

              var keys = Object.keys(obj);
              var lkey = key.toLowerCase().replace(ignoredChar$1, '');
              var i = -1;
              var testkey, processedKey;

              while (++i < keys.length) {
                testkey = keys[i];
                processedKey = testkey.toLowerCase().replace(ignoredChar$1, '');

                if (processedKey === lkey) {
                  return obj[testkey];
                }
              }
            }

            function projStr$1 (defData) {
              var self = {};
              var paramObj = defData.split('+').map(function (v) {
                return v.trim();
              }).filter(function (a) {
                return a;
              }).reduce(function (p, a) {
                var split = a.split('=');
                split.push(true);
                p[split[0].toLowerCase()] = split[1];
                return p;
              }, {});
              var paramName, paramVal, paramOutname;
              var params = {
                proj: 'projName',
                datum: 'datumCode',
                rf: function (v) {
                  self.rf = parseFloat(v);
                },
                lat_0: function (v) {
                  self.lat0 = v * D2R$2;
                },
                lat_1: function (v) {
                  self.lat1 = v * D2R$2;
                },
                lat_2: function (v) {
                  self.lat2 = v * D2R$2;
                },
                lat_ts: function (v) {
                  self.lat_ts = v * D2R$2;
                },
                lon_0: function (v) {
                  self.long0 = v * D2R$2;
                },
                lon_1: function (v) {
                  self.long1 = v * D2R$2;
                },
                lon_2: function (v) {
                  self.long2 = v * D2R$2;
                },
                alpha: function (v) {
                  self.alpha = parseFloat(v) * D2R$2;
                },
                lonc: function (v) {
                  self.longc = v * D2R$2;
                },
                x_0: function (v) {
                  self.x0 = parseFloat(v);
                },
                y_0: function (v) {
                  self.y0 = parseFloat(v);
                },
                k_0: function (v) {
                  self.k0 = parseFloat(v);
                },
                k: function (v) {
                  self.k0 = parseFloat(v);
                },
                a: function (v) {
                  self.a = parseFloat(v);
                },
                b: function (v) {
                  self.b = parseFloat(v);
                },
                r_a: function () {
                  self.R_A = true;
                },
                zone: function (v) {
                  self.zone = parseInt(v, 10);
                },
                south: function () {
                  self.utmSouth = true;
                },
                towgs84: function (v) {
                  self.datum_params = v.split(",").map(function (a) {
                    return parseFloat(a);
                  });
                },
                to_meter: function (v) {
                  self.to_meter = parseFloat(v);
                },
                units: function (v) {
                  self.units = v;
                  var unit = match$1(units$1, v);

                  if (unit) {
                    self.to_meter = unit.to_meter;
                  }
                },
                from_greenwich: function (v) {
                  self.from_greenwich = v * D2R$2;
                },
                pm: function (v) {
                  var pm = match$1(exports$4, v);
                  self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R$2;
                },
                nadgrids: function (v) {
                  if (v === '@null') {
                    self.datumCode = 'none';
                  } else {
                    self.nadgrids = v;
                  }
                },
                axis: function (v) {
                  var legalAxis = "ewnsud";

                  if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
                    self.axis = v;
                  }
                }
              };

              for (paramName in paramObj) {
                paramVal = paramObj[paramName];

                if (paramName in params) {
                  paramOutname = params[paramName];

                  if (typeof paramOutname === 'function') {
                    paramOutname(paramVal);
                  } else {
                    self[paramOutname] = paramVal;
                  }
                } else {
                  self[paramName] = paramVal;
                }
              }

              if (typeof self.datumCode === 'string' && self.datumCode !== "WGS84") {
                self.datumCode = self.datumCode.toLowerCase();
              }

              return self;
            }

            function defs$1(name) {
              /*global console*/
              var that = this;

              if (arguments.length === 2) {
                var def = arguments[1];

                if (typeof def === 'string') {
                  if (def.charAt(0) === '+') {
                    defs$1[name] = projStr$1(arguments[1]);
                  } else {
                    defs$1[name] = wkt$1(arguments[1]);
                  }
                } else {
                  defs$1[name] = def;
                }
              } else if (arguments.length === 1) {
                if (Array.isArray(name)) {
                  return name.map(function (v) {
                    if (Array.isArray(v)) {
                      defs$1.apply(that, v);
                    } else {
                      defs$1(v);
                    }
                  });
                } else if (typeof name === 'string') {
                  if (name in defs$1) {
                    return defs$1[name];
                  }
                } else if ('EPSG' in name) {
                  defs$1['EPSG:' + name.EPSG] = name;
                } else if ('ESRI' in name) {
                  defs$1['ESRI:' + name.ESRI] = name;
                } else if ('IAU2000' in name) {
                  defs$1['IAU2000:' + name.IAU2000] = name;
                } else {
                  console.log(name);
                }

                return;
              }
            }

            globals$1(defs$1);

            function testObj$1(code) {
              return typeof code === 'string';
            }

            function testDef$1(code) {
              return code in defs$1;
            }

            var codeWords$1 = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS', 'GEOCCS', 'PROJCS', 'LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];

            function testWKT$1(code) {
              return codeWords$1.some(function (word) {
                return code.indexOf(word) > -1;
              });
            }

            function testProj$1(code) {
              return code[0] === '+';
            }

            function parse$1(code) {
              if (testObj$1(code)) {
                //check to see if this is a WKT string
                if (testDef$1(code)) {
                  return defs$1[code];
                }

                if (testWKT$1(code)) {
                  return wkt$1(code);
                }

                if (testProj$1(code)) {
                  return projStr$1(code);
                }
              } else {
                return code;
              }
            }

            function extend$2 (destination, source) {
              destination = destination || {};
              var value, property;

              if (!source) {
                return destination;
              }

              for (property in source) {
                value = source[property];

                if (value !== undefined) {
                  destination[property] = value;
                }
              }

              return destination;
            }

            function msfnz$1 (eccent, sinphi, cosphi) {
              var con = eccent * sinphi;
              return cosphi / Math.sqrt(1 - con * con);
            }

            function sign$1 (x) {
              return x < 0 ? -1 : 1;
            }

            function adjust_lon$1 (x) {
              return Math.abs(x) <= SPI$1 ? x : x - sign$1(x) * TWO_PI$1;
            }

            function tsfnz$1 (eccent, phi, sinphi) {
              var con = eccent * sinphi;
              var com = 0.5 * eccent;
              con = Math.pow((1 - con) / (1 + con), com);
              return Math.tan(0.5 * (HALF_PI$1 - phi)) / con;
            }

            function phi2z$1 (eccent, ts) {
              var eccnth = 0.5 * eccent;
              var con, dphi;
              var phi = HALF_PI$1 - 2 * Math.atan(ts);

              for (var i = 0; i <= 15; i++) {
                con = eccent * Math.sin(phi);
                dphi = HALF_PI$1 - 2 * Math.atan(ts * Math.pow((1 - con) / (1 + con), eccnth)) - phi;
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //console.log("phi2z has NoConvergence");


              return -9999;
            }

            function init$u() {
              var con = this.b / this.a;
              this.es = 1 - con * con;

              if (!('x0' in this)) {
                this.x0 = 0;
              }

              if (!('y0' in this)) {
                this.y0 = 0;
              }

              this.e = Math.sqrt(this.es);

              if (this.lat_ts) {
                if (this.sphere) {
                  this.k0 = Math.cos(this.lat_ts);
                } else {
                  this.k0 = msfnz$1(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
                }
              } else {
                if (!this.k0) {
                  if (this.k) {
                    this.k0 = this.k;
                  } else {
                    this.k0 = 1;
                  }
                }
              }
            }
            /* Mercator forward equations--mapping lat,long to x,y
              --------------------------------------------------*/

            function forward$s(p) {
              var lon = p.x;
              var lat = p.y; // convert to radians

              if (lat * R2D$1 > 90 && lat * R2D$1 < -90 && lon * R2D$1 > 180 && lon * R2D$1 < -180) {
                return null;
              }

              var x, y;

              if (Math.abs(Math.abs(lat) - HALF_PI$1) <= EPSLN$1) {
                return null;
              } else {
                if (this.sphere) {
                  x = this.x0 + this.a * this.k0 * adjust_lon$1(lon - this.long0);
                  y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI$1 + 0.5 * lat));
                } else {
                  var sinphi = Math.sin(lat);
                  var ts = tsfnz$1(this.e, lat, sinphi);
                  x = this.x0 + this.a * this.k0 * adjust_lon$1(lon - this.long0);
                  y = this.y0 - this.a * this.k0 * Math.log(ts);
                }

                p.x = x;
                p.y = y;
                return p;
              }
            }
            /* Mercator inverse equations--mapping x,y to lat/long
              --------------------------------------------------*/

            function inverse$s(p) {
              var x = p.x - this.x0;
              var y = p.y - this.y0;
              var lon, lat;

              if (this.sphere) {
                lat = HALF_PI$1 - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
              } else {
                var ts = Math.exp(-y / (this.a * this.k0));
                lat = phi2z$1(this.e, ts);

                if (lat === -9999) {
                  return null;
                }
              }

              lon = adjust_lon$1(this.long0 + x / (this.a * this.k0));
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$u = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
            var merc$1 = {
              init: init$u,
              forward: forward$s,
              inverse: inverse$s,
              names: names$u
            };

            function init$v() {//no-op for longlat
            }

            function identity$1(pt) {
              return pt;
            }
            var names$v = ["longlat", "identity"];
            var longlat$1 = {
              init: init$v,
              forward: identity$1,
              inverse: identity$1,
              names: names$v
            };

            var projs$1 = [merc$1, longlat$1];
            var names$w = {};
            var projStore$1 = [];

            function add$1(proj, i) {
              var len = projStore$1.length;

              if (!proj.names) {
                console.log(i);
                return true;
              }

              projStore$1[len] = proj;
              proj.names.forEach(function (n) {
                names$w[n.toLowerCase()] = len;
              });
              return this;
            }
            function get$1(name) {
              if (!name) {
                return false;
              }

              var n = name.toLowerCase();

              if (typeof names$w[n] !== 'undefined' && projStore$1[names$w[n]]) {
                return projStore$1[names$w[n]];
              }
            }
            function start$1() {
              projs$1.forEach(add$1);
            }
            var projections$1 = {
              start: start$1,
              add: add$1,
              get: get$1
            };

            var exports$5 = {};
            exports$5.MERIT = {
              a: 6378137.0,
              rf: 298.257,
              ellipseName: "MERIT 1983"
            };
            exports$5.SGS85 = {
              a: 6378136.0,
              rf: 298.257,
              ellipseName: "Soviet Geodetic System 85"
            };
            exports$5.GRS80 = {
              a: 6378137.0,
              rf: 298.257222101,
              ellipseName: "GRS 1980(IUGG, 1980)"
            };
            exports$5.IAU76 = {
              a: 6378140.0,
              rf: 298.257,
              ellipseName: "IAU 1976"
            };
            exports$5.airy = {
              a: 6377563.396,
              b: 6356256.910,
              ellipseName: "Airy 1830"
            };
            exports$5.APL4 = {
              a: 6378137,
              rf: 298.25,
              ellipseName: "Appl. Physics. 1965"
            };
            exports$5.NWL9D = {
              a: 6378145.0,
              rf: 298.25,
              ellipseName: "Naval Weapons Lab., 1965"
            };
            exports$5.mod_airy = {
              a: 6377340.189,
              b: 6356034.446,
              ellipseName: "Modified Airy"
            };
            exports$5.andrae = {
              a: 6377104.43,
              rf: 300.0,
              ellipseName: "Andrae 1876 (Den., Iclnd.)"
            };
            exports$5.aust_SA = {
              a: 6378160.0,
              rf: 298.25,
              ellipseName: "Australian Natl & S. Amer. 1969"
            };
            exports$5.GRS67 = {
              a: 6378160.0,
              rf: 298.2471674270,
              ellipseName: "GRS 67(IUGG 1967)"
            };
            exports$5.bessel = {
              a: 6377397.155,
              rf: 299.1528128,
              ellipseName: "Bessel 1841"
            };
            exports$5.bess_nam = {
              a: 6377483.865,
              rf: 299.1528128,
              ellipseName: "Bessel 1841 (Namibia)"
            };
            exports$5.clrk66 = {
              a: 6378206.4,
              b: 6356583.8,
              ellipseName: "Clarke 1866"
            };
            exports$5.clrk80 = {
              a: 6378249.145,
              rf: 293.4663,
              ellipseName: "Clarke 1880 mod."
            };
            exports$5.clrk58 = {
              a: 6378293.645208759,
              rf: 294.2606763692654,
              ellipseName: "Clarke 1858"
            };
            exports$5.CPM = {
              a: 6375738.7,
              rf: 334.29,
              ellipseName: "Comm. des Poids et Mesures 1799"
            };
            exports$5.delmbr = {
              a: 6376428.0,
              rf: 311.5,
              ellipseName: "Delambre 1810 (Belgium)"
            };
            exports$5.engelis = {
              a: 6378136.05,
              rf: 298.2566,
              ellipseName: "Engelis 1985"
            };
            exports$5.evrst30 = {
              a: 6377276.345,
              rf: 300.8017,
              ellipseName: "Everest 1830"
            };
            exports$5.evrst48 = {
              a: 6377304.063,
              rf: 300.8017,
              ellipseName: "Everest 1948"
            };
            exports$5.evrst56 = {
              a: 6377301.243,
              rf: 300.8017,
              ellipseName: "Everest 1956"
            };
            exports$5.evrst69 = {
              a: 6377295.664,
              rf: 300.8017,
              ellipseName: "Everest 1969"
            };
            exports$5.evrstSS = {
              a: 6377298.556,
              rf: 300.8017,
              ellipseName: "Everest (Sabah & Sarawak)"
            };
            exports$5.fschr60 = {
              a: 6378166.0,
              rf: 298.3,
              ellipseName: "Fischer (Mercury Datum) 1960"
            };
            exports$5.fschr60m = {
              a: 6378155.0,
              rf: 298.3,
              ellipseName: "Fischer 1960"
            };
            exports$5.fschr68 = {
              a: 6378150.0,
              rf: 298.3,
              ellipseName: "Fischer 1968"
            };
            exports$5.helmert = {
              a: 6378200.0,
              rf: 298.3,
              ellipseName: "Helmert 1906"
            };
            exports$5.hough = {
              a: 6378270.0,
              rf: 297.0,
              ellipseName: "Hough"
            };
            exports$5.intl = {
              a: 6378388.0,
              rf: 297.0,
              ellipseName: "International 1909 (Hayford)"
            };
            exports$5.kaula = {
              a: 6378163.0,
              rf: 298.24,
              ellipseName: "Kaula 1961"
            };
            exports$5.lerch = {
              a: 6378139.0,
              rf: 298.257,
              ellipseName: "Lerch 1979"
            };
            exports$5.mprts = {
              a: 6397300.0,
              rf: 191.0,
              ellipseName: "Maupertius 1738"
            };
            exports$5.new_intl = {
              a: 6378157.5,
              b: 6356772.2,
              ellipseName: "New International 1967"
            };
            exports$5.plessis = {
              a: 6376523.0,
              rf: 6355863.0,
              ellipseName: "Plessis 1817 (France)"
            };
            exports$5.krass = {
              a: 6378245.0,
              rf: 298.3,
              ellipseName: "Krassovsky, 1942"
            };
            exports$5.SEasia = {
              a: 6378155.0,
              b: 6356773.3205,
              ellipseName: "Southeast Asia"
            };
            exports$5.walbeck = {
              a: 6376896.0,
              b: 6355834.8467,
              ellipseName: "Walbeck"
            };
            exports$5.WGS60 = {
              a: 6378165.0,
              rf: 298.3,
              ellipseName: "WGS 60"
            };
            exports$5.WGS66 = {
              a: 6378145.0,
              rf: 298.25,
              ellipseName: "WGS 66"
            };
            exports$5.WGS7 = {
              a: 6378135.0,
              rf: 298.26,
              ellipseName: "WGS 72"
            };
            var WGS84$1 = exports$5.WGS84 = {
              a: 6378137.0,
              rf: 298.257223563,
              ellipseName: "WGS 84"
            };
            exports$5.sphere = {
              a: 6370997.0,
              b: 6370997.0,
              ellipseName: "Normal Sphere (r=6370997)"
            };

            function eccentricity$1(a, b, rf, R_A) {
              var a2 = a * a; // used in geocentric

              var b2 = b * b; // used in geocentric

              var es = (a2 - b2) / a2; // e ^ 2

              var e = 0;

              if (R_A) {
                a *= 1 - es * (SIXTH$1 + es * (RA4$1 + es * RA6$1));
                a2 = a * a;
                es = 0;
              } else {
                e = Math.sqrt(es); // eccentricity
              }

              var ep2 = (a2 - b2) / b2; // used in geocentric

              return {
                es: es,
                e: e,
                ep2: ep2
              };
            }
            function sphere$1(a, b, rf, ellps, sphere) {
              if (!a) {
                // do we have an ellipsoid?
                var ellipse = match$1(exports$5, ellps);

                if (!ellipse) {
                  ellipse = WGS84$1;
                }

                a = ellipse.a;
                b = ellipse.b;
                rf = ellipse.rf;
              }

              if (rf && !b) {
                b = (1.0 - 1.0 / rf) * a;
              }

              if (rf === 0 || Math.abs(a - b) < EPSLN$1) {
                sphere = true;
                b = a;
              }

              return {
                a: a,
                b: b,
                rf: rf,
                sphere: sphere
              };
            }

            var exports$6 = {};
            exports$6.wgs84 = {
              towgs84: "0,0,0",
              ellipse: "WGS84",
              datumName: "WGS84"
            };
            exports$6.ch1903 = {
              towgs84: "674.374,15.056,405.346",
              ellipse: "bessel",
              datumName: "swiss"
            };
            exports$6.ggrs87 = {
              towgs84: "-199.87,74.79,246.62",
              ellipse: "GRS80",
              datumName: "Greek_Geodetic_Reference_System_1987"
            };
            exports$6.nad83 = {
              towgs84: "0,0,0",
              ellipse: "GRS80",
              datumName: "North_American_Datum_1983"
            };
            exports$6.nad27 = {
              nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
              ellipse: "clrk66",
              datumName: "North_American_Datum_1927"
            };
            exports$6.potsdam = {
              towgs84: "606.0,23.0,413.0",
              ellipse: "bessel",
              datumName: "Potsdam Rauenberg 1950 DHDN"
            };
            exports$6.carthage = {
              towgs84: "-263.0,6.0,431.0",
              ellipse: "clark80",
              datumName: "Carthage 1934 Tunisia"
            };
            exports$6.hermannskogel = {
              towgs84: "653.0,-212.0,449.0",
              ellipse: "bessel",
              datumName: "Hermannskogel"
            };
            exports$6.ire65 = {
              towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
              ellipse: "mod_airy",
              datumName: "Ireland 1965"
            };
            exports$6.rassadiran = {
              towgs84: "-133.63,-157.5,-158.62",
              ellipse: "intl",
              datumName: "Rassadiran"
            };
            exports$6.nzgd49 = {
              towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
              ellipse: "intl",
              datumName: "New Zealand Geodetic Datum 1949"
            };
            exports$6.osgb36 = {
              towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
              ellipse: "airy",
              datumName: "Airy 1830"
            };
            exports$6.s_jtsk = {
              towgs84: "589,76,480",
              ellipse: 'bessel',
              datumName: 'S-JTSK (Ferro)'
            };
            exports$6.beduaram = {
              towgs84: '-106,-87,188',
              ellipse: 'clrk80',
              datumName: 'Beduaram'
            };
            exports$6.gunung_segara = {
              towgs84: '-403,684,41',
              ellipse: 'bessel',
              datumName: 'Gunung Segara Jakarta'
            };
            exports$6.rnb72 = {
              towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
              ellipse: "intl",
              datumName: "Reseau National Belge 1972"
            };

            function datum$1(datumCode, datum_params, a, b, es, ep2) {
              var out = {};

              if (datumCode === undefined || datumCode === 'none') {
                out.datum_type = PJD_NODATUM$1;
              } else {
                out.datum_type = PJD_WGS84$1;
              }

              if (datum_params) {
                out.datum_params = datum_params.map(parseFloat);

                if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
                  out.datum_type = PJD_3PARAM$1;
                }

                if (out.datum_params.length > 3) {
                  if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
                    out.datum_type = PJD_7PARAM$1;
                    out.datum_params[3] *= SEC_TO_RAD$1;
                    out.datum_params[4] *= SEC_TO_RAD$1;
                    out.datum_params[5] *= SEC_TO_RAD$1;
                    out.datum_params[6] = out.datum_params[6] / 1000000.0 + 1.0;
                  }
                }
              }

              out.a = a; //datum object also uses these values

              out.b = b;
              out.es = es;
              out.ep2 = ep2;
              return out;
            }

            function Projection$1(srsCode, callback) {
              if (!(this instanceof Projection$1)) {
                return new Projection$1(srsCode);
              }

              callback = callback || function (error) {
                if (error) {
                  throw error;
                }
              };

              var json = parse$1(srsCode);

              if (typeof json !== 'object') {
                callback(srsCode);
                return;
              }

              var ourProj = Projection$1.projections.get(json.projName);

              if (!ourProj) {
                callback(srsCode);
                return;
              }

              if (json.datumCode && json.datumCode !== 'none') {
                var datumDef = match$1(exports$6, json.datumCode);

                if (datumDef) {
                  json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;
                  json.ellps = datumDef.ellipse;
                  json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
                }
              }

              json.k0 = json.k0 || 1.0;
              json.axis = json.axis || 'enu';
              json.ellps = json.ellps || 'wgs84';
              var sphere_ = sphere$1(json.a, json.b, json.rf, json.ellps, json.sphere);
              var ecc = eccentricity$1(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
              var datumObj = json.datum || datum$1(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);
              extend$2(this, json); // transfer everything over from the projection because we don't know what we'll need

              extend$2(this, ourProj); // transfer all the methods from the projection
              // copy the 4 things over we calulated in deriveConstants.sphere

              this.a = sphere_.a;
              this.b = sphere_.b;
              this.rf = sphere_.rf;
              this.sphere = sphere_.sphere; // copy the 3 things we calculated in deriveConstants.eccentricity

              this.es = ecc.es;
              this.e = ecc.e;
              this.ep2 = ecc.ep2; // add in the datum object

              this.datum = datumObj; // init the projection

              this.init(); // legecy callback from back in the day when it went to spatialreference.org

              callback(null, this);
            }

            Projection$1.projections = projections$1;
            Projection$1.projections.start();

            function compareDatums$1(source, dest) {
              if (source.datum_type !== dest.datum_type) {
                return false; // false, datums are not equal
              } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {
                // the tolerance for es is to ensure that GRS80 and WGS84
                // are considered identical
                return false;
              } else if (source.datum_type === PJD_3PARAM$1) {
                return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2];
              } else if (source.datum_type === PJD_7PARAM$1) {
                return source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6];
              } else {
                return true; // datums are equal
              }
            } // cs_compare_datums()

            /*
             * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates
             * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),
             * according to the current ellipsoid parameters.
             *
             *    Latitude  : Geodetic latitude in radians                     (input)
             *    Longitude : Geodetic longitude in radians                    (input)
             *    Height    : Geodetic height, in meters                       (input)
             *    X         : Calculated Geocentric X coordinate, in meters    (output)
             *    Y         : Calculated Geocentric Y coordinate, in meters    (output)
             *    Z         : Calculated Geocentric Z coordinate, in meters    (output)
             *
             */

            function geodeticToGeocentric$1(p, es, a) {
              var Longitude = p.x;
              var Latitude = p.y;
              var Height = p.z ? p.z : 0; //Z value not always supplied

              var Rn;
              /*  Earth radius at location  */

              var Sin_Lat;
              /*  Math.sin(Latitude)  */

              var Sin2_Lat;
              /*  Square of Math.sin(Latitude)  */

              var Cos_Lat;
              /*  Math.cos(Latitude)  */

              /*
               ** Don't blow up if Latitude is just a little out of the value
               ** range as it may just be a rounding issue.  Also removed longitude
               ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
               */

              if (Latitude < -HALF_PI$1 && Latitude > -1.001 * HALF_PI$1) {
                Latitude = -HALF_PI$1;
              } else if (Latitude > HALF_PI$1 && Latitude < 1.001 * HALF_PI$1) {
                Latitude = HALF_PI$1;
              } else if (Latitude < -HALF_PI$1 || Latitude > HALF_PI$1) {
                /* Latitude out of range */
                //..reportError('geocent:lat out of range:' + Latitude);
                return null;
              }

              if (Longitude > Math.PI) {
                Longitude -= 2 * Math.PI;
              }

              Sin_Lat = Math.sin(Latitude);
              Cos_Lat = Math.cos(Latitude);
              Sin2_Lat = Sin_Lat * Sin_Lat;
              Rn = a / Math.sqrt(1.0e0 - es * Sin2_Lat);
              return {
                x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
                y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
                z: (Rn * (1 - es) + Height) * Sin_Lat
              };
            } // cs_geodetic_to_geocentric()

            function geocentricToGeodetic$1(p, es, a, b) {
              /* local defintions and variables */

              /* end-criterium of loop, accuracy of sin(Latitude) */
              var genau = 1e-12;
              var genau2 = genau * genau;
              var maxiter = 30;
              var P;
              /* distance between semi-minor axis and location */

              var RR;
              /* distance between center and location */

              var CT;
              /* sin of geocentric latitude */

              var ST;
              /* cos of geocentric latitude */

              var RX;
              var RK;
              var RN;
              /* Earth radius at location */

              var CPHI0;
              /* cos of start or old geodetic latitude in iterations */

              var SPHI0;
              /* sin of start or old geodetic latitude in iterations */

              var CPHI;
              /* cos of searched geodetic latitude */

              var SPHI;
              /* sin of searched geodetic latitude */

              var SDPHI;
              /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */

              var iter;
              /* # of continous iteration, max. 30 is always enough (s.a.) */

              var X = p.x;
              var Y = p.y;
              var Z = p.z ? p.z : 0.0; //Z value not always supplied

              var Longitude;
              var Latitude;
              var Height;
              P = Math.sqrt(X * X + Y * Y);
              RR = Math.sqrt(X * X + Y * Y + Z * Z);
              /*      special cases for latitude and longitude */

              if (P / a < genau) {
                /*  special case, if P=0. (X=0., Y=0.) */
                Longitude = 0.0;
                /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
                 *  of ellipsoid (=center of mass), Latitude becomes PI/2 */

                if (RR / a < genau) {
                  Latitude = HALF_PI$1;
                  Height = -b;
                  return {
                    x: p.x,
                    y: p.y,
                    z: p.z
                  };
                }
              } else {
                /*  ellipsoidal (geodetic) longitude
                 *  interval: -PI < Longitude <= +PI */
                Longitude = Math.atan2(Y, X);
              }
              /* --------------------------------------------------------------
               * Following iterative algorithm was developped by
               * "Institut for Erdmessung", University of Hannover, July 1988.
               * Internet: www.ife.uni-hannover.de
               * Iterative computation of CPHI,SPHI and Height.
               * Iteration of CPHI and SPHI to 10**-12 radian resp.
               * 2*10**-7 arcsec.
               * --------------------------------------------------------------
               */


              CT = Z / RR;
              ST = P / RR;
              RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
              CPHI0 = ST * (1.0 - es) * RX;
              SPHI0 = CT * RX;
              iter = 0;
              /* loop to find sin(Latitude) resp. Latitude
               * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */

              do {
                iter++;
                RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);
                /*  ellipsoidal (geodetic) height */

                Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);
                RK = es * RN / (RN + Height);
                RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
                CPHI = ST * (1.0 - RK) * RX;
                SPHI = CT * RX;
                SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
                CPHI0 = CPHI;
                SPHI0 = SPHI;
              } while (SDPHI * SDPHI > genau2 && iter < maxiter);
              /*      ellipsoidal (geodetic) latitude */


              Latitude = Math.atan(SPHI / Math.abs(CPHI));
              return {
                x: Longitude,
                y: Latitude,
                z: Height
              };
            } // cs_geocentric_to_geodetic()

            /****************************************************************/
            // pj_geocentic_to_wgs84( p )
            //  p = point to transform in geocentric coordinates (x,y,z)

            /** point object, nothing fancy, just allows values to be
                passed back and forth by reference rather than by value.
                Other point classes may be used as long as they have
                x and y properties, which will get modified in the transform method.
            */

            function geocentricToWgs84$1(p, datum_type, datum_params) {
              if (datum_type === PJD_3PARAM$1) {
                // if( x[io] === HUGE_VAL )
                //    continue;
                return {
                  x: p.x + datum_params[0],
                  y: p.y + datum_params[1],
                  z: p.z + datum_params[2]
                };
              } else if (datum_type === PJD_7PARAM$1) {
                var Dx_BF = datum_params[0];
                var Dy_BF = datum_params[1];
                var Dz_BF = datum_params[2];
                var Rx_BF = datum_params[3];
                var Ry_BF = datum_params[4];
                var Rz_BF = datum_params[5];
                var M_BF = datum_params[6]; // if( x[io] === HUGE_VAL )
                //    continue;

                return {
                  x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
                  y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
                  z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
                };
              }
            } // cs_geocentric_to_wgs84

            /****************************************************************/
            // pj_geocentic_from_wgs84()
            //  coordinate system definition,
            //  point to transform in geocentric coordinates (x,y,z)

            function geocentricFromWgs84$1(p, datum_type, datum_params) {
              if (datum_type === PJD_3PARAM$1) {
                //if( x[io] === HUGE_VAL )
                //    continue;
                return {
                  x: p.x - datum_params[0],
                  y: p.y - datum_params[1],
                  z: p.z - datum_params[2]
                };
              } else if (datum_type === PJD_7PARAM$1) {
                var Dx_BF = datum_params[0];
                var Dy_BF = datum_params[1];
                var Dz_BF = datum_params[2];
                var Rx_BF = datum_params[3];
                var Ry_BF = datum_params[4];
                var Rz_BF = datum_params[5];
                var M_BF = datum_params[6];
                var x_tmp = (p.x - Dx_BF) / M_BF;
                var y_tmp = (p.y - Dy_BF) / M_BF;
                var z_tmp = (p.z - Dz_BF) / M_BF; //if( x[io] === HUGE_VAL )
                //    continue;

                return {
                  x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
                  y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
                  z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
                };
              } //cs_geocentric_from_wgs84()

            }

            function checkParams$1(type) {
              return type === PJD_3PARAM$1 || type === PJD_7PARAM$1;
            }

            function datum_transform$1 (source, dest, point) {
              // Short cut if the datums are identical.
              if (compareDatums$1(source, dest)) {
                return point; // in this case, zero is sucess,
                // whereas cs_compare_datums returns 1 to indicate TRUE
                // confusing, should fix this
              } // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest


              if (source.datum_type === PJD_NODATUM$1 || dest.datum_type === PJD_NODATUM$1) {
                return point;
              } // If this datum requires grid shifts, then apply it to geodetic coordinates.
              // Do we need to go through geocentric coordinates?


              if (source.es === dest.es && source.a === dest.a && !checkParams$1(source.datum_type) && !checkParams$1(dest.datum_type)) {
                return point;
              } // Convert to geocentric coordinates.


              point = geodeticToGeocentric$1(point, source.es, source.a); // Convert between datums

              if (checkParams$1(source.datum_type)) {
                point = geocentricToWgs84$1(point, source.datum_type, source.datum_params);
              }

              if (checkParams$1(dest.datum_type)) {
                point = geocentricFromWgs84$1(point, dest.datum_type, dest.datum_params);
              }

              return geocentricToGeodetic$1(point, dest.es, dest.a, dest.b);
            }

            function adjust_axis$1 (crs, denorm, point) {
              var xin = point.x,
                  yin = point.y,
                  zin = point.z || 0.0;
              var v, t, i;
              var out = {};

              for (i = 0; i < 3; i++) {
                if (denorm && i === 2 && point.z === undefined) {
                  continue;
                }

                if (i === 0) {
                  v = xin;
                  t = 'x';
                } else if (i === 1) {
                  v = yin;
                  t = 'y';
                } else {
                  v = zin;
                  t = 'z';
                }

                switch (crs.axis[i]) {
                  case 'e':
                    out[t] = v;
                    break;

                  case 'w':
                    out[t] = -v;
                    break;

                  case 'n':
                    out[t] = v;
                    break;

                  case 's':
                    out[t] = -v;
                    break;

                  case 'u':
                    if (point[t] !== undefined) {
                      out.z = v;
                    }

                    break;

                  case 'd':
                    if (point[t] !== undefined) {
                      out.z = -v;
                    }

                    break;

                  default:
                    //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
                    return null;
                }
              }

              return out;
            }

            function common$1 (array) {
              var out = {
                x: array[0],
                y: array[1]
              };

              if (array.length > 2) {
                out.z = array[2];
              }

              if (array.length > 3) {
                out.m = array[3];
              }

              return out;
            }

            function checkNotWGS$1(source, dest) {
              return (source.datum.datum_type === PJD_3PARAM$1 || source.datum.datum_type === PJD_7PARAM$1) && dest.datumCode !== 'WGS84' || (dest.datum.datum_type === PJD_3PARAM$1 || dest.datum.datum_type === PJD_7PARAM$1) && source.datumCode !== 'WGS84';
            }

            function transform$1(source, dest, point) {
              var wgs84;

              if (Array.isArray(point)) {
                point = common$1(point);
              } // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84


              if (source.datum && dest.datum && checkNotWGS$1(source, dest)) {
                wgs84 = new Projection$1('WGS84');
                point = transform$1(source, wgs84, point);
                source = wgs84;
              } // DGR, 2010/11/12


              if (source.axis !== 'enu') {
                point = adjust_axis$1(source, false, point);
              } // Transform source points to long/lat, if they aren't already.


              if (source.projName === 'longlat') {
                point = {
                  x: point.x * D2R$2,
                  y: point.y * D2R$2
                };
              } else {
                if (source.to_meter) {
                  point = {
                    x: point.x * source.to_meter,
                    y: point.y * source.to_meter
                  };
                }

                point = source.inverse(point); // Convert Cartesian to longlat
              } // Adjust for the prime meridian if necessary


              if (source.from_greenwich) {
                point.x += source.from_greenwich;
              } // Convert datums if needed, and if possible.


              point = datum_transform$1(source.datum, dest.datum, point); // Adjust for the prime meridian if necessary

              if (dest.from_greenwich) {
                point = {
                  x: point.x - dest.from_greenwich,
                  y: point.y
                };
              }

              if (dest.projName === 'longlat') {
                // convert radians to decimal degrees
                point = {
                  x: point.x * R2D$1,
                  y: point.y * R2D$1
                };
              } else {
                // else project
                point = dest.forward(point);

                if (dest.to_meter) {
                  point = {
                    x: point.x / dest.to_meter,
                    y: point.y / dest.to_meter
                  };
                }
              } // DGR, 2010/11/12


              if (dest.axis !== 'enu') {
                return adjust_axis$1(dest, true, point);
              }

              return point;
            }

            var wgs84$1 = Projection$1('WGS84');

            function transformer$1(from, to, coords) {
              var transformedArray;

              if (Array.isArray(coords)) {
                transformedArray = transform$1(from, to, coords);

                if (coords.length === 3) {
                  return [transformedArray.x, transformedArray.y, transformedArray.z];
                } else {
                  return [transformedArray.x, transformedArray.y];
                }
              } else {
                return transform$1(from, to, coords);
              }
            }

            function checkProj$1(item) {
              if (item instanceof Projection$1) {
                return item;
              }

              if (item.oProj) {
                return item.oProj;
              }

              return Projection$1(item);
            }

            function proj4$2(fromProj, toProj, coord) {
              fromProj = checkProj$1(fromProj);
              var single = false;
              var obj;

              if (typeof toProj === 'undefined') {
                toProj = fromProj;
                fromProj = wgs84$1;
                single = true;
              } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {
                coord = toProj;
                toProj = fromProj;
                fromProj = wgs84$1;
                single = true;
              }

              toProj = checkProj$1(toProj);

              if (coord) {
                return transformer$1(fromProj, toProj, coord);
              } else {
                obj = {
                  forward: function (coords) {
                    return transformer$1(fromProj, toProj, coords);
                  },
                  inverse: function (coords) {
                    return transformer$1(toProj, fromProj, coords);
                  }
                };

                if (single) {
                  obj.oProj = toProj;
                }

                return obj;
              }
            }

            function Point$3(x, y, z) {
              if (!(this instanceof Point$3)) {
                return new Point$3(x, y, z);
              }

              if (Array.isArray(x)) {
                this.x = x[0];
                this.y = x[1];
                this.z = x[2] || 0.0;
              } else if (typeof x === 'object') {
                this.x = x.x;
                this.y = x.y;
                this.z = x.z || 0.0;
              } else if (typeof x === 'string' && typeof y === 'undefined') {
                var coords = x.split(',');
                this.x = parseFloat(coords[0], 10);
                this.y = parseFloat(coords[1], 10);
                this.z = parseFloat(coords[2], 10) || 0.0;
              } else {
                this.x = x;
                this.y = y;
                this.z = z || 0.0;
              }

              console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');
            }

            Point$3.fromMGRS = function (mgrsStr) {
              return new Point$3(toPoint(mgrsStr));
            };

            Point$3.prototype.toMGRS = function (accuracy) {
              return forward$1([this.x, this.y], accuracy);
            };

            var version$2 = "2.4.3";

            var C00$1 = 1;
            var C02$1 = 0.25;
            var C04$1 = 0.046875;
            var C06$1 = 0.01953125;
            var C08$1 = 0.01068115234375;
            var C22$1 = 0.75;
            var C44$1 = 0.46875;
            var C46$1 = 0.01302083333333333333;
            var C48$1 = 0.00712076822916666666;
            var C66$1 = 0.36458333333333333333;
            var C68$1 = 0.00569661458333333333;
            var C88$1 = 0.3076171875;
            function pj_enfn$1 (es) {
              var en = [];
              en[0] = C00$1 - es * (C02$1 + es * (C04$1 + es * (C06$1 + es * C08$1)));
              en[1] = es * (C22$1 - es * (C04$1 + es * (C06$1 + es * C08$1)));
              var t = es * es;
              en[2] = t * (C44$1 - es * (C46$1 + es * C48$1));
              t *= es;
              en[3] = t * (C66$1 - es * C68$1);
              en[4] = t * es * C88$1;
              return en;
            }

            function pj_mlfn$1 (phi, sphi, cphi, en) {
              cphi *= sphi;
              sphi *= sphi;
              return en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4])));
            }

            var MAX_ITER$4 = 20;
            function pj_inv_mlfn$1 (arg, es, en) {
              var k = 1 / (1 - es);
              var phi = arg;

              for (var i = MAX_ITER$4; i; --i) {
                /* rarely goes over 2 iterations */
                var s = Math.sin(phi);
                var t = 1 - es * s * s; //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
                //phi -= t * (t * Math.sqrt(t)) * k;

                t = (pj_mlfn$1(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
                phi -= t;

                if (Math.abs(t) < EPSLN$1) {
                  return phi;
                }
              } //..reportError("cass:pj_inv_mlfn: Convergence error");


              return phi;
            }

            // Heavily based on this tmerc projection implementation
            function init$w() {
              this.x0 = this.x0 !== undefined ? this.x0 : 0;
              this.y0 = this.y0 !== undefined ? this.y0 : 0;
              this.long0 = this.long0 !== undefined ? this.long0 : 0;
              this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

              if (this.es) {
                this.en = pj_enfn$1(this.es);
                this.ml0 = pj_mlfn$1(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
              }
            }
            /**
                Transverse Mercator Forward  - long/lat to x/y
                long/lat in radians
              */

            function forward$t(p) {
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon$1(lon - this.long0);
              var con;
              var x, y;
              var sin_phi = Math.sin(lat);
              var cos_phi = Math.cos(lat);

              if (!this.es) {
                var b = cos_phi * Math.sin(delta_lon);

                if (Math.abs(Math.abs(b) - 1) < EPSLN$1) {
                  return 93;
                } else {
                  x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
                  y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
                  b = Math.abs(y);

                  if (b >= 1) {
                    if (b - 1 > EPSLN$1) {
                      return 93;
                    } else {
                      y = 0;
                    }
                  } else {
                    y = Math.acos(y);
                  }

                  if (lat < 0) {
                    y = -y;
                  }

                  y = this.a * this.k0 * (y - this.lat0) + this.y0;
                }
              } else {
                var al = cos_phi * delta_lon;
                var als = Math.pow(al, 2);
                var c = this.ep2 * Math.pow(cos_phi, 2);
                var cs = Math.pow(c, 2);
                var tq = Math.abs(cos_phi) > EPSLN$1 ? Math.tan(lat) : 0;
                var t = Math.pow(tq, 2);
                var ts = Math.pow(t, 2);
                con = 1 - this.es * Math.pow(sin_phi, 2);
                al = al / Math.sqrt(con);
                var ml = pj_mlfn$1(lat, sin_phi, cos_phi, this.en);
                x = this.a * (this.k0 * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + this.x0;
                y = this.a * (this.k0 * (ml - this.ml0 + sin_phi * delta_lon * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + this.y0;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /**
                Transverse Mercator Inverse  -  x/y to long/lat
              */

            function inverse$t(p) {
              var con, phi;
              var lat, lon;
              var x = (p.x - this.x0) * (1 / this.a);
              var y = (p.y - this.y0) * (1 / this.a);

              if (!this.es) {
                var f = Math.exp(x / this.k0);
                var g = 0.5 * (f - 1 / f);
                var temp = this.lat0 + y / this.k0;
                var h = Math.cos(temp);
                con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
                lat = Math.asin(con);

                if (y < 0) {
                  lat = -lat;
                }

                if (g === 0 && h === 0) {
                  lon = 0;
                } else {
                  lon = adjust_lon$1(Math.atan2(g, h) + this.long0);
                }
              } else {
                // ellipsoidal form
                con = this.ml0 + y / this.k0;
                phi = pj_inv_mlfn$1(con, this.es, this.en);

                if (Math.abs(phi) < HALF_PI$1) {
                  var sin_phi = Math.sin(phi);
                  var cos_phi = Math.cos(phi);
                  var tan_phi = Math.abs(cos_phi) > EPSLN$1 ? Math.tan(phi) : 0;
                  var c = this.ep2 * Math.pow(cos_phi, 2);
                  var cs = Math.pow(c, 2);
                  var t = Math.pow(tan_phi, 2);
                  var ts = Math.pow(t, 2);
                  con = 1 - this.es * Math.pow(sin_phi, 2);
                  var d = x * Math.sqrt(con) / this.k0;
                  var ds = Math.pow(d, 2);
                  con = con * tan_phi;
                  lat = phi - con * ds / (1 - this.es) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
                  lon = adjust_lon$1(this.long0 + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
                } else {
                  lat = HALF_PI$1 * sign$1(y);
                  lon = 0;
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$x = ["Transverse_Mercator", "Transverse Mercator", "tmerc"];
            var tmerc$1 = {
              init: init$w,
              forward: forward$t,
              inverse: inverse$t,
              names: names$x
            };

            function sinh$1 (x) {
              var r = Math.exp(x);
              r = (r - 1 / r) / 2;
              return r;
            }

            function hypot$1 (x, y) {
              x = Math.abs(x);
              y = Math.abs(y);
              var a = Math.max(x, y);
              var b = Math.min(x, y) / (a ? a : 1);
              return a * Math.sqrt(1 + Math.pow(b, 2));
            }

            function log1py$1 (x) {
              var y = 1 + x;
              var z = y - 1;
              return z === 0 ? x : x * Math.log(y) / z;
            }

            function asinhy$1 (x) {
              var y = Math.abs(x);
              y = log1py$1(y * (1 + y / (hypot$1(1, y) + 1)));
              return x < 0 ? -y : y;
            }

            function gatg$1 (pp, B) {
              var cos_2B = 2 * Math.cos(2 * B);
              var i = pp.length - 1;
              var h1 = pp[i];
              var h2 = 0;
              var h;

              while (--i >= 0) {
                h = -h2 + cos_2B * h1 + pp[i];
                h2 = h1;
                h1 = h;
              }

              return B + h * Math.sin(2 * B);
            }

            function clens$1 (pp, arg_r) {
              var r = 2 * Math.cos(arg_r);
              var i = pp.length - 1;
              var hr1 = pp[i];
              var hr2 = 0;
              var hr;

              while (--i >= 0) {
                hr = -hr2 + r * hr1 + pp[i];
                hr2 = hr1;
                hr1 = hr;
              }

              return Math.sin(arg_r) * hr;
            }

            function cosh$1 (x) {
              var r = Math.exp(x);
              r = (r + 1 / r) / 2;
              return r;
            }

            function clens_cmplx$1 (pp, arg_r, arg_i) {
              var sin_arg_r = Math.sin(arg_r);
              var cos_arg_r = Math.cos(arg_r);
              var sinh_arg_i = sinh$1(arg_i);
              var cosh_arg_i = cosh$1(arg_i);
              var r = 2 * cos_arg_r * cosh_arg_i;
              var i = -2 * sin_arg_r * sinh_arg_i;
              var j = pp.length - 1;
              var hr = pp[j];
              var hi1 = 0;
              var hr1 = 0;
              var hi = 0;
              var hr2;
              var hi2;

              while (--j >= 0) {
                hr2 = hr1;
                hi2 = hi1;
                hr1 = hr;
                hi1 = hi;
                hr = -hr2 + r * hr1 - i * hi1 + pp[j];
                hi = -hi2 + i * hr1 + r * hi1;
              }

              r = sin_arg_r * cosh_arg_i;
              i = cos_arg_r * sinh_arg_i;
              return [r * hr - i * hi, r * hi + i * hr];
            }

            // Heavily based on this etmerc projection implementation
            function init$x() {
              if (this.es === undefined || this.es <= 0) {
                throw new Error('incorrect elliptical usage');
              }

              this.x0 = this.x0 !== undefined ? this.x0 : 0;
              this.y0 = this.y0 !== undefined ? this.y0 : 0;
              this.long0 = this.long0 !== undefined ? this.long0 : 0;
              this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;
              this.cgb = [];
              this.cbg = [];
              this.utg = [];
              this.gtu = [];
              var f = this.es / (1 + Math.sqrt(1 - this.es));
              var n = f / (2 - f);
              var np = n;
              this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675))))));
              this.cbg[0] = n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));
              np = np * n;
              this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
              this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));
              np = np * n;
              this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
              this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));
              np = np * n;
              this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
              this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * (-24832 / 14175)));
              np = np * n;
              this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
              this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));
              np = np * n;
              this.cgb[5] = np * (601676 / 22275);
              this.cbg[5] = np * (444337 / 155925);
              np = Math.pow(n, 2);
              this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
              this.utg[0] = n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
              this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));
              this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
              this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));
              np = np * n;
              this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720))));
              this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));
              np = np * n;
              this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
              this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));
              np = np * n;
              this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
              this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));
              np = np * n;
              this.utg[5] = np * (-20648693 / 638668800);
              this.gtu[5] = np * (212378941 / 319334400);
              var Z = gatg$1(this.cbg, this.lat0);
              this.Zb = -this.Qn * (Z + clens$1(this.gtu, 2 * Z));
            }
            function forward$u(p) {
              var Ce = adjust_lon$1(p.x - this.long0);
              var Cn = p.y;
              Cn = gatg$1(this.cbg, Cn);
              var sin_Cn = Math.sin(Cn);
              var cos_Cn = Math.cos(Cn);
              var sin_Ce = Math.sin(Ce);
              var cos_Ce = Math.cos(Ce);
              Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
              Ce = Math.atan2(sin_Ce * cos_Cn, hypot$1(sin_Cn, cos_Cn * cos_Ce));
              Ce = asinhy$1(Math.tan(Ce));
              var tmp = clens_cmplx$1(this.gtu, 2 * Cn, 2 * Ce);
              Cn = Cn + tmp[0];
              Ce = Ce + tmp[1];
              var x;
              var y;

              if (Math.abs(Ce) <= 2.623395162778) {
                x = this.a * (this.Qn * Ce) + this.x0;
                y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
              } else {
                x = Infinity;
                y = Infinity;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$u(p) {
              var Ce = (p.x - this.x0) * (1 / this.a);
              var Cn = (p.y - this.y0) * (1 / this.a);
              Cn = (Cn - this.Zb) / this.Qn;
              Ce = Ce / this.Qn;
              var lon;
              var lat;

              if (Math.abs(Ce) <= 2.623395162778) {
                var tmp = clens_cmplx$1(this.utg, 2 * Cn, 2 * Ce);
                Cn = Cn + tmp[0];
                Ce = Ce + tmp[1];
                Ce = Math.atan(sinh$1(Ce));
                var sin_Cn = Math.sin(Cn);
                var cos_Cn = Math.cos(Cn);
                var sin_Ce = Math.sin(Ce);
                var cos_Ce = Math.cos(Ce);
                Cn = Math.atan2(sin_Cn * cos_Ce, hypot$1(sin_Ce, cos_Ce * cos_Cn));
                Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);
                lon = adjust_lon$1(Ce + this.long0);
                lat = gatg$1(this.cgb, Cn);
              } else {
                lon = Infinity;
                lat = Infinity;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$y = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc"];
            var etmerc$1 = {
              init: init$x,
              forward: forward$u,
              inverse: inverse$u,
              names: names$y
            };

            function adjust_zone$1 (zone, lon) {
              if (zone === undefined) {
                zone = Math.floor((adjust_lon$1(lon) + Math.PI) * 30 / Math.PI) + 1;

                if (zone < 0) {
                  return 0;
                } else if (zone > 60) {
                  return 60;
                }
              }

              return zone;
            }

            var dependsOn$1 = 'etmerc';
            function init$y() {
              var zone = adjust_zone$1(this.zone, this.long0);

              if (zone === undefined) {
                throw new Error('unknown utm zone');
              }

              this.lat0 = 0;
              this.long0 = (6 * Math.abs(zone) - 183) * D2R$2;
              this.x0 = 500000;
              this.y0 = this.utmSouth ? 10000000 : 0;
              this.k0 = 0.9996;
              etmerc$1.init.apply(this);
              this.forward = etmerc$1.forward;
              this.inverse = etmerc$1.inverse;
            }
            var names$z = ["Universal Transverse Mercator System", "utm"];
            var utm$1 = {
              init: init$y,
              names: names$z,
              dependsOn: dependsOn$1
            };

            function srat$1 (esinp, exp) {
              return Math.pow((1 - esinp) / (1 + esinp), exp);
            }

            var MAX_ITER$5 = 20;
            function init$z() {
              var sphi = Math.sin(this.lat0);
              var cphi = Math.cos(this.lat0);
              cphi *= cphi;
              this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
              this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
              this.phic0 = Math.asin(sphi / this.C);
              this.ratexp = 0.5 * this.C * this.e;
              this.K = Math.tan(0.5 * this.phic0 + FORTPI$1) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI$1), this.C) * srat$1(this.e * sphi, this.ratexp));
            }
            function forward$v(p) {
              var lon = p.x;
              var lat = p.y;
              p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI$1), this.C) * srat$1(this.e * Math.sin(lat), this.ratexp)) - HALF_PI$1;
              p.x = this.C * lon;
              return p;
            }
            function inverse$v(p) {
              var DEL_TOL = 1e-14;
              var lon = p.x / this.C;
              var lat = p.y;
              var num = Math.pow(Math.tan(0.5 * lat + FORTPI$1) / this.K, 1 / this.C);

              for (var i = MAX_ITER$5; i > 0; --i) {
                lat = 2 * Math.atan(num * srat$1(this.e * Math.sin(p.y), -0.5 * this.e)) - HALF_PI$1;

                if (Math.abs(lat - p.y) < DEL_TOL) {
                  break;
                }

                p.y = lat;
              }
              /* convergence failed */


              if (!i) {
                return null;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$A = ["gauss"];
            var gauss$1 = {
              init: init$z,
              forward: forward$v,
              inverse: inverse$v,
              names: names$A
            };

            function init$A() {
              gauss$1.init.apply(this);

              if (!this.rc) {
                return;
              }

              this.sinc0 = Math.sin(this.phic0);
              this.cosc0 = Math.cos(this.phic0);
              this.R2 = 2 * this.rc;

              if (!this.title) {
                this.title = "Oblique Stereographic Alternative";
              }
            }
            function forward$w(p) {
              var sinc, cosc, cosl, k;
              p.x = adjust_lon$1(p.x - this.long0);
              gauss$1.forward.apply(this, [p]);
              sinc = Math.sin(p.y);
              cosc = Math.cos(p.y);
              cosl = Math.cos(p.x);
              k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
              p.x = k * cosc * Math.sin(p.x);
              p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
              p.x = this.a * p.x + this.x0;
              p.y = this.a * p.y + this.y0;
              return p;
            }
            function inverse$w(p) {
              var sinc, cosc, lon, lat, rho;
              p.x = (p.x - this.x0) / this.a;
              p.y = (p.y - this.y0) / this.a;
              p.x /= this.k0;
              p.y /= this.k0;

              if (rho = Math.sqrt(p.x * p.x + p.y * p.y)) {
                var c = 2 * Math.atan2(rho, this.R2);
                sinc = Math.sin(c);
                cosc = Math.cos(c);
                lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
                lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
              } else {
                lat = this.phic0;
                lon = 0;
              }

              p.x = lon;
              p.y = lat;
              gauss$1.inverse.apply(this, [p]);
              p.x = adjust_lon$1(p.x + this.long0);
              return p;
            }
            var names$B = ["Stereographic_North_Pole", "Oblique_Stereographic", "Polar_Stereographic", "sterea", "Oblique Stereographic Alternative"];
            var sterea$1 = {
              init: init$A,
              forward: forward$w,
              inverse: inverse$w,
              names: names$B
            };

            function ssfn_$1(phit, sinphi, eccen) {
              sinphi *= eccen;
              return Math.tan(0.5 * (HALF_PI$1 + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen);
            }
            function init$B() {
              this.coslat0 = Math.cos(this.lat0);
              this.sinlat0 = Math.sin(this.lat0);

              if (this.sphere) {
                if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN$1) {
                  this.k0 = 0.5 * (1 + sign$1(this.lat0) * Math.sin(this.lat_ts));
                }
              } else {
                if (Math.abs(this.coslat0) <= EPSLN$1) {
                  if (this.lat0 > 0) {
                    //North pole
                    //trace('stere:north pole');
                    this.con = 1;
                  } else {
                    //South pole
                    //trace('stere:south pole');
                    this.con = -1;
                  }
                }

                this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));

                if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN$1) {
                  this.k0 = 0.5 * this.cons * msfnz$1(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz$1(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
                }

                this.ms1 = msfnz$1(this.e, this.sinlat0, this.coslat0);
                this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI$1;
                this.cosX0 = Math.cos(this.X0);
                this.sinX0 = Math.sin(this.X0);
              }
            } // Stereographic forward equations--mapping lat,long to x,y

            function forward$x(p) {
              var lon = p.x;
              var lat = p.y;
              var sinlat = Math.sin(lat);
              var coslat = Math.cos(lat);
              var A, X, sinX, cosX, ts, rh;
              var dlon = adjust_lon$1(lon - this.long0);

              if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN$1 && Math.abs(lat + this.lat0) <= EPSLN$1) {
                //case of the origine point
                //trace('stere:this is the origin point');
                p.x = NaN;
                p.y = NaN;
                return p;
              }

              if (this.sphere) {
                //trace('stere:sphere case');
                A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
                p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
                p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
                return p;
              } else {
                X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI$1;
                cosX = Math.cos(X);
                sinX = Math.sin(X);

                if (Math.abs(this.coslat0) <= EPSLN$1) {
                  ts = tsfnz$1(this.e, lat * this.con, this.con * sinlat);
                  rh = 2 * this.a * this.k0 * ts / this.cons;
                  p.x = this.x0 + rh * Math.sin(lon - this.long0);
                  p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0); //trace(p.toString());

                  return p;
                } else if (Math.abs(this.sinlat0) < EPSLN$1) {
                  //Eq
                  //trace('stere:equateur');
                  A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
                  p.y = A * sinX;
                } else {
                  //other case
                  //trace('stere:normal case');
                  A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
                  p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
                }

                p.x = A * cosX * Math.sin(dlon) + this.x0;
              } //trace(p.toString());


              return p;
            } //* Stereographic inverse equations--mapping x,y to lat/long

            function inverse$x(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon, lat, ts, ce, Chi;
              var rh = Math.sqrt(p.x * p.x + p.y * p.y);

              if (this.sphere) {
                var c = 2 * Math.atan(rh / (0.5 * this.a * this.k0));
                lon = this.long0;
                lat = this.lat0;

                if (rh <= EPSLN$1) {
                  p.x = lon;
                  p.y = lat;
                  return p;
                }

                lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);

                if (Math.abs(this.coslat0) < EPSLN$1) {
                  if (this.lat0 > 0) {
                    lon = adjust_lon$1(this.long0 + Math.atan2(p.x, -1 * p.y));
                  } else {
                    lon = adjust_lon$1(this.long0 + Math.atan2(p.x, p.y));
                  }
                } else {
                  lon = adjust_lon$1(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
                }

                p.x = lon;
                p.y = lat;
                return p;
              } else {
                if (Math.abs(this.coslat0) <= EPSLN$1) {
                  if (rh <= EPSLN$1) {
                    lat = this.lat0;
                    lon = this.long0;
                    p.x = lon;
                    p.y = lat; //trace(p.toString());

                    return p;
                  }

                  p.x *= this.con;
                  p.y *= this.con;
                  ts = rh * this.cons / (2 * this.a * this.k0);
                  lat = this.con * phi2z$1(this.e, ts);
                  lon = this.con * adjust_lon$1(this.con * this.long0 + Math.atan2(p.x, -1 * p.y));
                } else {
                  ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
                  lon = this.long0;

                  if (rh <= EPSLN$1) {
                    Chi = this.X0;
                  } else {
                    Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
                    lon = adjust_lon$1(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
                  }

                  lat = -1 * phi2z$1(this.e, Math.tan(0.5 * (HALF_PI$1 + Chi)));
                }
              }

              p.x = lon;
              p.y = lat; //trace(p.toString());

              return p;
            }
            var names$C = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)"];
            var stere$1 = {
              init: init$B,
              forward: forward$x,
              inverse: inverse$x,
              names: names$C,
              ssfn_: ssfn_$1
            };

            /*
              references:
                Formules et constantes pour le Calcul pour la
                projection cylindrique conforme à axe oblique et pour la transformation entre
                des systèmes de référence.
                http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
              */
            function init$C() {
              var phy0 = this.lat0;
              this.lambda0 = this.long0;
              var sinPhy0 = Math.sin(phy0);
              var semiMajorAxis = this.a;
              var invF = this.rf;
              var flattening = 1 / invF;
              var e2 = 2 * flattening - Math.pow(flattening, 2);
              var e = this.e = Math.sqrt(e2);
              this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
              this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
              this.b0 = Math.asin(sinPhy0 / this.alpha);
              var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
              var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
              var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
              this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
            }
            function forward$y(p) {
              var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
              var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
              var S = -this.alpha * (Sa1 + Sa2) + this.K; // spheric latitude

              var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4); // spheric longitude

              var I = this.alpha * (p.x - this.lambda0); // psoeudo equatorial rotation

              var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));
              var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));
              p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
              p.x = this.R * rotI + this.x0;
              return p;
            }
            function inverse$y(p) {
              var Y = p.x - this.x0;
              var X = p.y - this.y0;
              var rotI = Y / this.R;
              var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);
              var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
              var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));
              var lambda = this.lambda0 + I / this.alpha;
              var S = 0;
              var phy = b;
              var prevPhy = -1000;
              var iteration = 0;

              while (Math.abs(phy - prevPhy) > 0.0000001) {
                if (++iteration > 20) {
                  //...reportError("omercFwdInfinity");
                  return;
                } //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));


                S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
                prevPhy = phy;
                phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
              }

              p.x = lambda;
              p.y = phy;
              return p;
            }
            var names$D = ["somerc"];
            var somerc$1 = {
              init: init$C,
              forward: forward$y,
              inverse: inverse$y,
              names: names$D
            };

            /* Initialize the Oblique Mercator  projection
                ------------------------------------------*/

            function init$D() {
              this.no_off = this.no_off || false;
              this.no_rot = this.no_rot || false;

              if (isNaN(this.k0)) {
                this.k0 = 1;
              }

              var sinlat = Math.sin(this.lat0);
              var coslat = Math.cos(this.lat0);
              var con = this.e * sinlat;
              this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));
              this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);
              var t0 = tsfnz$1(this.e, this.lat0, sinlat);
              var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));

              if (dl * dl < 1) {
                dl = 1;
              }

              var fl;
              var gl;

              if (!isNaN(this.longc)) {
                //Central point and azimuth method
                if (this.lat0 >= 0) {
                  fl = dl + Math.sqrt(dl * dl - 1);
                } else {
                  fl = dl - Math.sqrt(dl * dl - 1);
                }

                this.el = fl * Math.pow(t0, this.bl);
                gl = 0.5 * (fl - 1 / fl);
                this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);
                this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;
              } else {
                //2 points method
                var t1 = tsfnz$1(this.e, this.lat1, Math.sin(this.lat1));
                var t2 = tsfnz$1(this.e, this.lat2, Math.sin(this.lat2));

                if (this.lat0 >= 0) {
                  this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
                } else {
                  this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);
                }

                var hl = Math.pow(t1, this.bl);
                var ll = Math.pow(t2, this.bl);
                fl = this.el / hl;
                gl = 0.5 * (fl - 1 / fl);
                var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);
                var pl = (ll - hl) / (ll + hl);
                var dlon12 = adjust_lon$1(this.long1 - this.long2);
                this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * dlon12) / pl) / this.bl;
                this.long0 = adjust_lon$1(this.long0);
                var dlon10 = adjust_lon$1(this.long1 - this.long0);
                this.gamma0 = Math.atan(Math.sin(this.bl * dlon10) / gl);
                this.alpha = Math.asin(dl * Math.sin(this.gamma0));
              }

              if (this.no_off) {
                this.uc = 0;
              } else {
                if (this.lat0 >= 0) {
                  this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
                } else {
                  this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));
                }
              }
            }
            /* Oblique Mercator forward equations--mapping lat,long to x,y
                ----------------------------------------------------------*/

            function forward$z(p) {
              var lon = p.x;
              var lat = p.y;
              var dlon = adjust_lon$1(lon - this.long0);
              var us, vs;
              var con;

              if (Math.abs(Math.abs(lat) - HALF_PI$1) <= EPSLN$1) {
                if (lat > 0) {
                  con = -1;
                } else {
                  con = 1;
                }

                vs = this.al / this.bl * Math.log(Math.tan(FORTPI$1 + con * this.gamma0 * 0.5));
                us = -1 * con * HALF_PI$1 * this.al / this.bl;
              } else {
                var t = tsfnz$1(this.e, lat, Math.sin(lat));
                var ql = this.el / Math.pow(t, this.bl);
                var sl = 0.5 * (ql - 1 / ql);
                var tl = 0.5 * (ql + 1 / ql);
                var vl = Math.sin(this.bl * dlon);
                var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;

                if (Math.abs(Math.abs(ul) - 1) <= EPSLN$1) {
                  vs = Number.POSITIVE_INFINITY;
                } else {
                  vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;
                }

                if (Math.abs(Math.cos(this.bl * dlon)) <= EPSLN$1) {
                  us = this.al * this.bl * dlon;
                } else {
                  us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;
                }
              }

              if (this.no_rot) {
                p.x = this.x0 + us;
                p.y = this.y0 + vs;
              } else {
                us -= this.uc;
                p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);
                p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);
              }

              return p;
            }
            function inverse$z(p) {
              var us, vs;

              if (this.no_rot) {
                vs = p.y - this.y0;
                us = p.x - this.x0;
              } else {
                vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);
                us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);
                us += this.uc;
              }

              var qp = Math.exp(-1 * this.bl * vs / this.al);
              var sp = 0.5 * (qp - 1 / qp);
              var tp = 0.5 * (qp + 1 / qp);
              var vp = Math.sin(this.bl * us / this.al);
              var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;
              var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);

              if (Math.abs(up - 1) < EPSLN$1) {
                p.x = this.long0;
                p.y = HALF_PI$1;
              } else if (Math.abs(up + 1) < EPSLN$1) {
                p.x = this.long0;
                p.y = -1 * HALF_PI$1;
              } else {
                p.y = phi2z$1(this.e, ts);
                p.x = adjust_lon$1(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);
              }

              return p;
            }
            var names$E = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "omerc"];
            var omerc$1 = {
              init: init$D,
              forward: forward$z,
              inverse: inverse$z,
              names: names$E
            };

            function init$E() {
              // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north
              //double c_lat;                   /* center latitude                      */
              //double c_lon;                   /* center longitude                     */
              //double lat1;                    /* first standard parallel              */
              //double lat2;                    /* second standard parallel             */
              //double r_maj;                   /* major axis                           */
              //double r_min;                   /* minor axis                           */
              //double false_east;              /* x offset in meters                   */
              //double false_north;             /* y offset in meters                   */
              if (!this.lat2) {
                this.lat2 = this.lat1;
              } //if lat2 is not defined


              if (!this.k0) {
                this.k0 = 1;
              }

              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0; // Standard Parallels cannot be equal and on opposite sides of the equator

              if (Math.abs(this.lat1 + this.lat2) < EPSLN$1) {
                return;
              }

              var temp = this.b / this.a;
              this.e = Math.sqrt(1 - temp * temp);
              var sin1 = Math.sin(this.lat1);
              var cos1 = Math.cos(this.lat1);
              var ms1 = msfnz$1(this.e, sin1, cos1);
              var ts1 = tsfnz$1(this.e, this.lat1, sin1);
              var sin2 = Math.sin(this.lat2);
              var cos2 = Math.cos(this.lat2);
              var ms2 = msfnz$1(this.e, sin2, cos2);
              var ts2 = tsfnz$1(this.e, this.lat2, sin2);
              var ts0 = tsfnz$1(this.e, this.lat0, Math.sin(this.lat0));

              if (Math.abs(this.lat1 - this.lat2) > EPSLN$1) {
                this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
              } else {
                this.ns = sin1;
              }

              if (isNaN(this.ns)) {
                this.ns = sin1;
              }

              this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
              this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);

              if (!this.title) {
                this.title = "Lambert Conformal Conic";
              }
            } // Lambert Conformal conic forward equations--mapping lat,long to x,y
            // -----------------------------------------------------------------

            function forward$A(p) {
              var lon = p.x;
              var lat = p.y; // singular cases :

              if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN$1) {
                lat = sign$1(lat) * (HALF_PI$1 - 2 * EPSLN$1);
              }

              var con = Math.abs(Math.abs(lat) - HALF_PI$1);
              var ts, rh1;

              if (con > EPSLN$1) {
                ts = tsfnz$1(this.e, lat, Math.sin(lat));
                rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
              } else {
                con = lat * this.ns;

                if (con <= 0) {
                  return null;
                }

                rh1 = 0;
              }

              var theta = this.ns * adjust_lon$1(lon - this.long0);
              p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
              p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;
              return p;
            } // Lambert Conformal Conic inverse equations--mapping x,y to lat/long
            // -----------------------------------------------------------------

            function inverse$A(p) {
              var rh1, con, ts;
              var lat, lon;
              var x = (p.x - this.x0) / this.k0;
              var y = this.rh - (p.y - this.y0) / this.k0;

              if (this.ns > 0) {
                rh1 = Math.sqrt(x * x + y * y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(x * x + y * y);
                con = -1;
              }

              var theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * x, con * y);
              }

              if (rh1 !== 0 || this.ns > 0) {
                con = 1 / this.ns;
                ts = Math.pow(rh1 / (this.a * this.f0), con);
                lat = phi2z$1(this.e, ts);

                if (lat === -9999) {
                  return null;
                }
              } else {
                lat = -HALF_PI$1;
              }

              lon = adjust_lon$1(theta / this.ns + this.long0);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$F = ["Lambert Tangential Conformal Conic Projection", "Lambert_Conformal_Conic", "Lambert_Conformal_Conic_2SP", "lcc"];
            var lcc$1 = {
              init: init$E,
              forward: forward$A,
              inverse: inverse$A,
              names: names$F
            };

            function init$F() {
              this.a = 6377397.155;
              this.es = 0.006674372230614;
              this.e = Math.sqrt(this.es);

              if (!this.lat0) {
                this.lat0 = 0.863937979737193;
              }

              if (!this.long0) {
                this.long0 = 0.7417649320975901 - 0.308341501185665;
              }
              /* if scale not set default to 0.9999 */


              if (!this.k0) {
                this.k0 = 0.9999;
              }

              this.s45 = 0.785398163397448;
              /* 45 */

              this.s90 = 2 * this.s45;
              this.fi0 = this.lat0;
              this.e2 = this.es;
              this.e = Math.sqrt(this.e2);
              this.alfa = Math.sqrt(1 + this.e2 * Math.pow(Math.cos(this.fi0), 4) / (1 - this.e2));
              this.uq = 1.04216856380474;
              this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
              this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
              this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
              this.k1 = this.k0;
              this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
              this.s0 = 1.37008346281555;
              this.n = Math.sin(this.s0);
              this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
              this.ad = this.s90 - this.uq;
            }
            /* ellipsoid */

            /* calculate xy from lat/lon */

            /* Constants, identical to inverse transform function */

            function forward$B(p) {
              var gfi, u, deltav, s, d, eps, ro;
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon$1(lon - this.long0);
              /* Transformation */

              gfi = Math.pow((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat)), this.alfa * this.e / 2);
              u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
              deltav = -delta_lon * this.alfa;
              s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
              d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
              eps = this.n * d;
              ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
              p.y = ro * Math.cos(eps) / 1;
              p.x = ro * Math.sin(eps) / 1;

              if (!this.czech) {
                p.y *= -1;
                p.x *= -1;
              }

              return p;
            }
            /* calculate lat/lon from xy */

            function inverse$B(p) {
              var u, deltav, s, d, eps, ro, fi1;
              var ok;
              /* Transformation */

              /* revert y, x*/

              var tmp = p.x;
              p.x = p.y;
              p.y = tmp;

              if (!this.czech) {
                p.y *= -1;
                p.x *= -1;
              }

              ro = Math.sqrt(p.x * p.x + p.y * p.y);
              eps = Math.atan2(p.y, p.x);
              d = eps / Math.sin(this.s0);
              s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
              u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
              deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
              p.x = this.long0 - deltav / this.alfa;
              fi1 = u;
              ok = 0;
              var iter = 0;

              do {
                p.y = 2 * (Math.atan(Math.pow(this.k, -1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);

                if (Math.abs(fi1 - p.y) < 0.0000000001) {
                  ok = 1;
                }

                fi1 = p.y;
                iter += 1;
              } while (ok === 0 && iter < 15);

              if (iter >= 15) {
                return null;
              }

              return p;
            }
            var names$G = ["Krovak", "krovak"];
            var krovak$1 = {
              init: init$F,
              forward: forward$B,
              inverse: inverse$B,
              names: names$G
            };

            function mlfn$1 (e0, e1, e2, e3, phi) {
              return e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi);
            }

            function e0fn$1 (x) {
              return 1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x));
            }

            function e1fn$1 (x) {
              return 0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x));
            }

            function e2fn$1 (x) {
              return 0.05859375 * x * x * (1 + 0.75 * x);
            }

            function e3fn$1 (x) {
              return x * x * x * (35 / 3072);
            }

            function gN$1 (a, e, sinphi) {
              var temp = e * sinphi;
              return a / Math.sqrt(1 - temp * temp);
            }

            function adjust_lat$1 (x) {
              return Math.abs(x) < HALF_PI$1 ? x : x - sign$1(x) * Math.PI;
            }

            function imlfn$1 (ml, e0, e1, e2, e3) {
              var phi;
              var dphi;
              phi = ml / e0;

              for (var i = 0; i < 15; i++) {
                dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");


              return NaN;
            }

            function init$G() {
              if (!this.sphere) {
                this.e0 = e0fn$1(this.es);
                this.e1 = e1fn$1(this.es);
                this.e2 = e2fn$1(this.es);
                this.e3 = e3fn$1(this.es);
                this.ml0 = this.a * mlfn$1(this.e0, this.e1, this.e2, this.e3, this.lat0);
              }
            }
            /* Cassini forward equations--mapping lat,long to x,y
              -----------------------------------------------------------------------*/

            function forward$C(p) {
              /* Forward equations
                  -----------------*/
              var x, y;
              var lam = p.x;
              var phi = p.y;
              lam = adjust_lon$1(lam - this.long0);

              if (this.sphere) {
                x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
                y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
              } else {
                //ellipsoid
                var sinphi = Math.sin(phi);
                var cosphi = Math.cos(phi);
                var nl = gN$1(this.a, this.e, sinphi);
                var tl = Math.tan(phi) * Math.tan(phi);
                var al = lam * Math.cos(phi);
                var asq = al * al;
                var cl = this.es * cosphi * cosphi / (1 - this.es);
                var ml = this.a * mlfn$1(this.e0, this.e1, this.e2, this.e3, phi);
                x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
                y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
              }

              p.x = x + this.x0;
              p.y = y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$C(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var x = p.x / this.a;
              var y = p.y / this.a;
              var phi, lam;

              if (this.sphere) {
                var dd = y + this.lat0;
                phi = Math.asin(Math.sin(dd) * Math.cos(x));
                lam = Math.atan2(Math.tan(x), Math.cos(dd));
              } else {
                /* ellipsoid */
                var ml1 = this.ml0 / this.a + y;
                var phi1 = imlfn$1(ml1, this.e0, this.e1, this.e2, this.e3);

                if (Math.abs(Math.abs(phi1) - HALF_PI$1) <= EPSLN$1) {
                  p.x = this.long0;
                  p.y = HALF_PI$1;

                  if (y < 0) {
                    p.y *= -1;
                  }

                  return p;
                }

                var nl1 = gN$1(this.a, this.e, Math.sin(phi1));
                var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
                var tl1 = Math.pow(Math.tan(phi1), 2);
                var dl = x * this.a / nl1;
                var dsq = dl * dl;
                phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
                lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);
              }

              p.x = adjust_lon$1(lam + this.long0);
              p.y = adjust_lat$1(phi);
              return p;
            }
            var names$H = ["Cassini", "Cassini_Soldner", "cass"];
            var cass$1 = {
              init: init$G,
              forward: forward$C,
              inverse: inverse$C,
              names: names$H
            };

            function qsfnz$1 (eccent, sinphi) {
              var con;

              if (eccent > 1.0e-7) {
                con = eccent * sinphi;
                return (1 - eccent * eccent) * (sinphi / (1 - con * con) - 0.5 / eccent * Math.log((1 - con) / (1 + con)));
              } else {
                return 2 * sinphi;
              }
            }

            /*
              reference
                "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
                The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
              */

            var S_POLE$1 = 1;
            var N_POLE$1 = 2;
            var EQUIT$1 = 3;
            var OBLIQ$1 = 4;
            /* Initialize the Lambert Azimuthal Equal Area projection
              ------------------------------------------------------*/

            function init$H() {
              var t = Math.abs(this.lat0);

              if (Math.abs(t - HALF_PI$1) < EPSLN$1) {
                this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
              } else if (Math.abs(t) < EPSLN$1) {
                this.mode = this.EQUIT;
              } else {
                this.mode = this.OBLIQ;
              }

              if (this.es > 0) {
                var sinphi;
                this.qp = qsfnz$1(this.e, 1);
                this.mmf = 0.5 / (1 - this.es);
                this.apa = authset$1(this.es);

                switch (this.mode) {
                  case this.N_POLE:
                    this.dd = 1;
                    break;

                  case this.S_POLE:
                    this.dd = 1;
                    break;

                  case this.EQUIT:
                    this.rq = Math.sqrt(0.5 * this.qp);
                    this.dd = 1 / this.rq;
                    this.xmf = 1;
                    this.ymf = 0.5 * this.qp;
                    break;

                  case this.OBLIQ:
                    this.rq = Math.sqrt(0.5 * this.qp);
                    sinphi = Math.sin(this.lat0);
                    this.sinb1 = qsfnz$1(this.e, sinphi) / this.qp;
                    this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
                    this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
                    this.ymf = (this.xmf = this.rq) / this.dd;
                    this.xmf *= this.dd;
                    break;
                }
              } else {
                if (this.mode === this.OBLIQ) {
                  this.sinph0 = Math.sin(this.lat0);
                  this.cosph0 = Math.cos(this.lat0);
                }
              }
            }
            /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y
              -----------------------------------------------------------------------*/

            function forward$D(p) {
              /* Forward equations
                  -----------------*/
              var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
              var lam = p.x;
              var phi = p.y;
              lam = adjust_lon$1(lam - this.long0);

              if (this.sphere) {
                sinphi = Math.sin(phi);
                cosphi = Math.cos(phi);
                coslam = Math.cos(lam);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  y = this.mode === this.EQUIT ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;

                  if (y <= EPSLN$1) {
                    return null;
                  }

                  y = Math.sqrt(2 / y);
                  x = y * cosphi * Math.sin(lam);
                  y *= this.mode === this.EQUIT ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
                } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
                  if (this.mode === this.N_POLE) {
                    coslam = -coslam;
                  }

                  if (Math.abs(phi + this.phi0) < EPSLN$1) {
                    return null;
                  }

                  y = FORTPI$1 - phi * 0.5;
                  y = 2 * (this.mode === this.S_POLE ? Math.cos(y) : Math.sin(y));
                  x = y * Math.sin(lam);
                  y *= coslam;
                }
              } else {
                sinb = 0;
                cosb = 0;
                b = 0;
                coslam = Math.cos(lam);
                sinlam = Math.sin(lam);
                sinphi = Math.sin(phi);
                q = qsfnz$1(this.e, sinphi);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  sinb = q / this.qp;
                  cosb = Math.sqrt(1 - sinb * sinb);
                }

                switch (this.mode) {
                  case this.OBLIQ:
                    b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
                    break;

                  case this.EQUIT:
                    b = 1 + cosb * coslam;
                    break;

                  case this.N_POLE:
                    b = HALF_PI$1 + phi;
                    q = this.qp - q;
                    break;

                  case this.S_POLE:
                    b = phi - HALF_PI$1;
                    q = this.qp + q;
                    break;
                }

                if (Math.abs(b) < EPSLN$1) {
                  return null;
                }

                switch (this.mode) {
                  case this.OBLIQ:
                  case this.EQUIT:
                    b = Math.sqrt(2 / b);

                    if (this.mode === this.OBLIQ) {
                      y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
                    } else {
                      y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
                    }

                    x = this.xmf * b * cosb * sinlam;
                    break;

                  case this.N_POLE:
                  case this.S_POLE:
                    if (q >= 0) {
                      x = (b = Math.sqrt(q)) * sinlam;
                      y = coslam * (this.mode === this.S_POLE ? b : -b);
                    } else {
                      x = y = 0;
                    }

                    break;
                }
              }

              p.x = this.a * x + this.x0;
              p.y = this.a * y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$D(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var x = p.x / this.a;
              var y = p.y / this.a;
              var lam, phi, cCe, sCe, q, rho, ab;

              if (this.sphere) {
                var cosz = 0,
                    rh,
                    sinz = 0;
                rh = Math.sqrt(x * x + y * y);
                phi = rh * 0.5;

                if (phi > 1) {
                  return null;
                }

                phi = 2 * Math.asin(phi);

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  sinz = Math.sin(phi);
                  cosz = Math.cos(phi);
                }

                switch (this.mode) {
                  case this.EQUIT:
                    phi = Math.abs(rh) <= EPSLN$1 ? 0 : Math.asin(y * sinz / rh);
                    x *= sinz;
                    y = cosz * rh;
                    break;

                  case this.OBLIQ:
                    phi = Math.abs(rh) <= EPSLN$1 ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
                    x *= sinz * this.cosph0;
                    y = (cosz - Math.sin(phi) * this.sinph0) * rh;
                    break;

                  case this.N_POLE:
                    y = -y;
                    phi = HALF_PI$1 - phi;
                    break;

                  case this.S_POLE:
                    phi -= HALF_PI$1;
                    break;
                }

                lam = y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ) ? 0 : Math.atan2(x, y);
              } else {
                ab = 0;

                if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
                  x /= this.dd;
                  y *= this.dd;
                  rho = Math.sqrt(x * x + y * y);

                  if (rho < EPSLN$1) {
                    p.x = 0;
                    p.y = this.phi0;
                    return p;
                  }

                  sCe = 2 * Math.asin(0.5 * rho / this.rq);
                  cCe = Math.cos(sCe);
                  x *= sCe = Math.sin(sCe);

                  if (this.mode === this.OBLIQ) {
                    ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
                    q = this.qp * ab;
                    y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
                  } else {
                    ab = y * sCe / rho;
                    q = this.qp * ab;
                    y = rho * cCe;
                  }
                } else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
                  if (this.mode === this.N_POLE) {
                    y = -y;
                  }

                  q = x * x + y * y;

                  if (!q) {
                    p.x = 0;
                    p.y = this.phi0;
                    return p;
                  }

                  ab = 1 - q / this.qp;

                  if (this.mode === this.S_POLE) {
                    ab = -ab;
                  }
                }

                lam = Math.atan2(x, y);
                phi = authlat$1(Math.asin(ab), this.apa);
              }

              p.x = adjust_lon$1(this.long0 + lam);
              p.y = phi;
              return p;
            }
            /* determine latitude from authalic latitude */

            var P00$1 = 0.33333333333333333333;
            var P01$1 = 0.17222222222222222222;
            var P02$1 = 0.10257936507936507936;
            var P10$1 = 0.06388888888888888888;
            var P11$1 = 0.06640211640211640211;
            var P20$1 = 0.01641501294219154443;

            function authset$1(es) {
              var t;
              var APA = [];
              APA[0] = es * P00$1;
              t = es * es;
              APA[0] += t * P01$1;
              APA[1] = t * P10$1;
              t *= es;
              APA[0] += t * P02$1;
              APA[1] += t * P11$1;
              APA[2] = t * P20$1;
              return APA;
            }

            function authlat$1(beta, APA) {
              var t = beta + beta;
              return beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t);
            }

            var names$I = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
            var laea$1 = {
              init: init$H,
              forward: forward$D,
              inverse: inverse$D,
              names: names$I,
              S_POLE: S_POLE$1,
              N_POLE: N_POLE$1,
              EQUIT: EQUIT$1,
              OBLIQ: OBLIQ$1
            };

            function asinz$1 (x) {
              if (Math.abs(x) > 1) {
                x = x > 1 ? 1 : -1;
              }

              return Math.asin(x);
            }

            function init$I() {
              if (Math.abs(this.lat1 + this.lat2) < EPSLN$1) {
                return;
              }

              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2);
              this.e3 = Math.sqrt(this.es);
              this.sin_po = Math.sin(this.lat1);
              this.cos_po = Math.cos(this.lat1);
              this.t1 = this.sin_po;
              this.con = this.sin_po;
              this.ms1 = msfnz$1(this.e3, this.sin_po, this.cos_po);
              this.qs1 = qsfnz$1(this.e3, this.sin_po, this.cos_po);
              this.sin_po = Math.sin(this.lat2);
              this.cos_po = Math.cos(this.lat2);
              this.t2 = this.sin_po;
              this.ms2 = msfnz$1(this.e3, this.sin_po, this.cos_po);
              this.qs2 = qsfnz$1(this.e3, this.sin_po, this.cos_po);
              this.sin_po = Math.sin(this.lat0);
              this.cos_po = Math.cos(this.lat0);
              this.t3 = this.sin_po;
              this.qs0 = qsfnz$1(this.e3, this.sin_po, this.cos_po);

              if (Math.abs(this.lat1 - this.lat2) > EPSLN$1) {
                this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
              } else {
                this.ns0 = this.con;
              }

              this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
              this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
            }
            /* Albers Conical Equal Area forward equations--mapping lat,long to x,y
              -------------------------------------------------------------------*/

            function forward$E(p) {
              var lon = p.x;
              var lat = p.y;
              this.sin_phi = Math.sin(lat);
              this.cos_phi = Math.cos(lat);
              var qs = qsfnz$1(this.e3, this.sin_phi, this.cos_phi);
              var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
              var theta = this.ns0 * adjust_lon$1(lon - this.long0);
              var x = rh1 * Math.sin(theta) + this.x0;
              var y = this.rh - rh1 * Math.cos(theta) + this.y0;
              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$E(p) {
              var rh1, qs, con, theta, lon, lat;
              p.x -= this.x0;
              p.y = this.rh - p.y + this.y0;

              if (this.ns0 >= 0) {
                rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
                con = -1;
              }

              theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * p.x, con * p.y);
              }

              con = rh1 * this.ns0 / this.a;

              if (this.sphere) {
                lat = Math.asin((this.c - con * con) / (2 * this.ns0));
              } else {
                qs = (this.c - con * con) / this.ns0;
                lat = this.phi1z(this.e3, qs);
              }

              lon = adjust_lon$1(theta / this.ns0 + this.long0);
              p.x = lon;
              p.y = lat;
              return p;
            }
            /* Function to compute phi1, the latitude for the inverse of the
               Albers Conical Equal-Area projection.
            -------------------------------------------*/

            function phi1z$1(eccent, qs) {
              var sinphi, cosphi, con, com, dphi;
              var phi = asinz$1(0.5 * qs);

              if (eccent < EPSLN$1) {
                return phi;
              }

              var eccnts = eccent * eccent;

              for (var i = 1; i <= 25; i++) {
                sinphi = Math.sin(phi);
                cosphi = Math.cos(phi);
                con = eccent * sinphi;
                com = 1 - con * con;
                dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
                phi = phi + dphi;

                if (Math.abs(dphi) <= 1e-7) {
                  return phi;
                }
              }

              return null;
            }
            var names$J = ["Albers_Conic_Equal_Area", "Albers", "aea"];
            var aea$1 = {
              init: init$I,
              forward: forward$E,
              inverse: inverse$E,
              names: names$J,
              phi1z: phi1z$1
            };

            /*
              reference:
                Wolfram Mathworld "Gnomonic Projection"
                http://mathworld.wolfram.com/GnomonicProjection.html
                Accessed: 12th November 2009
              */

            function init$J() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.sin_p14 = Math.sin(this.lat0);
              this.cos_p14 = Math.cos(this.lat0); // Approximation for projecting points to the horizon (infinity)

              this.infinity_dist = 1000 * this.a;
              this.rc = 1;
            }
            /* Gnomonic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$F(p) {
              var sinphi, cosphi;
              /* sin and cos value        */

              var dlon;
              /* delta longitude value      */

              var coslon;
              /* cos of longitude        */

              var ksp;
              /* scale factor          */

              var g;
              var x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              dlon = adjust_lon$1(lon - this.long0);
              sinphi = Math.sin(lat);
              cosphi = Math.cos(lat);
              coslon = Math.cos(dlon);
              g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
              ksp = 1;

              if (g > 0 || Math.abs(g) <= EPSLN$1) {
                x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
                y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
              } else {
                // Point is in the opposing hemisphere and is unprojectable
                // We still need to return a reasonable point, so we project
                // to infinity, on a bearing
                // equivalent to the northern hemisphere equivalent
                // This is a reasonable approximation for short shapes and lines that
                // straddle the horizon.
                x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
                y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$F(p) {
              var rh;
              /* Rho */

              var sinc, cosc;
              var c;
              var lon, lat;
              /* Inverse equations
                  -----------------*/

              p.x = (p.x - this.x0) / this.a;
              p.y = (p.y - this.y0) / this.a;
              p.x /= this.k0;
              p.y /= this.k0;

              if (rh = Math.sqrt(p.x * p.x + p.y * p.y)) {
                c = Math.atan2(rh, this.rc);
                sinc = Math.sin(c);
                cosc = Math.cos(c);
                lat = asinz$1(cosc * this.sin_p14 + p.y * sinc * this.cos_p14 / rh);
                lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
                lon = adjust_lon$1(this.long0 + lon);
              } else {
                lat = this.phic0;
                lon = 0;
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$K = ["gnom"];
            var gnom$1 = {
              init: init$J,
              forward: forward$F,
              inverse: inverse$F,
              names: names$K
            };

            function iqsfnz$1 (eccent, q) {
              var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));

              if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
                if (q < 0) {
                  return -1 * HALF_PI$1;
                } else {
                  return HALF_PI$1;
                }
              } //var phi = 0.5* q/(1-eccent*eccent);


              var phi = Math.asin(0.5 * q);
              var dphi;
              var sin_phi;
              var cos_phi;
              var con;

              for (var i = 0; i < 30; i++) {
                sin_phi = Math.sin(phi);
                cos_phi = Math.cos(phi);
                con = eccent * sin_phi;
                dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
                phi += dphi;

                if (Math.abs(dphi) <= 0.0000000001) {
                  return phi;
                }
              } //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");


              return NaN;
            }

            /*
              reference:
                "Cartographic Projection Procedures for the UNIX Environment-
                A User's Manual" by Gerald I. Evenden,
                USGS Open File Report 90-284and Release 4 Interim Reports (2003)
            */

            function init$K() {
              //no-op
              if (!this.sphere) {
                this.k0 = msfnz$1(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
              }
            }
            /* Cylindrical Equal Area forward equations--mapping lat,long to x,y
                ------------------------------------------------------------*/

            function forward$G(p) {
              var lon = p.x;
              var lat = p.y;
              var x, y;
              /* Forward equations
                  -----------------*/

              var dlon = adjust_lon$1(lon - this.long0);

              if (this.sphere) {
                x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
                y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
              } else {
                var qs = qsfnz$1(this.e, Math.sin(lat));
                x = this.x0 + this.a * this.k0 * dlon;
                y = this.y0 + this.a * qs * 0.5 / this.k0;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long
                ------------------------------------------------------------*/

            function inverse$G(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon, lat;

              if (this.sphere) {
                lon = adjust_lon$1(this.long0 + p.x / this.a / Math.cos(this.lat_ts));
                lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));
              } else {
                lat = iqsfnz$1(this.e, 2 * p.y * this.k0 / this.a);
                lon = adjust_lon$1(this.long0 + p.x / (this.a * this.k0));
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$L = ["cea"];
            var cea$1 = {
              init: init$K,
              forward: forward$G,
              inverse: inverse$G,
              names: names$L
            };

            function init$L() {
              this.x0 = this.x0 || 0;
              this.y0 = this.y0 || 0;
              this.lat0 = this.lat0 || 0;
              this.long0 = this.long0 || 0;
              this.lat_ts = this.lat_ts || 0;
              this.title = this.title || "Equidistant Cylindrical (Plate Carre)";
              this.rc = Math.cos(this.lat_ts);
            } // forward equations--mapping lat,long to x,y
            // -----------------------------------------------------------------

            function forward$H(p) {
              var lon = p.x;
              var lat = p.y;
              var dlon = adjust_lon$1(lon - this.long0);
              var dlat = adjust_lat$1(lat - this.lat0);
              p.x = this.x0 + this.a * dlon * this.rc;
              p.y = this.y0 + this.a * dlat;
              return p;
            } // inverse equations--mapping x,y to lat/long
            // -----------------------------------------------------------------

            function inverse$H(p) {
              var x = p.x;
              var y = p.y;
              p.x = adjust_lon$1(this.long0 + (x - this.x0) / (this.a * this.rc));
              p.y = adjust_lat$1(this.lat0 + (y - this.y0) / this.a);
              return p;
            }
            var names$M = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
            var eqc$1 = {
              init: init$L,
              forward: forward$H,
              inverse: inverse$H,
              names: names$M
            };

            var MAX_ITER$6 = 20;
            function init$M() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles

              this.e = Math.sqrt(this.es);
              this.e0 = e0fn$1(this.es);
              this.e1 = e1fn$1(this.es);
              this.e2 = e2fn$1(this.es);
              this.e3 = e3fn$1(this.es);
              this.ml0 = this.a * mlfn$1(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
            }
            /* Polyconic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$I(p) {
              var lon = p.x;
              var lat = p.y;
              var x, y, el;
              var dlon = adjust_lon$1(lon - this.long0);
              el = dlon * Math.sin(lat);

              if (this.sphere) {
                if (Math.abs(lat) <= EPSLN$1) {
                  x = this.a * dlon;
                  y = -1 * this.a * this.lat0;
                } else {
                  x = this.a * Math.sin(el) / Math.tan(lat);
                  y = this.a * (adjust_lat$1(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
                }
              } else {
                if (Math.abs(lat) <= EPSLN$1) {
                  x = this.a * dlon;
                  y = -1 * this.ml0;
                } else {
                  var nl = gN$1(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
                  x = nl * Math.sin(el);
                  y = this.a * mlfn$1(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
                }
              }

              p.x = x + this.x0;
              p.y = y + this.y0;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$I(p) {
              var lon, lat, x, y, i;
              var al, bl;
              var phi, dphi;
              x = p.x - this.x0;
              y = p.y - this.y0;

              if (this.sphere) {
                if (Math.abs(y + this.a * this.lat0) <= EPSLN$1) {
                  lon = adjust_lon$1(x / this.a + this.long0);
                  lat = 0;
                } else {
                  al = this.lat0 + y / this.a;
                  bl = x * x / this.a / this.a + al * al;
                  phi = al;
                  var tanphi;

                  for (i = MAX_ITER$6; i; --i) {
                    tanphi = Math.tan(phi);
                    dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
                    phi += dphi;

                    if (Math.abs(dphi) <= EPSLN$1) {
                      lat = phi;
                      break;
                    }
                  }

                  lon = adjust_lon$1(this.long0 + Math.asin(x * Math.tan(phi) / this.a) / Math.sin(lat));
                }
              } else {
                if (Math.abs(y + this.ml0) <= EPSLN$1) {
                  lat = 0;
                  lon = adjust_lon$1(this.long0 + x / this.a);
                } else {
                  al = (this.ml0 + y) / this.a;
                  bl = x * x / this.a / this.a + al * al;
                  phi = al;
                  var cl, mln, mlnp, ma;
                  var con;

                  for (i = MAX_ITER$6; i; --i) {
                    con = this.e * Math.sin(phi);
                    cl = Math.sqrt(1 - con * con) * Math.tan(phi);
                    mln = this.a * mlfn$1(this.e0, this.e1, this.e2, this.e3, phi);
                    mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
                    ma = mln / this.a;
                    dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
                    phi -= dphi;

                    if (Math.abs(dphi) <= EPSLN$1) {
                      lat = phi;
                      break;
                    }
                  } //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);


                  cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
                  lon = adjust_lon$1(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$N = ["Polyconic", "poly"];
            var poly$1 = {
              init: init$M,
              forward: forward$I,
              inverse: inverse$I,
              names: names$N
            };

            function init$N() {
              this.A = [];
              this.A[1] = 0.6399175073;
              this.A[2] = -0.1358797613;
              this.A[3] = 0.063294409;
              this.A[4] = -0.02526853;
              this.A[5] = 0.0117879;
              this.A[6] = -0.0055161;
              this.A[7] = 0.0026906;
              this.A[8] = -0.001333;
              this.A[9] = 0.00067;
              this.A[10] = -0.00034;
              this.B_re = [];
              this.B_im = [];
              this.B_re[1] = 0.7557853228;
              this.B_im[1] = 0;
              this.B_re[2] = 0.249204646;
              this.B_im[2] = 0.003371507;
              this.B_re[3] = -0.001541739;
              this.B_im[3] = 0.041058560;
              this.B_re[4] = -0.10162907;
              this.B_im[4] = 0.01727609;
              this.B_re[5] = -0.26623489;
              this.B_im[5] = -0.36249218;
              this.B_re[6] = -0.6870983;
              this.B_im[6] = -1.1651967;
              this.C_re = [];
              this.C_im = [];
              this.C_re[1] = 1.3231270439;
              this.C_im[1] = 0;
              this.C_re[2] = -0.577245789;
              this.C_im[2] = -0.007809598;
              this.C_re[3] = 0.508307513;
              this.C_im[3] = -0.112208952;
              this.C_re[4] = -0.15094762;
              this.C_im[4] = 0.18200602;
              this.C_re[5] = 1.01418179;
              this.C_im[5] = 1.64497696;
              this.C_re[6] = 1.9660549;
              this.C_im[6] = 2.5127645;
              this.D = [];
              this.D[1] = 1.5627014243;
              this.D[2] = 0.5185406398;
              this.D[3] = -0.03333098;
              this.D[4] = -0.1052906;
              this.D[5] = -0.0368594;
              this.D[6] = 0.007317;
              this.D[7] = 0.01220;
              this.D[8] = 0.00394;
              this.D[9] = -0.0013;
            }
            /**
                New Zealand Map Grid Forward  - long/lat to x/y
                long/lat in radians
              */

            function forward$J(p) {
              var n;
              var lon = p.x;
              var lat = p.y;
              var delta_lat = lat - this.lat0;
              var delta_lon = lon - this.long0; // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
              // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.

              var d_phi = delta_lat / SEC_TO_RAD$1 * 1E-5;
              var d_lambda = delta_lon;
              var d_phi_n = 1; // d_phi^0

              var d_psi = 0;

              for (n = 1; n <= 10; n++) {
                d_phi_n = d_phi_n * d_phi;
                d_psi = d_psi + this.A[n] * d_phi_n;
              } // 2. Calculate theta


              var th_re = d_psi;
              var th_im = d_lambda; // 3. Calculate z

              var th_n_re = 1;
              var th_n_im = 0; // theta^0

              var th_n_re1;
              var th_n_im1;
              var z_re = 0;
              var z_im = 0;

              for (n = 1; n <= 6; n++) {
                th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                th_n_re = th_n_re1;
                th_n_im = th_n_im1;
                z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
                z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
              } // 4. Calculate easting and northing


              p.x = z_im * this.a + this.x0;
              p.y = z_re * this.a + this.y0;
              return p;
            }
            /**
                New Zealand Map Grid Inverse  -  x/y to long/lat
              */

            function inverse$J(p) {
              var n;
              var x = p.x;
              var y = p.y;
              var delta_x = x - this.x0;
              var delta_y = y - this.y0; // 1. Calculate z

              var z_re = delta_y / this.a;
              var z_im = delta_x / this.a; // 2a. Calculate theta - first approximation gives km accuracy

              var z_n_re = 1;
              var z_n_im = 0; // z^0

              var z_n_re1;
              var z_n_im1;
              var th_re = 0;
              var th_im = 0;

              for (n = 1; n <= 6; n++) {
                z_n_re1 = z_n_re * z_re - z_n_im * z_im;
                z_n_im1 = z_n_im * z_re + z_n_re * z_im;
                z_n_re = z_n_re1;
                z_n_im = z_n_im1;
                th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
                th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
              } // 2b. Iterate to refine the accuracy of the calculation
              //        0 iterations gives km accuracy
              //        1 iteration gives m accuracy -- good enough for most mapping applications
              //        2 iterations bives mm accuracy


              for (var i = 0; i < this.iterations; i++) {
                var th_n_re = th_re;
                var th_n_im = th_im;
                var th_n_re1;
                var th_n_im1;
                var num_re = z_re;
                var num_im = z_im;

                for (n = 2; n <= 6; n++) {
                  th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                  th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                  th_n_re = th_n_re1;
                  th_n_im = th_n_im1;
                  num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
                  num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
                }

                th_n_re = 1;
                th_n_im = 0;
                var den_re = this.B_re[1];
                var den_im = this.B_im[1];

                for (n = 2; n <= 6; n++) {
                  th_n_re1 = th_n_re * th_re - th_n_im * th_im;
                  th_n_im1 = th_n_im * th_re + th_n_re * th_im;
                  th_n_re = th_n_re1;
                  th_n_im = th_n_im1;
                  den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
                  den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
                } // Complex division


                var den2 = den_re * den_re + den_im * den_im;
                th_re = (num_re * den_re + num_im * den_im) / den2;
                th_im = (num_im * den_re - num_re * den_im) / den2;
              } // 3. Calculate d_phi              ...                                    // and d_lambda


              var d_psi = th_re;
              var d_lambda = th_im;
              var d_psi_n = 1; // d_psi^0

              var d_phi = 0;

              for (n = 1; n <= 9; n++) {
                d_psi_n = d_psi_n * d_psi;
                d_phi = d_phi + this.D[n] * d_psi_n;
              } // 4. Calculate latitude and longitude
              // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.


              var lat = this.lat0 + d_phi * SEC_TO_RAD$1 * 1E5;
              var lon = this.long0 + d_lambda;
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$O = ["New_Zealand_Map_Grid", "nzmg"];
            var nzmg$1 = {
              init: init$N,
              forward: forward$J,
              inverse: inverse$J,
              names: names$O
            };

            /*
              reference
                "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
                The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
              */

            /* Initialize the Miller Cylindrical projection
              -------------------------------------------*/

            function init$O() {} //no-op

            /* Miller Cylindrical forward equations--mapping lat,long to x,y
                ------------------------------------------------------------*/

            function forward$K(p) {
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              var dlon = adjust_lon$1(lon - this.long0);
              var x = this.x0 + this.a * dlon;
              var y = this.y0 + this.a * Math.log(Math.tan(Math.PI / 4 + lat / 2.5)) * 1.25;
              p.x = x;
              p.y = y;
              return p;
            }
            /* Miller Cylindrical inverse equations--mapping x,y to lat/long
                ------------------------------------------------------------*/

            function inverse$K(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var lon = adjust_lon$1(this.long0 + p.x / this.a);
              var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$P = ["Miller_Cylindrical", "mill"];
            var mill$1 = {
              init: init$O,
              forward: forward$K,
              inverse: inverse$K,
              names: names$P
            };

            var MAX_ITER$7 = 20;
            function init$P() {
              /* Place parameters in static storage for common use
                -------------------------------------------------*/
              if (!this.sphere) {
                this.en = pj_enfn$1(this.es);
              } else {
                this.n = 1;
                this.m = 0;
                this.es = 0;
                this.C_y = Math.sqrt((this.m + 1) / this.n);
                this.C_x = this.C_y / (this.m + 1);
              }
            }
            /* Sinusoidal forward equations--mapping lat,long to x,y
              -----------------------------------------------------*/

            function forward$L(p) {
              var x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                -----------------*/

              lon = adjust_lon$1(lon - this.long0);

              if (this.sphere) {
                if (!this.m) {
                  lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
                } else {
                  var k = this.n * Math.sin(lat);

                  for (var i = MAX_ITER$7; i; --i) {
                    var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
                    lat -= V;

                    if (Math.abs(V) < EPSLN$1) {
                      break;
                    }
                  }
                }

                x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
                y = this.a * this.C_y * lat;
              } else {
                var s = Math.sin(lat);
                var c = Math.cos(lat);
                y = this.a * pj_mlfn$1(lat, s, c, this.en);
                x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$L(p) {
              var lat, temp, lon, s;
              p.x -= this.x0;
              lon = p.x / this.a;
              p.y -= this.y0;
              lat = p.y / this.a;

              if (this.sphere) {
                lat /= this.C_y;
                lon = lon / (this.C_x * (this.m + Math.cos(lat)));

                if (this.m) {
                  lat = asinz$1((this.m * lat + Math.sin(lat)) / this.n);
                } else if (this.n !== 1) {
                  lat = asinz$1(Math.sin(lat) / this.n);
                }

                lon = adjust_lon$1(lon + this.long0);
                lat = adjust_lat$1(lat);
              } else {
                lat = pj_inv_mlfn$1(p.y / this.a, this.es, this.en);
                s = Math.abs(lat);

                if (s < HALF_PI$1) {
                  s = Math.sin(lat);
                  temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat)); //temp = this.long0 + p.x / (this.a * Math.cos(lat));

                  lon = adjust_lon$1(temp);
                } else if (s - EPSLN$1 < HALF_PI$1) {
                  lon = this.long0;
                }
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$Q = ["Sinusoidal", "sinu"];
            var sinu$1 = {
              init: init$P,
              forward: forward$L,
              inverse: inverse$L,
              names: names$Q
            };

            function init$Q() {}
            /* Mollweide forward equations--mapping lat,long to x,y
                ----------------------------------------------------*/

            function forward$M(p) {
              /* Forward equations
                  -----------------*/
              var lon = p.x;
              var lat = p.y;
              var delta_lon = adjust_lon$1(lon - this.long0);
              var theta = lat;
              var con = Math.PI * Math.sin(lat);
              /* Iterate using the Newton-Raphson method to find theta
                  -----------------------------------------------------*/

              for (var i = 0; true; i++) {
                var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
                theta += delta_theta;

                if (Math.abs(delta_theta) < EPSLN$1) {
                  break;
                }
              }

              theta /= 2;
              /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
                   this is done here because of precision problems with "cos(theta)"
                   --------------------------------------------------------------------------*/

              if (Math.PI / 2 - Math.abs(lat) < EPSLN$1) {
                delta_lon = 0;
              }

              var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
              var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;
              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$M(p) {
              var theta;
              var arg;
              /* Inverse equations
                  -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              arg = p.y / (1.4142135623731 * this.a);
              /* Because of division by zero problems, 'arg' can not be 1.  Therefore
                   a number very close to one is used instead.
                   -------------------------------------------------------------------*/

              if (Math.abs(arg) > 0.999999999999) {
                arg = 0.999999999999;
              }

              theta = Math.asin(arg);
              var lon = adjust_lon$1(this.long0 + p.x / (0.900316316158 * this.a * Math.cos(theta)));

              if (lon < -Math.PI) {
                lon = -Math.PI;
              }

              if (lon > Math.PI) {
                lon = Math.PI;
              }

              arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;

              if (Math.abs(arg) > 1) {
                arg = 1;
              }

              var lat = Math.asin(arg);
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$R = ["Mollweide", "moll"];
            var moll$1 = {
              init: init$Q,
              forward: forward$M,
              inverse: inverse$M,
              names: names$R
            };

            function init$R() {
              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              // Standard Parallels cannot be equal and on opposite sides of the equator
              if (Math.abs(this.lat1 + this.lat2) < EPSLN$1) {
                return;
              }

              this.lat2 = this.lat2 || this.lat1;
              this.temp = this.b / this.a;
              this.es = 1 - Math.pow(this.temp, 2);
              this.e = Math.sqrt(this.es);
              this.e0 = e0fn$1(this.es);
              this.e1 = e1fn$1(this.es);
              this.e2 = e2fn$1(this.es);
              this.e3 = e3fn$1(this.es);
              this.sinphi = Math.sin(this.lat1);
              this.cosphi = Math.cos(this.lat1);
              this.ms1 = msfnz$1(this.e, this.sinphi, this.cosphi);
              this.ml1 = mlfn$1(this.e0, this.e1, this.e2, this.e3, this.lat1);

              if (Math.abs(this.lat1 - this.lat2) < EPSLN$1) {
                this.ns = this.sinphi;
              } else {
                this.sinphi = Math.sin(this.lat2);
                this.cosphi = Math.cos(this.lat2);
                this.ms2 = msfnz$1(this.e, this.sinphi, this.cosphi);
                this.ml2 = mlfn$1(this.e0, this.e1, this.e2, this.e3, this.lat2);
                this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
              }

              this.g = this.ml1 + this.ms1 / this.ns;
              this.ml0 = mlfn$1(this.e0, this.e1, this.e2, this.e3, this.lat0);
              this.rh = this.a * (this.g - this.ml0);
            }
            /* Equidistant Conic forward equations--mapping lat,long to x,y
              -----------------------------------------------------------*/

            function forward$N(p) {
              var lon = p.x;
              var lat = p.y;
              var rh1;
              /* Forward equations
                  -----------------*/

              if (this.sphere) {
                rh1 = this.a * (this.g - lat);
              } else {
                var ml = mlfn$1(this.e0, this.e1, this.e2, this.e3, lat);
                rh1 = this.a * (this.g - ml);
              }

              var theta = this.ns * adjust_lon$1(lon - this.long0);
              var x = this.x0 + rh1 * Math.sin(theta);
              var y = this.y0 + this.rh - rh1 * Math.cos(theta);
              p.x = x;
              p.y = y;
              return p;
            }
            /* Inverse equations
              -----------------*/

            function inverse$N(p) {
              p.x -= this.x0;
              p.y = this.rh - p.y + this.y0;
              var con, rh1, lat, lon;

              if (this.ns >= 0) {
                rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
                con = 1;
              } else {
                rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
                con = -1;
              }

              var theta = 0;

              if (rh1 !== 0) {
                theta = Math.atan2(con * p.x, con * p.y);
              }

              if (this.sphere) {
                lon = adjust_lon$1(this.long0 + theta / this.ns);
                lat = adjust_lat$1(this.g - rh1 / this.a);
                p.x = lon;
                p.y = lat;
                return p;
              } else {
                var ml = this.g - rh1 / this.a;
                lat = imlfn$1(ml, this.e0, this.e1, this.e2, this.e3);
                lon = adjust_lon$1(this.long0 + theta / this.ns);
                p.x = lon;
                p.y = lat;
                return p;
              }
            }
            var names$S = ["Equidistant_Conic", "eqdc"];
            var eqdc$1 = {
              init: init$R,
              forward: forward$N,
              inverse: inverse$N,
              names: names$S
            };

            /* Initialize the Van Der Grinten projection
              ----------------------------------------*/

            function init$S() {
              //this.R = 6370997; //Radius of earth
              this.R = this.a;
            }
            function forward$O(p) {
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                -----------------*/

              var dlon = adjust_lon$1(lon - this.long0);
              var x, y;

              if (Math.abs(lat) <= EPSLN$1) {
                x = this.x0 + this.R * dlon;
                y = this.y0;
              }

              var theta = asinz$1(2 * Math.abs(lat / Math.PI));

              if (Math.abs(dlon) <= EPSLN$1 || Math.abs(Math.abs(lat) - HALF_PI$1) <= EPSLN$1) {
                x = this.x0;

                if (lat >= 0) {
                  y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
                } else {
                  y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
                } //  return(OK);

              }

              var al = 0.5 * Math.abs(Math.PI / dlon - dlon / Math.PI);
              var asq = al * al;
              var sinth = Math.sin(theta);
              var costh = Math.cos(theta);
              var g = costh / (sinth + costh - 1);
              var gsq = g * g;
              var m = g * (2 / sinth - 1);
              var msq = m * m;
              var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);

              if (dlon < 0) {
                con = -con;
              }

              x = this.x0 + con; //con = Math.abs(con / (Math.PI * this.R));

              var q = asq + g;
              con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);

              if (lat >= 0) {
                //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
                y = this.y0 + con;
              } else {
                //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
                y = this.y0 - con;
              }

              p.x = x;
              p.y = y;
              return p;
            }
            /* Van Der Grinten inverse equations--mapping x,y to lat/long
              ---------------------------------------------------------*/

            function inverse$O(p) {
              var lon, lat;
              var xx, yy, xys, c1, c2, c3;
              var a1;
              var m1;
              var con;
              var th1;
              var d;
              /* inverse equations
                -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              con = Math.PI * this.R;
              xx = p.x / con;
              yy = p.y / con;
              xys = xx * xx + yy * yy;
              c1 = -Math.abs(yy) * (1 + xys);
              c2 = c1 - 2 * yy * yy + xx * xx;
              c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
              d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
              a1 = (c1 - c2 * c2 / 3 / c3) / c3;
              m1 = 2 * Math.sqrt(-a1 / 3);
              con = 3 * d / a1 / m1;

              if (Math.abs(con) > 1) {
                if (con >= 0) {
                  con = 1;
                } else {
                  con = -1;
                }
              }

              th1 = Math.acos(con) / 3;

              if (p.y >= 0) {
                lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
              } else {
                lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
              }

              if (Math.abs(xx) < EPSLN$1) {
                lon = this.long0;
              } else {
                lon = adjust_lon$1(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
              }

              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$T = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
            var vandg$1 = {
              init: init$S,
              forward: forward$O,
              inverse: inverse$O,
              names: names$T
            };

            function init$T() {
              this.sin_p12 = Math.sin(this.lat0);
              this.cos_p12 = Math.cos(this.lat0);
            }
            function forward$P(p) {
              var lon = p.x;
              var lat = p.y;
              var sinphi = Math.sin(p.y);
              var cosphi = Math.cos(p.y);
              var dlon = adjust_lon$1(lon - this.long0);
              var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;

              if (this.sphere) {
                if (Math.abs(this.sin_p12 - 1) <= EPSLN$1) {
                  //North Pole case
                  p.x = this.x0 + this.a * (HALF_PI$1 - lat) * Math.sin(dlon);
                  p.y = this.y0 - this.a * (HALF_PI$1 - lat) * Math.cos(dlon);
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN$1) {
                  //South Pole case
                  p.x = this.x0 + this.a * (HALF_PI$1 + lat) * Math.sin(dlon);
                  p.y = this.y0 + this.a * (HALF_PI$1 + lat) * Math.cos(dlon);
                  return p;
                } else {
                  //default case
                  cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
                  c = Math.acos(cos_c);
                  kp = c / Math.sin(c);
                  p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
                  p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
                  return p;
                }
              } else {
                e0 = e0fn$1(this.es);
                e1 = e1fn$1(this.es);
                e2 = e2fn$1(this.es);
                e3 = e3fn$1(this.es);

                if (Math.abs(this.sin_p12 - 1) <= EPSLN$1) {
                  //North Pole case
                  Mlp = this.a * mlfn$1(e0, e1, e2, e3, HALF_PI$1);
                  Ml = this.a * mlfn$1(e0, e1, e2, e3, lat);
                  p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
                  p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN$1) {
                  //South Pole case
                  Mlp = this.a * mlfn$1(e0, e1, e2, e3, HALF_PI$1);
                  Ml = this.a * mlfn$1(e0, e1, e2, e3, lat);
                  p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
                  p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
                  return p;
                } else {
                  //Default case
                  tanphi = sinphi / cosphi;
                  Nl1 = gN$1(this.a, this.e, this.sin_p12);
                  Nl = gN$1(this.a, this.e, sinphi);
                  psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
                  Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));

                  if (Az === 0) {
                    s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
                  } else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN$1) {
                    s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
                  } else {
                    s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
                  }

                  G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
                  H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
                  GH = G * H;
                  Hs = H * H;
                  s2 = s * s;
                  s3 = s2 * s;
                  s4 = s3 * s;
                  s5 = s4 * s;
                  c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
                  p.x = this.x0 + c * Math.sin(Az);
                  p.y = this.y0 + c * Math.cos(Az);
                  return p;
                }
              }
            }
            function inverse$P(p) {
              p.x -= this.x0;
              p.y -= this.y0;
              var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;

              if (this.sphere) {
                rh = Math.sqrt(p.x * p.x + p.y * p.y);

                if (rh > 2 * HALF_PI$1 * this.a) {
                  return;
                }

                z = rh / this.a;
                sinz = Math.sin(z);
                cosz = Math.cos(z);
                lon = this.long0;

                if (Math.abs(rh) <= EPSLN$1) {
                  lat = this.lat0;
                } else {
                  lat = asinz$1(cosz * this.sin_p12 + p.y * sinz * this.cos_p12 / rh);
                  con = Math.abs(this.lat0) - HALF_PI$1;

                  if (Math.abs(con) <= EPSLN$1) {
                    if (this.lat0 >= 0) {
                      lon = adjust_lon$1(this.long0 + Math.atan2(p.x, -p.y));
                    } else {
                      lon = adjust_lon$1(this.long0 - Math.atan2(-p.x, p.y));
                    }
                  } else {
                    /*con = cosz - this.sin_p12 * Math.sin(lat);
                    if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
                      //no-op, just keep the lon value as is
                    } else {
                      var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
                      lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
                    }*/
                    lon = adjust_lon$1(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
                  }
                }

                p.x = lon;
                p.y = lat;
                return p;
              } else {
                e0 = e0fn$1(this.es);
                e1 = e1fn$1(this.es);
                e2 = e2fn$1(this.es);
                e3 = e3fn$1(this.es);

                if (Math.abs(this.sin_p12 - 1) <= EPSLN$1) {
                  //North pole case
                  Mlp = this.a * mlfn$1(e0, e1, e2, e3, HALF_PI$1);
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  M = Mlp - rh;
                  lat = imlfn$1(M / this.a, e0, e1, e2, e3);
                  lon = adjust_lon$1(this.long0 + Math.atan2(p.x, -1 * p.y));
                  p.x = lon;
                  p.y = lat;
                  return p;
                } else if (Math.abs(this.sin_p12 + 1) <= EPSLN$1) {
                  //South pole case
                  Mlp = this.a * mlfn$1(e0, e1, e2, e3, HALF_PI$1);
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  M = rh - Mlp;
                  lat = imlfn$1(M / this.a, e0, e1, e2, e3);
                  lon = adjust_lon$1(this.long0 + Math.atan2(p.x, p.y));
                  p.x = lon;
                  p.y = lat;
                  return p;
                } else {
                  //default case
                  rh = Math.sqrt(p.x * p.x + p.y * p.y);
                  Az = Math.atan2(p.x, p.y);
                  N1 = gN$1(this.a, this.e, this.sin_p12);
                  cosAz = Math.cos(Az);
                  tmp = this.e * this.cos_p12 * cosAz;
                  A = -tmp * tmp / (1 - this.es);
                  B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
                  D = rh / N1;
                  Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
                  F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
                  psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
                  lon = adjust_lon$1(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
                  lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));
                  p.x = lon;
                  p.y = lat;
                  return p;
                }
              }
            }
            var names$U = ["Azimuthal_Equidistant", "aeqd"];
            var aeqd$1 = {
              init: init$T,
              forward: forward$P,
              inverse: inverse$P,
              names: names$U
            };

            function init$U() {
              //double temp;      /* temporary variable    */

              /* Place parameters in static storage for common use
                  -------------------------------------------------*/
              this.sin_p14 = Math.sin(this.lat0);
              this.cos_p14 = Math.cos(this.lat0);
            }
            /* Orthographic forward equations--mapping lat,long to x,y
                ---------------------------------------------------*/

            function forward$Q(p) {
              var sinphi, cosphi;
              /* sin and cos value        */

              var dlon;
              /* delta longitude value      */

              var coslon;
              /* cos of longitude        */

              var ksp;
              /* scale factor          */

              var g, x, y;
              var lon = p.x;
              var lat = p.y;
              /* Forward equations
                  -----------------*/

              dlon = adjust_lon$1(lon - this.long0);
              sinphi = Math.sin(lat);
              cosphi = Math.cos(lat);
              coslon = Math.cos(dlon);
              g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
              ksp = 1;

              if (g > 0 || Math.abs(g) <= EPSLN$1) {
                x = this.a * ksp * cosphi * Math.sin(dlon);
                y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
              }

              p.x = x;
              p.y = y;
              return p;
            }
            function inverse$Q(p) {
              var rh;
              /* height above ellipsoid      */

              var z;
              /* angle          */

              var sinz, cosz;
              /* sin of z and cos of z      */

              var con;
              var lon, lat;
              /* Inverse equations
                  -----------------*/

              p.x -= this.x0;
              p.y -= this.y0;
              rh = Math.sqrt(p.x * p.x + p.y * p.y);
              z = asinz$1(rh / this.a);
              sinz = Math.sin(z);
              cosz = Math.cos(z);
              lon = this.long0;

              if (Math.abs(rh) <= EPSLN$1) {
                lat = this.lat0;
                p.x = lon;
                p.y = lat;
                return p;
              }

              lat = asinz$1(cosz * this.sin_p14 + p.y * sinz * this.cos_p14 / rh);
              con = Math.abs(this.lat0) - HALF_PI$1;

              if (Math.abs(con) <= EPSLN$1) {
                if (this.lat0 >= 0) {
                  lon = adjust_lon$1(this.long0 + Math.atan2(p.x, -p.y));
                } else {
                  lon = adjust_lon$1(this.long0 - Math.atan2(-p.x, p.y));
                }

                p.x = lon;
                p.y = lat;
                return p;
              }

              lon = adjust_lon$1(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
              p.x = lon;
              p.y = lat;
              return p;
            }
            var names$V = ["ortho"];
            var ortho$1 = {
              init: init$U,
              forward: forward$Q,
              inverse: inverse$Q,
              names: names$V
            };

            function includedProjections$1 (proj4) {
              proj4.Proj.projections.add(tmerc$1);
              proj4.Proj.projections.add(etmerc$1);
              proj4.Proj.projections.add(utm$1);
              proj4.Proj.projections.add(sterea$1);
              proj4.Proj.projections.add(stere$1);
              proj4.Proj.projections.add(somerc$1);
              proj4.Proj.projections.add(omerc$1);
              proj4.Proj.projections.add(lcc$1);
              proj4.Proj.projections.add(krovak$1);
              proj4.Proj.projections.add(cass$1);
              proj4.Proj.projections.add(laea$1);
              proj4.Proj.projections.add(aea$1);
              proj4.Proj.projections.add(gnom$1);
              proj4.Proj.projections.add(cea$1);
              proj4.Proj.projections.add(eqc$1);
              proj4.Proj.projections.add(poly$1);
              proj4.Proj.projections.add(nzmg$1);
              proj4.Proj.projections.add(mill$1);
              proj4.Proj.projections.add(sinu$1);
              proj4.Proj.projections.add(moll$1);
              proj4.Proj.projections.add(eqdc$1);
              proj4.Proj.projections.add(vandg$1);
              proj4.Proj.projections.add(aeqd$1);
              proj4.Proj.projections.add(ortho$1);
            }

            proj4$2.defaultDatum = 'WGS84'; //default datum

            proj4$2.Proj = Projection$1;
            proj4$2.WGS84 = new proj4$2.Proj('WGS84');
            proj4$2.Point = Point$3;
            proj4$2.toPoint = common$1;
            proj4$2.defs = defs$1;
            proj4$2.transform = transform$1;
            proj4$2.mgrs = mgrs;
            proj4$2.version = version$2;
            includedProjections$1(proj4$2);

            /**
             * SpatialReferenceSystem module.
             * @module core/srs
             */
            /**
             * Spatial Reference System object. The coordinate reference system definitions it contains are referenced by the GeoPackage Contents and GeometryColumns objects to relate the vector and tile data in user tables to locations on the earth.
             * @class SpatialReferenceSystem
             */

            class SpatialReferenceSystem {
              constructor() {
                /**
                 * Human readable name of this SRS
                 * @member {string}
                 */
                this.srs_name;
                /**
                 * Unique identifier for each Spatial Reference System within a GeoPackage
                 * @member {Number}
                 */

                this.srs_id;
                /**
                 * Case-insensitive name of the defining organization e.g. EPSG or epsg
                 * @member {string}
                 */

                this.organization;
                /**
                 * Numeric ID of the Spatial Reference System assigned by the organization
                 * @member {Number}
                 */

                this.organization_coordsys_id;
                /**
                 * Well-known Text [32] Representation of the Spatial Reference System
                 * @member {string}
                 */

                this.definition;
                /**
                 * Human readable description of this SRS
                 * @member {string}
                 */

                this.description;
                /**
                 * Well-known Text Representation of the Spatial Reference System
                 * @member {string}
                 */

                this.definition_12_063;
              }
              /**
               * Return the proj4 projection specified by this SpatialReferenceSystem
               * @return {proj4}
               */


              getProjection() {
                if (this.organization_coordsys_id === 4326 && (this.organization === 'EPSG' || this.organization === 'epsg')) {
                  return proj4$2('EPSG:4326');
                } else if (this.definition_12_063 && this.definition_12_063 !== '' && this.definition_12_063 !== 'undefined') {
                  return proj4$2(this.definition_12_063);
                } else if (this.definition && this.definition !== '' && this.definition !== 'undefined') {
                  return proj4$2(this.definition);
                } else if (this.organization && this.organization_coordsys_id) {
                  return proj4$2(this.organization.toUpperCase() + ':' + this.organization_coordsys_id);
                } else {
                  return {};
                }
              }

            }
            /**
             * Spatial Reference System Data Access Object
             * @class SpatialReferenceSystemDao
             * @extends {module:dao/dao~Dao}
             * @param {module:geoPackage~GeoPackage} geoPackage The GeoPackage object
             */


            class SpatialReferenceSystemDao extends Dao {
              /**
               * Create a new SpatialReferenceSystem object
               * @return {module:core/srs~SpatialReferenceSystem}
               */
              createObject() {
                return new SpatialReferenceSystem();
              }
              /**
               * Get the Spatial Reference System for the provided id
               * @param  {Number}   srsId srs id
               * @return {module:core/srs~SpatialReferenceSystem}
               */


              getBySrsId(srsId) {
                return this.queryForId(srsId);
              }
              /**
               * Return the proj4 projection specified by this SpatialReferenceSystem
               * @return {proj4}
               */


              getProjection(srs) {
                return srs.getProjection();
              }
              /**
               * Creates the required EPSG WGS84 Spatial Reference System (spec
               * Requirement 11)
               * @return {Number} id of the created row
               */


              createWgs84() {
                var srs = this.getBySrsId(4326);

                if (srs) {
                  return srs;
                }

                var srs = new SpatialReferenceSystem();
                srs.srs_name = 'WGS 84 geodetic';
                srs.srs_id = 4326;
                srs.organization = 'EPSG';
                srs.organization_coordsys_id = 4326;
                srs.definition = 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]';
                srs.description = 'longitude/latitude coordinates in decimal degrees on the WGS 84 spheroid';

                if (this.connection.columnAndTableExists('gpkg_spatial_ref_sys', 'definition_12_063')) {
                  srs.definition_12_063 = 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]]';
                }

                return this.create(srs);
              }
              /**
               * Creates the required Undefined Cartesian Spatial Reference System (spec
               * Requirement 11)
               * @return {Number} id of the created row
               */


              createUndefinedCartesian() {
                var srs = this.getBySrsId(-1);

                if (srs) {
                  return srs;
                }

                var srs = new SpatialReferenceSystem();
                srs.srs_name = 'Undefined cartesian SRS';
                srs.srs_id = -1;
                srs.organization = 'NONE';
                srs.organization_coordsys_id = -1;
                srs.definition = 'undefined';
                srs.description = 'undefined cartesian coordinate reference system';

                if (this.connection.columnAndTableExists('gpkg_spatial_ref_sys', 'definition_12_063')) {
                  srs.definition_12_063 = 'undefined';
                }

                return this.create(srs);
              }
              /**
               * Creates the required Undefined Geographic Spatial Reference System (spec
               * Requirement 11)
               * @return {Number} id of the created row
               */


              createUndefinedGeographic() {
                var srs = this.getBySrsId(0);

                if (srs) {
                  return srs;
                }

                var srs = new SpatialReferenceSystem();
                srs.srs_name = 'Undefined geographic SRS';
                srs.srs_id = 0;
                srs.organization = 'NONE';
                srs.organization_coordsys_id = 0;
                srs.definition = 'undefined';
                srs.description = 'undefined geographic coordinate reference system';

                if (this.connection.columnAndTableExists('gpkg_spatial_ref_sys', 'definition_12_063')) {
                  srs.definition_12_063 = 'undefined';
                }

                return this.create(srs);
              }
              /**
               * Creates the Web Mercator Spatial Reference System if it does not already
               * exist
               * @return {Number} id of the created row
               */


              createWebMercator() {
                var srs = this.getBySrsId(3857);

                if (srs) {
                  return srs;
                }

                var srs = new SpatialReferenceSystem();
                srs.srs_name = 'WGS 84 / Pseudo-Mercator';
                srs.srs_id = 3857;
                srs.organization = 'EPSG';
                srs.organization_coordsys_id = 3857;
                srs.definition = 'PROJCS["WGS 84 / Pseudo-Mercator",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Mercator_1SP"],PARAMETER["central_meridian",0],PARAMETER["scale_factor",1],PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["X",EAST],AXIS["Y",NORTH],EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"],AUTHORITY["EPSG","3857"]]';
                srs.description = 'Spherical Mercator projection coordinate system';

                if (this.connection.columnAndTableExists('gpkg_spatial_ref_sys', 'definition_12_063')) {
                  srs.definition_12_063 = 'PROJCS["WGS 84 / Pseudo-Mercator",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Mercator_1SP"],PARAMETER["central_meridian",0],PARAMETER["scale_factor",1],PARAMETER["false_easting",0],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["X",EAST],AXIS["Y",NORTH],EXTENSION["PROJ4","+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"],AUTHORITY["EPSG","3857"]]';
                }

                return this.create(srs);
              }

            }
            /**
             * Spatial Reference System Table Name
             * @type {String}
             */


            SpatialReferenceSystemDao.TABLE_NAME = 'gpkg_spatial_ref_sys';
            /**
             * Table Name
             * @type {String}
             */

            SpatialReferenceSystemDao.prototype.gpkgTableName = SpatialReferenceSystemDao.TABLE_NAME;
            /**
             * srsName field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_SRS_NAME = "srs_name";
            /**
             * srsId field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_SRS_ID = "srs_id";
            /**
             * id field name, srsId
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_ID = SpatialReferenceSystemDao.COLUMN_SRS_ID;
            /**
             * organization field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_ORGANIZATION = "organization";
            /**
             * organizationCoordsysId field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_ORGANIZATION_COORDSYS_ID = "organization_coordsys_id";
            /**
             * definition field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_DEFINITION = "definition";
            /**
             * description field name
             * @type {String}
             */

            SpatialReferenceSystemDao.COLUMN_DESCRIPTION = "description";
            SpatialReferenceSystemDao.prototype.idColumns = [SpatialReferenceSystemDao.COLUMN_SRS_ID];
            SpatialReferenceSystem.TABLE_NAME = SpatialReferenceSystemDao.TABLE_NAME;

            var inherits$1;

            if (typeof Object.create === 'function') {
              inherits$1 = function inherits(ctor, superCtor) {
                // implementation from standard node.js 'util' module
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
              };
            } else {
              inherits$1 = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;

                var TempCtor = function () {};

                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              };
            }

            var inherits$2 = inherits$1;

            var formatRegExp = /%[sdj%]/g;
            function format(f) {
              if (!isString(f)) {
                var objects = [];

                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }

                return objects.join(' ');
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function (x) {
                if (x === '%%') return '%';
                if (i >= len) return x;

                switch (x) {
                  case '%s':
                    return String(args[i++]);

                  case '%d':
                    return Number(args[i++]);

                  case '%j':
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return '[Circular]';
                    }

                  default:
                    return x;
                }
              });

              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += ' ' + x;
                } else {
                  str += ' ' + inspect(x);
                }
              }

              return str;
            }
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.

            function deprecate(fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined(global$1.process)) {
                return function () {
                  return deprecate(fn, msg).apply(this, arguments);
                };
              }

              var warned = false;

              function deprecated() {
                if (!warned) {
                  {
                    console.error(msg);
                  }

                  warned = true;
                }

                return fn.apply(this, arguments);
              }

              return deprecated;
            }
            var debugs = {};
            var debugEnviron;
            function debuglog(set) {
              if (isUndefined(debugEnviron)) debugEnviron = '';
              set = set.toUpperCase();

              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = 0;

                  debugs[set] = function () {
                    var msg = format.apply(null, arguments);
                    console.error('%s %d: %s', set, pid, msg);
                  };
                } else {
                  debugs[set] = function () {};
                }
              }

              return debugs[set];
            }
            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */

            /* legacy: obj, showHidden, depth, colors*/

            function inspect(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              }; // legacy...

              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];

              if (isBoolean(opts)) {
                // legacy...
                ctx.showHidden = opts;
              } else if (opts) {
                // got an "options" object
                _extend(ctx, opts);
              } // set default options


              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            } // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

            inspect.colors = {
              'bold': [1, 22],
              'italic': [3, 23],
              'underline': [4, 24],
              'inverse': [7, 27],
              'white': [37, 39],
              'grey': [90, 39],
              'black': [30, 39],
              'blue': [34, 39],
              'cyan': [36, 39],
              'green': [32, 39],
              'magenta': [35, 39],
              'red': [31, 39],
              'yellow': [33, 39]
            }; // Don't use 'blue' not visible on cmd.exe

            inspect.styles = {
              'special': 'cyan',
              'number': 'yellow',
              'boolean': 'yellow',
              'undefined': 'grey',
              'null': 'bold',
              'string': 'green',
              'date': 'magenta',
              // "name": intentionally not styling
              'regexp': 'red'
            };

            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];

              if (style) {
                return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
              } else {
                return str;
              }
            }

            function stylizeNoColor(str, styleType) {
              return str;
            }

            function arrayToHash(array) {
              var hash = {};
              array.forEach(function (val, idx) {
                hash[val] = true;
              });
              return hash;
            }

            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);

                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }

                return ret;
              } // Primitive types cannot have properties


              var primitive = formatPrimitive(ctx, value);

              if (primitive) {
                return primitive;
              } // Look up the keys of the object.


              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              } // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


              if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                return formatError(value);
              } // Some type of object without properties can be shortcutted.


              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ': ' + value.name : '';
                  return ctx.stylize('[Function' + name + ']', 'special');
                }

                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                }

                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), 'date');
                }

                if (isError(value)) {
                  return formatError(value);
                }
              }

              var base = '',
                  array = false,
                  braces = ['{', '}']; // Make Array say that they are Array

              if (isArray$1(value)) {
                array = true;
                braces = ['[', ']'];
              } // Make functions say that they are functions


              if (isFunction(value)) {
                var n = value.name ? ': ' + value.name : '';
                base = ' [Function' + n + ']';
              } // Make RegExps say that they are RegExps


              if (isRegExp(value)) {
                base = ' ' + RegExp.prototype.toString.call(value);
              } // Make dates with properties first say the date


              if (isDate(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value);
              } // Make error with message first say the error


              if (isError(value)) {
                base = ' ' + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                } else {
                  return ctx.stylize('[Object]', 'special');
                }
              }

              ctx.seen.push(value);
              var output;

              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function (key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }

              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }

            function formatPrimitive(ctx, value) {
              if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

              if (isString(value)) {
                var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                return ctx.stylize(simple, 'string');
              }

              if (isNumber(value)) return ctx.stylize('' + value, 'number');
              if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

              if (isNull(value)) return ctx.stylize('null', 'null');
            }

            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']';
            }

            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];

              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                } else {
                  output.push('');
                }
              }

              keys.forEach(function (key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                }
              });
              return output;
            }

            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key]
              };

              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special');
                } else {
                  str = ctx.stylize('[Getter]', 'special');
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special');
                }
              }

              if (!hasOwnProperty(visibleKeys, key)) {
                name = '[' + key + ']';
              }

              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }

                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str.split('\n').map(function (line) {
                        return '  ' + line;
                      }).join('\n').substr(2);
                    } else {
                      str = '\n' + str.split('\n').map(function (line) {
                        return '   ' + line;
                      }).join('\n');
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special');
                }
              }

              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }

                name = JSON.stringify('' + key);

                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, 'name');
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, 'string');
                }
              }

              return name + ': ' + str;
            }

            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function (prev, cur) {
                if (cur.indexOf('\n') >= 0) ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
              }, 0);

              if (length > 60) {
                return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
              }

              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            } // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.


            function isArray$1(ar) {
              return Array.isArray(ar);
            }
            function isBoolean(arg) {
              return typeof arg === 'boolean';
            }
            function isNull(arg) {
              return arg === null;
            }
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            function isNumber(arg) {
              return typeof arg === 'number';
            }
            function isString(arg) {
              return typeof arg === 'string';
            }
            function isSymbol(arg) {
              return typeof arg === 'symbol';
            }
            function isUndefined(arg) {
              return arg === void 0;
            }
            function isRegExp(re) {
              return isObject(re) && objectToString(re) === '[object RegExp]';
            }
            function isObject(arg) {
              return typeof arg === 'object' && arg !== null;
            }
            function isDate(d) {
              return isObject(d) && objectToString(d) === '[object Date]';
            }
            function isError(e) {
              return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
            }
            function isFunction(arg) {
              return typeof arg === 'function';
            }
            function isPrimitive(arg) {
              return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
              typeof arg === 'undefined';
            }
            function isBuffer$1(maybeBuf) {
              return isBuffer(maybeBuf);
            }

            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }

            function pad(n) {
              return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }

            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

            function timestamp() {
              var d = new Date();
              var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
              return [d.getDate(), months[d.getMonth()], time].join(' ');
            } // log is just a thin wrapper to console.log that prepends a timestamp


            function log() {
              console.log('%s - %s', timestamp(), format.apply(null, arguments));
            }
            function _extend(origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject(add)) return origin;
              var keys = Object.keys(add);
              var i = keys.length;

              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }

              return origin;
            }

            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            var util = {
              inherits: inherits$2,
              _extend: _extend,
              log: log,
              isBuffer: isBuffer$1,
              isPrimitive: isPrimitive,
              isFunction: isFunction,
              isError: isError,
              isDate: isDate,
              isObject: isObject,
              isRegExp: isRegExp,
              isUndefined: isUndefined,
              isSymbol: isSymbol,
              isString: isString,
              isNumber: isNumber,
              isNullOrUndefined: isNullOrUndefined,
              isNull: isNull,
              isBoolean: isBoolean,
              isArray: isArray$1,
              inspect: inspect,
              deprecate: deprecate,
              format: format,
              debuglog: debuglog
            };

            /**
             * @module features/columns
             */
            /**
             * `GeometryColumns` models the [gpkg_geometry_columns](http://www.geopackage.org/spec/#_geometry_columns)
             * table.  Rows in this table define the column in a [user feature table]{@link module:features/user/featureTable~FeatureTable}
             * that contains vector feature geometry data.
             *
             * @class GeometryColumns
             */

            const GeometryColumns = function () {
              /**
              * Name of the table containing the geometry column
              * @member {string}
              */
              this.table_name;
              /**
               * Name of a column in the feature table that is a Geometry Column
               * @member {string}
               */

              this.column_name;
              /**
               * Name from Geometry Type Codes (Core) or Geometry Type Codes (Extension)
               * in Geometry Types (Normative)
               * @member {string}
               */

              this.geometry_type_name;
              /**
               * Spatial Reference System ID: gpkg_spatial_ref_sys.srs_id
               * @member {module:dao/spatialReferenceSystem~SpatialReferenceSystem}
               */

              this.srs;
              /**
               * Unique identifier for each Spatial Reference System within a GeoPackage
               * @member {Number}
               */

              this.srs_id;
              /**
               * 0: z values prohibited; 1: z values mandatory; 2: z values optional
               * @member {byte}
               */

              this.z;
              /**
               * 0: m values prohibited; 1: m values mandatory; 2: m values optional
               * @member {byte}
               */

              this.m;
            };

            GeometryColumns.prototype.getGeometryType = function () {
              return this.geometry_type_name;
            }; // /**
            //  * Contents
            //  */
            // @ForeignCollectionField(eager = false)
            // private ForeignCollection<Contents> contents;
            //
            // /**
            //  * Geometry Columns
            //  */
            // @ForeignCollectionField(eager = false)
            // private ForeignCollection<GeometryColumns> geometryColumns;
            //
            // /**
            //  * Matrix Tile Set
            //  */
            // @ForeignCollectionField(eager = false)
            // private ForeignCollection<TileMatrixSet> tileMatrixSet;

            /**
             * Geometry Columns Data Access Object
             *
             * @class GeometryColumnsDao
             * @extends {module:dao/dao~Dao}
             */


            class GeometryColumnsDao extends Dao {
              createObject() {
                return new GeometryColumns();
              }
              /**
               * Fetch the [geometry column]{@link module:features/columns~GeometryColumns}
               * associated with the user table with the given name.  Return `undefined` if
               * no geometry column exists for the given table name.
               *
               * @param {string} tableName table name
               * @returns {?module:features/columns~GeometryColumns}
               */


              queryForTableName(tableName) {
                var results = this.queryForAllEq(GeometryColumnsDao.COLUMN_TABLE_NAME, tableName);

                if (results && results.length) {
                  var gc = this.createObject();
                  this.populateObjectFromResult(gc, results[0]);
                  return gc;
                }

                return;
              }
              /**
               * Get the feature table names.
               *
               * @returns {string[]} an array of feature table name strings
               */


              getFeatureTables() {
                var tableNames = [];

                for (var result of this.connection.each('select ' + GeometryColumnsDao.COLUMN_TABLE_NAME + ' from ' + this.gpkgTableName)) {
                  tableNames.push(result[GeometryColumnsDao.COLUMN_TABLE_NAME]);
                }

                return tableNames;
              }
              /**
               *  Get the Spatial Reference System of the Geometry Columns
               *
               *  @param {module:dao/geometryColumns~GeometryColumns} geometryColumns geometry columns
               *  @param {callback} callback called with an error if one occurred and the {SpatialReferenceSystem}
               */


              getSrs(geometryColumns) {
                var dao = this.geoPackage.getSpatialReferenceSystemDao();
                return dao.queryForId(geometryColumns.srs_id);
              }
              /**
               *  Get the Contents of the Geometry Columns
               *
               *  @param {module:dao/geometryColumns~GeometryColumns} geometryColumns geometry columns
               *  @return {ContentsDao} contents dao
               */


              getContents(geometryColumns) {
                var dao = this.geoPackage.getContentsDao();
                return dao.queryForId(geometryColumns.table_name);
              }

              getProjection(projectionObject) {
                var srs = this.getSrs(projectionObject);
                var srsDao = this.geoPackage.getSpatialReferenceSystemDao();
                return srsDao.getProjection(srs);
              }

            }
            /**
             * tableName field name
             * @type {String}
             */


            GeometryColumnsDao.COLUMN_TABLE_NAME = "table_name";
            /**
             * columnName field name
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_COLUMN_NAME = "column_name";
            /**
             * id 1 field name, tableName
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_ID_1 = GeometryColumnsDao.COLUMN_TABLE_NAME;
            /**
             * id 2 field name, columnName
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_ID_2 = GeometryColumnsDao.COLUMN_COLUMN_NAME;
            /**
             * geometryTypeName field name
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_GEOMETRY_TYPE_NAME = "geometry_type_name";
            /**
             * srsId field name
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_SRS_ID = 'srs_id';
            /**
             * z field name
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_Z = "z";
            /**
             * m field name
             * @type {String}
             */

            GeometryColumnsDao.COLUMN_M = "m";
            /**
             * Table Name
             * @type {String}
             */

            GeometryColumnsDao.prototype.gpkgTableName = 'gpkg_geometry_columns';
            GeometryColumnsDao.prototype.idColumns = [GeometryColumnsDao.COLUMN_ID_1, GeometryColumnsDao.COLUMN_ID_2];
            GeometryColumnsDao.prototype.columns = [GeometryColumnsDao.COLUMN_TABLE_NAME, GeometryColumnsDao.COLUMN_COLUMN_NAME, GeometryColumnsDao.COLUMN_GEOMETRY_TYPE_NAME, GeometryColumnsDao.COLUMN_SRS_ID, GeometryColumnsDao.COLUMN_Z, GeometryColumnsDao.COLUMN_M];
            GeometryColumns.TABLE_NAME = "tableName";
            GeometryColumns.COLUMN_NAME = "columnName";
            GeometryColumns.GEOMETRY_TYPE_NAME = "geometryTypeName";
            GeometryColumns.SRS_ID = "srsId";
            GeometryColumns.Z = "z";
            GeometryColumns.M = "m";

            /**
             * @module db/dataTypes
             */

            /**
             * `GPKGDataType` is an enum hash of constant values that represent the column
             * types found in GeoPackage SQLite database tables.
             *
             * @enum {number}
             * @readonly
             */
            var types = {};
            types.GPKGDataType = {
              /**
               * A boolean value representing true or false.
               */
              GPKG_DT_BOOLEAN: 0,

              /**
               * 8-bit signed two’s complement integer.
               */
              GPKG_DT_TINYINT: 1,

              /**
               * 16-bit signed two’s complement integer.
               */
              GPKG_DT_SMALLINT: 2,

              /**
               * 32-bit signed two’s complement integer.
               */
              GPKG_DT_MEDIUMINT: 3,

              /**
               * 64-bit signed two’s complement integer.
               */
              GPKG_DT_INT: 4,

              /**
               * 64-bit signed two’s complement integer.
               */
              GPKG_DT_INTEGER: 5,

              /**
               * 32-bit IEEE floating point number.
               */
              GPKG_DT_FLOAT: 6,

              /**
               * 64-bit IEEE floating point number.
               */
              GPKG_DT_DOUBLE: 7,

              /**
               * 64-bit IEEE floating point number.
               */
              GPKG_DT_REAL: 8,

              /**
               * TEXT{(maxchar_count)}: Variable length string encoded in either UTF-8 or UTF-16, determined by PRAGMA encoding; see http://www.sqlite.org/pragma.html#pragma_encoding.
               */
              GPKG_DT_TEXT: 9,

              /**
               * BLOB{(max_size)}: Variable length binary data.
               */
              GPKG_DT_BLOB: 10,

              /**
               * ISO-8601 date string in the form YYYY-MM-DD encoded in either UTF-8 or UTF-16.
               */
              GPKG_DT_DATE: 11,

              /**
               * ISO-8601 date/time string in the form YYYY-MM-DDTHH:MM:SS.SSSZ with T separator character and Z suffix for coordinated universal time (UTC) encoded in either UTF-8 or UTF-16.
               */
              GPKG_DT_DATETIME: 12,

              /**
               * The `GEOMETRY` column type
               */
              GPKG_DT_GEOMETRY: 13
            };
            types.GPKG_DT_BOOLEAN_NAME = "BOOLEAN";
            types.GPKG_DT_TINYINT_NAME = "TINYINT";
            types.GPKG_DT_SMALLINT_NAME = "SMALLINT";
            types.GPKG_DT_MEDIUMINT_NAME = "MEDIUMINT";
            types.GPKG_DT_INT_NAME = "INT";
            types.GPKG_DT_INTEGER_NAME = "INTEGER";
            types.GPKG_DT_FLOAT_NAME = "FLOAT";
            types.GPKG_DT_DOUBLE_NAME = "DOUBLE";
            types.GPKG_DT_REAL_NAME = "REAL";
            types.GPKG_DT_TEXT_NAME = "TEXT";
            types.GPKG_DT_BLOB_NAME = "BLOB";
            types.GPKG_DT_DATE_NAME = "DATE";
            types.GPKG_DT_DATETIME_NAME = "DATETIME";
            types.GPKG_DT_GEOMETRY_NAME = "GEOMETRY";
            types.GPKGDataType[types.GPKG_DT_BOOLEAN_NAME] = types.GPKGDataType.GPKG_DT_BOOLEAN;
            types.GPKGDataType[types.GPKG_DT_TINYINT_NAME] = types.GPKGDataType.GPKG_DT_TINYINT;
            types.GPKGDataType[types.GPKG_DT_SMALLINT_NAME] = types.GPKGDataType.GPKG_DT_SMALLINT;
            types.GPKGDataType[types.GPKG_DT_MEDIUMINT_NAME] = types.GPKGDataType.GPKG_DT_MEDIUMINT;
            types.GPKGDataType[types.GPKG_DT_INT_NAME] = types.GPKGDataType.GPKG_DT_INT;
            types.GPKGDataType[types.GPKG_DT_INTEGER_NAME] = types.GPKGDataType.GPKG_DT_INTEGER;
            types.GPKGDataType[types.GPKG_DT_FLOAT_NAME] = types.GPKGDataType.GPKG_DT_FLOAT;
            types.GPKGDataType[types.GPKG_DT_DOUBLE_NAME] = types.GPKGDataType.GPKG_DT_DOUBLE;
            types.GPKGDataType[types.GPKG_DT_REAL_NAME] = types.GPKGDataType.GPKG_DT_REAL;
            types.GPKGDataType[types.GPKG_DT_TEXT_NAME] = types.GPKGDataType.GPKG_DT_TEXT;
            types.GPKGDataType[types.GPKG_DT_BLOB_NAME] = types.GPKGDataType.GPKG_DT_BLOB;
            types.GPKGDataType[types.GPKG_DT_DATE_NAME] = types.GPKGDataType.GPKG_DT_DATE;
            types.GPKGDataType[types.GPKG_DT_DATETIME_NAME] = types.GPKGDataType.GPKG_DT_DATETIME;
            types.GPKGDataType[types.GPKG_DT_GEOMETRY_NAME] = types.GPKGDataType.GPKG_DT_GEOMETRY;
            /**
             * Return the name of the given data type.
             *
             * @param  {module:db/dataTypes~GPKGDataType} dataType the enum to retrieve the name for
             * @return {String} the string name of the given data type enum
             */

            types.name = function (dataType) {
              switch (dataType) {
                case types.GPKGDataType.GPKG_DT_BOOLEAN:
                  return types.GPKG_DT_BOOLEAN_NAME;

                case types.GPKGDataType.GPKG_DT_TINYINT:
                  return types.GPKG_DT_TINYINT_NAME;

                case types.GPKGDataType.GPKG_DT_SMALLINT:
                  return types.GPKG_DT_SMALLINT_NAME;

                case types.GPKGDataType.GPKG_DT_MEDIUMINT:
                  return types.GPKG_DT_MEDIUMINT_NAME;

                case types.GPKGDataType.GPKG_DT_INT:
                  return types.GPKG_DT_INT_NAME;

                case types.GPKGDataType.GPKG_DT_INTEGER:
                  return types.GPKG_DT_INTEGER_NAME;

                case types.GPKGDataType.GPKG_DT_FLOAT:
                  return types.GPKG_DT_FLOAT_NAME;

                case types.GPKGDataType.GPKG_DT_DOUBLE:
                  return types.GPKG_DT_DOUBLE_NAME;

                case types.GPKGDataType.GPKG_DT_REAL:
                  return types.GPKG_DT_REAL_NAME;

                case types.GPKGDataType.GPKG_DT_TEXT:
                  return types.GPKG_DT_TEXT_NAME;

                case types.GPKGDataType.GPKG_DT_BLOB:
                  return types.GPKG_DT_BLOB_NAME;

                case types.GPKGDataType.GPKG_DT_DATE:
                  return types.GPKG_DT_DATE_NAME;

                case types.GPKGDataType.GPKG_DT_DATETIME:
                  return types.GPKG_DT_DATETIME_NAME;

                case types.GPKGDataType.GPKG_DT_GEOMETRY:
                  return types.GPKG_DT_GEOMETRY_NAME;
              }
            };
            /**
             * Return the data type enum value for the given name, ignoring case.
             *
             * @param  {String} name the name of the data type enum
             * @return {module:db/dataTypes~GPKGDataType} the enum value
             */


            types.fromName = function (name) {
              var value = 9;

              if (name) {
                name = name.toUpperCase();
                value = types.GPKGDataType[name];
              }

              return value;
            };

            /**
             * User Row containing the values from a single result row
             * @class UserRow
             * @param  {UserTable} table       user table
             * @param  {module:db/dataTypes[]} columnTypes  column types
             * @param  {Array} values      values
             */

            var UserRow = function (table, columnTypes, values) {
              /**
               * User table
               * @type {UserTable}
               */
              this.table = table;
              /**
               * Column types of this row, based upon the data values
               * @type {Object}
               */

              this.columnTypes = columnTypes;
              /**
               * Array of row values
               * @type {Object}
               */

              this.values = values;

              if (!this.columnTypes) {
                var columnCount = this.table.columnCount();
                this.columnTypes = {};
                this.values = {};

                for (var i = 0; i < columnCount; i++) {
                  this.columnTypes[this.table.columnNames[i]] = this.table.columns[i].dataType;
                  this.values[this.table.columnNames[i]] = this.table.columns[i].defaultValue;
                }
              }
            };
            /**
             * Get the column count
             * @return {number} column count
             */

            UserRow.prototype.columnCount = function () {
              return this.table.columnCount();
            };
            /**
             * Get the column names
             * @return {Array} column names
             */


            UserRow.prototype.getColumnNames = function () {
              return this.table.columnNames;
            };
            /**
             * Get the column name at the index
             * @param  {Number} index index
             * @return {string}       column name
             */


            UserRow.prototype.getColumnNameWithIndex = function (index) {
              return this.table.getColumnNameWithIndex(index);
            };
            /**
             * Get the column index of the column name
             * @param  {string} columnName column name
             * @return {Number}            column index
             */


            UserRow.prototype.getColumnIndexWithColumnName = function (columnName) {
              return this.table.getColumnIndex(columnName);
            };
            /**
             * Get the value at the index
             * @param  {Number} index index
             * @return {object}       value
             */


            UserRow.prototype.getValueWithIndex = function (index) {
              var value = this.values[this.getColumnNameWithIndex(index)];

              if (value !== undefined) {
                value = this.toObjectValue(index, value);
              }

              return value;
            };
            /**
             * Get the value of the column name
             * @param  {string} columnName column name
             * @return {Object}            value
             */


            UserRow.prototype.getValueWithColumnName = function (columnName) {
              var value = this.values[columnName];
              var dataType = this.getRowColumnTypeWithColumnName(columnName);
              if (value === undefined || value === null) return value;

              if (dataType === types.GPKGDataType.BOOLEAN) {
                return value === 1 ? true : false;
              } else if (dataType === types.GPKGDataType.BLOB) {
                return new Buffer(value);
              }

              return value;
            };

            UserRow.prototype.toObjectValue = function (index, value) {
              var objectValue = value;
              var column = this.getColumnWithIndex(index);

              if (column.dataType === types.GPKGDataType.BOOLEAN && value) {
                return value === 1 ? true : false;
              }

              return objectValue;
            };

            UserRow.prototype.toDatabaseValue = function (columnName) {
              var column = this.getColumnWithColumnName(columnName);
              var value = this.getValueWithColumnName(columnName);

              if (column.dataType === types.GPKGDataType.BOOLEAN) {
                return value === true ? 1 : 0;
              }

              return value;
            };
            /**
             * Get the row column type at the index
             * @param  {Number} index index
             * @return {Number}       row column type
             */


            UserRow.prototype.getRowColumnTypeWithIndex = function (index) {
              return this.columnTypes[this.getColumnNameWithIndex(index)];
            };
            /**
             * Get the row column type of the column name
             * @param  {string} columnName column name
             * @return {Number}            row column type
             */


            UserRow.prototype.getRowColumnTypeWithColumnName = function (columnName) {
              return this.columnTypes[columnName];
            };
            /**
             * Get the column at the index
             * @param  {Number} index index
             * @return {UserColumn}       column
             */


            UserRow.prototype.getColumnWithIndex = function (index) {
              return this.table.getColumnWithIndex(index);
            };
            /**
             * Get the column of the column name
             * @param  {string} columnName column name
             * @return {UserColumn}            column
             */


            UserRow.prototype.getColumnWithColumnName = function (columnName) {
              return this.table.getColumnWithColumnName(columnName);
            };
            /**
             * Get the id value, which is the value of the primary key
             * @return {Number} id value
             */


            UserRow.prototype.getId = function () {
              if (this.getPkColumn()) {
                return this.getValueWithColumnName(this.getPkColumn().name);
              }
            };
            /**
             * Get the primary key column Index
             * @return {Number} pk index
             */


            UserRow.prototype.getPkColumnIndex = function () {
              return this.table.pkIndex;
            };
            /**
             * Get the primary key column
             * @return {UserColumn} pk column
             */


            UserRow.prototype.getPkColumn = function () {
              return this.table.getPkColumn();
            };
            /**
             * Set the value at the index
             * @param {Number} index index
             * @param {object} value value
             */


            UserRow.prototype.setValueWithIndex = function (index, value) {
              if (index === this.table.pkIndex) {
                throw new Error('Cannot update the primary key of the row.  Table Name: ' + this.table.tableName + ', Index: ' + index + ', Name: ' + this.table.getPkColumn().name);
              }

              this.setValueWithColumnName(this.getColumnNameWithIndex(index), value);
            };
            /**
             * Set the value at the index without validation
             * @param {Number} index index
             * @param {Object} value value
             */


            UserRow.prototype.setValueNoValidationWithIndex = function (index, value) {
              this.values[this.getColumnNameWithIndex(index)] = value;
            };
            /**
             * Set the value of the column name
             * @param {string} columnName column name
             * @param {Object} value      value
             */


            UserRow.prototype.setValueWithColumnName = function (columnName, value) {
              var dataType = this.getRowColumnTypeWithColumnName(columnName);

              if (dataType === types.GPKGDataType.BOOLEAN) {
                value === true ? this.values[columnName] = 1 : this.values[columnName] = 0;
              } else if (dataType === types.GPKGDataType.DATE) {
                this.values[columnName] = value.toISOString().slice(0, 10);
              } else if (dataType === types.GPKGDataType.DATETIME) {
                this.values[columnName] = value.toISOString();
              } else {
                this.values[columnName] = value;
              }
            };

            UserRow.prototype.hasIdColumn = function () {
              return this.table.pkIndex !== undefined;
            };

            UserRow.prototype.hasId = function () {
              var hasId = false;

              if (this.hasIdColumn()) {
                var objectValue = this.getValueWithIndex(this.table.pkIndex);
                hasId = objectValue !== null && objectValue !== undefined && typeof objectValue === 'number';
              }

              return hasId;
            };
            /**
             * Set the primary key id value
             * @param {Number} id id
             */


            UserRow.prototype.setId = function (id) {
              this.values[this.table.getPkColumn().name] = id;
            };
            /**
             * Clears the id so the row can be used as part of an insert or create
             */


            UserRow.prototype.resetId = function () {
              this.values[this.table.getPkColumn().name] = undefined;
            };
            /**
             * Validate the value and its actual value types against eh column data type class
             * @param  {UserColumn} column     column
             * @param  {Object} value      value
             * @param  {Array} valueTypes value types
             */


            UserRow.prototype.validateValueWithColumn = function (column, value, valueTypes) {// TODO implement validation
            };

            /**
             * @module user/userTable
             */

            /**
             * `UserTable` models optional [user data tables](https://www.geopackage.org/spec121/index.html#_options)
             * in a [GeoPackage]{@link module:geoPackage~GeoPackage}.
             *
             * @class
             * @param  {string} tableName table name
             * @param  {module:user/userColumn~UserColumn[]} columns user columns
             */
            var UserTable = function (tableName, columns) {
              /**
               * The name of the table
               * @type {string}
               */
              this.table_name = tableName; // Sort the columns by index

              columns.sort(function (a, b) {
                return a.index - b.index;
              });

              for (var i = 0; i < columns.length; i++) {
                var column = columns[i];

                if (column.index != i) {
                  throw new Error('Column has wrong index of ' + column.index + ', found at index: ' + i + ', Table Name: ' + this.table_name);
                }
              }

              var pk = undefined;
              var tempColumnNames = new Array();
              var tempNameToIndex = {};

              for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                var index = column.index;

                if (column.primaryKey) {
                  if (pk !== undefined) {
                    throw new Error('More than one primary key column was found for table \'' + this.table_name + '\'. Index ' + pk + ' and ' + index);
                  }

                  pk = index;
                }

                tempColumnNames.push(column.name);
                tempNameToIndex[column.name] = index;
              }
              /**
               * Array of columns
               * @type {module:user/userColumn~UserColumn[]}
               */


              this.columns = columns;
              /**
               * Array of column names
               * @type {string[]}
               */

              this.columnNames = tempColumnNames;
              /**
               * Mapping between column names and their index
               * @type {Object}
               */

              this.nameToIndex = tempNameToIndex;
              this.uniqueConstraints = [];
              /**
               * Primary key column Index
               * @type {Number}
               */

              this.pkIndex = pk;
            };
            /**
             * Check for duplicate column names
             * @param  {Number} index         index
             * @param  {Number} previousIndex previous index
             * @param  {string} column        column
             * @throws Throws an error if previous index is not undefined
             */


            UserTable.prototype.duplicateCheck = function (index, previousIndex, column) {
              if (previousIndex !== undefined) {
                throw new Error('More than one ' + column + ' column was found for table \'' + this.table_name + '\'. Index ' + previousIndex + ' and ' + index);
              }
            };
            /**
             * Check for the expected data type
             * @param  {module:db/dataTypes~GPKGDataType} expected expected data type
             * @param  {module:user/userColumn~UserColumn} column   column
             * @throws Will throw an error if the actual column type does not match the expected column type
             */


            UserTable.prototype.typeCheck = function (expected, column) {
              var actual = column.dataType;

              if (!actual || actual !== expected) {
                throw new Error('Unexpected ' + column.name + ' column data type was found for table \'' + this.table_name + '\', expected: ' + DataTypes.name(expected) + ', actual: ' + column.dataType);
              }
            };
            /**
             * Check for missing columns
             * @param  {Number} index  index
             * @param  {string} column column
             * @throws Will throw an error if no column is found
             */


            UserTable.prototype.missingCheck = function (index, column) {
              if (index === undefined || index === null) {
                throw new Error('No ' + column + ' column was found for table \'' + this.table_name + '\'');
              }
            };
            /**
             * Get the column index of the column name
             * @param  {string} columnName column name
             * @return {Number} the column index
             * @throws Will throw an error if the column is not found in the table
             */


            UserTable.prototype.getColumnIndex = function (columnName) {
              var index = this.nameToIndex[columnName];

              if (index === undefined || index === null) {
                throw new Error('Column does not exist in table \'' + this.table_name + '\', column: ' + columnName);
              }

              return index;
            };
            /**
             * Check if the table has the column
             * @param  {string} columnName name of the column
             * @return {Boolean}            true if the column exists in the table
             */


            UserTable.prototype.hasColumn = function (columnName) {
              try {
                this.getColumnIndex(columnName);
                return true;
              } catch (e) {
                return false;
              }

              return false;
            };
            /**
             * Get the column name from the index
             * @param  {Number} index index
             * @return {string} the column name
             */


            UserTable.prototype.getColumnNameWithIndex = function (index) {
              return this.columnNames[index];
            };
            /**
             * Get the column from the index
             * @param  {Number} index index
             * @return {module:user/userColumn~UserColumn} column at the index
             */


            UserTable.prototype.getColumnWithIndex = function (index) {
              return this.columns[index];
            };
            /**
             * Get column with the column name
             * @param  {string} columnName column name
             * @return {module:user/userColumn~UserColumn}            column at the index
             */


            UserTable.prototype.getColumnWithColumnName = function (columnName) {
              return this.getColumnWithIndex(this.getColumnIndex(columnName));
            };
            /**
             * Get the column count
             * @return {Number} the count of the columns
             */


            UserTable.prototype.columnCount = function () {
              return this.columns.length;
            };
            /**
             * Get the primary key column
             * @return {module:user/userColumn~UserColumn} the primary key column
             */


            UserTable.prototype.getPkColumn = function () {
              return this.columns[this.pkIndex];
            };
            /**
             * Get the primary key id column
             * @return {module:user/userColumn~UserColumn}
             */


            UserTable.prototype.getIdColumn = function () {
              return this.getPkColumn();
            };

            UserTable.prototype.addUniqueConstraint = function (uniqueConstraint) {
              this.uniqueConstraints.push(uniqueConstraint);
            };

            UserTable.FEATURE_TABLE = 'FEATURE';
            UserTable.TILE_TABLE = 'TILE';

            /**
             * @module user/userColumn
             */
            /**
             * A `UserColumn` is meta-data about a single column from a {@link module:/user/userTable~UserTable}.
             *
             * @class
             * @param {Number} index column index
             * @param {string} name column name
             * @param {module:db/dataTypes~GPKGDataType} dataType data type of the column
             * @param {?Number} max max value
             * @param {Boolean} notNull not null
             * @param {?Object} defaultValue default value or null
             * @param {Boolean} primaryKey `true` if this column is part of the table's primary key
             */

            function UserColumn(index, name, dataType, max, notNull, defaultValue, primaryKey) {
              this.index = index;
              this.name = name;
              this.dataType = dataType;
              this.max = max;
              this.notNull = notNull;
              this.defaultValue = defaultValue;
              this.primaryKey = primaryKey;
              this.validateMax();
            }
            /**
             * Gets the type name
             * @return {module:db/dataTypes~GPKGDataType}
             */


            UserColumn.prototype.getTypeName = function () {
              var type = undefined;

              if (this.dataType !== types.GPKGDataType.GPKG_DT_GEOMETRY) {
                type = types.name(this.dataType);
              }

              return type;
            };
            /**
             * Validate that if max is set, the data type is text or blob
             */


            UserColumn.prototype.validateMax = function () {
              if (this.max && this.dataType !== types.GPKGDataType.GPKG_DT_TEXT && this.dataType !== types.GPKGDataType.GPKG_DT_BLOB) {
                throw new Error('Column max is only supported for TEXT and BLOB columns. column: ' + this.name + ', max: ' + this.max + ', type: ' + this.dataType);
              }
            };
            /**
             *  Create a new primary key column
             *
             *  @param {Number} index column index
             *  @param {string} name  column name
             *
             *  @return {module:user/userColumn~UserColumn} created column
             */


            UserColumn.createPrimaryKeyColumnWithIndexAndName = function (index, name) {
              return new UserColumn(index, name, types.GPKGDataType.GPKG_DT_INTEGER, undefined, true, undefined, true);
            };
            /**
             *  Create a new column
             *
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return {module:user/userColumn~UserColumn} created column
             */


            UserColumn.createColumnWithIndex = function (index, name, type, notNull, defaultValue) {
              return UserColumn.createColumnWithIndexAndMax(index, name, type, undefined, notNull, defaultValue);
            };
            /**
             *  Create a new column
             *
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Number} max max value
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return {module:user/userColumn~UserColumn} created column
             */


            UserColumn.createColumnWithIndexAndMax = function (index, name, type, max, notNull, defaultValue) {
              return new UserColumn(index, name, type, max, notNull, defaultValue, false);
            };

            /**
             * userRelatedTable module.
             * @module extension/relatedTables
             */
            /**
             * User Defined Related Table
             * @param  {string} tableName table name
             * @param  {array} columns   attribute columns
             */

            /**
             * User Defined Related Table
             * @param  {string} tableName       table name
             * @param  {string} relationName    relation name
             * @param  {string} dataType        Contents data type
             * @param  {module:user/userColumn~UserColumn} columns         columns
             * @param  {string[]} requiredColumns required columns
             * @return {module:extension/relatedTables~UserRelatedTable}
             */

            var UserRelatedTable = function (tableName, relationName, dataType, columns, requiredColumns) {
              UserTable.call(this, tableName, columns, requiredColumns);
              this.relation_name = relationName;
              this.data_type = dataType;
            };

            util.inherits(UserRelatedTable, UserTable);
            /**
             * Sets the contents
             * @param  {module:core/contents~Contents} contents contents
             * @throw Error if the contents data type does not match this data type
             */

            UserRelatedTable.prototype.setContents = function (contents) {
              this.contents = contents; // verify the contents have a relation name data type

              if (!contents.data_type || contents.data_type !== this.data_type) {
                throw new Error('The contents of this related table must have a data type of ' + this.data_type);
              }
            };

            // proj4 = 'default' in proj4 ? proj4['default'] : proj4;

            /** class representing a Bounding Box **/

            class BoundingBox {
              // minLongitude
              // maxLongitude
              // minLatitude
              // maxLatitude

              /**
               * Create a new bounding box
               * @param  {Number} minLongitudeOrBoundingBox minimum longitude or bounding box to copy (west)
               * @param  {Number} maxLongitude              maximum longitude (east)
               * @param  {Number} minLatitude               Minimum latitude (south)
               * @param  {Number} maxLatitude               Maximum latitude (north)
               * @return {BoundingBox}                      newly constructed bounding box
               */
              constructor(minLongitudeOrBoundingBox, maxLongitude = minLongitudeOrBoundingBox.maxLongitude, minLatitude = minLongitudeOrBoundingBox.minLatitude, maxLatitude = minLongitudeOrBoundingBox.maxLatitude) {
                if (!minLongitudeOrBoundingBox.hasOwnProperty('minLongitude')) {
                  this.minLongitude = minLongitudeOrBoundingBox;
                  this.maxLongitude = maxLongitude;
                  this.minLatitude = minLatitude;
                  this.maxLatitude = maxLatitude;
                } else {
                  var boundingBox = minLongitudeOrBoundingBox;
                  this.minLongitude = boundingBox.minLongitude;
                  this.maxLongitude = boundingBox.maxLongitude;
                  this.minLatitude = boundingBox.minLatitude;
                  this.maxLatitude = boundingBox.maxLatitude;
                }
              }
              /**
               * Build a Geometry Envelope from the bounding box
               *
               * @return geometry envelope
               */


              buildEnvelope() {
                return {
                  minY: this.minLatitude,
                  minX: this.minLongitude,
                  maxY: this.maxLatitude,
                  maxX: this.maxLongitude
                };
              }

              toGeoJSON() {
                return {
                  "type": "Feature",
                  "properties": {},
                  "geometry": {
                    "type": "Polygon",
                    "coordinates": [[[this.minLongitude, this.minLatitude], [this.maxLongitude, this.minLatitude], [this.maxLongitude, this.maxLatitude], [this.minLongitude, this.maxLatitude], [this.minLongitude, this.minLatitude]]]
                  }
                };
              }
              /**
               * Determine if equal to the provided bounding box
               * @param  {BoundingBox} boundingBox bounding boundingBox
               * @return {Boolean}             true if equal, false if not
               */


              equals(boundingBox) {
                if (!boundingBox) {
                  return false;
                }

                if (this === boundingBox) {
                  return true;
                }

                return this.maxLatitude === boundingBox.maxLatitude && this.minLatitude === boundingBox.minLatitude && this.maxLongitude === boundingBox.maxLongitude && this.maxLatitude === boundingBox.maxLatitude;
              }

              projectBoundingBox(from, to) {
                if (from && from !== 'undefined' && to && to !== 'undefined') {
                  var toProj = to.toUpperCase ? proj4$2(to) : to;
                  var fromProj = from.toUpperCase ? proj4$2(from) : from;

                  if (to.toUpperCase && to.toUpperCase() === 'EPSG:3857' && from.toUpperCase && from.toUpperCase() === 'EPSG:4326') {
                    this.maxLatitude = this.maxLatitude > 85.0511 ? 85.0511 : this.maxLatitude;
                    this.minLatitude = this.minLatitude < -85.0511 ? -85.0511 : this.minLatitude;
                    this.minLongitude = this.minLongitude < -180.0 ? -180.0 : this.minLongitude;
                    this.maxLongitude = this.maxLongitude > 180.0 ? 180.0 : this.maxLongitude;
                  }

                  var min = proj4$2(from, to, [this.minLongitude, this.minLatitude]);
                  var max = proj4$2(from, to, [this.maxLongitude, this.maxLatitude]);
                  var projected = new BoundingBox(min[0], max[0], min[1], max[1]);
                  return projected;
                } else {
                  return this;
                }
              }

            }

            /**
             * @module tiles/matrixset
             * @see module:dao/dao
             */
            /**
             * `TileMatrixSet` models the [`gpkg_tile_matrix_set`](https://www.geopackage.org/spec121/index.html#_tile_matrix_set)
             * table.  A row in this table defines the minimum bounding box (min_x, min_y,
             * max_x, max_y) and spatial reference system (srs_id) for all tiles in a
             * [tile pyramid](https://www.geopackage.org/spec121/index.html#tiles_user_tables)
             * user data table.  While the parent [Contents]{@link module:core/contents~Contents}
             * row/object also defines a bounding box, the tile matrix set bounding box is
             * used as the reference for calculating tile column/row matrix coordinates, so
             * (min_x, max_y) in SRS coordinates would be the upper-left corner of the tile
             * at tile matrix coordinate (0, 0).  The parent `Contents` bounding box may be
             * smaller or larger than the `TileMatrixSet` bounding box, and its purpose is
             * to guide a user-facing application to the target region of the tile pyramid.
             * The [`srs_id`]{@link module:tiles/matrixset~TileMatrixSet#srs_id} of the `TileMatrixSet`, on the other hand, must
             * match that of the parent [`Contents`]{@link module:core/contents~Contents#srs_id}.
             *
             * @class TileMatrixSet
             */

            var TileMatrixSet = function () {
              /**
               * Name of the [tile pyramid user data table](https://www.geopackage.org/spec121/index.html#tiles_user_tables)
               * that stores the tiles
               * @member {string}
               */
              this.table_name;
              /**
               * Unique identifier for each Spatial Reference System within a GeoPackage
               * @member {SRSRef}
               */

              this.srs_id;
              /**
               * Bounding box minimum easting or longitude for all content in table_name
               * @member {Number}
               */

              this.min_x;
              /**
               * Bounding box minimum northing or latitude for all content in table_name
               * @member {Number}
               */

              this.min_y;
              /**
               * Bounding box maximum easting or longitude for all content in table_name
               * @member {Number}
               */

              this.max_x;
              /**
               * Bounding box maximum northing or latitude for all content in table_name
               * @member {Number}
               */

              this.max_y;
            };

            TileMatrixSet.prototype.setBoundingBox = function (boundingBox) {
              this.min_x = boundingBox.minLongitude;
              this.max_x = boundingBox.maxLongitude;
              this.min_y = boundingBox.minLatitude;
              this.max_y = boundingBox.maxLatitude;
            };

            TileMatrixSet.prototype.getBoundingBox = function () {
              return new BoundingBox(this.min_x, this.max_x, this.min_y, this.max_y);
            };

            TileMatrixSet.prototype.setContents = function (contents) {
              if (contents && contents.data_type === 'tiles') {
                this.table_name = contents.table_name;
              }
            };
            /**
             * Tile Matrix Set Data Access Object
             * @class TileMatrixSetDao
             * @extends {module:dao/dao~Dao}
             */


            class TileMatrixSetDao extends Dao {
              createObject() {
                console.log('create it!');
                return new TileMatrixSet();
              }
              /**
               * Return an array of names of [tile tables]{@link module:tiles/user/tileTable~TileTable}
               * in this DAO's [GeoPackage]{@link module:tiles/matrixset~TileMatrixSetDao#geoPackage}.
               *
               * @returns {string[]} array of table names
               */


              getTileTables() {
                var tableNames = [];

                for (var result of this.connection.each('select ' + TileMatrixSetDao.COLUMN_TABLE_NAME + ' from ' + TileMatrixSetDao.TABLE_NAME)) {
                  tableNames.push(result[TileMatrixSetDao.COLUMN_TABLE_NAME]);
                }

                return tableNames;
              }

              getProjection(tileMatrixSet) {
                var srs = this.getSrs(tileMatrixSet);
                if (!srs) return;
                var srsDao = this.geoPackage.getSpatialReferenceSystemDao();
                return srsDao.getProjection(srs);
              }
              /**
               * Get the Spatial Reference System of the Tile Matrix set
               * @param  {TileMatrixSet}   tileMatrixSet tile matrix set
               */


              getSrs(tileMatrixSet) {
                var dao = this.geoPackage.getSpatialReferenceSystemDao();
                return dao.queryForId(tileMatrixSet.srs_id);
              }

              getContents(tileMatrixSet) {
                var dao = this.geoPackage.getContentsDao();
                return dao.queryForId(tileMatrixSet.table_name);
              }

            }

            TileMatrixSet.TABLE_NAME = "tableName";
            TileMatrixSet.MIN_X = "minX";
            TileMatrixSet.MIN_Y = "minY";
            TileMatrixSet.MAX_X = "maxX";
            TileMatrixSet.MAX_Y = "maxY";
            TileMatrixSet.SRS_ID = "srsId";
            TileMatrixSetDao.TABLE_NAME = "gpkg_tile_matrix_set";
            TileMatrixSetDao.COLUMN_PK = "table_name";
            TileMatrixSetDao.COLUMN_TABLE_NAME = "table_name";
            TileMatrixSetDao.COLUMN_SRS_ID = "srs_id";
            TileMatrixSetDao.COLUMN_MIN_X = "min_x";
            TileMatrixSetDao.COLUMN_MIN_Y = "min_y";
            TileMatrixSetDao.COLUMN_MAX_X = "max_x";
            TileMatrixSetDao.COLUMN_MAX_Y = "max_y";
            TileMatrixSetDao.prototype.gpkgTableName = 'gpkg_tile_matrix_set';
            TileMatrixSetDao.prototype.idColumns = [TileMatrixSetDao.COLUMN_PK];
            TileMatrixSetDao.prototype.columns = [TileMatrixSetDao.COLUMN_TABLE_NAME, TileMatrixSetDao.COLUMN_SRS_ID, TileMatrixSetDao.COLUMN_MIN_X, TileMatrixSetDao.COLUMN_MIN_Y, TileMatrixSetDao.COLUMN_MAX_X, TileMatrixSetDao.COLUMN_MAX_Y];
            TileMatrixSetDao.prototype.columnToPropertyMap = {};
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_TABLE_NAME] = TileMatrixSet.TABLE_NAME;
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_SRS_ID] = TileMatrixSet.SRS_ID;
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_MIN_X] = TileMatrixSet.MIN_X;
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_MIN_Y] = TileMatrixSet.MIN_Y;
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_MAX_X] = TileMatrixSet.MAX_X;
            TileMatrixSetDao.prototype.columnToPropertyMap[TileMatrixSetDao.COLUMN_MAX_Y] = TileMatrixSet.MAX_Y;

            /**
             * @module tiles/matrix
             * @see module:dao/dao
             */
            /**
             * Tile Matrix object. Documents the structure of the tile matrix at each zoom
             * level in each tiles table. It allows GeoPackages to contain rectangular as
             * well as square tiles (e.g. for better representation of polar regions). It
             * allows tile pyramids with zoom levels that differ in resolution by factors of
             * 2, irregular intervals, or regular intervals other than factors of 2.
             * @class TileMatrix
             */

            var TileMatrix = function () {
              /**
               * Tile Pyramid User Data Table Name
               * @member {string}
               */
              this.table_name;
              /**
               * 0 ⇐ zoom_level ⇐ max_level for table_name
               * @member {Number}
               */

              this.zoom_level;
              /**
               * Number of columns (>= 1) in tile matrix at this zoom level
               * @member {Number}
               */

              this.matrix_width;
              /**
               * Number of rows (>= 1) in tile matrix at this zoom level
               * @member {Number}
               */

              this.matrix_height;
              /**
               * Tile width in pixels (>= 1)for this zoom level
               * @member {Number}
               */

              this.tile_width;
              /**
               * Tile height in pixels (>= 1)for this zoom level
               * @member {Number}
               */

              this.tile_height;
              /**
               * In t_table_name srid units or default meters for srid 0 (>0)
               * @member {Number}
               */

              this.pixel_x_size;
              /**
               * In t_table_name srid units or default meters for srid 0 (>0)
               * @member {Number}
               */

              this.pixel_y_size;
            };
            /**
             * Tile Matrix Set Data Access Object
             * @class TileMatrixDao
             * @extends {module:dao/dao~Dao}
             */


            class TileMatrixDao extends Dao {
              createObject() {
                return new TileMatrix();
              }
              /**
               * get the Contents of the Tile matrix
               * @param  {tileMatrix} tileMatrix the tile matrix
               * @param  {Function} callback returns the contents
               */


              getContents(tileMatrix) {
                var dao = this.geoPackage.getContentsDao();
                return dao.queryForId(tileMatrix.table_name);
              }

              getTileMatrixSet(tileMatrix) {
                var dao = this.geoPackage.getTileMatrixSetDao();
                return dao.queryForId(tileMatrix.table_name);
              }

            }

            TileMatrixDao.TABLE_NAME = "gpkg_tile_matrix";
            TileMatrixDao.COLUMN_PK1 = "table_name";
            TileMatrixDao.COLUMN_PK2 = "zoom_level";
            TileMatrixDao.COLUMN_TABLE_NAME = "table_name";
            TileMatrixDao.COLUMN_ZOOM_LEVEL = "zoom_level";
            TileMatrixDao.COLUMN_MATRIX_WIDTH = "matrix_width";
            TileMatrixDao.COLUMN_MATRIX_HEIGHT = "matrix_height";
            TileMatrixDao.COLUMN_TILE_WIDTH = "tile_width";
            TileMatrixDao.COLUMN_TILE_HEIGHT = "tile_height";
            TileMatrixDao.COLUMN_PIXEL_X_SIZE = "pixel_x_size";
            TileMatrixDao.COLUMN_PIXEL_Y_SIZE = "pixel_y_size";
            TileMatrix.TABLE_NAME = 'tableName';
            TileMatrix.ZOOM_LEVEL = 'zoomLevel';
            TileMatrix.MATRIX_WIDTH = 'matrixWidth';
            TileMatrix.MATRIX_HEIGHT = 'matrixHeight';
            TileMatrix.TILE_WIDTH = 'tileWidth';
            TileMatrix.TILE_HEIGHT = 'tileHeight';
            TileMatrix.PIXEL_X_SIZE = 'pixelXSize';
            TileMatrix.PIXEL_Y_SIZE = 'pixelYSize';
            TileMatrixDao.prototype.gpkgTableName = 'gpkg_tile_matrix';
            TileMatrixDao.prototype.idColumns = [TileMatrixDao.COLUMN_PK1, TileMatrixDao.COLUMN_PK2];
            TileMatrixDao.prototype.columns = [TileMatrixDao.COLUMN_TABLE_NAME, TileMatrixDao.COLUMN_ZOOM_LEVEL, TileMatrixDao.COLUMN_MATRIX_WIDTH, TileMatrixDao.COLUMN_MATRIX_HEIGHT, TileMatrixDao.COLUMN_TILE_WIDTH, TileMatrixDao.COLUMN_TILE_HEIGHT, TileMatrixDao.COLUMN_PIXEL_X_SIZE, TileMatrixDao.COLUMN_PIXEL_Y_SIZE];

            /**
             * Contents module.
             * @module core/contents
             */
            /**
             * The Contents class models rows in the [`gpkg_contents`](https://www.geopackage.org/spec121/index.html#_contents)
             * table.  The contents table stores identifying and descriptive information
             * that an application can display to a user in a menu of geospatial data
             * available in a GeoPackage.
             * @class Contents
             * @see https://www.geopackage.org/spec121/index.html#_contents
             */

            class Contents {
              constructor() {
                /**
                 * the name of the tiles, or feature table
                 * @member {string}
                 */
                this.table_name;
                /**
                 * Type of data stored in the table:. “features” per clause Features,
                 * “tiles” per clause Tiles, or an implementer-defined value for other data
                 * tables per clause in an Extended GeoPackage.
                 * @member {string}
                 */

                this.data_type;
                /**
                 * A human-readable identifier (e.g. short name) for the table_name content
                 * @member {string}
                 */

                this.identifier;
                /**
                 * A human-readable description for the table_name content
                 * @member {string}
                 */

                this.description;
                /**
                 * timestamp value in ISO 8601 format as defined by the strftime function
                 * %Y-%m-%dT%H:%M:%fZ format string applied to the current time
                 * @member {Date}
                 */

                this.last_change;
                /**
                 * Bounding box minimum easting or longitude for all content in table_name
                 * @member {Number}
                 */

                this.min_x;
                /**
                 * Bounding box minimum northing or latitude for all content in table_name
                 * @member {Number}
                 */

                this.min_y;
                /**
                 * Bounding box maximum easting or longitude for all content in table_name
                 * @member {Number}
                 */

                this.max_x;
                /**
                 * Bounding box maximum northing or latitude for all content in table_name
                 * @member {Number}
                 */

                this.max_y;
                /**
                 * Unique identifier for each Spatial Reference System within a GeoPackage
                 * @member {SRSRef}
                 */

                this.srs_id;
              }

            }
            /**
             * Contents object. Provides identifying and descriptive information that an
             * application can display to a user in a menu of geospatial data that is
             * available for access and/or update.
             * @class ContentsDao
             * @extends {module:dao/dao~Dao}
             */


            class ContentsDao extends Dao {
              /**
               * Creates a new Contents object
               * @return {module:core/contents~Contents} new Contents object
               */
              createObject() {
                return new Contents();
              }
              /**
               * Get table names by table type
               * @param  {string} [tableType] table type to query for
               * @return {string[]}           Array of table names
               */


              getTables(tableType) {
                var results;

                if (tableType) {
                  var fieldValues = new ColumnValues();
                  fieldValues.addColumn(ContentsDao.COLUMN_DATA_TYPE, tableType);
                  results = this.queryForColumns('table_name', fieldValues);
                } else {
                  results = this.queryForColumns('table_name');
                }

                var tableNames = [];

                for (var i = 0; i < results.length; i++) {
                  tableNames.push(results[i].table_name);
                }

                return tableNames;
              }
              /**
               * Returns the proj4 projection for the Contents
               * @param  {module:core/contents~Contents} contents Contents to get the projection from
               * @return {proj4}          proj4 projection
               */


              getProjection(contents) {
                var srs = this.getSrs(contents);
                var srsDao = this.geoPackage.getSpatialReferenceSystemDao();
                return srsDao.getProjection(srs);
              }
              /**
               * Get the SpatialReferenceSystemDao for the Contents
               * @param  {module:core/contents~Contents} contents Contents to get the SpatialReferenceSystemDao from
               * @return {module:core/srs~SpatialReferenceSystemDao}
               */


              getSrs(contents) {
                var dao = this.geoPackage.getSpatialReferenceSystemDao();
                return dao.queryForId(contents.srs_id);
              }
              /**
               * Get the GeometryColumns for the Contents
               * @param  {module:core/contents~Contents} contents Contents
               * @return {module:features/columns~GeometryColumns}
               */


              getGeometryColumns(contents) {
                var dao = this.geoPackage.getGeometryColumnsDao(); // TODO what is causing this to need to be here and not up in the require section

                var results = dao.queryForAllEq(GeometryColumnsDao.COLUMN_TABLE_NAME, contents.table_name);
                if (!results || !results.length) return;
                var gc = dao.createObject();
                dao.populateObjectFromResult(gc, results[0]);
                return gc;
              }
              /**
               * Get the TileMatrixSet for the Contents
               * @param  {module:core/contents~Contents} contents Contents
               * @return {module:tiles/matrixset~TileMatrixSet}
               */


              getTileMatrixSet(contents) {
                var dao = this.geoPackage.getTileMatrixSetDao();
                var results = dao.queryForAllEq(TileMatrixSetDao.COLUMN_TABLE_NAME, contents.table_name);
                if (!results || !results.length) return;
                var gc = dao.createObject();
                dao.populateObjectFromResult(gc, results[0]);
                return gc;
              }
              /**
               * Get the TileMatrix for the Contents
               * @param  {module:core/contents~Contents} contents Contents
               * @return {module:tiles/matrix~TileMatrix}
               */


              getTileMatrix(contents) {
                var dao = this.geoPackage.getTileMatrixDao();
                var results = dao.queryForAllEq(TileMatrixDao.COLUMN_TABLE_NAME, contents.table_name);
                if (!results || !results.length) return;
                var tileMatricies = [];

                for (var i = 0; i < results.length; i++) {
                  var gc = dao.createObject();
                  dao.populateObjectFromResult(gc, results[i]);
                  tileMatricies.push(gc);
                }

                return tileMatricies;
              }

            }

            ContentsDao.TABLE_NAME = "gpkg_contents";
            ContentsDao.COLUMN_PK = "table_name";
            ContentsDao.COLUMN_TABLE_NAME = "table_name";
            ContentsDao.COLUMN_DATA_TYPE = "data_type";
            ContentsDao.COLUMN_IDENTIFIER = "identifier";
            ContentsDao.COLUMN_DESCRIPTION = "description";
            ContentsDao.COLUMN_LAST_CHANGE = "last_change";
            ContentsDao.COLUMN_MIN_X = "min_x";
            ContentsDao.COLUMN_MIN_Y = "min_y";
            ContentsDao.COLUMN_MAX_X = "max_x";
            ContentsDao.COLUMN_MAX_Y = "max_y";
            ContentsDao.COLUMN_SRS_ID = "srs_id";
            ContentsDao.GPKG_CDT_FEATURES_NAME = "features";
            ContentsDao.GPKG_CDT_TILES_NAME = "tiles";
            ContentsDao.GPKG_CDT_ATTRIBUTES_NAME = "attributes";
            ContentsDao.prototype.gpkgTableName = ContentsDao.TABLE_NAME;
            ContentsDao.prototype.idColumns = [ContentsDao.COLUMN_PK];
            Contents.TABLE_NAME = ContentsDao.TABLE_NAME;

            /**
             * @module extension/relatedTables
             */
            /**
             * Spec supported User-Defined Related Data Tables
             * @class
             */

            var RelationType = function () {};
            /**
             * Link features with other features
             * @type {Object}
             */

            RelationType.FEATURES = {
              name: 'features',
              dataType: ContentsDao.GPKG_CDT_FEATURES_NAME
            };
            /**
             * Relate sets of tabular text or numeric data
             * @type {Object}
             */

            RelationType.SIMPLE_ATTRIBUTES = {
              name: 'simple_attributes',
              dataType: ContentsDao.GPKG_CDT_ATTRIBUTES_NAME
            };
            /**
             * Relate features or attributes to multimedia files such as pictures and videos
             * @type {Object}
             */

            RelationType.MEDIA = {
              name: 'media',
              dataType: ContentsDao.GPKG_CDT_ATTRIBUTES_NAME
            };
            /**
             * Attribute type relation
             * @type {Object}
             */

            RelationType.ATTRIBUTES = {
              name: 'attributes',
              dataType: ContentsDao.GPKG_CDT_ATTRIBUTES_NAME
            };
            /**
             * Tile type relation
             * @type {Object}
             */

            RelationType.TILES = {
              name: 'tiles',
              dataType: ContentsDao.GPKG_CDT_TILES_NAME
            };
            /**
             * Get the relation type from the name
             * @param  {string} name name
             * @return {module:extension/relatedTables~RelationType}
             */

            RelationType.fromName = function (name) {
              return RelationType[name.toUpperCase()];
            };

            /**
             * mediaTable module.
             * @module extension/relatedTables
             */
            /**
             * Media Requirements Class User-Defined Related Data Table
             * @class
             * @extends {module:extension/relatedTables~UserRelatedTable}
             * @param  {string} tableName table name
             * @param  {module:user/userColumn~UserColumn[]} columns   media columns
             * @param {string[]} requiredColumns required column names
             */

            var MediaTable = function (tableName, columns, requiredColumns) {
              UserRelatedTable.call(this, tableName, MediaTable.RELATION_TYPE.name, MediaTable.RELATION_TYPE.dataType, columns, requiredColumns);
            };

            util.inherits(MediaTable, UserRelatedTable);
            /**
             * Create a media table with a minimum required columns followed by the additional columns
             * @param  {string} tableName         name of the table
             * @param  {module:user/userColumn~UserColumn[]} additionalColumns additional columns
             * @return {module:extension/relatedTables~MediaTable}
             */

            MediaTable.create = function (tableName, additionalColumns) {
              var columns = MediaTable.createRequiredColumns();

              if (additionalColumns) {
                columns = columns.concat(additionalColumns);
              }

              return new MediaTable(tableName, columns, MediaTable.requiredColumns());
            };
            /**
             * Get the required columns
             * @param  {string} [idColumnName=id] id column name
             * @return {string[]}
             */


            MediaTable.requiredColumns = function (idColumnName) {
              var requiredColumns = [];
              requiredColumns.push(idColumnName || MediaTable.COLUMN_ID);
              requiredColumns.push(MediaTable.COLUMN_DATA);
              requiredColumns.push(MediaTable.COLUMN_CONTENT_TYPE);
              return requiredColumns;
            };
            /**
             * Get the number of required columns
             * @return {Number}
             */


            MediaTable.numRequiredColumns = function () {
              return MediaTable.requiredColumns().length;
            };
            /**
             * Create the required columns
             * @param  {Number} [startingIndex=0] starting index of the required columns
             * @param  {string} [idColumnName=id]  id column name
             * @return {module:user/userColumn~UserColumn[]}
             */


            MediaTable.createRequiredColumns = function (startingIndex, idColumnName) {
              startingIndex = startingIndex || 0;
              return [MediaTable.createIdColumn(startingIndex++, idColumnName || MediaTable.COLUMN_ID), MediaTable.createDataColumn(startingIndex++), MediaTable.createContentTypeColumn(startingIndex++)];
            };
            /**
             * Create the primary key id column
             * @param  {Number} index        index of the column
             * @param  {string} idColumnName name of the id column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.createIdColumn = function (index, idColumnName) {
              return UserColumn.createPrimaryKeyColumnWithIndexAndName(index, idColumnName);
            };
            /**
             * Create the data column
             * @param  {Number} index        index of the column
             * @param  {string} idColumnName name of the id column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.createDataColumn = function (index) {
              return UserColumn.createColumnWithIndex(index, MediaTable.COLUMN_DATA, types.GPKGDataType.GPKG_DT_BLOB, true);
            };
            /**
             * Create the content type column
             * @param  {Number} index        index of the column
             * @param  {string} idColumnName name of the id column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.createContentTypeColumn = function (index) {
              return UserColumn.createColumnWithIndex(index, MediaTable.COLUMN_CONTENT_TYPE, types.GPKGDataType.GPKG_DT_TEXT, true);
            };
            /**
             * Get the primary key id column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.prototype.getIdColumn = function () {
              return this.getPkColumn();
            };
            /**
             * Get the data column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.prototype.getDataColumn = function () {
              return this.getColumnWithColumnName(MediaTable.COLUMN_DATA);
            };
            /**
             * Get the content type column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaTable.prototype.getContentTypeColumn = function () {
              return this.getColumnWithColumnName(MediaTable.COLUMN_CONTENT_TYPE);
            };

            MediaTable.RELATION_TYPE = RelationType.MEDIA;
            MediaTable.COLUMN_ID = 'id';
            MediaTable.COLUMN_DATA = 'data';
            MediaTable.COLUMN_CONTENT_TYPE = 'content_type';
            MediaTable.prototype.TABLE_TYPE = 'media';

            /**
             * simpleAttributesTable module.
             * @module extension/relatedTables
             */
            /**
             * Simple Attributes Requirements Class User-Defined Related Data Table
             * @class
             * @extends {module:extension/relatedTables~UserRelatedTable}
             * @param  {string} tableName table name
             * @param  {module:user/userColumn~UserColumn[]} columns   attribute columns
             * @param {string[]} requiredColumns required column names
             */

            var SimpleAttributesTable = function (tableName, columns, requiredColumns) {
              UserRelatedTable.call(this, tableName, SimpleAttributesTable.RELATION_TYPE.name, SimpleAttributesTable.RELATION_TYPE.dataType, columns, requiredColumns);
              this.validateColumns();
            };

            util.inherits(SimpleAttributesTable, UserRelatedTable);
            /**
             * Create a simple attributes table with the columns
             * @param  {string} tableName name of the table
             * @param  {module:user/userColumn~UserColumn[]} additionalColumns additional columns
             * @return {module:extension/relatedTables~SimpleAttributesTable}
             */

            SimpleAttributesTable.create = function (tableName, additionalColumns) {
              var tableColumns = SimpleAttributesTable.createRequiredColumns(0);

              if (additionalColumns) {
                tableColumns = tableColumns.concat(additionalColumns);
              }

              return new SimpleAttributesTable(tableName, tableColumns, SimpleAttributesTable.requiredColumns());
            };
            /**
             * Get the required columns
             * @param  {string} [idColumnName=id] id column name
             * @return {string[]}
             */


            SimpleAttributesTable.requiredColumns = function (idColumnName) {
              var requiredColumns = [];
              requiredColumns.push(idColumnName || SimpleAttributesTable.COLUMN_ID);
              return requiredColumns;
            };
            /**
             * Get the number of required columns
             * @return {Number}
             */


            SimpleAttributesTable.numRequiredColumns = function () {
              return SimpleAttributesTable.requiredColumns().length;
            };
            /**
             * Create the required columns
             * @param  {Number} [startingIndex=0] starting index of the required columns
             * @param  {string} [idColumnName=id]  id column name
             * @return {module:user/userColumn~UserColumn[]}
             */


            SimpleAttributesTable.createRequiredColumns = function (startingIndex, idColumnName) {
              startingIndex = startingIndex || 0;
              return [SimpleAttributesTable.createIdColumn(startingIndex++, idColumnName || SimpleAttributesTable.COLUMN_ID)];
            };
            /**
             * Create the primary key id column
             * @param  {Number} index        index of the column
             * @param  {string} idColumnName name of the id column
             * @return {module:user/userColumn~UserColumn}
             */


            SimpleAttributesTable.createIdColumn = function (index, idColumnName) {
              return UserColumn.createPrimaryKeyColumnWithIndexAndName(index, idColumnName);
            };
            /**
             * Validate that Simple Attributes columns to verify at least one non id
             * column exists and that all columns are simple data types
             */


            SimpleAttributesTable.prototype.validateColumns = function () {
              var columns = this.columns;

              if (columns.length < 2) {
                throw new Error('Simple Attributes Tables require at least one non id column');
              }

              for (var i = 0; i < columns.length; i++) {
                var column = columns[i];

                if (!SimpleAttributesTable.isSimple(column)) {
                  throw new Error('Simple Attributes Tables only support simple data types. Column: ' + column.name + ', Non Simple Data Type: ' + column.dataType);
                }
              }
            };
            /**
             * Get the column index of the id column
             * @return {Number}
             */


            SimpleAttributesTable.prototype.getIdColumnIndex = function () {
              return this.pkIndex;
            };
            /**
             * Get the primary key id column
             * @return {module:user/userColumn~UserColumn}
             */


            SimpleAttributesTable.prototype.getIdColumn = function () {
              return this.getPkColumn();
            };
            /**
             * Determine if the column is a simple column
             * @param  {module:user/userColumn~UserColumn} column column to check
             * @return {Boolean}
             */


            SimpleAttributesTable.isSimple = function (column) {
              return column.notNull && SimpleAttributesTable.isSimpleDataType(column.dataType);
            };
            /**
             * Determine if the data type is a simple type: TEXT, INTEGER, or REAL
             * @param {module:db/dataTypes~GPKGDataType}
             * @return {Boolean}
             */


            SimpleAttributesTable.isSimpleDataType = function (dataType) {
              return dataType !== types.GPKGDataType.GPKG_DT_BLOB && dataType !== types.GPKGDataType.GPKG_DT_GEOMETRY;
            };

            SimpleAttributesTable.RELATION_TYPE = RelationType.SIMPLE_ATTRIBUTES;
            SimpleAttributesTable.COLUMN_ID = 'id';
            SimpleAttributesTable.prototype.TABLE_TYPE = 'simple_attributes';

            /**
             * userTableReader module.
             * @module user/userTableReader
             */
            /**
             * @class
             * @param  {string} tableName       name of the table
             * @param  {string[]} requiredColumns array of required column names
             */

            var UserTableReader = function (tableName, requiredColumns) {
              this.table_name = tableName;
              this.requiredColumns = requiredColumns;
            };

            var GPKG_UTR_CID = "cid";
            var GPKG_UTR_NAME = "name";
            var GPKG_UTR_TYPE = "type";
            var GPKG_UTR_NOT_NULL = "notnull";
            var GPKG_UTR_PK = "pk";
            var GPKG_UTR_DFLT_VALUE = "dflt_value";
            /**
             * Read the table
             * @param  {object} db db connection
             * @return {module:user/userTable~UserTable}
             */

            UserTableReader.prototype.readTable = function (db) {
              var columnList = [];
              var results = db.all('PRAGMA table_info(\'' + this.table_name + '\')');

              for (var i = 0; i < results.length; i++) {
                var result = results[i];
                var index = result[GPKG_UTR_CID];
                var name = result[GPKG_UTR_NAME];
                var type = result[GPKG_UTR_TYPE];
                var notNull = result[GPKG_UTR_NOT_NULL] === 1;
                var primarykey = result[GPKG_UTR_PK] === 1;
                var max = undefined;

                if (type && type.lastIndexOf(')') === type.length - 1) {
                  var maxStart = type.indexOf('(');

                  if (maxStart > -1) {
                    var maxString = type.substring(maxStart + 1, type.length - 1);

                    if (maxString !== '') {
                      max = parseInt(maxString);
                      type = type.substring(0, maxStart);
                    }
                  }
                }

                var defaultValue = undefined;

                if (result[GPKG_UTR_DFLT_VALUE]) {
                  defaultValue = result[GPKG_UTR_DFLT_VALUE].replace(/\\'/g, '');
                }

                var column = this.createColumnWithResults(result, index, name, type, max, notNull, defaultValue, primarykey);
                columnList.push(column);
              }

              if (columnList.length === 0) {
                throw new Error('Table does not exist: ' + this.table_name);
              }

              return this.createTable(this.table_name, columnList, this.requiredColumns);
            };
            /**
             * Creates a user column
             * @param {Object} result
             * @param {Number} index        column index
             * @param {string} name         column name
             * @param {module:db/dataTypes~GPKGDataType} type         data type
             * @param {Number} max max value
             * @param {Boolean} notNull      not null
             * @param {Object} defaultValue default value or nil
             * @param {Boolean} primaryKey primary key
             * @return {module:user/custom~UserCustomColumn}
             */


            UserTableReader.prototype.createColumnWithResults = function (result, index, name, type, max, notNull, defaultValue, primaryKey) {
              var dataType = types.fromName(type);
              return new UserColumn(index, name, dataType, max, notNull, defaultValue, primaryKey);
            };
            /**
             * Create the table
             * @param  {string} tableName table name
             * @param  {module:dao/columnValues~ColumnValues[]} columns   columns
             * @return {module:user/userTable~UserTable}           the user table
             */


            UserTableReader.prototype.createTable = function (tableName, columns) {
              return new UserTable(tableName, columns);
            };

            /**
             * @module user/userDao
             */
            /**
             * Abstract User DAO for reading user tables
             * @class UserDao
             * @extends {module:dao/dao~Dao}
             * @param  {module:db/geoPackageConnection~GeoPackageConnection} connection        connection
             * @param  {string} table table name
             */

            class UserDao extends Dao {
              constructor(geoPackage, table) {
                super(geoPackage);
                this.table = table;
                this.table_name = table.table_name;
                this.gpkgTableName = table.table_name;

                if (table.getPkColumn()) {
                  this.idColumns = [table.getPkColumn().name];
                } else {
                  this.idColumns = [];
                }

                this.columns = table.columnNames;
              }
              /**
               * Creates a UserRow
               * @param  {Object} [results] results to create the row from if not specified, an empty row is created
               * @return {module:user/userRow~UserRow}
               */


              createObject(results) {
                if (results) {
                  return this.getRow(results);
                }

                return this.newRow();
              }
              /**
               * Sets the value in the row
               * @param  {module:user/userRow~UserRow} object      user row
               * @param  {Number} columnIndex index
               * @param  {Object} value       value
               */


              setValueInObject(object, columnIndex, value) {
                object.setValueNoValidationWithIndex(columnIndex, value);
              }
              /**
               * Get a user row from the current results
               * @param  {Object} results result to create the row from
               * @return {module:user/userRow~UserRow}         the user row
               */


              getRow(results) {
                var row = undefined;
                if (!this.table) return row;
                var columns = this.table.columnCount();
                var columnTypes = {};

                for (var i = 0; i < columns; i++) {
                  var column = this.table.getColumnWithIndex(i);
                  columnTypes[column.name] = column.dataType;
                }

                return this.newRowWithColumnTypes(columnTypes, results);
              }
              /**
               * Get the table for this dao
               * @return {module:user/userTable~UserTable}
               */


              getTable() {
                return this.table;
              }
              /**
               * Create a user row
               * @param  {module:db/dataTypes[]} columnTypes  column types
               * @param  {module:dao/columnValues~ColumnValues[]} values      values
               * @return {module:user/userRow~UserRow}             user row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new UserRow(this.table, columnTypes, values);
              }
              /**
               * Get the projection
               * @return {string} the projection
               */


              getProjection() {
                return this.projection;
              }
              /**
               * Links related rows together
               * @param  {module:user/userRow~UserRow} userRow             user row
               * @param  {module:user/userRow~UserRow} relatedRow          related row
               * @param  {string} relationType        relation type
               * @param  {string|module:extension/relatedTables~UserMappingTable} [mappingTable]        mapping table
               * @param  {module:dao/columnValues~ColumnValues} [mappingColumnValues] column values
               * @return {Promise}
               */


              linkRelatedRow(userRow, relatedRow, relationType, mappingTable, mappingColumnValues) {
                var rte = this.geoPackage.getRelatedTablesExtension();
                var baseTableName = userRow.table.table_name;
                var relatedTableName = relatedRow.table.table_name;
                var relationship = rte.getRelationshipBuilder().setBaseTableName(baseTableName).setRelatedTableName(relatedTableName).setRelationType(relationType);
                var mappingTableName;

                if (!mappingTable || typeof mappingTable === 'string') {
                  var mappingTable = mappingTable || baseTableName + '_' + relatedTableName;
                  relationship.setMappingTableName(mappingTable);
                  mappingTableName = mappingTable;
                } else {
                  relationship.setUserMappingTable(mappingTable);
                  mappingTableName = mappingTable.table_name;
                }

                return rte.addRelationship(relationship).then(function () {
                  var userMappingDao = rte.getMappingDao(mappingTableName);
                  var userMappingRow = userMappingDao.newRow();
                  userMappingRow.setBaseId(userRow.getId());
                  userMappingRow.setRelatedId(relatedRow.getId());

                  for (var column in mappingColumnValues) {
                    userMappingRow.setValueWithColumnName(column, mappingColumnValues[column]);
                  }

                  userMappingDao.create(userMappingRow);
                });
              }
              /**
               * Links a user row to a feature row
               * @param  {module:user/userRow~UserRow} userRow             user row
               * @param  {module:features/user/featureRow~FeatureRow} featureRow          feature row
               * @param  {string|module:extension/relatedTables~UserMappingTable} [mappingTable]        mapping table
               * @param  {module:dao/columnValues~ColumnValues} [mappingColumnValues] column values
               * @return {Promise}
               */


              linkFeatureRow(userRow, featureRow, mappingTable, mappingColumnValues) {
                return this.linkRelatedRow(userRow, featureRow, RelationType.FEATURES, mappingTable, mappingColumnValues);
              }
              /**
               * Links a user row to a media row
               * @param  {module:user/userRow~UserRow} userRow             user row
               * @param  {module:extension/relatedTables~MediaRow} mediaRow          media row
               * @param  {string|module:extension/relatedTables~UserMappingTable} [mappingTable]        mapping table
               * @param  {module:dao/columnValues~ColumnValues} [mappingColumnValues] column values
               * @return {Promise}
               */


              linkMediaRow(userRow, mediaRow, mappingTable, mappingColumnValues) {
                return this.linkRelatedRow(userRow, mediaRow, RelationType.MEDIA, mappingTable, mappingColumnValues);
              }
              /**
               * Links a user row to a simpleAttributes row
               * @param  {module:user/userRow~UserRow} userRow             user row
               * @param  {module:extension/relatedTables~SimpleAttributesRow} simpleAttributesRow          simple attributes row
               * @param  {string|module:extension/relatedTables~UserMappingTable} [mappingTable]        mapping table
               * @param  {module:dao/columnValues~ColumnValues} [mappingColumnValues] column values
               * @return {Promise}
               */


              linkSimpleAttributesRow(userRow, simpleAttrbuteRow, mappingTable, mappingColumnValues) {
                return this.linkRelatedRow(userRow, simpleAttrbuteRow, RelationType.SIMPLE_ATTRIBUTES, mappingTable, mappingColumnValues);
              }
              /**
               * Get all media rows that are linked to this user row
               * @param  {module:user/userRow~UserRow} userRow user row
               * @return {module:extension/relatedTables~MediaRow[]}
               */


              getLinkedMedia(userRow) {
                var mediaRelations = this.getMediaRelations();
                var rte = this.geoPackage.getRelatedTablesExtension();
                var linkedMedia = [];

                for (var i = 0; i < mediaRelations.length; i++) {
                  var mediaRelation = mediaRelations[i];
                  var mediaDao = rte.getMediaDao(mediaRelation);
                  var userMappingDao = rte.getMappingDao(mediaRelation.mapping_table_name);
                  var mappings = userMappingDao.queryByBaseId(userRow.getId());

                  for (var m = 0; m < mappings.length; m++) {
                    var relatedId = mappings[m].related_id;
                    linkedMedia.push(mediaDao.queryForId(relatedId));
                  }
                }

                return linkedMedia;
              }
              /**
               * Get all simple attribute rows that are linked to this user row
               * @param  {module:user/userRow~UserRow} userRow user row
               * @return {module:extension/relatedTables~SimpleAttributeRow[]}
               */


              getLinkedSimpleAttributes(userRow) {
                var simpleRelations = this.getSimpleAttributesRelations();
                var rte = this.geoPackage.getRelatedTablesExtension();
                var linkedSimpleAttributes = [];

                for (var i = 0; i < simpleRelations.length; i++) {
                  var simpleRelation = simpleRelations[i];
                  var simpleDao = rte.getSimpleAttributesDao(simpleRelation);
                  var userMappingDao = rte.getMappingDao(simpleRelation.mapping_table_name);
                  var mappings = userMappingDao.queryByBaseId(userRow.getId());

                  for (var m = 0; m < mappings.length; m++) {
                    var relatedId = mappings[m].related_id;
                    linkedSimpleAttributes.push(simpleDao.queryForId(relatedId));
                  }
                }

                return linkedSimpleAttributes;
              }
              /**
               * Get all feature rows that are linked to this user row
               * @param  {module:user/userRow~UserRow} userRow user row
               * @return {module:features/user/featureRow~FeatureRow[]}
               */


              getLinkedFeatures(userRow) {
                var featureRelations = this.getFeatureRelations();
                var rte = this.geoPackage.getRelatedTablesExtension();
                var linkedFeatures = [];

                for (var i = 0; i < featureRelations.length; i++) {
                  var featureRelation = featureRelations[i];
                  var featureDao = this.geoPackage.getFeatureDao(featureRelation.base_table_name);
                  var userMappingDao = rte.getMappingDao(featureRelation.mapping_table_name);
                  var mappings = userMappingDao.queryByBaseId(userRow.getId());

                  for (var m = 0; m < mappings.length; m++) {
                    var relatedId = mappings[m].related_id;
                    linkedFeatures.push(featureDao.queryForId(relatedId));
                  }
                }

                return linkedFeatures;
              }
              /**
               * Get all simple attribute relations to this table
               * @return {Object[]}
               */


              getSimpleAttributesRelations() {
                return this.getRelationsWithName(SimpleAttributesTable.RELATION_TYPE.name);
              }
              /**
               * Get all feature relations to this table
               * @return {Object[]}
               */


              getFeatureRelations() {
                return this.getRelationsWithName(RelationType.FEATURES.name);
              }
              /**
               * Get all media relations to this table
               * @return {Object[]}
               */


              getMediaRelations() {
                return this.getRelationsWithName(MediaTable.RELATION_TYPE.name);
              }
              /**
               * Get all relations to this table with the specified name
               * @param {string} name
               * @return {Object[]}
               */


              getRelationsWithName(name) {
                return this.geoPackage.getExtendedRelationDao().getBaseTableRelationsWithName(this.table_name, name);
              }
              /**
               * Get all relations to this table
               * @return {Object[]}
               */


              getRelations() {
                return this.geoPackage.getExtendedRelationDao().getBaseTableRelations(this.table_name);
              }
              /**
               * Gets the rows in this table by id
               * @param  {Number[]} ids ids to query for
               * @return {Object[]}
               */


              getRows(ids) {
                var rows = [];

                for (var i = 0; i < ids.length; i++) {
                  var row = this.queryForId(ids[i]);

                  if (row) {
                    rows.push(row);
                  }
                }

                return rows;
              }
              /**
               *  Get the approximate zoom level of where the bounding box of the user data fits into the world
               *
               *  @return zoom level
               */


              getZoomLevel() {
                return 0; // if(self.projection == nil){
                //     [NSException raise:@"No Projection" format:@"No projection was set which is required to determine the zoom level"];
                // }
                // GPKGBoundingBox * boundingBox = [self getBoundingBox];
                // if([self.projection.epsg intValue] == PROJ_EPSG_WORLD_GEODETIC_SYSTEM){
                //     boundingBox = [GPKGTileBoundingBoxUtils boundWgs84BoundingBoxWithWebMercatorLimits:boundingBox];
                // }
                // GPKGProjectionTransform * webMercatorTransform = [[GPKGProjectionTransform alloc] initWithFromProjection:self.projection andToEpsg:PROJ_EPSG_WEB_MERCATOR];
                // GPKGBoundingBox * webMercatorBoundingBox = [webMercatorTransform transformWithBoundingBox:boundingBox];
                // int zoomLevel = [GPKGTileBoundingBoxUtils getZoomLevelWithWebMercatorBoundingBox:webMercatorBoundingBox];
                // return zoomLevel;
              }
              /**
               * Get count of all rows in this table
               * @return {Number}
               */


              getCount() {
                return this.connection.count(this.table_name);
              }
              /**
               * Reads the table specified from the geopackage
               * @param  {module:geoPackage~GeoPackage} geoPackage      geopackage object
               * @param  {string} tableName       table name
               * @param  {string[]} requiredColumns required columns
               * @return {module:user/userDao~UserDao}
               */


              static readTable(geoPackage, tableName) {
                var reader = new UserTableReader(tableName);
                var userTable = reader.readTable(geoPackage.getDatabase());
                return new UserDao(geoPackage, userTable);
              }

            }

            /**
             * DataColumns module.
             * @module dataColumns
             */
            /**
             * Stores minimal application schema identifying, descriptive and MIME type
             * information about columns in user vector feature and tile matrix data tables
             * that supplements the data available from the SQLite sqlite_master table and
             * pragma table_info(table_name) SQL function. The gpkg_data_columns data CAN be
             * used to provide more specific column data types and value ranges and
             * application specific structural and semantic information to enable more
             * informative user menu displays and more effective user decisions on the
             * suitability of GeoPackage contents for specific purposes.
             * @class DataColumns
             */

            var DataColumns = function () {
              /**
               * the name of the tiles, or feature table
               * @member {string}
               */
              this.table_name;
              /**
               * the name of the table column
               * @member {string}
               */

              this.column_name;
              /**
               * A human-readable identifier (e.g. short name) for the column_name content
               * @member {string}
               */

              this.name;
              /**
               * A human-readable formal title for the column_name content
               * @member {string}
               */

              this.title;
              /**
               * A human-readable description for the table_name contente
               * @member {string}
               */

              this.description;
              /**
               * MIME type of columnName if BLOB type or NULL for other types
               * @member {string}
               */

              this.mime_type;
              /**
               * Case sensitive column value constraint name specified
               */

              this.constraint_name;
            };
            /**
             * Contents object. Provides identifying and descriptive information that an
             * application can display to a user in a menu of geospatial data that is
             * available for access and/or update.
             * @class
             * @param  {module:geoPackage~GeoPackage} geoPackage GeoPackage object
             * @extends {module:dao/dao~Dao}
             */


            class DataColumnsDao extends Dao {
              /**
               * Creates a new {module:dataColumns~DataColumns} object
               * @return {module:dataColumns~DataColumns}
               */
              createObject() {
                return new DataColumns();
              }
              /**
               * Get the Contents from the Data Columns
               * @param  {module:dataColumns~DataColumns} dataColumns data columns
               * @return {module:core/contents~Contents}             contents
               */


              getContents(dataColumns) {
                var cd = new ContentsDao(this.geoPackage);
                return cd.queryForId(dataColumns.table_name);
              }
              /**
               * Query by constraint name
               * @param  {String} constraintName     constraint name
               * @return {Iterator} iterator of database objects
               */


              queryByConstraintName(constraintName) {
                return this.queryForEach(DataColumnsDao.COLUMN_CONSTRAINT_NAME, constraintName);
              }
              /**
               * Get DataColumn by column name and table name
               * @param  {String} tableName  table name
               * @param  {String} columnName column name
               * @return {module:dataColumns~DataColumns}
               */


              getDataColumns(tableName, columnName) {
                var exists = this.isTableExists();

                if (!exists) {
                  return;
                }

                var where = this.buildWhereWithFieldAndValue(DataColumnsDao.COLUMN_TABLE_NAME, tableName) + ' and ' + this.buildWhereWithFieldAndValue(DataColumnsDao.COLUMN_COLUMN_NAME, columnName);
                var values = [tableName, columnName];
                var dataColumn;

                for (var row of this.queryWhere(where, values)) {
                  dataColumn = row;
                }

                return dataColumn;
              }

            }

            DataColumnsDao.TABLE_NAME = "gpkg_data_columns";
            DataColumnsDao.COLUMN_PK1 = "table_name";
            DataColumnsDao.COLUMN_PK2 = "column_name";
            DataColumnsDao.COLUMN_TABLE_NAME = "table_name";
            DataColumnsDao.COLUMN_COLUMN_NAME = "column_name";
            DataColumnsDao.COLUMN_NAME = "name";
            DataColumnsDao.COLUMN_TITLE = "title";
            DataColumnsDao.COLUMN_DESCRIPTION = "description";
            DataColumnsDao.COLUMN_MIME_TYPE = "mime_type";
            DataColumnsDao.COLUMN_CONSTRAINT_NAME = "constraint_name";
            DataColumnsDao.prototype.gpkgTableName = DataColumnsDao.TABLE_NAME;
            DataColumnsDao.prototype.idColumns = [DataColumnsDao.COLUMN_PK1, DataColumnsDao.COLUMN_PK2];

            /**
             * @module features/user/featureColumn
             */
            /**
             * Represents a user feature column
             * @class
             * @extends {module:user/userColumn~UserColumn}
             */

            const FeatureColumn = function (index, name, dataType, max, notNull, defaultValue, primaryKey, geometryType) {
              UserColumn.call(this, index, name, dataType, max, notNull, defaultValue, primaryKey);
              this.geometryType = geometryType;

              if (!geometryType && dataType === types.GPKGDataType.GPKG_DT_GEOMETRY) {
                throw new Error('Data or Geometry Type is required to create column: ' + name);
              }
            };

            util.inherits(FeatureColumn, UserColumn);

            FeatureColumn.prototype.getTypeName = function () {
              if (this.isGeometry()) {
                return this.geometryType;
              }

              return this.dataType !== undefined && types.name(this.dataType);
            };
            /**
             *  Create a new primary key column
             *
             *  @param {Number} index column index
             *  @param {string} name  column name
             *
             *  @return feature column
             */


            FeatureColumn.createPrimaryKeyColumnWithIndexAndName = function (index, name) {
              return new FeatureColumn(index, name, types.GPKGDataType.GPKG_DT_INTEGER, undefined, true, undefined, true);
            };
            /**
             *  Create a new geometry column
             *
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {WKBGeometryType} type         geometry type
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return feature column
             */


            FeatureColumn.createGeometryColumn = function (index, name, type, notNull, defaultValue) {
              return new FeatureColumn(index, name, type, undefined, notNull, defaultValue, false, type);
            };
            /**
             *  Create a new column
             *
             *  @param {Number} index column index
             *  @param {string} name column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Boolean} notNull not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return feature column
             */


            FeatureColumn.createColumnWithIndex = function (index, name, type, notNull, defaultValue) {
              return FeatureColumn.createColumnWithIndexAndMax(index, name, type, undefined, notNull, defaultValue);
            };
            /**
             *  Create a new column
             *
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Number} max max value
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return feature column
             */


            FeatureColumn.createColumnWithIndexAndMax = function (index, name, type, max, notNull, defaultValue) {
              return new FeatureColumn(index, name, type, max, notNull, defaultValue, false);
            };
            /**
             * Determine if this column is a geometry
             * @return {Boolean} true if a geometry column
             */


            FeatureColumn.prototype.isGeometry = function () {
              return this.geometryType !== undefined;
            };

            /**
             * GeoPackage Constants module.
             * @module dao/geoPackageConstants
             */

            /** @constant {string} GEOPACKAGE_EXTENSION Extension to GeoPackage files */
            exports.GEOPACKAGE_EXTENSION = 'gpkg';
            /** @constant {string} GEOPACKAGE_EXTENDED_EXTENSION Extension to GeoPackage extension files */

            exports.GEOPACKAGE_EXTENDED_EXTENSION = 'gpkx';
            /** @constant {string} APPLICATION_ID GeoPackage application id */

            exports.APPLICATION_ID = 'GPKG';
            /** @constant {string} USER_VERSION GeoPackage user version */

            exports.USER_VERSION = '10200';
            /** @constant {string} GEOPACKAGE_EXTENSION_AUTHOR GeoPackage author */

            exports.GEOPACKAGE_EXTENSION_AUTHOR = exports.GEOPACKAGE_EXTENSION;
            /** @constant {string} GEOMETRY_EXTENSION_PREFIX Geometry extension prefix */

            exports.GEOMETRY_EXTENSION_PREFIX = 'geom';
            /** @constant {string} GEOPACKAGE_GEOMETRY_MAGIX_NUMBER Expected magic number */

            exports.GEOPACKAGE_GEOMETRY_MAGIC_NUMBER = 'GP';
            /** @constant {string} GEOPACKAGE_GEOMETRY_VERSION_1 Expected version 1 value */

            exports.GEOPACKAGE_GEOMETRY_VERSION_1 = 0;
            /** @constant {string} SQLITE_HEADER_PREFIX SQLite header string prefix */

            exports.SQLITE_HEADER_PREFIX = 'SQLite format 3';

            var BIG_ENDIAN = 0;
            /**
             * GeoPackage Geometry Data
             */

            var GeometryData = function (buffer) {
              this.empty = true;
              this.byteOrder = BIG_ENDIAN;

              if (buffer) {
                this.fromData(buffer);
              }
            };

            GeometryData.prototype.setSrsId = function (srsId) {
              this.srsId = srsId;
            };

            GeometryData.prototype.setGeometry = function (wkbGeometry) {
              this.empty = false;
              this.geometry = wkbGeometry;
            };

            GeometryData.prototype.setEnvelope = function (envelope) {
              this.envelope = envelope;
            };

            GeometryData.prototype.toGeoJSON = function () {
              return this.geometry.toGeoJSON();
            };

            GeometryData.prototype.fromData = function (buffer) {
              this.buffer = buffer;

              if (buffer instanceof Uint8Array) {
                this.buffer = buffer = new Buffer(buffer);
              }

              var magicString = buffer.toString('ascii', 0, 2);

              if (magicString !== exports.GEOPACKAGE_GEOMETRY_MAGIC_NUMBER) {
                throw new Error('Unexpected GeoPackage Geometry magic number: ' + magicString + ', Expected: ' + exports.GEOPACKAGE_GEOMETRY_MAGIC_NUMBER);
              }

              var version = buffer.readUInt8(2);

              if (version !== exports.GEOPACKAGE_GEOMETRY_VERSION_1) {
                throw new Error('Unexpected GeoPackage Geometry version ' + version + ', Expected: ' + exports.GEOPACKAGE_GEOMETRY_VERSION_1);
              }

              var flags = buffer.readUInt8(3);
              var envelopeIndicator = this.readFlags(flags);
              this.srsId = buffer[this.byteOrder ? 'readUInt32LE' : 'readUInt32BE'](4);
              var envelopeAndOffset = this.readEnvelope(envelopeIndicator, buffer);
              this.envelope = envelopeAndOffset.envelope;
              var offset = envelopeAndOffset.offset;
              var wkbBuffer = buffer.slice(offset);

              try {
                this.geometry = Geometry.parse(wkbBuffer);
                this.geometryError = undefined;
              } catch (error) {
                this.geometryError = error.message;
                console.log('Error parsing geometry');
              }
            };

            GeometryData.prototype.toData = function () {
              var header = new Buffer(8); // Write GP as the 2 byte magic number

              header.write(exports.GEOPACKAGE_GEOMETRY_MAGIC_NUMBER); // Write a byte as the version value of 0 = version 1

              header.writeUInt8(exports.GEOPACKAGE_GEOMETRY_VERSION_1, 2); // Build and write a flags byte

              var flags = this.buildFlagsByte();
              header.writeUInt8(flags, 3); // write the 4 byte srs id

              header[this.byteOrder ? 'writeUInt32LE' : 'writeUInt32BE'](this.srsId, 4);
              var envelopeBuffer = this.writeEnvelope(this.envelope);
              var concatArray = [header, envelopeBuffer];

              try {
                concatArray.push(this.geometry.toWkb());
                this.geometryError = undefined;
              } catch (error) {
                this.geometryError = error.message;
              }

              this.buffer = Buffer.concat(concatArray);
              return this.buffer;
            };

            GeometryData.prototype.writeEnvelope = function () {
              if (!this.envelope) return new Buffer(0);
              var writeDoubleMethod = 'writeDouble' + (this.byteOrder ? 'LE' : 'BE');
              var length = 32;

              if (this.envelope.hasZ) {
                length += 16;
              }

              if (this.envelope.hasM) {
                length += 16;
              }

              var envelopeBuffer = new Buffer(length);
              envelopeBuffer[writeDoubleMethod](this.envelope.minX, 0);
              envelopeBuffer[writeDoubleMethod](this.envelope.maxX, 8);
              envelopeBuffer[writeDoubleMethod](this.envelope.minY, 16);
              envelopeBuffer[writeDoubleMethod](this.envelope.maxY, 24);
              var position = 32;

              if (this.envelope.hasZ) {
                envelopeBuffer[writeDoubleMethod](this.envelope.minZ, position);
                envelopeBuffer[writeDoubleMethod](this.envelope.maxZ, position + 8);
                position = 48;
              }

              if (this.envelope.hasM) {
                envelopeBuffer[writeDoubleMethod](this.envelope.minM, position);
                envelopeBuffer[writeDoubleMethod](this.envelope.maxM, position + 8);
              }

              return envelopeBuffer;
            };

            GeometryData.prototype.buildFlagsByte = function () {
              var flag = 0; // Add the binary type to bit 5, 0 for standard and 1 for extended

              var binaryType = this.extended ? 1 : 0;
              flag += binaryType << 5; // Add the empty geometry flag to bit 4, 0 for non-empty and 1 for empty

              var emptyValue = this.empty ? 1 : 0;
              flag += emptyValue << 4; // Add the envelope contents indicator code (3-bit unsigned integer to bits 3, 2, and 1)

              var envelopeIndicator = !this.envelope ? 0 : this.getIndicatorWithEnvelope(this.envelope);
              flag += envelopeIndicator << 1; // Add the byte order to bit 0, 0 for Big Endian and 1 for Little Endian

              var byteOrderValue = this.byteOrder === BIG_ENDIAN ? 0 : 1;
              flag += byteOrderValue;
              return flag;
            };

            GeometryData.prototype.getIndicatorWithEnvelope = function (envelope) {
              var indicator = 1;

              if (envelope.hasZ) {
                indicator++;
              }

              if (envelope.hasM) {
                indicator += 2;
              }

              return indicator;
            };

            GeometryData.prototype.readFlags = function (flagsInt) {
              // Verify the reserved bits at 7 and 6 are 0
              var reserved7 = flagsInt >> 7 & 1;
              var reserved6 = flagsInt >> 6 & 1;

              if (reserved7 !== 0 || reserved6 !== 0) {
                throw new Error('Unexpected GeoPackage Geometry flags. Flag bit 7 and 6 should both be 0, 7=' + reserved7 + ', 6=' + reserved6);
              } // Get the binary type from bit 5, 0 for standard and 1 for extended


              var binaryType = flagsInt >> 5 & 1;
              this.extended = binaryType == 1; // Get the empty geometry flag from bit 4, 0 for non-empty and 1 for
              // empty

              var emptyValue = flagsInt >> 4 & 1;
              this.empty = emptyValue == 1; // Get the envelope contents indicator code (3-bit unsigned integer from
              // bits 3, 2, and 1)

              var envelopeIndicator = flagsInt >> 1 & 7;

              if (envelopeIndicator > 4) {
                throw new Error('Unexpected GeoPackage Geometry flags. Envelope contents indicator must be between 0 and 4. Actual: ' + envelopeIndicator);
              } // Get the byte order from bit 0, 0 for Big Endian and 1 for Little Endian


              var byteOrderValue = flagsInt & 1;
              this.byteOrder = byteOrderValue;
              return envelopeIndicator;
            };

            GeometryData.prototype.readEnvelope = function (envelopeIndicator, buffer) {
              var readDoubleMethod = 'readDouble' + (this.byteOrder ? 'LE' : 'BE');
              var envelopeByteOffset = 8;
              var reads = 0;
              var envelopeAndOffset = {
                envelope: undefined,
                offset: envelopeByteOffset
              };

              if (envelopeIndicator <= 0) {
                return envelopeAndOffset;
              }

              var envelope = {}; // Read x and y values and create envelope

              envelope.minX = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              envelope.maxX = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              envelope.minY = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              envelope.maxY = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              envelope.hasZ = false;
              envelope.hasM = false;

              if (envelopeIndicator === 2 || envelopeIndicator === 4) {
                envelope.hasZ = true;
                envelope.minZ = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
                envelope.maxZ = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              } // Read m values


              if (envelopeIndicator === 3 || envelopeIndicator === 4) {
                envelope.hasM = true;
                envelope.minM = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
                envelope.maxM = buffer[readDoubleMethod](envelopeByteOffset + 8 * reads++);
              }

              envelopeAndOffset.envelope = envelope;
              envelopeAndOffset.offset = envelopeByteOffset + 8 * reads;
              return envelopeAndOffset;
            };

            /**
             * featureRow module.
             * @module features/user/featureRow
             */
            /**
             * Feature Row containing the values from a single result set row
             * @param  {FeatureTable} featureTable feature table
             * @param  {Array} columnTypes  column types
             * @param  {Array} values       values
             */

            var FeatureRow = function (featureTable, columnTypes, values) {
              UserRow.call(this, featureTable, columnTypes, values);
              this.featureTable = featureTable;
            };

            util.inherits(FeatureRow, UserRow);
            /**
             * Get the geometry column index
             * @return {Number} geometry column index
             */

            FeatureRow.prototype.getGeometryColumnIndex = function () {
              return this.featureTable.geometryIndex;
            };
            /**
             * Get the geometry column
             * @return {FeatureColumn} geometry column
             */


            FeatureRow.prototype.getGeometryColumn = function () {
              return this.featureTable.getGeometryColumn();
            };
            /**
             * Get the geometry
             * @return {Buffer} geometry data
             */


            FeatureRow.prototype.getGeometry = function () {
              return this.getValueWithIndex(this.featureTable.geometryIndex);
            };
            /**
             * set the geometry
             * @param {Buffer} geometryData geometry data
             */


            FeatureRow.prototype.setGeometry = function (geometryData) {
              this.setValueWithIndex(this.featureTable.geometryIndex, geometryData);
            };

            FeatureRow.prototype.toObjectValue = function (index, value) {
              var objectValue = value;
              var column = this.getColumnWithIndex(index);

              if (column.isGeometry() && value) {
                objectValue = new GeometryData(value);
              }

              return objectValue;
            };

            FeatureRow.prototype.toDatabaseValue = function (columnName) {
              var column = this.getColumnWithColumnName(columnName);
              var value = this.getValueWithColumnName(columnName);

              if (column.isGeometry() && value.toData) {
                return value.toData();
              } else if (column.dataType === types.GPKGDataType.BOOLEAN) {
                return value === true ? 1 : 0;
              }

              return value;
            };

            /**
             * Creates tables necessary for GeoPackages
             * @module db/tableCreator
             */
            /**
             * `TableCreator` provides methods for creating the various standard tables in
             * a GeoPackage database.
             *
             * @class
             * @param {module:geoPackage~GeoPackage} geopackage GeoPackage object
             */

            var TableCreator = function (geopackage) {
              this.geopackage = geopackage;
              this.connection = geopackage.getDatabase();
            };
            /**
             * Creates all required tables and Spatial Reference Systems, in addition to EPSG:3857
             * @return {Promise<Boolean>}
             */

            TableCreator.prototype.createRequired = function () {
              var dao = new SpatialReferenceSystemDao(this.geopackage);
              return Promise.all([this.createSpatialReferenceSystem(), this.createContents()]).then(function () {
                // Create the required Spatial Reference Systems (spec Requirement 11)
                dao.createUndefinedGeographic();
                dao.createWgs84();
                dao.createUndefinedCartesian(); // not required but very common

                dao.createWebMercator();
                return true;
              });
            };
            /**
             * Creates the spatial reference system tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createSpatialReferenceSystem = function () {
              return this.createTable('spatial_reference_system');
            };
            /**
             * Creates the contents tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createContents = function () {
              return this.createTable('contents');
            };
            /**
             * Creates the geometry columns tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createGeometryColumns = function () {
              return this.createTable('geometry_columns');
            };
            /**
             * Creates the tile matrix set tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createTileMatrixSet = function () {
              return this.createTable('tile_matrix_set');
            };
            /**
             * Creates the tile matrix tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createTileMatrix = function () {
              return this.createTable('tile_matrix');
            };
            /**
             * Creates the data columns tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createDataColumns = function () {
              return this.createTable('data_columns');
            };
            /**
             * Creates the data column constraints tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createDataColumnConstraints = function () {
              return this.createTable('data_column_constraints');
            };
            /**
             * Creates the metadata tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createMetadata = function () {
              return this.createTable('metadata');
            };
            /**
             * Creates the metadata reference tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createMetadataReference = function () {
              return this.createTable('metadata_reference');
            };
            /**
             * Creates the extensions tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createExtensions = function () {
              return this.createTable('extensions');
            };
            /**
             * Creates the table index tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createTableIndex = function () {
              return this.createTable('table_index');
            };
            /**
             * Creates the geometry index tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createGeometryIndex = function () {
              return this.createTable('geometry_index');
            };
            /**
             * Creates the feature tile link tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createFeatureTileLink = function () {
              return this.createTable('feature_tile_link');
            };
            /**
             * Creates the extended relations tables
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createExtendedRelations = function () {
              return this.createTable('extended_relations');
            };
            /**
             * Creates the contentsId
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createContentsId = function () {
              return this.createTable('nga_contents_id');
            };
            /**
             * Creates all tables necessary for the specified table creation script name in the GeoPackage
             * @param  {string} creationScriptName creation scripts to run
             * @return {Promise<Boolean>}
             */


            TableCreator.prototype.createTable = function (creationScriptName) {
              var connection = this.connection;
              return tableCreationScripts[creationScriptName].reduce(function (sequence, sql) {
                return sequence.then(function () {
                  try {
                    return !!connection.run(sql);
                  } catch (error) {
                    if (error.message.indexOf('already exists') === -1) {
                      throw error;
                    }
                  }
                });
              }, Promise.resolve());
            };
            /**
             * Create the given user table.
             *
             * @param {modle:user/userTable~UserTable} userTable user table to create
             * @return {object} the result of {@link module:db/geoPackageConnection~GeoPackageConnection#run}
             * @throws {Error} if the table already exists
             */


            TableCreator.prototype.createUserTable = function (userTable) {
              var connection = this.connection;
              var result = connection.tableExists(userTable.table_name);

              if (result) {
                throw new Error('Table already exists and cannot be created: ' + userTable.table_name);
              }

              var check = '';
              var sql = 'create table \'' + userTable.table_name + '\' (';

              for (var i = 0; i < userTable.columns.length; i++) {
                var tc = userTable.columns[i];

                if (i) {
                  sql += ', ';
                }

                sql += '\n\'' + tc.name + '\' ' + tc.getTypeName();

                if (tc.max != null) {
                  sql += '(' + tc.max + ')';

                  if (check.length) {
                    check += ' AND\n';
                  }

                  check += '\tlength("' + tc.name + '") <= ' + tc.max;
                }

                if (tc.notNull) {
                  sql += ' not null';
                }

                if (tc.primaryKey) {
                  sql += ' primary key autoincrement';
                }

                if (tc.defaultValue) {
                  if (tc.dataType === types.GPKGDataType.GPKG_DT_TEXT) {
                    sql += ' default \'' + tc.defaultValue + '\'';
                  } else {
                    sql += ' default ' + tc.defaultValue;
                  }
                }
              }

              for (var i = 0; i < userTable.uniqueConstraints.length; i++) {
                var uniqueConstraint = userTable.uniqueConstraints[i];
                sql += ',\n unique (';

                for (var j = 0; j < uniqueConstraint.columns.length; j++) {
                  var uniqueColumn = uniqueConstraint.columns[j];

                  if (j) {
                    sql += ', ';
                  }

                  sql += uniqueColumn.name;
                }

                sql += ')';
              }

              if (check.length) {
                sql += '\nCHECK(\n' + check + '\n)';
              }

              sql += '\n);';
              return connection.run(sql);
            };

            var tableCreationScripts = {
              spatial_reference_system: ['CREATE TABLE gpkg_spatial_ref_sys (' + '  srs_name TEXT NOT NULL,' + '  srs_id INTEGER NOT NULL PRIMARY KEY,' + '  organization TEXT NOT NULL,' + '  organization_coordsys_id INTEGER NOT NULL,' + '  definition  TEXT NOT NULL,' + '  description TEXT,' + '  definition_12_063 TEXT NOT NULL DEFAULT "undefined"' + ')', 'CREATE VIEW st_spatial_ref_sys AS' + ' SELECT' + '   srs_name,' + '   srs_id,' + '   organization,' + '   organization_coordsys_id,' + '   definition,' + '   description' + ' FROM gpkg_spatial_ref_sys', 'CREATE VIEW spatial_ref_sys AS' + ' SELECT' + '   srs_id AS srid,' + '   organization AS auth_name,' + '   organization_coordsys_id AS auth_srid,' + '   definition AS srtext' + ' FROM gpkg_spatial_ref_sys'],
              contents: ['CREATE TABLE gpkg_contents (' + ' table_name TEXT NOT NULL PRIMARY KEY,' + ' data_type TEXT NOT NULL,' + ' identifier TEXT UNIQUE,' + " description TEXT DEFAULT ''," + " last_change DATETIME NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ','now'))," + ' min_x DOUBLE,' + ' min_y DOUBLE,' + ' max_x DOUBLE,' + ' max_y DOUBLE,' + ' srs_id INTEGER,' + ' CONSTRAINT fk_gc_r_srs_id FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys(srs_id)' + ')'],
              geometry_columns: ['CREATE TABLE gpkg_geometry_columns (' + '  table_name TEXT NOT NULL,' + '  column_name TEXT NOT NULL,' + '  geometry_type_name TEXT NOT NULL,' + '  srs_id INTEGER NOT NULL,' + '  z TINYINT NOT NULL,' + '  m TINYINT NOT NULL,' + '  CONSTRAINT pk_geom_cols PRIMARY KEY (table_name, column_name),' + '  CONSTRAINT uk_gc_table_name UNIQUE (table_name),' + '  CONSTRAINT fk_gc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),' + '  CONSTRAINT fk_gc_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id)' + ')', 'CREATE VIEW st_geometry_columns AS' + '  SELECT' + '    table_name,' + '    column_name,' + '    "ST_" || geometry_type_name AS geometry_type_name,' + '    g.srs_id,' + '    srs_name' + '  FROM gpkg_geometry_columns as g JOIN gpkg_spatial_ref_sys AS s' + '  WHERE g.srs_id = s.srs_id', 'CREATE VIEW geometry_columns AS' + '  SELECT' + '    table_name AS f_table_name,' + '    column_name AS f_geometry_column,' + '    (CASE geometry_type_name' + '    	WHEN "GEOMETRY" THEN 0' + '    	WHEN "POINT" THEN 1' + '    	WHEN "LINESTRING" THEN 2' + '    	WHEN "POLYGON" THEN 3' + '    	WHEN "MULTIPOINT" THEN 4' + '    	WHEN "MULTILINESTRING" THEN 5' + '    	WHEN "MULTIPOLYGON" THEN 6' + '    	WHEN "GEOMETRYCOLLECTION" THEN 7' + '    	WHEN "CIRCULARSTRING" THEN 8' + '    	WHEN "COMPOUNDCURVE" THEN 9' + '    	WHEN "CURVEPOLYGON" THEN 10' + '    	WHEN "MULTICURVE" THEN 11' + '    	WHEN "MULTISURFACE" THEN 12' + '    	WHEN "CURVE" THEN 13' + '    	WHEN "SURFACE" THEN 14' + '    	WHEN "POLYHEDRALSURFACE" THEN 15' + '    	WHEN "TIN" THEN 16' + '    	WHEN "TRIANGLE" THEN 17' + '    	ELSE 0 END) AS geometry_type,' + '    2 + (CASE z WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 0 END) + (CASE m WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 0 END) AS coord_dimension,' + '    srs_id AS srid' + '  FROM gpkg_geometry_columns'],
              tile_matrix_set: ['CREATE TABLE gpkg_tile_matrix_set (' + '  table_name TEXT NOT NULL PRIMARY KEY,' + '  srs_id INTEGER NOT NULL,' + '  min_x DOUBLE NOT NULL,' + '  min_y DOUBLE NOT NULL,' + '  max_x DOUBLE NOT NULL,' + '  max_y DOUBLE NOT NULL,' + '  CONSTRAINT fk_gtms_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name),' + '  CONSTRAINT fk_gtms_srs FOREIGN KEY (srs_id) REFERENCES gpkg_spatial_ref_sys (srs_id)' + ')'],
              tile_matrix: ['CREATE TABLE gpkg_tile_matrix (' + '  table_name TEXT NOT NULL,' + '  zoom_level INTEGER NOT NULL,' + '  matrix_width INTEGER NOT NULL,' + '  matrix_height INTEGER NOT NULL,' + '  tile_width INTEGER NOT NULL,' + '  tile_height INTEGER NOT NULL,' + '  pixel_x_size DOUBLE NOT NULL,' + '  pixel_y_size DOUBLE NOT NULL,' + '  CONSTRAINT pk_ttm PRIMARY KEY (table_name, zoom_level),' + '  CONSTRAINT fk_tmm_table_name FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name)' + ')', "CREATE TRIGGER 'gpkg_tile_matrix_zoom_level_insert'" + "BEFORE INSERT ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: zoom_level cannot be less than 0')" + "WHERE (NEW.zoom_level < 0);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_zoom_level_update'" + "BEFORE UPDATE of zoom_level ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: zoom_level cannot be less than 0')" + "WHERE (NEW.zoom_level < 0);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_matrix_width_insert'" + "BEFORE INSERT ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: matrix_width cannot be less than 1')" + "WHERE (NEW.matrix_width < 1);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_matrix_width_update'" + "BEFORE UPDATE OF matrix_width ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: matrix_width cannot be less than 1')" + "WHERE (NEW.matrix_width < 1);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_matrix_height_insert'" + "BEFORE INSERT ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: matrix_height cannot be less than 1')" + "WHERE (NEW.matrix_height < 1);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_matrix_height_update'" + "BEFORE UPDATE OF matrix_height ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: matrix_height cannot be less than 1')" + "WHERE (NEW.matrix_height < 1);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_pixel_x_size_insert'" + "BEFORE INSERT ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: pixel_x_size must be greater than 0')" + "WHERE NOT (NEW.pixel_x_size > 0);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_pixel_x_size_update'" + "BEFORE UPDATE OF pixel_x_size ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: pixel_x_size must be greater than 0')" + "WHERE NOT (NEW.pixel_x_size > 0);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_pixel_y_size_insert'" + "BEFORE INSERT ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table ''gpkg_tile_matrix'' violates constraint: pixel_y_size must be greater than 0')" + "WHERE NOT (NEW.pixel_y_size > 0);" + "END", "CREATE TRIGGER 'gpkg_tile_matrix_pixel_y_size_update'" + "BEFORE UPDATE OF pixel_y_size ON 'gpkg_tile_matrix'" + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table ''gpkg_tile_matrix'' violates constraint: pixel_y_size must be greater than 0')" + "WHERE NOT (NEW.pixel_y_size > 0);" + "END"],
              data_columns: ['CREATE TABLE gpkg_data_columns (' + '  table_name TEXT NOT NULL,' + '  column_name TEXT NOT NULL,' + '  name TEXT,' + '  title TEXT,' + '  description TEXT,' + '  mime_type TEXT,' + '  constraint_name TEXT,' + '  CONSTRAINT pk_gdc PRIMARY KEY (table_name, column_name),' + '  CONSTRAINT fk_gdc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name)' + ')'],
              data_column_constraints: ['CREATE TABLE gpkg_data_column_constraints (' + '  constraint_name TEXT NOT NULL,' + '  constraint_type TEXT NOT NULL, /* "range" | "enum" | "glob" */' + '  value TEXT,' + '  min NUMERIC,' + '  min_is_inclusive BOOLEAN, /* 0 = false, 1 = true */' + '  max NUMERIC,' + '  max_is_inclusive BOOLEAN, /* 0 = false, 1 = true */' + '  description TEXT,' + '  CONSTRAINT gdcc_ntv UNIQUE (constraint_name, constraint_type, value)' + ')'],
              metadata: ['CREATE TABLE gpkg_metadata (' + '  id INTEGER CONSTRAINT m_pk PRIMARY KEY ASC NOT NULL UNIQUE,' + '  md_scope TEXT NOT NULL DEFAULT "dataset",' + '  md_standard_uri TEXT NOT NULL,' + '  mime_type TEXT NOT NULL DEFAULT "text/xml",' + '  metadata TEXT NOT NULL' + ')', "CREATE TRIGGER 'gpkg_metadata_md_scope_insert' " + "BEFORE INSERT ON 'gpkg_metadata' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata violates " + "constraint: md_scope must be one of undefined | fieldSession | " + "collectionSession | series | dataset | featureType | feature | " + "attributeType | attribute | tile | model | catalogue | schema | " + "taxonomy software | service | collectionHardware | " + "nonGeographicDataset | dimensionGroup') " + "WHERE NOT(NEW.md_scope IN " + "('undefined','fieldSession','collectionSession','series','dataset', " + "'featureType','feature','attributeType','attribute','tile','model', " + "'catalogue','schema','taxonomy','software','service', " + "'collectionHardware','nonGeographicDataset','dimensionGroup')); " + "END", "CREATE TRIGGER 'gpkg_metadata_md_scope_update' " + "BEFORE UPDATE OF 'md_scope' ON 'gpkg_metadata' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata violates " + "constraint: md_scope must be one of undefined | fieldSession | " + "collectionSession | series | dataset | featureType | feature | " + "attributeType | attribute | tile | model | catalogue | schema | " + "taxonomy software | service | collectionHardware | " + "nonGeographicDataset | dimensionGroup') " + "WHERE NOT(NEW.md_scope IN " + "('undefined','fieldSession','collectionSession','series','dataset', " + "'featureType','feature','attributeType','attribute','tile','model', " + "'catalogue','schema','taxonomy','software','service', " + "'collectionHardware','nonGeographicDataset','dimensionGroup')); " + "END"],
              metadata_reference: ["CREATE TABLE gpkg_metadata_reference (" + "  reference_scope TEXT NOT NULL," + "  table_name TEXT," + "  column_name TEXT," + "  row_id_value INTEGER," + "  timestamp DATETIME NOT NULL DEFAULT (strftime('%Y-%m-%dT%H:%M:%fZ','now'))," + "  md_file_id INTEGER NOT NULL," + "  md_parent_id INTEGER," + "  CONSTRAINT crmr_mfi_fk FOREIGN KEY (md_file_id) REFERENCES gpkg_metadata(id)," + "  CONSTRAINT crmr_mpi_fk FOREIGN KEY (md_parent_id) REFERENCES gpkg_metadata(id)" + ")", "CREATE TRIGGER 'gpkg_metadata_reference_reference_scope_insert' " + "BEFORE INSERT ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference " + "violates constraint: reference_scope must be one of \"geopackage\", " + "table\", \"column\", \"row\", \"row/col\"') " + "WHERE NOT NEW.reference_scope IN " + "('geopackage','table','column','row','row/col'); " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_reference_scope_update' " + "BEFORE UPDATE OF 'reference_scope' ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference " + "violates constraint: referrence_scope must be one of \"geopackage\", " + "\"table\", \"column\", \"row\", \"row/col\"') " + "WHERE NOT NEW.reference_scope IN " + "('geopackage','table','column','row','row/col'); " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_column_name_insert' " + "BEFORE INSERT ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference " + "violates constraint: column name must be NULL when reference_scope " + "is \"geopackage\", \"table\" or \"row\"') " + "WHERE (NEW.reference_scope IN ('geopackage','table','row') " + "AND NEW.column_name IS NOT NULL); " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference " + "violates constraint: column name must be defined for the specified " + "table when reference_scope is \"column\" or \"row/col\"') " + "WHERE (NEW.reference_scope IN ('column','row/col') " + "AND NOT NEW.table_name IN ( " + "SELECT name FROM SQLITE_MASTER WHERE type = 'table' " + "AND name = NEW.table_name " + "AND sql LIKE ('%' || NEW.column_name || '%'))); " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_column_name_update' " + "BEFORE UPDATE OF column_name ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference " + "violates constraint: column name must be NULL when reference_scope " + "is \"geopackage\", \"table\" or \"row\"') " + "WHERE (NEW.reference_scope IN ('geopackage','table','row') " + "AND NEW.column_nameIS NOT NULL); " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference " + "violates constraint: column name must be defined for the specified " + "table when reference_scope is \"column\" or \"row/col\"') " + "WHERE (NEW.reference_scope IN ('column','row/col') " + "AND NOT NEW.table_name IN ( " + "SELECT name FROM SQLITE_MASTER WHERE type = 'table' " + "AND name = NEW.table_name " + "AND sql LIKE ('%' || NEW.column_name || '%'))); " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_row_id_value_insert' " + "BEFORE INSERT ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference " + "violates constraint: row_id_value must be NULL when reference_scope " + "is \"geopackage\", \"table\" or \"column\"') " + "WHERE NEW.reference_scope IN ('geopackage','table','column') " + "AND NEW.row_id_value IS NOT NULL; " + "END ", "CREATE TRIGGER 'gpkg_metadata_reference_row_id_value_update' " + "BEFORE UPDATE OF 'row_id_value' ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference " + "violates constraint: row_id_value must be NULL when reference_scope " + "is \"geopackage\", \"table\" or \"column\"') " + "WHERE NEW.reference_scope IN ('geopackage','table','column') " + "AND NEW.row_id_value IS NOT NULL; " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_timestamp_insert' " + "BEFORE INSERT ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'insert on table gpkg_metadata_reference " + "violates constraint: timestamp must be a valid time in ISO 8601 " + "\"yyyy-mm-ddThh:mm:ss.cccZ\" form') " + "WHERE NOT (NEW.timestamp GLOB " + "'[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9][0-9][0-9]Z' " + "AND strftime('%s',NEW.timestamp) NOT NULL); " + "END", "CREATE TRIGGER 'gpkg_metadata_reference_timestamp_update' " + "BEFORE UPDATE OF 'timestamp' ON 'gpkg_metadata_reference' " + "FOR EACH ROW BEGIN " + "SELECT RAISE(ABORT, 'update on table gpkg_metadata_reference " + "violates constraint: timestamp must be a valid time in ISO 8601 " + "\"yyyy-mm-ddThh:mm:ss.cccZ\" form') " + "WHERE NOT (NEW.timestamp GLOB " + "'[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9].[0-9][0-9][0-9]Z' " + "AND strftime('%s',NEW.timestamp) NOT NULL); " + "END "],
              extensions: ['CREATE TABLE gpkg_extensions (' + '  table_name TEXT,' + '  column_name TEXT,' + '  extension_name TEXT NOT NULL,' + '  definition TEXT NOT NULL,' + '  scope TEXT NOT NULL,' + '  CONSTRAINT ge_tce UNIQUE (table_name, column_name, extension_name)' + ')'],
              table_index: ['CREATE TABLE nga_table_index (' + '  table_name TEXT NOT NULL PRIMARY KEY,' + '  last_indexed DATETIME' + ')'],
              geometry_index: ['CREATE TABLE nga_geometry_index (' + '  table_name TEXT NOT NULL,' + '  geom_id INTEGER NOT NULL,' + '  min_x DOUBLE NOT NULL,' + '  max_x DOUBLE NOT NULL,' + '  min_y DOUBLE NOT NULL,' + '  max_y DOUBLE NOT NULL,' + '  min_z DOUBLE,' + '  max_z DOUBLE,' + '  min_m DOUBLE,' + '  max_m DOUBLE,' + '  CONSTRAINT pk_ngi PRIMARY KEY (table_name, geom_id),' + '  CONSTRAINT fk_ngi_nti_tn FOREIGN KEY (table_name) REFERENCES nga_table_index(table_name)' + ')'],
              feature_tile_link: ['CREATE TABLE nga_feature_tile_link (' + '  feature_table_name TEXT NOT NULL,' + '  tile_table_name TEXT NOT NULL,' + '  CONSTRAINT pk_nftl PRIMARY KEY (feature_table_name, tile_table_name)' + ')'],
              extended_relations: ['CREATE TABLE gpkgext_relations (' + '  id INTEGER PRIMARY KEY AUTOINCREMENT,' + '  base_table_name TEXT NOT NULL,' + '  base_primary_column TEXT NOT NULL DEFAULT \'id\',' + '  related_table_name TEXT NOT NULL,' + '  related_primary_column TEXT NOT NULL DEFAULT \'id\',' + '  relation_name TEXT NOT NULL,' + '  mapping_table_name TEXT NOT NULL UNIQUE' + ')'],
              nga_contents_id: ['CREATE TABLE nga_contents_id (' + '  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,' + '  table_name TEXT NOT NULL,' + '  CONSTRAINT uk_nci_table_name UNIQUE (table_name),' + '  CONSTRAINT fk_nci_gc_tn FOREIGN KEY (table_name) REFERENCES gpkg_contents(table_name)' + ')']
            };

            /**
             * Metadata module.
             * @module extension
             * @see module:dao/dao
             */
            /**
              * Indicates that a particular extension applies to a GeoPackage, a table in a
              * GeoPackage or a column of a table in a GeoPackage. An application that access
              * a GeoPackage can query the gpkg_extensions table instead of the contents of
              * all the user data tables to determine if it has the required capabilities to
              * read or write to tables with extensions, and to “fail fast” and return an
              * error message if it does not.
             * @class Extension
             */

            var Extension = function () {
              /**
               * Name of the table that requires the extension. When NULL, the extension
               * is required for the entire GeoPackage. SHALL NOT be NULL when the
               * column_name is not NULL.
               * @member {String}
               */
              this.table_name;
              /**
               * Name of the column that requires the extension. When NULL, the extension
               * is required for the entire table.
               * @member {String}
               */

              this.column_name;
              /**
               * The case sensitive name of the extension that is required, in the form
               * <author>_<extension_name>.
               * @member {String}
               */

              this.extension_name;
              /**
               * Definition of the extension in the form specfied by the template in
               * GeoPackage Extension Template (Normative) or reference thereto.
               * @member {String}
               */

              this.definition;
              /**
               * Indicates scope of extension effects on readers / writers: read-write or
               * write-only in lowercase.
               * @member {String}
               */

              this.scope;
            };

            Extension.EXTENSION_NAME_DIVIDER = "_";
            Extension.READ_WRITE = "read-write";
            Extension.WRITE_ONLY = "write-only";

            Extension.prototype.setExtensionName = function (author, extensionName) {
              this.extension_name = Extension.buildExtensionName(author, extensionName);
            };

            Extension.prototype.getAuthor = function () {
              return Extension.getAuthorWithExtensionName(this.extension_name);
            };

            Extension.prototype.getExtensionNameNoAuthor = function () {
              return Extension.getExtensionNameNoAuthor(this.extension_name);
            };

            Extension.buildExtensionName = function (author, extensionName) {
              return author + Extension.EXTENSION_NAME_DIVIDER + extensionName;
            };

            Extension.getAuthorWithExtensionName = function (extensionName) {
              return extensionName.split(Extension.EXTENSION_NAME_DIVIDER)[0];
            };

            Extension.getExtensionNameNoAuthor = function (extensionName) {
              return extensionName.slice(extensionName.indexOf(Extension.EXTENSION_NAME_DIVIDER) + 1);
            };
            /**
             * Extension Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             */


            class ExtensionDao extends Dao {
              createObject(row) {
                var e = new Extension();

                for (var key in row) {
                  e[key] = row[key];
                }

                return e;
              }

              queryByExtension(extensionName) {
                var results = this.queryForAllEq(ExtensionDao.COLUMN_EXTENSION_NAME, extensionName);
                var e = this.createObject(results[0]);
                return e;
              }

              queryByExtensionAndTableName(extensionName, tableName) {
                var values = new ColumnValues();
                values.addColumn(ExtensionDao.COLUMN_EXTENSION_NAME, extensionName);
                values.addColumn(ExtensionDao.COLUMN_TABLE_NAME, tableName);
                var extensions = [];

                for (var row of this.queryForFieldValues(values)) {
                  var e = this.createObject(row);
                  extensions.push(e);
                }

                if (extensions.length) {
                  return extensions;
                } else {
                  return false;
                }
              }

              queryByExtensionAndTableNameAndColumnName(extensionName, tableName, columnName) {
                var values = new ColumnValues();
                values.addColumn(ExtensionDao.COLUMN_EXTENSION_NAME, extensionName);
                values.addColumn(ExtensionDao.COLUMN_TABLE_NAME, tableName);
                values.addColumn(ExtensionDao.COLUMN_COLUMN_NAME, columnName);
                var extensions = [];

                for (var row of this.queryForFieldValues(values)) {
                  var e = this.createObject(row);
                  extensions.push(e);
                }

                if (extensions.length) {
                  return extensions;
                } else {
                  return false;
                }
              }

              createTable() {
                var tc = new TableCreator(this.geoPackage);
                return tc.createExtensions();
              }

              deleteByExtension(extensionName) {
                var values = new ColumnValues();
                values.addColumn(ExtensionDao.COLUMN_EXTENSION_NAME, extensionName);
                this.deleteWhere(this.buildWhere(values, '='), this.buildWhereArgs(values));
              }

              deleteByExtensionAndTableName(extensionName, tableName) {
                var values = new ColumnValues();
                values.addColumn(ExtensionDao.COLUMN_EXTENSION_NAME, extensionName);
                values.addColumn(ExtensionDao.COLUMN_TABLE_NAME, tableName);
                this.deleteWhere(this.buildWhere(values, 'and'), this.buildWhereArgs(values));
              }

            }

            ExtensionDao.TABLE_NAME = "gpkg_extensions";
            ExtensionDao.COLUMN_TABLE_NAME = "table_name";
            ExtensionDao.COLUMN_COLUMN_NAME = "column_name";
            ExtensionDao.COLUMN_EXTENSION_NAME = "extension_name";
            ExtensionDao.COLUMN_DEFINITION = "definition";
            ExtensionDao.COLUMN_SCOPE = "scope";
            ExtensionDao.prototype.gpkgTableName = ExtensionDao.TABLE_NAME;
            ExtensionDao.prototype.idColumns = [ExtensionDao.COLUMN_TABLE_NAME, ExtensionDao.COLUMN_COLUMN_NAME, ExtensionDao.COLUMN_EXTENSION_NAME];

            /**
             * Base Extension
             * @module extension/baseExtension
             */
            /**
             * Abstract base GeoPackage extension
             * @class
             */

            var BaseExtension = function (geoPackage) {
              this.geoPackage = geoPackage;
              this.connection = geoPackage.connection;
              this.extensionsDao = geoPackage.getExtensionDao();
            };
            /**
             * Get the extension or create as needed
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             * @param  {String}   definition    extension definition
             * @param  {String}   scopeType     extension scope type
             * @return {Promise<module:extension/baseExtension~BaseExtension>}
             */

            BaseExtension.prototype.getOrCreate = function (extensionName, tableName, columnName, definition, scopeType) {
              var extension = this.getExtension(extensionName, tableName, columnName);

              if (extension) {
                return Promise.resolve(extension);
              }

              return this.extensionsDao.createTable().then(function () {
                return this.createExtension(extensionName, tableName, columnName, definition, scopeType);
              }.bind(this));
            };
            /**
             * Get the extension for the name, table name and column name
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             * @param  {Function} callback      Called with err if one occurred and the extension
             */


            BaseExtension.prototype.getExtension = function (extensionName, tableName, columnName) {
              if (!this.extensionsDao.isTableExists()) {
                return false;
              }

              return this.extensionsDao.queryByExtensionAndTableNameAndColumnName(extensionName, tableName, columnName);
            };
            /**
             * Determine if the GeoPackage has the extension
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             */


            BaseExtension.prototype.hasExtension = function (extensionName, tableName, columnName) {
              var exists = this.getExtension(extensionName, tableName, columnName);
              return !!this.getExtension(extensionName, tableName, columnName).length;
            };

            BaseExtension.prototype.createExtension = function (extensionName, tableName, columnName, definition, scopeType) {
              var extension = new Extension();
              extension.table_name = tableName;
              extension.column_name = columnName;
              extension.extension_name = extensionName;
              extension.definition = definition;
              extension.scope = scopeType;
              return this.extensionsDao.create(extension);
            };

            /**
             * TableIndexDao module.
             * @module extension/index
             */
            /**
             * Table Index object, for indexing data within user tables
             * @class TableIndex
             */

            var TableIndex = function () {
              /**
               * Name of the table
               * @member {String}
               */
              this.table_name;
              /**
               * Last indexed date
               * @member {String}
               */

              this.last_indexed;
            };
            /**
             * Table Index Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             * @param {module:geoPackage~GeoPackage}  geoPackage The GeoPackage object
             */


            class TableIndexDao extends Dao {
              /**
               * Create a new TableIndex object
               * @return {module:extension/index~TableIndex}
               */
              createObject() {
                return new TableIndex();
              }

              getGeometryIndices(tableIndex) {}

              getGeometryIndexCount(tableIndex) {}
              /**
               * Creates the tables necessary
               * @return {Promise}
               */


              createTable() {
                var tc = new TableCreator(this.geoPackage);
                return tc.createTableIndex();
              }

            }

            TableIndexDao.TABLE_NAME = "nga_table_index";
            TableIndexDao.COLUMN_TABLE_NAME = "table_name";
            TableIndexDao.COLUMN_LAST_INDEXED = "last_indexed";
            TableIndexDao.prototype.gpkgTableName = TableIndexDao.TABLE_NAME;
            TableIndexDao.prototype.idColumns = [TableIndexDao.COLUMN_TABLE_NAME];

            /**
             * GeometryIndexDao module.
             * @module extension/index
             */
            /**
             * Geometry Index object, for indexing data within user tables
             * @class
             */

            var GeometryIndex = function () {
              /**
               * Name of the table
               * @member {String}
               */
              this.table_name;
              /**
               * Geometry Id column
               * @member {Number}
               */

              this.geom_id;
              /**
               * Min X
               * @member {Number}
               */

              this.min_x;
              /**
               * Max X
               * @member {Number}
               */

              this.max_x;
              /**
               * Min Y
               * @member {Number}
               */

              this.min_y;
              /**
               * Max Y
               * @member {Number}
               */

              this.max_y;
              /**
               * Min Z
               * @member {Number}
               */

              this.min_z;
              /**
               * Max Z
               * @member {Number}
               */

              this.max_z;
              /**
               * Min M
               * @member {Number}
               */

              this.min_m;
              /**
               * Max M
               * @member {Number}
               */

              this.max_m;
            };

            GeometryIndex.prototype.setTableIndex = function (tableIndex) {
              this.table_name = tableIndex.table_name;
            };
            /**
             * Geometry Index Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             */


            class GeometryIndexDao extends Dao {
              constructor(geoPackage, featureDao) {
                super(geoPackage);
                this.featureDao = featureDao;
              }

              createObject() {
                return new GeometryIndex();
              }
              /**
               * Get the Table Index of the Geometry Index
               *
               * @param {module:extension/index~GeometryIndex} geometryIndex geometry index
               * @return {module:extension/index~TableIndex}
               */


              getTableIndex(geometryIndex) {
                var dao = this.geoPackage.getTableIndexDao();
                return dao.queryForId(geometryIndex.tableName);
              }
              /**
               * Query by table name
               * @param  {string} tableName table name
               * @return {Iterable}
               */


              queryForTableName(tableName) {
                return this.queryForEach(GeometryIndexDao.COLUMN_TABLE_NAME, tableName);
              }
              /**
               *  Count by table name
               *
               *  @param tableName table name
               *
               *  @return count
               */

              /**
               * Count by table name
               * @param  {string}   tableName table name
               * @return {Number}
               */


              countByTableName(tableName) {
                return this.count(GeometryIndexDao.COLUMN_TABLE_NAME, tableName);
              }
              /**
               *  Populate a new geometry index from an envelope
               *
               *  @param tableIndex table index
               *  @param geomId     geometry id
               *  @param envelope   geometry envelope
               *  @param callback called with results of the populate
               */

              /**
               * Populate a new goemetry index from an envelope
               * @param  {module:extension/index~TableIndex} tableIndex TableIndex
               * @param  {Number} geometryId id of the geometry
               * @param  {Object} envelope   envelope to store
               * @return {module:extension/index~GeometryIndex}
               */


              populate(tableIndex, geometryId, envelope) {
                var geometryIndex = new GeometryIndex();
                geometryIndex.setTableIndex(tableIndex);
                geometryIndex.geom_id = geometryId;
                geometryIndex.min_x = envelope.minX;
                geometryIndex.min_y = envelope.minY;
                geometryIndex.max_x = envelope.maxX;
                geometryIndex.max_y = envelope.maxY;

                if (envelope.hasZ) {
                  geometryIndex.min_z = envelope.minZ;
                  geometryIndex.max_z = envelope.maxZ;
                }

                if (envelope.hasM) {
                  geometryIndex.min_m = envelope.minM;
                  geometryIndex.max_m = envelope.maxM;
                }

                return geometryIndex;
              }
              /**
               * Create the GeometryIndex table
               * @return {Promise}
               */


              createTable() {
                var exists = this.isTableExists();
                if (exists) return Promise.resolve(true);
                var tc = new TableCreator(this.geoPackage);
                return tc.createGeometryIndex();
              }
              /**
               * Query the index with an envelope
               * @param  {Object} envelope envelope
               * @param  {Number} envelope.minX min x
               * @param  {Number} envelope.maxX max x
               * @param  {Number} envelope.minY min y
               * @param  {Number} envelope.maxY max y
               * @return {Iterable}
               */


              queryWithGeometryEnvelope(envelope) {
                var tableName = this.featureDao.gpkgTableName;
                var where = '';
                where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_TABLE_NAME, tableName);
                where += ' and ';
                var minXLessThanMaxX = envelope.minX < envelope.maxX;

                if (minXLessThanMaxX) {
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_X, envelope.maxX, '<=');
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_X, envelope.minX, '>=');
                } else {
                  where += '(';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_X, envelope.maxX, '<=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_X, envelope.minX, '>=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_X, envelope.minX, '>=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_X, envelope.maxX, '<=');
                  where += ')';
                }

                where += ' and ';
                where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_Y, envelope.maxY, '<=');
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_Y, envelope.minY, '>=');
                var whereArgs = [tableName, envelope.maxX, envelope.minX];

                if (!minXLessThanMaxX) {
                  whereArgs.push(envelope.minX, envelope.maxX);
                }

                whereArgs.push(envelope.maxY, envelope.minY);

                if (envelope.hasZ) {
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_Z, envelope.minZ, '<=');
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_Z, envelope.maxZ, '>=');
                  whereArgs.push(envelope.maxZ, envelope.minZ);
                }

                if (envelope.hasM) {
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MIN_M, envelope.minM, '<=');
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_MAX_M, envelope.maxM, '>=');
                  whereArgs.push(envelope.maxM, envelope.minM);
                }

                var join = 'inner join "' + tableName + '" on "' + tableName + '".' + this.featureDao.idColumns[0] + ' = ' + GeometryIndexDao.COLUMN_GEOM_ID;
                return this.queryJoinWhereWithArgs(join, where, whereArgs, ['"' + tableName + '".*']);
              }

            }

            GeometryIndexDao.TABLE_NAME = "nga_geometry_index";
            GeometryIndexDao.COLUMN_TABLE_NAME = GeometryIndexDao.TABLE_NAME + ".table_name";
            GeometryIndexDao.COLUMN_GEOM_ID = GeometryIndexDao.TABLE_NAME + ".geom_id";
            GeometryIndexDao.COLUMN_MIN_X = GeometryIndexDao.TABLE_NAME + ".min_x";
            GeometryIndexDao.COLUMN_MAX_X = GeometryIndexDao.TABLE_NAME + ".max_x";
            GeometryIndexDao.COLUMN_MIN_Y = GeometryIndexDao.TABLE_NAME + ".min_y";
            GeometryIndexDao.COLUMN_MAX_Y = GeometryIndexDao.TABLE_NAME + ".max_y";
            GeometryIndexDao.COLUMN_MIN_Z = GeometryIndexDao.TABLE_NAME + ".min_z";
            GeometryIndexDao.COLUMN_MAX_Z = GeometryIndexDao.TABLE_NAME + ".max_z";
            GeometryIndexDao.COLUMN_MIN_M = GeometryIndexDao.TABLE_NAME + ".min_m";
            GeometryIndexDao.COLUMN_MAX_M = GeometryIndexDao.TABLE_NAME + ".max_m";
            GeometryIndexDao.prototype.gpkgTableName = GeometryIndexDao.TABLE_NAME;
            GeometryIndexDao.prototype.idColumns = ['table_name', 'geom_id'];

            /**
             * Callback for coordEach
             *
             * @private
             * @callback coordEachCallback
             * @param {[number, number]} currentCoords The current coordinates being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
             *
             * @name coordEach
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (currentCoords, currentIndex)
             * @param {boolean} [excludeWrapCoord=false] whether or not to include
             * the final coordinate of LinearRings that wraps the ring in its iteration.
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.coordEach(features, function (currentCoords, currentIndex) {
             *   //=currentCoords
             *   //=currentIndex
             * });
             */
            function coordEach(layer, callback, excludeWrapCoord) {
              var i,
                  j,
                  k,
                  g,
                  l,
                  geometry,
                  stopG,
                  coords,
                  geometryMaybeCollection,
                  wrapShrink = 0,
                  currentIndex = 0,
                  isGeometryCollection,
                  isFeatureCollection = layer.type === 'FeatureCollection',
                  isFeature = layer.type === 'Feature',
                  stop = isFeatureCollection ? layer.features.length : 1; // This logic may look a little weird. The reason why it is that way
              // is because it's trying to be fast. GeoJSON supports multiple kinds
              // of objects at its root: FeatureCollection, Features, Geometries.
              // This function has the responsibility of handling all of them, and that
              // means that some of the `for` loops you see below actually just don't apply
              // to certain inputs. For instance, if you give this just a
              // Point geometry, then both loops are short-circuited and all we do
              // is gradually rename the input until it's called 'geometry'.
              //
              // This also aims to allocate as few resources as possible: just a
              // few numbers and booleans, rather than any temporary arrays as would
              // be required with the normalization approach.

              for (i = 0; i < stop; i++) {
                geometryMaybeCollection = isFeatureCollection ? layer.features[i].geometry : isFeature ? layer.geometry : layer;
                isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
                stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                for (g = 0; g < stopG; g++) {
                  geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;
                  coords = geometry.coordinates;
                  wrapShrink = excludeWrapCoord && (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') ? 1 : 0;

                  if (geometry.type === 'Point') {
                    callback(coords, currentIndex);
                    currentIndex++;
                  } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {
                    for (j = 0; j < coords.length; j++) {
                      callback(coords[j], currentIndex);
                      currentIndex++;
                    }
                  } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {
                    for (j = 0; j < coords.length; j++) for (k = 0; k < coords[j].length - wrapShrink; k++) {
                      callback(coords[j][k], currentIndex);
                      currentIndex++;
                    }
                  } else if (geometry.type === 'MultiPolygon') {
                    for (j = 0; j < coords.length; j++) for (k = 0; k < coords[j].length; k++) for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                      callback(coords[j][k][l], currentIndex);
                      currentIndex++;
                    }
                  } else if (geometry.type === 'GeometryCollection') {
                    for (j = 0; j < geometry.geometries.length; j++) coordEach(geometry.geometries[j], callback, excludeWrapCoord);
                  } else {
                    throw new Error('Unknown Geometry Type');
                  }
                }
              }
            }

            var coordEach_1 = coordEach;
            /**
             * Callback for coordReduce
             *
             * The first time the callback function is called, the values provided as arguments depend
             * on whether the reduce method has an initialValue argument.
             *
             * If an initialValue is provided to the reduce method:
             *  - The previousValue argument is initialValue.
             *  - The currentValue argument is the value of the first element present in the array.
             *
             * If an initialValue is not provided:
             *  - The previousValue argument is the value of the first element present in the array.
             *  - The currentValue argument is the value of the second element present in the array.
             *
             * @private
             * @callback coordReduceCallback
             * @param {*} previousValue The accumulated value previously returned in the last invocation
             * of the callback, or initialValue, if supplied.
             * @param {[number, number]} currentCoords The current coordinate being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
             *
             * @name coordReduce
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (previousValue, currentCoords, currentIndex)
             * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
             * @param {boolean} [excludeWrapCoord=false] whether or not to include
             * the final coordinate of LinearRings that wraps the ring in its iteration.
             * @returns {*} The value that results from the reduction.
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.coordReduce(features, function (previousValue, currentCoords, currentIndex) {
             *   //=previousValue
             *   //=currentCoords
             *   //=currentIndex
             *   return currentCoords;
             * });
             */

            function coordReduce(layer, callback, initialValue, excludeWrapCoord) {
              var previousValue = initialValue;
              coordEach(layer, function (currentCoords, currentIndex) {
                if (currentIndex === 0 && initialValue === undefined) {
                  previousValue = currentCoords;
                } else {
                  previousValue = callback(previousValue, currentCoords, currentIndex);
                }
              }, excludeWrapCoord);
              return previousValue;
            }

            var coordReduce_1 = coordReduce;
            /**
             * Callback for propEach
             *
             * @private
             * @callback propEachCallback
             * @param {*} currentProperties The current properties being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Iterate over properties in any GeoJSON object, similar to Array.forEach()
             *
             * @name propEach
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (currentProperties, currentIndex)
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {"foo": "bar"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {"hello": "world"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.propEach(features, function (currentProperties, currentIndex) {
             *   //=currentProperties
             *   //=currentIndex
             * });
             */

            function propEach(layer, callback) {
              var i;

              switch (layer.type) {
                case 'FeatureCollection':
                  for (i = 0; i < layer.features.length; i++) {
                    callback(layer.features[i].properties, i);
                  }

                  break;

                case 'Feature':
                  callback(layer.properties, 0);
                  break;
              }
            }

            var propEach_1 = propEach;
            /**
             * Callback for propReduce
             *
             * The first time the callback function is called, the values provided as arguments depend
             * on whether the reduce method has an initialValue argument.
             *
             * If an initialValue is provided to the reduce method:
             *  - The previousValue argument is initialValue.
             *  - The currentValue argument is the value of the first element present in the array.
             *
             * If an initialValue is not provided:
             *  - The previousValue argument is the value of the first element present in the array.
             *  - The currentValue argument is the value of the second element present in the array.
             *
             * @private
             * @callback propReduceCallback
             * @param {*} previousValue The accumulated value previously returned in the last invocation
             * of the callback, or initialValue, if supplied.
             * @param {*} currentProperties The current properties being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Reduce properties in any GeoJSON object into a single value,
             * similar to how Array.reduce works. However, in this case we lazily run
             * the reduction, so an array of all properties is unnecessary.
             *
             * @name propReduce
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (previousValue, currentProperties, currentIndex)
             * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
             * @returns {*} The value that results from the reduction.
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {"foo": "bar"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {"hello": "world"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.propReduce(features, function (previousValue, currentProperties, currentIndex) {
             *   //=previousValue
             *   //=currentProperties
             *   //=currentIndex
             *   return currentProperties
             * });
             */

            function propReduce(layer, callback, initialValue) {
              var previousValue = initialValue;
              propEach(layer, function (currentProperties, currentIndex) {
                if (currentIndex === 0 && initialValue === undefined) {
                  previousValue = currentProperties;
                } else {
                  previousValue = callback(previousValue, currentProperties, currentIndex);
                }
              });
              return previousValue;
            }

            var propReduce_1 = propReduce;
            /**
             * Callback for featureEach
             *
             * @private
             * @callback featureEachCallback
             * @param {Feature<any>} currentFeature The current feature being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Iterate over features in any GeoJSON object, similar to
             * Array.forEach.
             *
             * @name featureEach
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (currentFeature, currentIndex)
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.featureEach(features, function (currentFeature, currentIndex) {
             *   //=currentFeature
             *   //=currentIndex
             * });
             */

            function featureEach(layer, callback) {
              if (layer.type === 'Feature') {
                callback(layer, 0);
              } else if (layer.type === 'FeatureCollection') {
                for (var i = 0; i < layer.features.length; i++) {
                  callback(layer.features[i], i);
                }
              }
            }

            var featureEach_1 = featureEach;
            /**
             * Callback for featureReduce
             *
             * The first time the callback function is called, the values provided as arguments depend
             * on whether the reduce method has an initialValue argument.
             *
             * If an initialValue is provided to the reduce method:
             *  - The previousValue argument is initialValue.
             *  - The currentValue argument is the value of the first element present in the array.
             *
             * If an initialValue is not provided:
             *  - The previousValue argument is the value of the first element present in the array.
             *  - The currentValue argument is the value of the second element present in the array.
             *
             * @private
             * @callback featureReduceCallback
             * @param {*} previousValue The accumulated value previously returned in the last invocation
             * of the callback, or initialValue, if supplied.
             * @param {Feature<any>} currentFeature The current Feature being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Reduce features in any GeoJSON object, similar to Array.reduce().
             *
             * @name featureReduce
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (previousValue, currentFeature, currentIndex)
             * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
             * @returns {*} The value that results from the reduction.
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {"foo": "bar"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {"hello": "world"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.featureReduce(features, function (previousValue, currentFeature, currentIndex) {
             *   //=previousValue
             *   //=currentFeature
             *   //=currentIndex
             *   return currentFeature
             * });
             */

            function featureReduce(layer, callback, initialValue) {
              var previousValue = initialValue;
              featureEach(layer, function (currentFeature, currentIndex) {
                if (currentIndex === 0 && initialValue === undefined) {
                  previousValue = currentFeature;
                } else {
                  previousValue = callback(previousValue, currentFeature, currentIndex);
                }
              });
              return previousValue;
            }

            var featureReduce_1 = featureReduce;
            /**
             * Get all coordinates from any GeoJSON object.
             *
             * @name coordAll
             * @param {Object} layer any GeoJSON object
             * @returns {Array<Array<number>>} coordinate position array
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * var coords = turf.coordAll(features);
             * //=coords
             */

            function coordAll(layer) {
              var coords = [];
              coordEach(layer, function (coord) {
                coords.push(coord);
              });
              return coords;
            }

            var coordAll_1 = coordAll;
            /**
             * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
             *
             * @name geomEach
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (currentGeometry, currentIndex)
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.geomEach(features, function (currentGeometry, currentIndex) {
             *   //=currentGeometry
             *   //=currentIndex
             * });
             */

            function geomEach(layer, callback) {
              var i,
                  j,
                  g,
                  geometry,
                  stopG,
                  geometryMaybeCollection,
                  isGeometryCollection,
                  currentIndex = 0,
                  isFeatureCollection = layer.type === 'FeatureCollection',
                  isFeature = layer.type === 'Feature',
                  stop = isFeatureCollection ? layer.features.length : 1; // This logic may look a little weird. The reason why it is that way
              // is because it's trying to be fast. GeoJSON supports multiple kinds
              // of objects at its root: FeatureCollection, Features, Geometries.
              // This function has the responsibility of handling all of them, and that
              // means that some of the `for` loops you see below actually just don't apply
              // to certain inputs. For instance, if you give this just a
              // Point geometry, then both loops are short-circuited and all we do
              // is gradually rename the input until it's called 'geometry'.
              //
              // This also aims to allocate as few resources as possible: just a
              // few numbers and booleans, rather than any temporary arrays as would
              // be required with the normalization approach.

              for (i = 0; i < stop; i++) {
                geometryMaybeCollection = isFeatureCollection ? layer.features[i].geometry : isFeature ? layer.geometry : layer;
                isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';
                stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                for (g = 0; g < stopG; g++) {
                  geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;

                  if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'MultiPoint' || geometry.type === 'Polygon' || geometry.type === 'MultiLineString' || geometry.type === 'MultiPolygon') {
                    callback(geometry, currentIndex);
                    currentIndex++;
                  } else if (geometry.type === 'GeometryCollection') {
                    for (j = 0; j < geometry.geometries.length; j++) {
                      callback(geometry.geometries[j], currentIndex);
                      currentIndex++;
                    }
                  } else {
                    throw new Error('Unknown Geometry Type');
                  }
                }
              }
            }

            var geomEach_1 = geomEach;
            /**
             * Callback for geomReduce
             *
             * The first time the callback function is called, the values provided as arguments depend
             * on whether the reduce method has an initialValue argument.
             *
             * If an initialValue is provided to the reduce method:
             *  - The previousValue argument is initialValue.
             *  - The currentValue argument is the value of the first element present in the array.
             *
             * If an initialValue is not provided:
             *  - The previousValue argument is the value of the first element present in the array.
             *  - The currentValue argument is the value of the second element present in the array.
             *
             * @private
             * @callback geomReduceCallback
             * @param {*} previousValue The accumulated value previously returned in the last invocation
             * of the callback, or initialValue, if supplied.
             * @param {*} currentGeometry The current Feature being processed.
             * @param {number} currentIndex The index of the current element being processed in the
             * array.Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
             */

            /**
             * Reduce geometry in any GeoJSON object, similar to Array.reduce().
             *
             * @name geomReduce
             * @param {Object} layer any GeoJSON object
             * @param {Function} callback a method that takes (previousValue, currentGeometry, currentIndex)
             * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
             * @returns {*} The value that results from the reduction.
             * @example
             * var features = {
             *   "type": "FeatureCollection",
             *   "features": [
             *     {
             *       "type": "Feature",
             *       "properties": {"foo": "bar"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [26, 37]
             *       }
             *     },
             *     {
             *       "type": "Feature",
             *       "properties": {"hello": "world"},
             *       "geometry": {
             *         "type": "Point",
             *         "coordinates": [36, 53]
             *       }
             *     }
             *   ]
             * };
             * turf.geomReduce(features, function (previousValue, currentGeometry, currentIndex) {
             *   //=previousValue
             *   //=currentGeometry
             *   //=currentIndex
             *   return currentGeometry
             * });
             */

            function geomReduce(layer, callback, initialValue) {
              var previousValue = initialValue;
              geomEach(layer, function (currentGeometry, currentIndex) {
                if (currentIndex === 0 && initialValue === undefined) {
                  previousValue = currentGeometry;
                } else {
                  previousValue = callback(previousValue, currentGeometry, currentIndex);
                }
              });
              return previousValue;
            }

            var geomReduce_1 = geomReduce;
            var meta = {
              coordEach: coordEach_1,
              coordReduce: coordReduce_1,
              propEach: propEach_1,
              propReduce: propReduce_1,
              featureEach: featureEach_1,
              featureReduce: featureReduce_1,
              coordAll: coordAll_1,
              geomEach: geomEach_1,
              geomReduce: geomReduce_1
            };

            var each = meta.coordEach;
            /**
             * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
             *
             * @name bbox
             * @param {(Feature|FeatureCollection)} geojson input features
             * @returns {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
             * @addToMap features, bboxPolygon
             * @example
             * var pt1 = turf.point([114.175329, 22.2524])
             * var pt2 = turf.point([114.170007, 22.267969])
             * var pt3 = turf.point([114.200649, 22.274641])
             * var pt4 = turf.point([114.200649, 22.274641])
             * var pt5 = turf.point([114.186744, 22.265745])
             * var features = turf.featureCollection([pt1, pt2, pt3, pt4, pt5])
             *
             * var bbox = turf.bbox(features);
             *
             * var bboxPolygon = turf.bboxPolygon(bbox);
             *
             * //=bbox
             *
             * //=bboxPolygon
             */

            var bbox = function (geojson) {
              var bbox = [Infinity, Infinity, -Infinity, -Infinity];
              each(geojson, function (coord) {
                if (bbox[0] > coord[0]) bbox[0] = coord[0];
                if (bbox[1] > coord[1]) bbox[1] = coord[1];
                if (bbox[2] < coord[0]) bbox[2] = coord[0];
                if (bbox[3] < coord[1]) bbox[3] = coord[1];
              });
              return bbox;
            };

            var EnvelopeBuilder = {};

            EnvelopeBuilder.buildEnvelopeWithGeometry = function (wkbGeometry) {
              var geoJson = wkbGeometry.toGeoJSON();
              var bbox$1 = bbox(geoJson);
              return {
                minX: bbox$1[0],
                minY: bbox$1[1],
                maxX: bbox$1[2],
                maxY: bbox$1[3]
              };
            };

            EnvelopeBuilder.expandEnvelopeForGeometry = function (envelope, wkbGeometry) {};

            /**
             * RTreeIndexDao module.
             * @module RTreeIndexDao
             * @see module:dao/dao
             */

            var RTreeIndex = function (geoPackage, featureDao) {
              BaseExtension.call(this, geoPackage);
              this.extensionName = Extension.buildExtensionName(RTreeIndexDao.EXTENSION_RTREE_INDEX_AUTHOR, RTreeIndexDao.EXTENSION_RTREE_INDEX_NAME_NO_AUTHOR);
              this.extensionDefinition = RTreeIndexDao.EXTENSION_RTREE_INDEX_DEFINITION;
              this.tableName = featureDao.table_name;
              this.primaryKeyColumn = featureDao.idColumns[0];
              this.columnName = featureDao.getGeometryColumnName();
              this.rtreeIndexDao = new RTreeIndexDao(geoPackage, featureDao);
              this.extensionExists = this.hasExtension(this.extensionName, this.tableName, this.columnName);
            };

            util.inherits(RTreeIndex, BaseExtension);

            RTreeIndex.prototype.getRTreeIndexExtension = function () {
              return this.getExtension(this.extensionName, this.tableName, this.columnName);
            };

            RTreeIndex.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(this.extensionName, this.tableName, this.columnName, this.extensionDefinition, Extension.WRITE_ONLY);
            };

            RTreeIndex.prototype.create = function () {
              if (this.extensionExists) {
                return Promise.resolve(this.getRTreeIndexExtension());
              }

              return this.getOrCreate(this.extensionName, this.tableName, this.columnName, RTreeIndexDao.EXTENSION_RTREE_INDEX_DEFINITION, Extension.WRITE_ONLY).then(function () {
                this.createAllFunctions();
                this.createRTreeIndex();
                this.loadRTreeIndex();
                this.createAllTriggers();
                return this.getRTreeIndexExtension();
              }.bind(this));
            };

            RTreeIndex.prototype.createAllTriggers = function () {
              var insertTrigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_insert AFTER INSERT ON ' + this.tableName + '  WHEN (new.' + this.columnName + ' NOT NULL AND NOT ST_IsEmpty(NEW.' + this.columnName + ')) ' + 'BEGIN ' + '  INSERT OR REPLACE INTO rtree_' + this.tableName + '_' + this.columnName + ' VALUES (' + '    NEW.' + this.primaryKeyColumn + ',' + '    ST_MinX(NEW.' + this.columnName + '), ST_MaxX(NEW.' + this.columnName + '), ' + '    ST_MinY(NEW.' + this.columnName + '), ST_MaxY(NEW.' + this.columnName + ') ' + '  ); ' + 'END;';
              var update1Trigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_update1 AFTER UPDATE OF ' + this.columnName + ' ON ' + this.tableName + '  WHEN OLD.' + this.primaryKeyColumn + ' = NEW.' + this.primaryKeyColumn + ' AND ' + '     (NEW.' + this.columnName + ' NOTNULL AND NOT ST_IsEmpty(NEW.' + this.columnName + ')) ' + 'BEGIN ' + '  INSERT OR REPLACE INTO rtree_' + this.tableName + '_' + this.columnName + ' VALUES (' + '    NEW.' + this.primaryKeyColumn + ',' + '    ST_MinX(NEW.' + this.columnName + '), ST_MaxX(NEW.' + this.columnName + '), ' + '    ST_MinY(NEW.' + this.columnName + '), ST_MaxY(NEW.' + this.columnName + ') ' + '  ); ' + 'END;';
              var update2Trigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_update2 AFTER UPDATE OF ' + this.columnName + ' ON ' + this.tableName + '  WHEN OLD.' + this.primaryKeyColumn + ' = NEW.' + this.primaryKeyColumn + ' AND ' + '       (NEW.' + this.columnName + ' ISNULL OR ST_IsEmpty(NEW.' + this.columnName + ')) ' + 'BEGIN ' + '  DELETE FROM rtree_' + this.tableName + '_' + this.columnName + ' WHERE id = OLD.' + this.primaryKeyColumn + '; ' + 'END;';
              var update3Trigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_update3 AFTER UPDATE OF ' + this.columnName + ' ON ' + this.tableName + '  WHEN OLD.' + this.primaryKeyColumn + ' != NEW.' + this.primaryKeyColumn + ' AND ' + '       (NEW.' + this.columnName + ' NOTNULL AND NOT ST_IsEmpty(NEW.' + this.columnName + ')) ' + 'BEGIN ' + '  DELETE FROM rtree_' + this.tableName + '_' + this.columnName + ' WHERE id = OLD.' + this.primaryKeyColumn + '; ' + '  INSERT OR REPLACE INTO rtree_' + this.tableName + '_' + this.columnName + ' VALUES (' + '    NEW.' + this.primaryKeyColumn + ', ' + '    ST_MinX(NEW.' + this.columnName + '), ST_MaxX(NEW.' + this.columnName + '), ' + '    ST_MinY(NEW.' + this.columnName + '), ST_MaxY(NEW.' + this.columnName + ')' + '  ); ' + 'END;';
              var update4Trigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_update4 AFTER UPDATE ON ' + this.tableName + '  WHEN OLD.' + this.primaryKeyColumn + ' != NEW.' + this.primaryKeyColumn + ' AND ' + '       (NEW.' + this.columnName + ' ISNULL OR ST_IsEmpty(NEW.' + this.columnName + ')) ' + 'BEGIN ' + '  DELETE FROM rtree_' + this.tableName + '_' + this.columnName + ' WHERE id IN (OLD.' + this.primaryKeyColumn + ', NEW.' + this.primaryKeyColumn + '); ' + 'END;';
              var deleteTrigger = 'CREATE TRIGGER rtree_' + this.tableName + '_' + this.columnName + '_delete AFTER DELETE ON ' + this.tableName + '  WHEN old.' + this.columnName + ' NOT NULL ' + 'BEGIN' + '  DELETE FROM rtree_' + this.tableName + '_' + this.columnName + ' WHERE id = OLD.' + this.primaryKeyColumn + '; ' + 'END;';
              this.connection.run(insertTrigger);
              this.connection.run(update1Trigger);
              this.connection.run(update2Trigger);
              this.connection.run(update3Trigger);
              this.connection.run(update4Trigger);
              this.connection.run(deleteTrigger);
            };

            RTreeIndex.prototype.loadRTreeIndex = function () {
              this.connection.run('INSERT OR REPLACE INTO rtree_' + this.tableName + '_' + this.columnName + ' SELECT ' + this.primaryKeyColumn + ', st_minx(' + this.columnName + '), st_maxx(' + this.columnName + '), st_miny(' + this.columnName + '), st_maxy(' + this.columnName + ') FROM ' + this.tableName);
            };

            RTreeIndex.prototype.createRTreeIndex = function () {
              this.connection.run('CREATE VIRTUAL TABLE rtree_' + this.tableName + '_' + this.columnName + ' USING rtree(id, minx, maxx, miny, maxy)');
            };

            RTreeIndex.prototype.createAllFunctions = function () {
              this.createMinXFunction();
              this.createMaxXFunction();
              this.createMinYFunction();
              this.createMaxYFunction();
              this.createIsEmptyFunction();
            };

            RTreeIndex.prototype.createMinXFunction = function () {
              this.connection.registerFunction('ST_MinX', function (buffer) {
                var geom = new GeometryData(buffer);
                var envelope = geom.envelope;

                if (!envelope) {
                  envelope = EnvelopeBuilder.buildEnvelopeWithGeometry(geom.geometry);
                }

                return envelope.minX;
              });
            };

            RTreeIndex.prototype.createMinYFunction = function () {
              this.connection.registerFunction('ST_MinY', function (buffer) {
                var geom = new GeometryData(buffer);
                var envelope = geom.envelope;

                if (!envelope) {
                  envelope = EnvelopeBuilder.buildEnvelopeWithGeometry(geom.geometry);
                }

                return envelope.minY;
              });
            };

            RTreeIndex.prototype.createMaxXFunction = function () {
              this.connection.registerFunction('ST_MaxX', function (buffer) {
                var geom = new GeometryData(buffer);
                var envelope = geom.envelope;

                if (!envelope) {
                  envelope = EnvelopeBuilder.buildEnvelopeWithGeometry(geom.geometry);
                }

                return envelope.maxX;
              });
            };

            RTreeIndex.prototype.createMaxYFunction = function () {
              this.connection.registerFunction('ST_MaxY', function (buffer) {
                var geom = new GeometryData(buffer);
                var envelope = geom.envelope;

                if (!envelope) {
                  envelope = EnvelopeBuilder.buildEnvelopeWithGeometry(geom.geometry);
                }

                return envelope.maxY;
              });
            };

            RTreeIndex.prototype.createIsEmptyFunction = function () {
              this.connection.registerFunction('ST_IsEmpty', function (buffer) {
                var geom = new GeometryData(buffer);
                return !geom || geom.empty || !geom.geometry;
              });
            };
            /**
             * RTree Index Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             */


            class RTreeIndexDao extends Dao {
              constructor(geoPackage, featureDao) {
                super(geoPackage);
                this.featureDao = featureDao;
              }

              queryWithGeometryEnvelope(envelope) {
                var tableName = this.featureDao.gpkgTableName;
                var where = '';
                var minXLessThanMaxX = envelope.minX < envelope.maxX;

                if (minXLessThanMaxX) {
                  where += this.buildWhereWithFieldAndValue('minx', envelope.maxX, '<=');
                  where += ' and ';
                  where += this.buildWhereWithFieldAndValue('maxx', envelope.minX, '>=');
                } else {
                  where += '(';
                  where += this.buildWhereWithFieldAndValue('minx', envelope.maxX, '<=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue('maxx', envelope.minX, '>=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue('minx', envelope.minX, '>=');
                  where += ' or ';
                  where += this.buildWhereWithFieldAndValue('maxx', envelope.maxX, '<=');
                  where += ')';
                }

                where += ' and ';
                where += this.buildWhereWithFieldAndValue('miny', envelope.maxY, '<=');
                where += ' and ';
                where += this.buildWhereWithFieldAndValue('maxy', envelope.minY, '>=');
                var whereArgs = [];
                whereArgs.push(envelope.maxX, envelope.minX);

                if (!minXLessThanMaxX) {
                  whereArgs.push(envelope.minX, envelope.maxX);
                }

                whereArgs.push(envelope.maxY, envelope.minY);
                var join = 'inner join ' + tableName + ' on ' + tableName + '.' + this.featureDao.idColumns[0] + ' = ' + this.gpkgTableName + '.id';
                return this.queryJoinWhereWithArgs(join, where, whereArgs, [tableName + '.*']);
              }

            }

            RTreeIndexDao.TABLE_NAME = "rtree";
            RTreeIndexDao.COLUMN_TABLE_NAME = RTreeIndexDao.TABLE_NAME + ".table_name";
            RTreeIndexDao.COLUMN_GEOM_ID = RTreeIndexDao.TABLE_NAME + ".geom_id";
            RTreeIndexDao.COLUMN_MIN_X = RTreeIndexDao.TABLE_NAME + ".minx";
            RTreeIndexDao.COLUMN_MAX_X = RTreeIndexDao.TABLE_NAME + ".maxx";
            RTreeIndexDao.COLUMN_MIN_Y = RTreeIndexDao.TABLE_NAME + ".miny";
            RTreeIndexDao.COLUMN_MAX_Y = RTreeIndexDao.TABLE_NAME + ".maxy";
            RTreeIndexDao.COLUMN_MIN_Z = RTreeIndexDao.TABLE_NAME + ".minz";
            RTreeIndexDao.COLUMN_MAX_Z = RTreeIndexDao.TABLE_NAME + ".maxz";
            RTreeIndexDao.COLUMN_MIN_M = RTreeIndexDao.TABLE_NAME + ".minm";
            RTreeIndexDao.COLUMN_MAX_M = RTreeIndexDao.TABLE_NAME + ".maxm";
            RTreeIndexDao.EXTENSION_NAME = 'gpkg_rtree_index';
            RTreeIndexDao.EXTENSION_RTREE_INDEX_AUTHOR = 'gpkg';
            RTreeIndexDao.EXTENSION_RTREE_INDEX_NAME_NO_AUTHOR = 'rtree_index';
            RTreeIndexDao.EXTENSION_RTREE_INDEX_DEFINITION = 'http://www.geopackage.org/spec/#extension_rtree';
            RTreeIndexDao.prototype.gpkgTableName = RTreeIndexDao.TABLE_NAME;

            /**
             * Feature Table Index
             * @module extension/index
             */
            /**
             * This class will either use the RTree index if it exists, or the
             * Feature Table Index NGA Extension implementation. This extension is used to
             * index Geometries within a feature table by their minimum bounding box for
             * bounding box queries.
             * @extends {module:extension/baseExtension~BaseExtension}
             * @class
             */

            var FeatureTableIndex = function (geoPackage, featureDao) {
              BaseExtension.call(this, geoPackage);
              this.progress;
              /**
               * Feature Dao to index
               * @type {module:features/user/featureDao~FeatureDao}
               */

              this.featureDao = featureDao;
              this.extensionName = Extension.buildExtensionName(FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_AUTHOR, FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_NAME_NO_AUTHOR);
              this.extensionDefinition = FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_DEFINITION;
              this.tableName = featureDao.table_name;
              this.columnName = featureDao.getGeometryColumnName();
              this.extensionsDao = geoPackage.getExtensionDao();
              this.tableIndexDao = geoPackage.getTableIndexDao();
              this.geometryIndexDao = geoPackage.getGeometryIndexDao(featureDao);
              this.rtreeIndexDao = new RTreeIndexDao(geoPackage, featureDao);
              this.rtreeIndexDao.gpkgTableName = 'rtree_' + this.tableName + '_' + this.columnName;
              this.rtreeIndex = new RTreeIndex(geoPackage, featureDao);
              /**
               * true if the table is indexed with an RTree
               * @type {Boolean}
               */

              this.rtreeIndexed = this.hasExtension('gpkg_rtree_index', this.tableName, this.columnName);
            };

            util.inherits(FeatureTableIndex, BaseExtension);
            /**
             * Index the table if not already indexed
             * @param  {Function} progress function which is called with progress while indexing
             * @return {Promise<Boolean>} promise resolved when the indexing is complete
             */

            FeatureTableIndex.prototype.index = function (progress) {
              return this.indexWithForce(false, progress);
            };
            /**
             * Index the table if not already indexed or force is true
             * @param  {Boolean} force force index even if the table is already indexed
             * @param  {Function} progress function which is called with progress while indexing
             * @return {Promise<Boolean>} promise resolved when the indexing is complete
             */


            FeatureTableIndex.prototype.indexWithForce = function (force, progress) {
              progress = progress || function () {};

              this.progress = function (message) {
                setTimeout(progress, 0, message);
              };

              var indexed = this.isIndexed();

              if (force || !indexed) {
                return this.getOrCreateExtension().then(function (extension) {
                  return this.getOrCreateTableIndex();
                }.bind(this)).then(function (tableIndex) {
                  return this.createOrClearGeometryIndicies().then(function () {
                    return this.indexTable(tableIndex);
                  }.bind(this)).then(function () {
                    return true;
                  });
                }.bind(this));
              } else {
                return Promise.resolve(indexed);
              }
            };
            /**
             * Check if the table is indexed either with an RTree or the NGA Feature Table Index
             * @return {Boolean}
             */


            FeatureTableIndex.prototype.isIndexed = function () {
              if (this.rtreeIndexed) return true;

              try {
                var result = this.getFeatureTableIndexExtension();

                if (result) {
                  var contentsDao = this.geoPackage.getContentsDao();
                  var contents = contentsDao.queryForId(this.tableName);
                  if (!contents) return false;
                  var lastChange = new Date(contents.last_change);
                  var tableIndex = this.tableIndexDao.queryForId(this.tableName);

                  if (!tableIndex || !tableIndex.last_indexed) {
                    return false;
                  }

                  var lastIndexed = new Date(tableIndex.last_indexed);
                  return lastIndexed >= lastChange;
                } else {
                  return false;
                }
              } catch (e) {
                return false;
              }
            };
            /**
             * Returns the feature table index extension for this table and column name if exists
             * @return {module:extension~Extension}
             */


            FeatureTableIndex.prototype.getFeatureTableIndexExtension = function () {
              return this.getExtension(this.extensionName, this.tableName, this.columnName);
            };
            /**
             * Get or create the extension for this table name and column name
             * @return {module:extension~Extension}
             */


            FeatureTableIndex.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(this.extensionName, this.tableName, this.columnName, this.extensionDefinition, Extension.READ_WRITE);
            };
            /**
             * Get or create if needed the table index
             * @return {Promise<TableIndex>}
             */


            FeatureTableIndex.prototype.getOrCreateTableIndex = function () {
              var tableIndex = this.getTableIndex();
              if (tableIndex) return Promise.resolve(tableIndex);
              return this.tableIndexDao.createTable().then(function () {
                this.createTableIndex();
                return this.getTableIndex();
              }.bind(this));
            };
            /**
             * Create the table index
             * @return {module:extension/index~TableIndex}
             */


            FeatureTableIndex.prototype.createTableIndex = function () {
              var ti = new TableIndex();
              ti.table_name = this.tableName;
              ti.last_indexed = this.lastIndexed;
              return this.tableIndexDao.create(ti);
            };
            /**
             * Get the table index
             * @return {module:extension/index~TableIndex}
             */


            FeatureTableIndex.prototype.getTableIndex = function () {
              if (this.tableIndexDao.isTableExists()) {
                return this.tableIndexDao.queryForId(this.tableName);
              } else {
                return;
              }
            };
            /**
             * Clear the geometry indices or create the table if needed
             * @return {Promise} resolved when complete
             */


            FeatureTableIndex.prototype.createOrClearGeometryIndicies = function () {
              return this.geometryIndexDao.createTable().then(function () {
                return this.clearGeometryIndicies();
              }.bind(this));
            };
            /**
             * Clears the geometry indices
             * @return {Number} number of rows deleted
             */


            FeatureTableIndex.prototype.clearGeometryIndicies = function () {
              var where = this.geometryIndexDao.buildWhereWithFieldAndValue(GeometryIndexDao.COLUMN_TABLE_NAME, this.tableName);
              var whereArgs = this.geometryIndexDao.buildWhereArgs(this.tableName);
              return this.geometryIndexDao.deleteWhere(where, whereArgs);
            };
            /**
             * Indexes the table
             * @param  {module:extension/index~TableIndex} tableIndex TableIndex
             * @return {Promise} resolved when complete
             */


            FeatureTableIndex.prototype.indexTable = function (tableIndex) {
              return new Promise(function (resolve, reject) {
                setTimeout(function () {
                  this.indexChunk(0, tableIndex, resolve, reject);
                }.bind(this));
              }.bind(this)).then(function (result) {
                return this.updateLastIndexed(tableIndex);
              }.bind(this));
            };
            /**
             * Indexes a chunk of 100 rows
             * @param  {Number} page       page to start on
             * @param  {module:extension/index~TableIndex} tableIndex TableIndex
             * @param  {Function} resolve    function to call when all chunks are indexed
             * @param  {Function} reject     called if there is an error
             */


            FeatureTableIndex.prototype.indexChunk = function (page, tableIndex, resolve, reject) {
              var rows = this.featureDao.queryForChunk(100, page);

              if (rows.length) {
                this.progress('Indexing ' + page * 100 + ' to ' + (page + 1) * 100);
                console.log('Indexing ' + page * 100 + ' to ' + (page + 1) * 100);
                rows.forEach(function (row) {
                  var fr = this.featureDao.getRow(row);
                  this.indexRow(tableIndex, fr.getId(), fr.getGeometry());
                }.bind(this));
                setTimeout(function () {
                  this.indexChunk(++page, tableIndex, resolve, reject);
                }.bind(this));
              } else {
                resolve();
              }
            };
            /**
             * Indexes a row
             * @param  {module:extension/index~TableIndex} tableIndex TableIndex`
             * @param  {Number} geomId     id of the row
             * @param  {module:geom/geometryData~GeometryData} geomData   GeometryData to index
             * @return {Boolean} success
             */


            FeatureTableIndex.prototype.indexRow = function (tableIndex, geomId, geomData) {
              if (!geomData) return false;
              var envelope = geomData.envelope;

              if (!envelope) {
                var geometry = geomData.geometry;

                if (geometry) {
                  envelope = EnvelopeBuilder.buildEnvelopeWithGeometry(geometry);
                }
              }

              if (envelope) {
                var geometryIndex = this.geometryIndexDao.populate(tableIndex, geomId, envelope);
                return this.geometryIndexDao.createOrUpdate(geometryIndex);
              } else {
                return false;
              }
            };
            /**
             * Update the last time this feature table was indexed
             * @param  {module:extension/index~TableIndex} tableIndex TableIndex
             * @return {Object} update status
             */


            FeatureTableIndex.prototype.updateLastIndexed = function (tableIndex) {
              if (!tableIndex) {
                tableIndex = new TableIndex();
                tableIndex.table_name = this.tableName;
              }

              tableIndex.last_indexed = new Date().toISOString();
              var updateIndex = this.tableIndexDao.createOrUpdate(tableIndex);
              return updateIndex;
            };
            /**
             * Query the index with the specified bounding box and projection
             * @param  {module:boundingBox~BoundingBox} boundingBox bounding box to query for
             * @param  {string} projection  projection the boundingBox is in
             * @return {Iterable}
             */


            FeatureTableIndex.prototype.queryWithBoundingBox = function (boundingBox, projection) {
              var projectedBoundingBox = boundingBox.projectBoundingBox(projection, this.featureDao.projection);
              var envelope = projectedBoundingBox.buildEnvelope();
              return this.queryWithGeometryEnvelope(envelope);
            };
            /**
             * Query witha geometry envelope
             * @param  {Envelope} envelope envelope
             * @return {Iterable}
             */


            FeatureTableIndex.prototype.queryWithGeometryEnvelope = function (envelope) {
              if (this.rtreeIndexed) {
                return this.rtreeIndexDao.queryWithGeometryEnvelope(envelope);
              } else {
                return this.geometryIndexDao.queryWithGeometryEnvelope(envelope);
              }
            };

            FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_AUTHOR = 'nga';
            FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_NAME_NO_AUTHOR = 'geometry_index';
            FeatureTableIndex.EXTENSION_GEOMETRY_INDEX_DEFINITION = 'http://ngageoint.github.io/GeoPackage/docs/extensions/geometry-index.html';

            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function unwrapExports (x) {
            	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            var helpers = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * @module helpers
               */

              /**
               * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
               *
               * @memberof helpers
               * @type {number}
               */

              exports.earthRadius = 6371008.8;
              /**
               * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
               *
               * @memberof helpers
               * @type {Object}
               */

              exports.factors = {
                centimeters: exports.earthRadius * 100,
                centimetres: exports.earthRadius * 100,
                degrees: exports.earthRadius / 111325,
                feet: exports.earthRadius * 3.28084,
                inches: exports.earthRadius * 39.370,
                kilometers: exports.earthRadius / 1000,
                kilometres: exports.earthRadius / 1000,
                meters: exports.earthRadius,
                metres: exports.earthRadius,
                miles: exports.earthRadius / 1609.344,
                millimeters: exports.earthRadius * 1000,
                millimetres: exports.earthRadius * 1000,
                nauticalmiles: exports.earthRadius / 1852,
                radians: 1,
                yards: exports.earthRadius / 1.0936
              };
              /**
               * Units of measurement factors based on 1 meter.
               *
               * @memberof helpers
               * @type {Object}
               */

              exports.unitsFactors = {
                centimeters: 100,
                centimetres: 100,
                degrees: 1 / 111325,
                feet: 3.28084,
                inches: 39.370,
                kilometers: 1 / 1000,
                kilometres: 1 / 1000,
                meters: 1,
                metres: 1,
                miles: 1 / 1609.344,
                millimeters: 1000,
                millimetres: 1000,
                nauticalmiles: 1 / 1852,
                radians: 1 / exports.earthRadius,
                yards: 1 / 1.0936
              };
              /**
               * Area of measurement factors based on 1 square meter.
               *
               * @memberof helpers
               * @type {Object}
               */

              exports.areaFactors = {
                acres: 0.000247105,
                centimeters: 10000,
                centimetres: 10000,
                feet: 10.763910417,
                inches: 1550.003100006,
                kilometers: 0.000001,
                kilometres: 0.000001,
                meters: 1,
                metres: 1,
                miles: 3.86e-7,
                millimeters: 1000000,
                millimetres: 1000000,
                yards: 1.195990046
              };
              /**
               * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
               *
               * @name feature
               * @param {Geometry} geometry input geometry
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature} a GeoJSON Feature
               * @example
               * var geometry = {
               *   "type": "Point",
               *   "coordinates": [110, 50]
               * };
               *
               * var feature = turf.feature(geometry);
               *
               * //=feature
               */

              function feature(geom, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var feat = {
                  type: "Feature"
                };

                if (options.id === 0 || options.id) {
                  feat.id = options.id;
                }

                if (options.bbox) {
                  feat.bbox = options.bbox;
                }

                feat.properties = properties || {};
                feat.geometry = geom;
                return feat;
              }

              exports.feature = feature;
              /**
               * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
               * For GeometryCollection type use `helpers.geometryCollection`
               *
               * @name geometry
               * @param {string} type Geometry Type
               * @param {Array<any>} coordinates Coordinates
               * @param {Object} [options={}] Optional Parameters
               * @returns {Geometry} a GeoJSON Geometry
               * @example
               * var type = "Point";
               * var coordinates = [110, 50];
               * var geometry = turf.geometry(type, coordinates);
               * // => geometry
               */

              function geometry(type, coordinates, options) {
                if (options === void 0) {
                  options = {};
                }

                switch (type) {
                  case "Point":
                    return point(coordinates).geometry;

                  case "LineString":
                    return lineString(coordinates).geometry;

                  case "Polygon":
                    return polygon(coordinates).geometry;

                  case "MultiPoint":
                    return multiPoint(coordinates).geometry;

                  case "MultiLineString":
                    return multiLineString(coordinates).geometry;

                  case "MultiPolygon":
                    return multiPolygon(coordinates).geometry;

                  default:
                    throw new Error(type + " is invalid");
                }
              }

              exports.geometry = geometry;
              /**
               * Creates a {@link Point} {@link Feature} from a Position.
               *
               * @name point
               * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<Point>} a Point feature
               * @example
               * var point = turf.point([-75.343, 39.984]);
               *
               * //=point
               */

              function point(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = {
                  type: "Point",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.point = point;
              /**
               * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.
               *
               * @name points
               * @param {Array<Array<number>>} coordinates an array of Points
               * @param {Object} [properties={}] Translate these properties to each Feature
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
               * associated with the FeatureCollection
               * @param {string|number} [options.id] Identifier associated with the FeatureCollection
               * @returns {FeatureCollection<Point>} Point Feature
               * @example
               * var points = turf.points([
               *   [-75, 39],
               *   [-80, 45],
               *   [-78, 50]
               * ]);
               *
               * //=points
               */

              function points(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                return featureCollection(coordinates.map(function (coords) {
                  return point(coords, properties);
                }), options);
              }

              exports.points = points;
              /**
               * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
               *
               * @name polygon
               * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<Polygon>} Polygon Feature
               * @example
               * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
               *
               * //=polygon
               */

              function polygon(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
                  var ring = coordinates_1[_i];

                  if (ring.length < 4) {
                    throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
                  }

                  for (var j = 0; j < ring[ring.length - 1].length; j++) {
                    // Check if first point of Polygon contains two numbers
                    if (ring[ring.length - 1][j] !== ring[0][j]) {
                      throw new Error("First and last Position are not equivalent.");
                    }
                  }
                }

                var geom = {
                  type: "Polygon",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.polygon = polygon;
              /**
               * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.
               *
               * @name polygons
               * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the FeatureCollection
               * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection
               * @example
               * var polygons = turf.polygons([
               *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],
               *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],
               * ]);
               *
               * //=polygons
               */

              function polygons(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                return featureCollection(coordinates.map(function (coords) {
                  return polygon(coords, properties);
                }), options);
              }

              exports.polygons = polygons;
              /**
               * Creates a {@link LineString} {@link Feature} from an Array of Positions.
               *
               * @name lineString
               * @param {Array<Array<number>>} coordinates an array of Positions
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<LineString>} LineString Feature
               * @example
               * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});
               * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});
               *
               * //=linestring1
               * //=linestring2
               */

              function lineString(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                if (coordinates.length < 2) {
                  throw new Error("coordinates must be an array of two or more positions");
                }

                var geom = {
                  type: "LineString",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.lineString = lineString;
              /**
               * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.
               *
               * @name lineStrings
               * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
               * associated with the FeatureCollection
               * @param {string|number} [options.id] Identifier associated with the FeatureCollection
               * @returns {FeatureCollection<LineString>} LineString FeatureCollection
               * @example
               * var linestrings = turf.lineStrings([
               *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],
               *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]
               * ]);
               *
               * //=linestrings
               */

              function lineStrings(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                return featureCollection(coordinates.map(function (coords) {
                  return lineString(coords, properties);
                }), options);
              }

              exports.lineStrings = lineStrings;
              /**
               * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
               *
               * @name featureCollection
               * @param {Feature[]} features input features
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {FeatureCollection} FeatureCollection of Features
               * @example
               * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
               * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
               * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
               *
               * var collection = turf.featureCollection([
               *   locationA,
               *   locationB,
               *   locationC
               * ]);
               *
               * //=collection
               */

              function featureCollection(features, options) {
                if (options === void 0) {
                  options = {};
                }

                var fc = {
                  type: "FeatureCollection"
                };

                if (options.id) {
                  fc.id = options.id;
                }

                if (options.bbox) {
                  fc.bbox = options.bbox;
                }

                fc.features = features;
                return fc;
              }

              exports.featureCollection = featureCollection;
              /**
               * Creates a {@link Feature<MultiLineString>} based on a
               * coordinate array. Properties can be added optionally.
               *
               * @name multiLineString
               * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<MultiLineString>} a MultiLineString feature
               * @throws {Error} if no coordinates are passed
               * @example
               * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
               *
               * //=multiLine
               */

              function multiLineString(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = {
                  type: "MultiLineString",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.multiLineString = multiLineString;
              /**
               * Creates a {@link Feature<MultiPoint>} based on a
               * coordinate array. Properties can be added optionally.
               *
               * @name multiPoint
               * @param {Array<Array<number>>} coordinates an array of Positions
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<MultiPoint>} a MultiPoint feature
               * @throws {Error} if no coordinates are passed
               * @example
               * var multiPt = turf.multiPoint([[0,0],[10,10]]);
               *
               * //=multiPt
               */

              function multiPoint(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = {
                  type: "MultiPoint",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.multiPoint = multiPoint;
              /**
               * Creates a {@link Feature<MultiPolygon>} based on a
               * coordinate array. Properties can be added optionally.
               *
               * @name multiPolygon
               * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<MultiPolygon>} a multipolygon feature
               * @throws {Error} if no coordinates are passed
               * @example
               * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
               *
               * //=multiPoly
               *
               */

              function multiPolygon(coordinates, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = {
                  type: "MultiPolygon",
                  coordinates: coordinates
                };
                return feature(geom, properties, options);
              }

              exports.multiPolygon = multiPolygon;
              /**
               * Creates a {@link Feature<GeometryCollection>} based on a
               * coordinate array. Properties can be added optionally.
               *
               * @name geometryCollection
               * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
               * @param {Object} [properties={}] an Object of key-value pairs to add as properties
               * @param {Object} [options={}] Optional Parameters
               * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
               * @param {string|number} [options.id] Identifier associated with the Feature
               * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
               * @example
               * var pt = turf.geometry("Point", [100, 0]);
               * var line = turf.geometry("LineString", [[101, 0], [102, 1]]);
               * var collection = turf.geometryCollection([pt, line]);
               *
               * // => collection
               */

              function geometryCollection(geometries, properties, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = {
                  type: "GeometryCollection",
                  geometries: geometries
                };
                return feature(geom, properties, options);
              }

              exports.geometryCollection = geometryCollection;
              /**
               * Round number to precision
               *
               * @param {number} num Number
               * @param {number} [precision=0] Precision
               * @returns {number} rounded number
               * @example
               * turf.round(120.4321)
               * //=120
               *
               * turf.round(120.4321, 2)
               * //=120.43
               */

              function round(num, precision) {
                if (precision === void 0) {
                  precision = 0;
                }

                if (precision && !(precision >= 0)) {
                  throw new Error("precision must be a positive number");
                }

                var multiplier = Math.pow(10, precision || 0);
                return Math.round(num * multiplier) / multiplier;
              }

              exports.round = round;
              /**
               * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
               * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
               *
               * @name radiansToLength
               * @param {number} radians in radians across the sphere
               * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
               * meters, kilometres, kilometers.
               * @returns {number} distance
               */

              function radiansToLength(radians, units) {
                if (units === void 0) {
                  units = "kilometers";
                }

                var factor = exports.factors[units];

                if (!factor) {
                  throw new Error(units + " units is invalid");
                }

                return radians * factor;
              }

              exports.radiansToLength = radiansToLength;
              /**
               * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
               * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
               *
               * @name lengthToRadians
               * @param {number} distance in real units
               * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
               * meters, kilometres, kilometers.
               * @returns {number} radians
               */

              function lengthToRadians(distance, units) {
                if (units === void 0) {
                  units = "kilometers";
                }

                var factor = exports.factors[units];

                if (!factor) {
                  throw new Error(units + " units is invalid");
                }

                return distance / factor;
              }

              exports.lengthToRadians = lengthToRadians;
              /**
               * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
               * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
               *
               * @name lengthToDegrees
               * @param {number} distance in real units
               * @param {string} [units="kilometers"] can be degrees, radians, miles, or kilometers inches, yards, metres,
               * meters, kilometres, kilometers.
               * @returns {number} degrees
               */

              function lengthToDegrees(distance, units) {
                return radiansToDegrees(lengthToRadians(distance, units));
              }

              exports.lengthToDegrees = lengthToDegrees;
              /**
               * Converts any bearing angle from the north line direction (positive clockwise)
               * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
               *
               * @name bearingToAzimuth
               * @param {number} bearing angle, between -180 and +180 degrees
               * @returns {number} angle between 0 and 360 degrees
               */

              function bearingToAzimuth(bearing) {
                var angle = bearing % 360;

                if (angle < 0) {
                  angle += 360;
                }

                return angle;
              }

              exports.bearingToAzimuth = bearingToAzimuth;
              /**
               * Converts an angle in radians to degrees
               *
               * @name radiansToDegrees
               * @param {number} radians angle in radians
               * @returns {number} degrees between 0 and 360 degrees
               */

              function radiansToDegrees(radians) {
                var degrees = radians % (2 * Math.PI);
                return degrees * 180 / Math.PI;
              }

              exports.radiansToDegrees = radiansToDegrees;
              /**
               * Converts an angle in degrees to radians
               *
               * @name degreesToRadians
               * @param {number} degrees angle between 0 and 360 degrees
               * @returns {number} angle in radians
               */

              function degreesToRadians(degrees) {
                var radians = degrees % 360;
                return radians * Math.PI / 180;
              }

              exports.degreesToRadians = degreesToRadians;
              /**
               * Converts a length to the requested unit.
               * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
               *
               * @param {number} length to be converted
               * @param {Units} [originalUnit="kilometers"] of the length
               * @param {Units} [finalUnit="kilometers"] returned unit
               * @returns {number} the converted length
               */

              function convertLength(length, originalUnit, finalUnit) {
                if (originalUnit === void 0) {
                  originalUnit = "kilometers";
                }

                if (finalUnit === void 0) {
                  finalUnit = "kilometers";
                }

                if (!(length >= 0)) {
                  throw new Error("length must be a positive number");
                }

                return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);
              }

              exports.convertLength = convertLength;
              /**
               * Converts a area to the requested unit.
               * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches
               * @param {number} area to be converted
               * @param {Units} [originalUnit="meters"] of the distance
               * @param {Units} [finalUnit="kilometers"] returned unit
               * @returns {number} the converted distance
               */

              function convertArea(area, originalUnit, finalUnit) {
                if (originalUnit === void 0) {
                  originalUnit = "meters";
                }

                if (finalUnit === void 0) {
                  finalUnit = "kilometers";
                }

                if (!(area >= 0)) {
                  throw new Error("area must be a positive number");
                }

                var startFactor = exports.areaFactors[originalUnit];

                if (!startFactor) {
                  throw new Error("invalid original units");
                }

                var finalFactor = exports.areaFactors[finalUnit];

                if (!finalFactor) {
                  throw new Error("invalid final units");
                }

                return area / startFactor * finalFactor;
              }

              exports.convertArea = convertArea;
              /**
               * isNumber
               *
               * @param {*} num Number to validate
               * @returns {boolean} true/false
               * @example
               * turf.isNumber(123)
               * //=true
               * turf.isNumber('foo')
               * //=false
               */

              function isNumber(num) {
                return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\s*$/.test(num);
              }

              exports.isNumber = isNumber;
              /**
               * isObject
               *
               * @param {*} input variable to validate
               * @returns {boolean} true/false
               * @example
               * turf.isObject({elevation: 10})
               * //=true
               * turf.isObject('foo')
               * //=false
               */

              function isObject(input) {
                return !!input && input.constructor === Object;
              }

              exports.isObject = isObject;
              /**
               * Validate BBox
               *
               * @private
               * @param {Array<number>} bbox BBox to validate
               * @returns {void}
               * @throws Error if BBox is not valid
               * @example
               * validateBBox([-180, -40, 110, 50])
               * //=OK
               * validateBBox([-180, -40])
               * //=Error
               * validateBBox('Foo')
               * //=Error
               * validateBBox(5)
               * //=Error
               * validateBBox(null)
               * //=Error
               * validateBBox(undefined)
               * //=Error
               */

              function validateBBox(bbox) {
                if (!bbox) {
                  throw new Error("bbox is required");
                }

                if (!Array.isArray(bbox)) {
                  throw new Error("bbox must be an Array");
                }

                if (bbox.length !== 4 && bbox.length !== 6) {
                  throw new Error("bbox must be an Array of 4 or 6 numbers");
                }

                bbox.forEach(function (num) {
                  if (!isNumber(num)) {
                    throw new Error("bbox must only contain numbers");
                  }
                });
              }

              exports.validateBBox = validateBBox;
              /**
               * Validate Id
               *
               * @private
               * @param {string|number} id Id to validate
               * @returns {void}
               * @throws Error if Id is not valid
               * @example
               * validateId([-180, -40, 110, 50])
               * //=Error
               * validateId([-180, -40])
               * //=Error
               * validateId('Foo')
               * //=OK
               * validateId(5)
               * //=OK
               * validateId(null)
               * //=Error
               * validateId(undefined)
               * //=Error
               */

              function validateId(id) {
                if (!id) {
                  throw new Error("id is required");
                }

                if (["string", "number"].indexOf(typeof id) === -1) {
                  throw new Error("id must be a number or a string");
                }
              }

              exports.validateId = validateId; // Deprecated methods

              function radians2degrees() {
                throw new Error("method has been renamed to `radiansToDegrees`");
              }

              exports.radians2degrees = radians2degrees;

              function degrees2radians() {
                throw new Error("method has been renamed to `degreesToRadians`");
              }

              exports.degrees2radians = degrees2radians;

              function distanceToDegrees() {
                throw new Error("method has been renamed to `lengthToDegrees`");
              }

              exports.distanceToDegrees = distanceToDegrees;

              function distanceToRadians() {
                throw new Error("method has been renamed to `lengthToRadians`");
              }

              exports.distanceToRadians = distanceToRadians;

              function radiansToDistance() {
                throw new Error("method has been renamed to `radiansToLength`");
              }

              exports.radiansToDistance = radiansToDistance;

              function bearingToAngle() {
                throw new Error("method has been renamed to `bearingToAzimuth`");
              }

              exports.bearingToAngle = bearingToAngle;

              function convertDistance() {
                throw new Error("method has been renamed to `convertLength`");
              }

              exports.convertDistance = convertDistance;
            });
            unwrapExports(helpers);
            var helpers_1 = helpers.earthRadius;
            var helpers_2 = helpers.factors;
            var helpers_3 = helpers.unitsFactors;
            var helpers_4 = helpers.areaFactors;
            var helpers_5 = helpers.feature;
            var helpers_6 = helpers.geometry;
            var helpers_7 = helpers.point;
            var helpers_8 = helpers.points;
            var helpers_9 = helpers.polygon;
            var helpers_10 = helpers.polygons;
            var helpers_11 = helpers.lineString;
            var helpers_12 = helpers.lineStrings;
            var helpers_13 = helpers.featureCollection;
            var helpers_14 = helpers.multiLineString;
            var helpers_15 = helpers.multiPoint;
            var helpers_16 = helpers.multiPolygon;
            var helpers_17 = helpers.geometryCollection;
            var helpers_18 = helpers.round;
            var helpers_19 = helpers.radiansToLength;
            var helpers_20 = helpers.lengthToRadians;
            var helpers_21 = helpers.lengthToDegrees;
            var helpers_22 = helpers.bearingToAzimuth;
            var helpers_23 = helpers.radiansToDegrees;
            var helpers_24 = helpers.degreesToRadians;
            var helpers_25 = helpers.convertLength;
            var helpers_26 = helpers.convertArea;
            var helpers_27 = helpers.isNumber;
            var helpers_28 = helpers.isObject;
            var helpers_29 = helpers.validateBBox;
            var helpers_30 = helpers.validateId;
            var helpers_31 = helpers.radians2degrees;
            var helpers_32 = helpers.degrees2radians;
            var helpers_33 = helpers.distanceToDegrees;
            var helpers_34 = helpers.distanceToRadians;
            var helpers_35 = helpers.radiansToDistance;
            var helpers_36 = helpers.bearingToAngle;
            var helpers_37 = helpers.convertDistance;

            var invariant = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
               *
               * @name getCoord
               * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers
               * @returns {Array<number>} coordinates
               * @example
               * var pt = turf.point([10, 10]);
               *
               * var coord = turf.getCoord(pt);
               * //= [10, 10]
               */

              function getCoord(coord) {
                if (!coord) {
                  throw new Error("coord is required");
                }

                if (!Array.isArray(coord)) {
                  if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
                    return coord.geometry.coordinates;
                  }

                  if (coord.type === "Point") {
                    return coord.coordinates;
                  }
                }

                if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
                  return coord;
                }

                throw new Error("coord must be GeoJSON Point or an Array of numbers");
              }

              exports.getCoord = getCoord;
              /**
               * Unwrap coordinates from a Feature, Geometry Object or an Array
               *
               * @name getCoords
               * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array
               * @returns {Array<any>} coordinates
               * @example
               * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
               *
               * var coords = turf.getCoords(poly);
               * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
               */

              function getCoords(coords) {
                if (Array.isArray(coords)) {
                  return coords;
                } // Feature


                if (coords.type === "Feature") {
                  if (coords.geometry !== null) {
                    return coords.geometry.coordinates;
                  }
                } else {
                  // Geometry
                  if (coords.coordinates) {
                    return coords.coordinates;
                  }
                }

                throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array");
              }

              exports.getCoords = getCoords;
              /**
               * Checks if coordinates contains a number
               *
               * @name containsNumber
               * @param {Array<any>} coordinates GeoJSON Coordinates
               * @returns {boolean} true if Array contains a number
               */

              function containsNumber(coordinates) {
                if (coordinates.length > 1 && helpers.isNumber(coordinates[0]) && helpers.isNumber(coordinates[1])) {
                  return true;
                }

                if (Array.isArray(coordinates[0]) && coordinates[0].length) {
                  return containsNumber(coordinates[0]);
                }

                throw new Error("coordinates must only contain numbers");
              }

              exports.containsNumber = containsNumber;
              /**
               * Enforce expectations about types of GeoJSON objects for Turf.
               *
               * @name geojsonType
               * @param {GeoJSON} value any GeoJSON object
               * @param {string} type expected GeoJSON type
               * @param {string} name name of calling function
               * @throws {Error} if value is not the expected type.
               */

              function geojsonType(value, type, name) {
                if (!type || !name) {
                  throw new Error("type and name required");
                }

                if (!value || value.type !== type) {
                  throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + value.type);
                }
              }

              exports.geojsonType = geojsonType;
              /**
               * Enforce expectations about types of {@link Feature} inputs for Turf.
               * Internally this uses {@link geojsonType} to judge geometry types.
               *
               * @name featureOf
               * @param {Feature} feature a feature with an expected geometry type
               * @param {string} type expected GeoJSON type
               * @param {string} name name of calling function
               * @throws {Error} error if value is not the expected type.
               */

              function featureOf(feature, type, name) {
                if (!feature) {
                  throw new Error("No feature passed");
                }

                if (!name) {
                  throw new Error(".featureOf() requires a name");
                }

                if (!feature || feature.type !== "Feature" || !feature.geometry) {
                  throw new Error("Invalid input to " + name + ", Feature with geometry required");
                }

                if (!feature.geometry || feature.geometry.type !== type) {
                  throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + feature.geometry.type);
                }
              }

              exports.featureOf = featureOf;
              /**
               * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.
               * Internally this uses {@link geojsonType} to judge geometry types.
               *
               * @name collectionOf
               * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged
               * @param {string} type expected GeoJSON type
               * @param {string} name name of calling function
               * @throws {Error} if value is not the expected type.
               */

              function collectionOf(featureCollection, type, name) {
                if (!featureCollection) {
                  throw new Error("No featureCollection passed");
                }

                if (!name) {
                  throw new Error(".collectionOf() requires a name");
                }

                if (!featureCollection || featureCollection.type !== "FeatureCollection") {
                  throw new Error("Invalid input to " + name + ", FeatureCollection required");
                }

                for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {
                  var feature = _a[_i];

                  if (!feature || feature.type !== "Feature" || !feature.geometry) {
                    throw new Error("Invalid input to " + name + ", Feature with geometry required");
                  }

                  if (!feature.geometry || feature.geometry.type !== type) {
                    throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + feature.geometry.type);
                  }
                }
              }

              exports.collectionOf = collectionOf;
              /**
               * Get Geometry from Feature or Geometry Object
               *
               * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
               * @returns {Geometry|null} GeoJSON Geometry Object
               * @throws {Error} if geojson is not a Feature or Geometry Object
               * @example
               * var point = {
               *   "type": "Feature",
               *   "properties": {},
               *   "geometry": {
               *     "type": "Point",
               *     "coordinates": [110, 40]
               *   }
               * }
               * var geom = turf.getGeom(point)
               * //={"type": "Point", "coordinates": [110, 40]}
               */

              function getGeom(geojson) {
                if (geojson.type === "Feature") {
                  return geojson.geometry;
                }

                return geojson;
              }

              exports.getGeom = getGeom;
              /**
               * Get GeoJSON object's type, Geometry type is prioritize.
               *
               * @param {GeoJSON} geojson GeoJSON object
               * @param {string} [name="geojson"] name of the variable to display in error message
               * @returns {string} GeoJSON type
               * @example
               * var point = {
               *   "type": "Feature",
               *   "properties": {},
               *   "geometry": {
               *     "type": "Point",
               *     "coordinates": [110, 40]
               *   }
               * }
               * var geom = turf.getType(point)
               * //="Point"
               */

              function getType(geojson, name) {
                if (geojson.type === "FeatureCollection") {
                  return "FeatureCollection";
                }

                if (geojson.type === "GeometryCollection") {
                  return "GeometryCollection";
                }

                if (geojson.type === "Feature" && geojson.geometry !== null) {
                  return geojson.geometry.type;
                }

                return geojson.type;
              }

              exports.getType = getType;
            });
            unwrapExports(invariant);
            var invariant_1 = invariant.getCoord;
            var invariant_2 = invariant.getCoords;
            var invariant_3 = invariant.containsNumber;
            var invariant_4 = invariant.geojsonType;
            var invariant_5 = invariant.featureOf;
            var invariant_6 = invariant.collectionOf;
            var invariant_7 = invariant.getGeom;
            var invariant_8 = invariant.getType;

            var meta$1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, '__esModule', {
                value: true
              });
              /**
               * Callback for coordEach
               *
               * @callback coordEachCallback
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
               *
               * @name coordEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */

              function coordEach(geojson, callback, excludeWrapCoord) {
                // Handles null Geometry -- Skips this GeoJSON
                if (geojson === null) return;
                var j,
                    k,
                    l,
                    geometry,
                    stopG,
                    coords,
                    geometryMaybeCollection,
                    wrapShrink = 0,
                    coordIndex = 0,
                    isGeometryCollection,
                    type = geojson.type,
                    isFeatureCollection = type === 'FeatureCollection',
                    isFeature = type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
                    var multiFeatureIndex = 0;
                    var geometryIndex = 0;
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

                    if (geometry === null) continue;
                    coords = geometry.coordinates;
                    var geomType = geometry.type;
                    wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;

                    switch (geomType) {
                      case null:
                        break;

                      case 'Point':
                        if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                        coordIndex++;
                        multiFeatureIndex++;
                        break;

                      case 'LineString':
                      case 'MultiPoint':
                        for (j = 0; j < coords.length; j++) {
                          if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                          coordIndex++;
                          if (geomType === 'MultiPoint') multiFeatureIndex++;
                        }

                        if (geomType === 'LineString') multiFeatureIndex++;
                        break;

                      case 'Polygon':
                      case 'MultiLineString':
                        for (j = 0; j < coords.length; j++) {
                          for (k = 0; k < coords[j].length - wrapShrink; k++) {
                            if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                            coordIndex++;
                          }

                          if (geomType === 'MultiLineString') multiFeatureIndex++;
                          if (geomType === 'Polygon') geometryIndex++;
                        }

                        if (geomType === 'Polygon') multiFeatureIndex++;
                        break;

                      case 'MultiPolygon':
                        for (j = 0; j < coords.length; j++) {
                          geometryIndex = 0;

                          for (k = 0; k < coords[j].length; k++) {
                            for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                              if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                              coordIndex++;
                            }

                            geometryIndex++;
                          }

                          multiFeatureIndex++;
                        }

                        break;

                      case 'GeometryCollection':
                        for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;

                        break;

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  }
                }
              }
              /**
               * Callback for coordReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback coordReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
               *
               * @name coordReduce
               * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentCoord;
               * });
               */


              function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
                var previousValue = initialValue;
                coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                }, excludeWrapCoord);
                return previousValue;
              }
              /**
               * Callback for propEach
               *
               * @callback propEachCallback
               * @param {Object} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over properties in any GeoJSON object, similar to Array.forEach()
               *
               * @name propEach
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentProperties, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propEach(features, function (currentProperties, featureIndex) {
               *   //=currentProperties
               *   //=featureIndex
               * });
               */


              function propEach(geojson, callback) {
                var i;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    for (i = 0; i < geojson.features.length; i++) {
                      if (callback(geojson.features[i].properties, i) === false) break;
                    }

                    break;

                  case 'Feature':
                    callback(geojson.properties, 0);
                    break;
                }
              }
              /**
               * Callback for propReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback propReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {*} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce properties in any GeoJSON object into a single value,
               * similar to how Array.reduce works. However, in this case we lazily run
               * the reduction, so an array of all properties is unnecessary.
               *
               * @name propReduce
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
               *   //=previousValue
               *   //=currentProperties
               *   //=featureIndex
               *   return currentProperties
               * });
               */


              function propReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                propEach(geojson, function (currentProperties, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for featureEach
               *
               * @callback featureEachCallback
               * @param {Feature<any>} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name featureEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.featureEach(features, function (currentFeature, featureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               * });
               */


              function featureEach(geojson, callback) {
                if (geojson.type === 'Feature') {
                  callback(geojson, 0);
                } else if (geojson.type === 'FeatureCollection') {
                  for (var i = 0; i < geojson.features.length; i++) {
                    if (callback(geojson.features[i], i) === false) break;
                  }
                }
              }
              /**
               * Callback for featureReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback featureReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name featureReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   return currentFeature
               * });
               */


              function featureReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                featureEach(geojson, function (currentFeature, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
                });
                return previousValue;
              }
              /**
               * Get all coordinates from any GeoJSON object.
               *
               * @name coordAll
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @returns {Array<Array<number>>} coordinate position array
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * var coords = turf.coordAll(features);
               * //= [[26, 37], [36, 53]]
               */


              function coordAll(geojson) {
                var coords = [];
                coordEach(geojson, function (coord) {
                  coords.push(coord);
                });
                return coords;
              }
              /**
               * Callback for geomEach
               *
               * @callback geomEachCallback
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
               *
               * @name geomEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               * });
               */


              function geomEach(geojson, callback) {
                var i,
                    j,
                    g,
                    geometry,
                    stopG,
                    geometryMaybeCollection,
                    isGeometryCollection,
                    featureProperties,
                    featureBBox,
                    featureId,
                    featureIndex = 0,
                    isFeatureCollection = geojson.type === 'FeatureCollection',
                    isFeature = geojson.type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (i = 0; i < stop; i++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
                  featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
                  featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
                  featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (g = 0; g < stopG; g++) {
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

                    if (geometry === null) {
                      if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                      continue;
                    }

                    switch (geometry.type) {
                      case 'Point':
                      case 'LineString':
                      case 'MultiPoint':
                      case 'Polygon':
                      case 'MultiLineString':
                      case 'MultiPolygon':
                        {
                          if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          break;
                        }

                      case 'GeometryCollection':
                        {
                          for (j = 0; j < geometry.geometries.length; j++) {
                            if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          }

                          break;
                        }

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  } // Only increase `featureIndex` per each feature


                  featureIndex++;
                }
              }
              /**
               * Callback for geomReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback geomReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Reduce geometry in any GeoJSON object, similar to Array.reduce().
               *
               * @name geomReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=previousValue
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               *   return currentGeometry
               * });
               */


              function geomReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
                });
                return previousValue;
              }
              /**
               * Callback for flattenEach
               *
               * @callback flattenEachCallback
               * @param {Feature} currentFeature The current flattened feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Iterate over flattened features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name flattenEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               * });
               */


              function flattenEach(geojson, callback) {
                geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
                  // Callback for single geometry
                  var type = geometry === null ? null : geometry.type;

                  switch (type) {
                    case null:
                    case 'Point':
                    case 'LineString':
                    case 'Polygon':
                      if (callback(helpers.feature(geometry, properties, {
                        bbox: bbox,
                        id: id
                      }), featureIndex, 0) === false) return false;
                      return;
                  }

                  var geomType; // Callback for multi-geometry

                  switch (type) {
                    case 'MultiPoint':
                      geomType = 'Point';
                      break;

                    case 'MultiLineString':
                      geomType = 'LineString';
                      break;

                    case 'MultiPolygon':
                      geomType = 'Polygon';
                      break;
                  }

                  for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
                    var coordinate = geometry.coordinates[multiFeatureIndex];
                    var geom = {
                      type: geomType,
                      coordinates: coordinate
                    };
                    if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
                  }
                });
              }
              /**
               * Callback for flattenReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback flattenReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
               *
               * @name flattenReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   return currentFeature
               * });
               */


              function flattenReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
                  if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for segmentEach
               *
               * @callback segmentEachCallback
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               * @returns {void}
               */

              /**
               * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //=currentSegment
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   //=segmentIndex
               * });
               *
               * // Calculate the total number of segments
               * var total = 0;
               * turf.segmentEach(polygon, function () {
               *     total++;
               * });
               */


              function segmentEach(geojson, callback) {
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  var segmentIndex = 0; // Exclude null Geometries

                  if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

                  var type = feature.geometry.type;
                  if (type === 'Point' || type === 'MultiPoint') return; // Generate 2-vertex line segments

                  var previousCoords;
                  var previousFeatureIndex = 0;
                  var previousMultiIndex = 0;
                  var prevGeomIndex = 0;
                  if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
                    // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
                    if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
                      previousCoords = currentCoord;
                      previousFeatureIndex = featureIndex;
                      previousMultiIndex = multiPartIndexCoord;
                      prevGeomIndex = geometryIndex;
                      segmentIndex = 0;
                      return;
                    }

                    var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);
                    if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
                    segmentIndex++;
                    previousCoords = currentCoord;
                  }) === false) return false;
                });
              }
              /**
               * Callback for segmentReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback segmentReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               */

              /**
               * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //= previousSegment
               *   //= currentSegment
               *   //= featureIndex
               *   //= multiFeatureIndex
               *   //= geometryIndex
               *   //= segmentInex
               *   return currentSegment
               * });
               *
               * // Calculate the total number of segments
               * var initialValue = 0
               * var total = turf.segmentReduce(polygon, function (previousValue) {
               *     previousValue++;
               *     return previousValue;
               * }, initialValue);
               */


              function segmentReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                var started = false;
                segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
                  if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
                  started = true;
                });
                return previousValue;
              }
              /**
               * Callback for lineEach
               *
               * @callback lineEachCallback
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
               * similar to Array.forEach.
               *
               * @name lineEach
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @example
               * var multiLine = turf.multiLineString([
               *   [[26, 37], [35, 45]],
               *   [[36, 53], [38, 50], [41, 55]]
               * ]);
               *
               * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */


              function lineEach(geojson, callback) {
                // validation
                if (!geojson) throw new Error('geojson is required');
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  if (feature.geometry === null) return;
                  var type = feature.geometry.type;
                  var coords = feature.geometry.coordinates;

                  switch (type) {
                    case 'LineString':
                      if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
                      break;

                    case 'Polygon':
                      for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
                        if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                      }

                      break;
                  }
                });
              }
              /**
               * Callback for lineReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback lineReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name lineReduce
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var multiPoly = turf.multiPolygon([
               *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
               *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
               * ]);
               *
               * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentLine
               * });
               */


              function lineReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
                });
                return previousValue;
              }
              /**
               * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               * Point & MultiPoint will always return null.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.segmentIndex=0] Segment Index
               * @param {Object} [options.properties={}] Translate Properties to output LineString
               * @param {BBox} [options.bbox={}] Translate BBox to output LineString
               * @param {number|string} [options.id={}] Translate Id to output LineString
               * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findSegment(multiLine);
               * // => Feature<LineString<[[10, 10], [50, 30]]>>
               *
               * // First Segment of 2nd Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: 1});
               * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
               *
               * // Last Segment of Last Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
               * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
               */


              function findSegment(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find SegmentIndex


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                    if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
                    return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
                }

                throw new Error('geojson is invalid');
              }
              /**
               * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.coordIndex=0] Coord Index
               * @param {Object} [options.properties={}] Translate Properties to output Point
               * @param {BBox} [options.bbox={}] Translate BBox to output Point
               * @param {number|string} [options.id={}] Translate Id to output Point
               * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findPoint(multiLine);
               * // => Feature<Point<[10, 10]>>
               *
               * // First Segment of the 2nd Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: 1});
               * // => Feature<Point<[-10, -10]>>
               *
               * // Last Segment of last Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
               * // => Feature<Point<[-30, -40]>>
               */


              function findPoint(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var coordIndex = options.coordIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find Coord Index


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                    return helpers.point(coords, properties, options);

                  case 'MultiPoint':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    return helpers.point(coords[multiFeatureIndex], properties, options);

                  case 'LineString':
                    if (coordIndex < 0) coordIndex = coords.length + coordIndex;
                    return helpers.point(coords[coordIndex], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
                    return helpers.point(coords[geometryIndex][coordIndex], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
                    return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
                    return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
                }

                throw new Error('geojson is invalid');
              }

              exports.coordEach = coordEach;
              exports.coordReduce = coordReduce;
              exports.propEach = propEach;
              exports.propReduce = propReduce;
              exports.featureEach = featureEach;
              exports.featureReduce = featureReduce;
              exports.coordAll = coordAll;
              exports.geomEach = geomEach;
              exports.geomReduce = geomReduce;
              exports.flattenEach = flattenEach;
              exports.flattenReduce = flattenReduce;
              exports.segmentEach = segmentEach;
              exports.segmentReduce = segmentReduce;
              exports.lineEach = lineEach;
              exports.lineReduce = lineReduce;
              exports.findSegment = findSegment;
              exports.findPoint = findPoint;
            });
            unwrapExports(meta$1);
            var meta_1 = meta$1.coordEach;
            var meta_2 = meta$1.coordReduce;
            var meta_3 = meta$1.propEach;
            var meta_4 = meta$1.propReduce;
            var meta_5 = meta$1.featureEach;
            var meta_6 = meta$1.featureReduce;
            var meta_7 = meta$1.coordAll;
            var meta_8 = meta$1.geomEach;
            var meta_9 = meta$1.geomReduce;
            var meta_10 = meta$1.flattenEach;
            var meta_11 = meta$1.flattenReduce;
            var meta_12 = meta$1.segmentEach;
            var meta_13 = meta$1.segmentReduce;
            var meta_14 = meta$1.lineEach;
            var meta_15 = meta$1.lineReduce;
            var meta_16 = meta$1.findSegment;
            var meta_17 = meta$1.findPoint;

            var lineSegment_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a
               * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.
               *
               * @name lineSegment
               * @param {GeoJSON} geojson GeoJSON Polygon or LineString
               * @returns {FeatureCollection<LineString>} 2-vertex line segments
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               * var segments = turf.lineSegment(polygon);
               *
               * //addToMap
               * var addToMap = [polygon, segments]
               */

              function lineSegment(geojson) {
                if (!geojson) {
                  throw new Error("geojson is required");
                }

                var results = [];
                meta$1.flattenEach(geojson, function (feature) {
                  lineSegmentFeature(feature, results);
                });
                return helpers.featureCollection(results);
              }
              /**
               * Line Segment
               *
               * @private
               * @param {Feature<LineString|Polygon>} geojson Line or polygon feature
               * @param {Array} results push to results
               * @returns {void}
               */


              function lineSegmentFeature(geojson, results) {
                var coords = [];
                var geometry = geojson.geometry;

                if (geometry !== null) {
                  switch (geometry.type) {
                    case "Polygon":
                      coords = invariant.getCoords(geometry);
                      break;

                    case "LineString":
                      coords = [invariant.getCoords(geometry)];
                  }

                  coords.forEach(function (coord) {
                    var segments = createSegments(coord, geojson.properties);
                    segments.forEach(function (segment) {
                      segment.id = results.length;
                      results.push(segment);
                    });
                  });
                }
              }
              /**
               * Create Segments from LineString coordinates
               *
               * @private
               * @param {Array<Array<number>>} coords LineString coordinates
               * @param {*} properties GeoJSON properties
               * @returns {Array<Feature<LineString>>} line segments
               */


              function createSegments(coords, properties) {
                var segments = [];
                coords.reduce(function (previousCoords, currentCoords) {
                  var segment = helpers.lineString([previousCoords, currentCoords], properties);
                  segment.bbox = bbox(previousCoords, currentCoords);
                  segments.push(segment);
                  return currentCoords;
                });
                return segments;
              }
              /**
               * Create BBox between two coordinates (faster than @turf/bbox)
               *
               * @private
               * @param {Array<number>} coords1 Point coordinate
               * @param {Array<number>} coords2 Point coordinate
               * @returns {BBox} [west, south, east, north]
               */


              function bbox(coords1, coords2) {
                var x1 = coords1[0];
                var y1 = coords1[1];
                var x2 = coords2[0];
                var y2 = coords2[1];
                var west = x1 < x2 ? x1 : x2;
                var south = y1 < y2 ? y1 : y2;
                var east = x1 > x2 ? x1 : x2;
                var north = y1 > y2 ? y1 : y2;
                return [west, south, east, north];
              }

              exports.default = lineSegment;
            });
            unwrapExports(lineSegment_1);

            var meta$2 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, '__esModule', {
                value: true
              });
              /**
               * Callback for coordEach
               *
               * @callback coordEachCallback
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
               *
               * @name coordEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */

              function coordEach(geojson, callback, excludeWrapCoord) {
                // Handles null Geometry -- Skips this GeoJSON
                if (geojson === null) return;
                var j,
                    k,
                    l,
                    geometry,
                    stopG,
                    coords,
                    geometryMaybeCollection,
                    wrapShrink = 0,
                    coordIndex = 0,
                    isGeometryCollection,
                    type = geojson.type,
                    isFeatureCollection = type === 'FeatureCollection',
                    isFeature = type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
                    var multiFeatureIndex = 0;
                    var geometryIndex = 0;
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

                    if (geometry === null) continue;
                    coords = geometry.coordinates;
                    var geomType = geometry.type;
                    wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;

                    switch (geomType) {
                      case null:
                        break;

                      case 'Point':
                        if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                        coordIndex++;
                        multiFeatureIndex++;
                        break;

                      case 'LineString':
                      case 'MultiPoint':
                        for (j = 0; j < coords.length; j++) {
                          if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                          coordIndex++;
                          if (geomType === 'MultiPoint') multiFeatureIndex++;
                        }

                        if (geomType === 'LineString') multiFeatureIndex++;
                        break;

                      case 'Polygon':
                      case 'MultiLineString':
                        for (j = 0; j < coords.length; j++) {
                          for (k = 0; k < coords[j].length - wrapShrink; k++) {
                            if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                            coordIndex++;
                          }

                          if (geomType === 'MultiLineString') multiFeatureIndex++;
                          if (geomType === 'Polygon') geometryIndex++;
                        }

                        if (geomType === 'Polygon') multiFeatureIndex++;
                        break;

                      case 'MultiPolygon':
                        for (j = 0; j < coords.length; j++) {
                          geometryIndex = 0;

                          for (k = 0; k < coords[j].length; k++) {
                            for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                              if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                              coordIndex++;
                            }

                            geometryIndex++;
                          }

                          multiFeatureIndex++;
                        }

                        break;

                      case 'GeometryCollection':
                        for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;

                        break;

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  }
                }
              }
              /**
               * Callback for coordReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback coordReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
               *
               * @name coordReduce
               * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentCoord;
               * });
               */


              function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
                var previousValue = initialValue;
                coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                }, excludeWrapCoord);
                return previousValue;
              }
              /**
               * Callback for propEach
               *
               * @callback propEachCallback
               * @param {Object} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over properties in any GeoJSON object, similar to Array.forEach()
               *
               * @name propEach
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentProperties, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propEach(features, function (currentProperties, featureIndex) {
               *   //=currentProperties
               *   //=featureIndex
               * });
               */


              function propEach(geojson, callback) {
                var i;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    for (i = 0; i < geojson.features.length; i++) {
                      if (callback(geojson.features[i].properties, i) === false) break;
                    }

                    break;

                  case 'Feature':
                    callback(geojson.properties, 0);
                    break;
                }
              }
              /**
               * Callback for propReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback propReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {*} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce properties in any GeoJSON object into a single value,
               * similar to how Array.reduce works. However, in this case we lazily run
               * the reduction, so an array of all properties is unnecessary.
               *
               * @name propReduce
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
               *   //=previousValue
               *   //=currentProperties
               *   //=featureIndex
               *   return currentProperties
               * });
               */


              function propReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                propEach(geojson, function (currentProperties, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for featureEach
               *
               * @callback featureEachCallback
               * @param {Feature<any>} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name featureEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.featureEach(features, function (currentFeature, featureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               * });
               */


              function featureEach(geojson, callback) {
                if (geojson.type === 'Feature') {
                  callback(geojson, 0);
                } else if (geojson.type === 'FeatureCollection') {
                  for (var i = 0; i < geojson.features.length; i++) {
                    if (callback(geojson.features[i], i) === false) break;
                  }
                }
              }
              /**
               * Callback for featureReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback featureReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name featureReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   return currentFeature
               * });
               */


              function featureReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                featureEach(geojson, function (currentFeature, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
                });
                return previousValue;
              }
              /**
               * Get all coordinates from any GeoJSON object.
               *
               * @name coordAll
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @returns {Array<Array<number>>} coordinate position array
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * var coords = turf.coordAll(features);
               * //= [[26, 37], [36, 53]]
               */


              function coordAll(geojson) {
                var coords = [];
                coordEach(geojson, function (coord) {
                  coords.push(coord);
                });
                return coords;
              }
              /**
               * Callback for geomEach
               *
               * @callback geomEachCallback
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
               *
               * @name geomEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               * });
               */


              function geomEach(geojson, callback) {
                var i,
                    j,
                    g,
                    geometry,
                    stopG,
                    geometryMaybeCollection,
                    isGeometryCollection,
                    featureProperties,
                    featureBBox,
                    featureId,
                    featureIndex = 0,
                    isFeatureCollection = geojson.type === 'FeatureCollection',
                    isFeature = geojson.type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (i = 0; i < stop; i++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
                  featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
                  featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
                  featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (g = 0; g < stopG; g++) {
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

                    if (geometry === null) {
                      if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                      continue;
                    }

                    switch (geometry.type) {
                      case 'Point':
                      case 'LineString':
                      case 'MultiPoint':
                      case 'Polygon':
                      case 'MultiLineString':
                      case 'MultiPolygon':
                        {
                          if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          break;
                        }

                      case 'GeometryCollection':
                        {
                          for (j = 0; j < geometry.geometries.length; j++) {
                            if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          }

                          break;
                        }

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  } // Only increase `featureIndex` per each feature


                  featureIndex++;
                }
              }
              /**
               * Callback for geomReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback geomReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Reduce geometry in any GeoJSON object, similar to Array.reduce().
               *
               * @name geomReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=previousValue
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               *   return currentGeometry
               * });
               */


              function geomReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
                });
                return previousValue;
              }
              /**
               * Callback for flattenEach
               *
               * @callback flattenEachCallback
               * @param {Feature} currentFeature The current flattened feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Iterate over flattened features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name flattenEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               * });
               */


              function flattenEach(geojson, callback) {
                geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
                  // Callback for single geometry
                  var type = geometry === null ? null : geometry.type;

                  switch (type) {
                    case null:
                    case 'Point':
                    case 'LineString':
                    case 'Polygon':
                      if (callback(helpers.feature(geometry, properties, {
                        bbox: bbox,
                        id: id
                      }), featureIndex, 0) === false) return false;
                      return;
                  }

                  var geomType; // Callback for multi-geometry

                  switch (type) {
                    case 'MultiPoint':
                      geomType = 'Point';
                      break;

                    case 'MultiLineString':
                      geomType = 'LineString';
                      break;

                    case 'MultiPolygon':
                      geomType = 'Polygon';
                      break;
                  }

                  for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
                    var coordinate = geometry.coordinates[multiFeatureIndex];
                    var geom = {
                      type: geomType,
                      coordinates: coordinate
                    };
                    if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
                  }
                });
              }
              /**
               * Callback for flattenReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback flattenReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
               *
               * @name flattenReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   return currentFeature
               * });
               */


              function flattenReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
                  if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for segmentEach
               *
               * @callback segmentEachCallback
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               * @returns {void}
               */

              /**
               * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //=currentSegment
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   //=segmentIndex
               * });
               *
               * // Calculate the total number of segments
               * var total = 0;
               * turf.segmentEach(polygon, function () {
               *     total++;
               * });
               */


              function segmentEach(geojson, callback) {
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  var segmentIndex = 0; // Exclude null Geometries

                  if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

                  var type = feature.geometry.type;
                  if (type === 'Point' || type === 'MultiPoint') return; // Generate 2-vertex line segments

                  var previousCoords;
                  var previousFeatureIndex = 0;
                  var previousMultiIndex = 0;
                  var prevGeomIndex = 0;
                  if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
                    // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
                    if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
                      previousCoords = currentCoord;
                      previousFeatureIndex = featureIndex;
                      previousMultiIndex = multiPartIndexCoord;
                      prevGeomIndex = geometryIndex;
                      segmentIndex = 0;
                      return;
                    }

                    var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);
                    if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
                    segmentIndex++;
                    previousCoords = currentCoord;
                  }) === false) return false;
                });
              }
              /**
               * Callback for segmentReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback segmentReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               */

              /**
               * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //= previousSegment
               *   //= currentSegment
               *   //= featureIndex
               *   //= multiFeatureIndex
               *   //= geometryIndex
               *   //= segmentInex
               *   return currentSegment
               * });
               *
               * // Calculate the total number of segments
               * var initialValue = 0
               * var total = turf.segmentReduce(polygon, function (previousValue) {
               *     previousValue++;
               *     return previousValue;
               * }, initialValue);
               */


              function segmentReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                var started = false;
                segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
                  if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
                  started = true;
                });
                return previousValue;
              }
              /**
               * Callback for lineEach
               *
               * @callback lineEachCallback
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
               * similar to Array.forEach.
               *
               * @name lineEach
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @example
               * var multiLine = turf.multiLineString([
               *   [[26, 37], [35, 45]],
               *   [[36, 53], [38, 50], [41, 55]]
               * ]);
               *
               * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */


              function lineEach(geojson, callback) {
                // validation
                if (!geojson) throw new Error('geojson is required');
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  if (feature.geometry === null) return;
                  var type = feature.geometry.type;
                  var coords = feature.geometry.coordinates;

                  switch (type) {
                    case 'LineString':
                      if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
                      break;

                    case 'Polygon':
                      for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
                        if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                      }

                      break;
                  }
                });
              }
              /**
               * Callback for lineReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback lineReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name lineReduce
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var multiPoly = turf.multiPolygon([
               *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
               *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
               * ]);
               *
               * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentLine
               * });
               */


              function lineReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
                });
                return previousValue;
              }
              /**
               * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               * Point & MultiPoint will always return null.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.segmentIndex=0] Segment Index
               * @param {Object} [options.properties={}] Translate Properties to output LineString
               * @param {BBox} [options.bbox={}] Translate BBox to output LineString
               * @param {number|string} [options.id={}] Translate Id to output LineString
               * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findSegment(multiLine);
               * // => Feature<LineString<[[10, 10], [50, 30]]>>
               *
               * // First Segment of 2nd Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: 1});
               * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
               *
               * // Last Segment of Last Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
               * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
               */


              function findSegment(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find SegmentIndex


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                    if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
                    return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
                }

                throw new Error('geojson is invalid');
              }
              /**
               * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.coordIndex=0] Coord Index
               * @param {Object} [options.properties={}] Translate Properties to output Point
               * @param {BBox} [options.bbox={}] Translate BBox to output Point
               * @param {number|string} [options.id={}] Translate Id to output Point
               * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findPoint(multiLine);
               * // => Feature<Point<[10, 10]>>
               *
               * // First Segment of the 2nd Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: 1});
               * // => Feature<Point<[-10, -10]>>
               *
               * // Last Segment of last Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
               * // => Feature<Point<[-30, -40]>>
               */


              function findPoint(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var coordIndex = options.coordIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find Coord Index


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                    return helpers.point(coords, properties, options);

                  case 'MultiPoint':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    return helpers.point(coords[multiFeatureIndex], properties, options);

                  case 'LineString':
                    if (coordIndex < 0) coordIndex = coords.length + coordIndex;
                    return helpers.point(coords[coordIndex], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
                    return helpers.point(coords[geometryIndex][coordIndex], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
                    return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
                    return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
                }

                throw new Error('geojson is invalid');
              }

              exports.coordEach = coordEach;
              exports.coordReduce = coordReduce;
              exports.propEach = propEach;
              exports.propReduce = propReduce;
              exports.featureEach = featureEach;
              exports.featureReduce = featureReduce;
              exports.coordAll = coordAll;
              exports.geomEach = geomEach;
              exports.geomReduce = geomReduce;
              exports.flattenEach = flattenEach;
              exports.flattenReduce = flattenReduce;
              exports.segmentEach = segmentEach;
              exports.segmentReduce = segmentReduce;
              exports.lineEach = lineEach;
              exports.lineReduce = lineReduce;
              exports.findSegment = findSegment;
              exports.findPoint = findPoint;
            });
            unwrapExports(meta$2);
            var meta_1$1 = meta$2.coordEach;
            var meta_2$1 = meta$2.coordReduce;
            var meta_3$1 = meta$2.propEach;
            var meta_4$1 = meta$2.propReduce;
            var meta_5$1 = meta$2.featureEach;
            var meta_6$1 = meta$2.featureReduce;
            var meta_7$1 = meta$2.coordAll;
            var meta_8$1 = meta$2.geomEach;
            var meta_9$1 = meta$2.geomReduce;
            var meta_10$1 = meta$2.flattenEach;
            var meta_11$1 = meta$2.flattenReduce;
            var meta_12$1 = meta$2.segmentEach;
            var meta_13$1 = meta$2.segmentReduce;
            var meta_14$1 = meta$2.lineEach;
            var meta_15$1 = meta$2.lineReduce;
            var meta_16$1 = meta$2.findSegment;
            var meta_17$1 = meta$2.findPoint;

            var quickselect = createCommonjsModule(function (module, exports) {
              (function (global, factory) {
                module.exports = factory();
              })(commonjsGlobal, function () {

                function quickselect(arr, k, left, right, compare) {
                  quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare);
                }

                function quickselectStep(arr, k, left, right, compare) {
                  while (right > left) {
                    if (right - left > 600) {
                      var n = right - left + 1;
                      var m = k - left + 1;
                      var z = Math.log(n);
                      var s = 0.5 * Math.exp(2 * z / 3);
                      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
                      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
                      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
                      quickselectStep(arr, k, newLeft, newRight, compare);
                    }

                    var t = arr[k];
                    var i = left;
                    var j = right;
                    swap(arr, left, k);
                    if (compare(arr[right], t) > 0) swap(arr, left, right);

                    while (i < j) {
                      swap(arr, i, j);
                      i++;
                      j--;

                      while (compare(arr[i], t) < 0) i++;

                      while (compare(arr[j], t) > 0) j--;
                    }

                    if (compare(arr[left], t) === 0) swap(arr, left, j);else {
                      j++;
                      swap(arr, j, right);
                    }
                    if (j <= k) left = j + 1;
                    if (k <= j) right = j - 1;
                  }
                }

                function swap(arr, i, j) {
                  var tmp = arr[i];
                  arr[i] = arr[j];
                  arr[j] = tmp;
                }

                function defaultCompare(a, b) {
                  return a < b ? -1 : a > b ? 1 : 0;
                }

                return quickselect;
              });
            });

            var rbush_1 = rbush;
            var default_1 = rbush;

            function rbush(maxEntries, format) {
              if (!(this instanceof rbush)) return new rbush(maxEntries, format); // max entries in a node is 9 by default; min node fill is 40% for best performance

              this._maxEntries = Math.max(4, maxEntries || 9);
              this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

              if (format) {
                this._initFormat(format);
              }

              this.clear();
            }

            rbush.prototype = {
              all: function () {
                return this._all(this.data, []);
              },
              search: function (bbox) {
                var node = this.data,
                    result = [],
                    toBBox = this.toBBox;
                if (!intersects(bbox, node)) return result;
                var nodesToSearch = [],
                    i,
                    len,
                    child,
                    childBBox;

                while (node) {
                  for (i = 0, len = node.children.length; i < len; i++) {
                    child = node.children[i];
                    childBBox = node.leaf ? toBBox(child) : child;

                    if (intersects(bbox, childBBox)) {
                      if (node.leaf) result.push(child);else if (contains(bbox, childBBox)) this._all(child, result);else nodesToSearch.push(child);
                    }
                  }

                  node = nodesToSearch.pop();
                }

                return result;
              },
              collides: function (bbox) {
                var node = this.data,
                    toBBox = this.toBBox;
                if (!intersects(bbox, node)) return false;
                var nodesToSearch = [],
                    i,
                    len,
                    child,
                    childBBox;

                while (node) {
                  for (i = 0, len = node.children.length; i < len; i++) {
                    child = node.children[i];
                    childBBox = node.leaf ? toBBox(child) : child;

                    if (intersects(bbox, childBBox)) {
                      if (node.leaf || contains(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                    }
                  }

                  node = nodesToSearch.pop();
                }

                return false;
              },
              load: function (data) {
                if (!(data && data.length)) return this;

                if (data.length < this._minEntries) {
                  for (var i = 0, len = data.length; i < len; i++) {
                    this.insert(data[i]);
                  }

                  return this;
                } // recursively build the tree with the given data from scratch using OMT algorithm


                var node = this._build(data.slice(), 0, data.length - 1, 0);

                if (!this.data.children.length) {
                  // save as is if tree is empty
                  this.data = node;
                } else if (this.data.height === node.height) {
                  // split root if trees have the same height
                  this._splitRoot(this.data, node);
                } else {
                  if (this.data.height < node.height) {
                    // swap trees if inserted one is bigger
                    var tmpNode = this.data;
                    this.data = node;
                    node = tmpNode;
                  } // insert the small tree into the large tree at appropriate level


                  this._insert(node, this.data.height - node.height - 1, true);
                }

                return this;
              },
              insert: function (item) {
                if (item) this._insert(item, this.data.height - 1);
                return this;
              },
              clear: function () {
                this.data = createNode([]);
                return this;
              },
              remove: function (item, equalsFn) {
                if (!item) return this;
                var node = this.data,
                    bbox = this.toBBox(item),
                    path = [],
                    indexes = [],
                    i,
                    parent,
                    index,
                    goingUp; // depth-first iterative tree traversal

                while (node || path.length) {
                  if (!node) {
                    // go up
                    node = path.pop();
                    parent = path[path.length - 1];
                    i = indexes.pop();
                    goingUp = true;
                  }

                  if (node.leaf) {
                    // check current node
                    index = findItem(item, node.children, equalsFn);

                    if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);

                      this._condense(path);

                      return this;
                    }
                  }

                  if (!goingUp && !node.leaf && contains(node, bbox)) {
                    // go down
                    path.push(node);
                    indexes.push(i);
                    i = 0;
                    parent = node;
                    node = node.children[0];
                  } else if (parent) {
                    // go right
                    i++;
                    node = parent.children[i];
                    goingUp = false;
                  } else node = null; // nothing found

                }

                return this;
              },
              toBBox: function (item) {
                return item;
              },
              compareMinX: compareNodeMinX,
              compareMinY: compareNodeMinY,
              toJSON: function () {
                return this.data;
              },
              fromJSON: function (data) {
                this.data = data;
                return this;
              },
              _all: function (node, result) {
                var nodesToSearch = [];

                while (node) {
                  if (node.leaf) result.push.apply(result, node.children);else nodesToSearch.push.apply(nodesToSearch, node.children);
                  node = nodesToSearch.pop();
                }

                return result;
              },
              _build: function (items, left, right, height) {
                var N = right - left + 1,
                    M = this._maxEntries,
                    node;

                if (N <= M) {
                  // reached leaf level; return leaf
                  node = createNode(items.slice(left, right + 1));
                  calcBBox$1(node, this.toBBox);
                  return node;
                }

                if (!height) {
                  // target height of the bulk-loaded tree
                  height = Math.ceil(Math.log(N) / Math.log(M)); // target number of root entries to maximize storage utilization

                  M = Math.ceil(N / Math.pow(M, height - 1));
                }

                node = createNode([]);
                node.leaf = false;
                node.height = height; // split the items into M mostly square tiles

                var N2 = Math.ceil(N / M),
                    N1 = N2 * Math.ceil(Math.sqrt(M)),
                    i,
                    j,
                    right2,
                    right3;
                multiSelect(items, left, right, N1, this.compareMinX);

                for (i = left; i <= right; i += N1) {
                  right2 = Math.min(i + N1 - 1, right);
                  multiSelect(items, i, right2, N2, this.compareMinY);

                  for (j = i; j <= right2; j += N2) {
                    right3 = Math.min(j + N2 - 1, right2); // pack each entry recursively

                    node.children.push(this._build(items, j, right3, height - 1));
                  }
                }

                calcBBox$1(node, this.toBBox);
                return node;
              },
              _chooseSubtree: function (bbox, node, level, path) {
                var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

                while (true) {
                  path.push(node);
                  if (node.leaf || path.length - 1 === level) break;
                  minArea = minEnlargement = Infinity;

                  for (i = 0, len = node.children.length; i < len; i++) {
                    child = node.children[i];
                    area = bboxArea(child);
                    enlargement = enlargedArea(bbox, child) - area; // choose entry with the least area enlargement

                    if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;
                    } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                        minArea = area;
                        targetNode = child;
                      }
                    }
                  }

                  node = targetNode || node.children[0];
                }

                return node;
              },
              _insert: function (item, level, isNode) {
                var toBBox = this.toBBox,
                    bbox = isNode ? item : toBBox(item),
                    insertPath = []; // find the best node for accommodating the item, saving all nodes along the path too

                var node = this._chooseSubtree(bbox, this.data, level, insertPath); // put the item into the node


                node.children.push(item);
                extend$3(node, bbox); // split on node overflow; propagate upwards if necessary

                while (level >= 0) {
                  if (insertPath[level].children.length > this._maxEntries) {
                    this._split(insertPath, level);

                    level--;
                  } else break;
                } // adjust bboxes along the insertion path


                this._adjustParentBBoxes(bbox, insertPath, level);
              },
              // split overflowed node into two
              _split: function (insertPath, level) {
                var node = insertPath[level],
                    M = node.children.length,
                    m = this._minEntries;

                this._chooseSplitAxis(node, m, M);

                var splitIndex = this._chooseSplitIndex(node, m, M);

                var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
                newNode.height = node.height;
                newNode.leaf = node.leaf;
                calcBBox$1(node, this.toBBox);
                calcBBox$1(newNode, this.toBBox);
                if (level) insertPath[level - 1].children.push(newNode);else this._splitRoot(node, newNode);
              },
              _splitRoot: function (node, newNode) {
                // split root node
                this.data = createNode([node, newNode]);
                this.data.height = node.height + 1;
                this.data.leaf = false;
                calcBBox$1(this.data, this.toBBox);
              },
              _chooseSplitIndex: function (node, m, M) {
                var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;
                minOverlap = minArea = Infinity;

                for (i = m; i <= M - m; i++) {
                  bbox1 = distBBox(node, 0, i, this.toBBox);
                  bbox2 = distBBox(node, i, M, this.toBBox);
                  overlap = intersectionArea(bbox1, bbox2);
                  area = bboxArea(bbox1) + bboxArea(bbox2); // choose distribution with minimum overlap

                  if (overlap < minOverlap) {
                    minOverlap = overlap;
                    index = i;
                    minArea = area < minArea ? area : minArea;
                  } else if (overlap === minOverlap) {
                    // otherwise choose distribution with minimum area
                    if (area < minArea) {
                      minArea = area;
                      index = i;
                    }
                  }
                }

                return index;
              },
              // sorts node children by the best axis for split
              _chooseSplitAxis: function (node, m, M) {
                var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
                    compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
                    xMargin = this._allDistMargin(node, m, M, compareMinX),
                    yMargin = this._allDistMargin(node, m, M, compareMinY); // if total distributions margin value is minimal for x, sort by minX,
                // otherwise it's already sorted by minY


                if (xMargin < yMargin) node.children.sort(compareMinX);
              },
              // total margin of all possible split distributions where each node is at least m full
              _allDistMargin: function (node, m, M, compare) {
                node.children.sort(compare);
                var toBBox = this.toBBox,
                    leftBBox = distBBox(node, 0, m, toBBox),
                    rightBBox = distBBox(node, M - m, M, toBBox),
                    margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
                    i,
                    child;

                for (i = m; i < M - m; i++) {
                  child = node.children[i];
                  extend$3(leftBBox, node.leaf ? toBBox(child) : child);
                  margin += bboxMargin(leftBBox);
                }

                for (i = M - m - 1; i >= m; i--) {
                  child = node.children[i];
                  extend$3(rightBBox, node.leaf ? toBBox(child) : child);
                  margin += bboxMargin(rightBBox);
                }

                return margin;
              },
              _adjustParentBBoxes: function (bbox, path, level) {
                // adjust bboxes along the given tree path
                for (var i = level; i >= 0; i--) {
                  extend$3(path[i], bbox);
                }
              },
              _condense: function (path) {
                // go through the path, removing empty nodes and updating bboxes
                for (var i = path.length - 1, siblings; i >= 0; i--) {
                  if (path[i].children.length === 0) {
                    if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);
                    } else this.clear();
                  } else calcBBox$1(path[i], this.toBBox);
                }
              },
              _initFormat: function (format) {
                // data format (minX, minY, maxX, maxY accessors)
                // uses eval-type function compilation instead of just accepting a toBBox function
                // because the algorithms are very sensitive to sorting functions performance,
                // so they should be dead simple and without inner calls
                var compareArr = ['return a', ' - b', ';'];
                this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
                this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));
                this.toBBox = new Function('a', 'return {minX: a' + format[0] + ', minY: a' + format[1] + ', maxX: a' + format[2] + ', maxY: a' + format[3] + '};');
              }
            };

            function findItem(item, items, equalsFn) {
              if (!equalsFn) return items.indexOf(item);

              for (var i = 0; i < items.length; i++) {
                if (equalsFn(item, items[i])) return i;
              }

              return -1;
            } // calculate node's bbox from bboxes of its children


            function calcBBox$1(node, toBBox) {
              distBBox(node, 0, node.children.length, toBBox, node);
            } // min bounding rectangle of node children from k to p-1


            function distBBox(node, k, p, toBBox, destNode) {
              if (!destNode) destNode = createNode(null);
              destNode.minX = Infinity;
              destNode.minY = Infinity;
              destNode.maxX = -Infinity;
              destNode.maxY = -Infinity;

              for (var i = k, child; i < p; i++) {
                child = node.children[i];
                extend$3(destNode, node.leaf ? toBBox(child) : child);
              }

              return destNode;
            }

            function extend$3(a, b) {
              a.minX = Math.min(a.minX, b.minX);
              a.minY = Math.min(a.minY, b.minY);
              a.maxX = Math.max(a.maxX, b.maxX);
              a.maxY = Math.max(a.maxY, b.maxY);
              return a;
            }

            function compareNodeMinX(a, b) {
              return a.minX - b.minX;
            }

            function compareNodeMinY(a, b) {
              return a.minY - b.minY;
            }

            function bboxArea(a) {
              return (a.maxX - a.minX) * (a.maxY - a.minY);
            }

            function bboxMargin(a) {
              return a.maxX - a.minX + (a.maxY - a.minY);
            }

            function enlargedArea(a, b) {
              return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
            }

            function intersectionArea(a, b) {
              var minX = Math.max(a.minX, b.minX),
                  minY = Math.max(a.minY, b.minY),
                  maxX = Math.min(a.maxX, b.maxX),
                  maxY = Math.min(a.maxY, b.maxY);
              return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
            }

            function contains(a, b) {
              return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;
            }

            function intersects(a, b) {
              return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;
            }

            function createNode(children) {
              return {
                children: children,
                height: 1,
                leaf: true,
                minX: Infinity,
                minY: Infinity,
                maxX: -Infinity,
                maxY: -Infinity
              };
            } // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
            // combines selection algorithm with binary divide & conquer approach


            function multiSelect(arr, left, right, n, compare) {
              var stack = [left, right],
                  mid;

              while (stack.length) {
                right = stack.pop();
                left = stack.pop();
                if (right - left <= n) continue;
                mid = left + Math.ceil((right - left) / n / 2) * n;
                quickselect(arr, mid, left, right, compare);
                stack.push(left, mid, mid, right);
              }
            }
            rbush_1.default = default_1;

            var meta$3 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, '__esModule', {
                value: true
              });
              /**
               * Callback for coordEach
               *
               * @callback coordEachCallback
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
               *
               * @name coordEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */

              function coordEach(geojson, callback, excludeWrapCoord) {
                // Handles null Geometry -- Skips this GeoJSON
                if (geojson === null) return;
                var j,
                    k,
                    l,
                    geometry,
                    stopG,
                    coords,
                    geometryMaybeCollection,
                    wrapShrink = 0,
                    coordIndex = 0,
                    isGeometryCollection,
                    type = geojson.type,
                    isFeatureCollection = type === 'FeatureCollection',
                    isFeature = type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
                    var multiFeatureIndex = 0;
                    var geometryIndex = 0;
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

                    if (geometry === null) continue;
                    coords = geometry.coordinates;
                    var geomType = geometry.type;
                    wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;

                    switch (geomType) {
                      case null:
                        break;

                      case 'Point':
                        if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                        coordIndex++;
                        multiFeatureIndex++;
                        break;

                      case 'LineString':
                      case 'MultiPoint':
                        for (j = 0; j < coords.length; j++) {
                          if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                          coordIndex++;
                          if (geomType === 'MultiPoint') multiFeatureIndex++;
                        }

                        if (geomType === 'LineString') multiFeatureIndex++;
                        break;

                      case 'Polygon':
                      case 'MultiLineString':
                        for (j = 0; j < coords.length; j++) {
                          for (k = 0; k < coords[j].length - wrapShrink; k++) {
                            if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                            coordIndex++;
                          }

                          if (geomType === 'MultiLineString') multiFeatureIndex++;
                          if (geomType === 'Polygon') geometryIndex++;
                        }

                        if (geomType === 'Polygon') multiFeatureIndex++;
                        break;

                      case 'MultiPolygon':
                        for (j = 0; j < coords.length; j++) {
                          geometryIndex = 0;

                          for (k = 0; k < coords[j].length; k++) {
                            for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                              if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                              coordIndex++;
                            }

                            geometryIndex++;
                          }

                          multiFeatureIndex++;
                        }

                        break;

                      case 'GeometryCollection':
                        for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;

                        break;

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  }
                }
              }
              /**
               * Callback for coordReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback coordReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
               *
               * @name coordReduce
               * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentCoord;
               * });
               */


              function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
                var previousValue = initialValue;
                coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                }, excludeWrapCoord);
                return previousValue;
              }
              /**
               * Callback for propEach
               *
               * @callback propEachCallback
               * @param {Object} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over properties in any GeoJSON object, similar to Array.forEach()
               *
               * @name propEach
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentProperties, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propEach(features, function (currentProperties, featureIndex) {
               *   //=currentProperties
               *   //=featureIndex
               * });
               */


              function propEach(geojson, callback) {
                var i;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    for (i = 0; i < geojson.features.length; i++) {
                      if (callback(geojson.features[i].properties, i) === false) break;
                    }

                    break;

                  case 'Feature':
                    callback(geojson.properties, 0);
                    break;
                }
              }
              /**
               * Callback for propReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback propReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {*} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce properties in any GeoJSON object into a single value,
               * similar to how Array.reduce works. However, in this case we lazily run
               * the reduction, so an array of all properties is unnecessary.
               *
               * @name propReduce
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
               *   //=previousValue
               *   //=currentProperties
               *   //=featureIndex
               *   return currentProperties
               * });
               */


              function propReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                propEach(geojson, function (currentProperties, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for featureEach
               *
               * @callback featureEachCallback
               * @param {Feature<any>} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name featureEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.featureEach(features, function (currentFeature, featureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               * });
               */


              function featureEach(geojson, callback) {
                if (geojson.type === 'Feature') {
                  callback(geojson, 0);
                } else if (geojson.type === 'FeatureCollection') {
                  for (var i = 0; i < geojson.features.length; i++) {
                    if (callback(geojson.features[i], i) === false) break;
                  }
                }
              }
              /**
               * Callback for featureReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback featureReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name featureReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   return currentFeature
               * });
               */


              function featureReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                featureEach(geojson, function (currentFeature, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
                });
                return previousValue;
              }
              /**
               * Get all coordinates from any GeoJSON object.
               *
               * @name coordAll
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @returns {Array<Array<number>>} coordinate position array
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * var coords = turf.coordAll(features);
               * //= [[26, 37], [36, 53]]
               */


              function coordAll(geojson) {
                var coords = [];
                coordEach(geojson, function (coord) {
                  coords.push(coord);
                });
                return coords;
              }
              /**
               * Callback for geomEach
               *
               * @callback geomEachCallback
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
               *
               * @name geomEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               * });
               */


              function geomEach(geojson, callback) {
                var i,
                    j,
                    g,
                    geometry,
                    stopG,
                    geometryMaybeCollection,
                    isGeometryCollection,
                    featureProperties,
                    featureBBox,
                    featureId,
                    featureIndex = 0,
                    isFeatureCollection = geojson.type === 'FeatureCollection',
                    isFeature = geojson.type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (i = 0; i < stop; i++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
                  featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
                  featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
                  featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (g = 0; g < stopG; g++) {
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

                    if (geometry === null) {
                      if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                      continue;
                    }

                    switch (geometry.type) {
                      case 'Point':
                      case 'LineString':
                      case 'MultiPoint':
                      case 'Polygon':
                      case 'MultiLineString':
                      case 'MultiPolygon':
                        {
                          if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          break;
                        }

                      case 'GeometryCollection':
                        {
                          for (j = 0; j < geometry.geometries.length; j++) {
                            if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          }

                          break;
                        }

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  } // Only increase `featureIndex` per each feature


                  featureIndex++;
                }
              }
              /**
               * Callback for geomReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback geomReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Reduce geometry in any GeoJSON object, similar to Array.reduce().
               *
               * @name geomReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=previousValue
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               *   return currentGeometry
               * });
               */


              function geomReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
                });
                return previousValue;
              }
              /**
               * Callback for flattenEach
               *
               * @callback flattenEachCallback
               * @param {Feature} currentFeature The current flattened feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Iterate over flattened features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name flattenEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               * });
               */


              function flattenEach(geojson, callback) {
                geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
                  // Callback for single geometry
                  var type = geometry === null ? null : geometry.type;

                  switch (type) {
                    case null:
                    case 'Point':
                    case 'LineString':
                    case 'Polygon':
                      if (callback(helpers.feature(geometry, properties, {
                        bbox: bbox,
                        id: id
                      }), featureIndex, 0) === false) return false;
                      return;
                  }

                  var geomType; // Callback for multi-geometry

                  switch (type) {
                    case 'MultiPoint':
                      geomType = 'Point';
                      break;

                    case 'MultiLineString':
                      geomType = 'LineString';
                      break;

                    case 'MultiPolygon':
                      geomType = 'Polygon';
                      break;
                  }

                  for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
                    var coordinate = geometry.coordinates[multiFeatureIndex];
                    var geom = {
                      type: geomType,
                      coordinates: coordinate
                    };
                    if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
                  }
                });
              }
              /**
               * Callback for flattenReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback flattenReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
               *
               * @name flattenReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   return currentFeature
               * });
               */


              function flattenReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
                  if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for segmentEach
               *
               * @callback segmentEachCallback
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               * @returns {void}
               */

              /**
               * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //=currentSegment
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   //=segmentIndex
               * });
               *
               * // Calculate the total number of segments
               * var total = 0;
               * turf.segmentEach(polygon, function () {
               *     total++;
               * });
               */


              function segmentEach(geojson, callback) {
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  var segmentIndex = 0; // Exclude null Geometries

                  if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

                  var type = feature.geometry.type;
                  if (type === 'Point' || type === 'MultiPoint') return; // Generate 2-vertex line segments

                  var previousCoords;
                  var previousFeatureIndex = 0;
                  var previousMultiIndex = 0;
                  var prevGeomIndex = 0;
                  if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
                    // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
                    if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
                      previousCoords = currentCoord;
                      previousFeatureIndex = featureIndex;
                      previousMultiIndex = multiPartIndexCoord;
                      prevGeomIndex = geometryIndex;
                      segmentIndex = 0;
                      return;
                    }

                    var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);
                    if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
                    segmentIndex++;
                    previousCoords = currentCoord;
                  }) === false) return false;
                });
              }
              /**
               * Callback for segmentReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback segmentReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               */

              /**
               * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //= previousSegment
               *   //= currentSegment
               *   //= featureIndex
               *   //= multiFeatureIndex
               *   //= geometryIndex
               *   //= segmentInex
               *   return currentSegment
               * });
               *
               * // Calculate the total number of segments
               * var initialValue = 0
               * var total = turf.segmentReduce(polygon, function (previousValue) {
               *     previousValue++;
               *     return previousValue;
               * }, initialValue);
               */


              function segmentReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                var started = false;
                segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
                  if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
                  started = true;
                });
                return previousValue;
              }
              /**
               * Callback for lineEach
               *
               * @callback lineEachCallback
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
               * similar to Array.forEach.
               *
               * @name lineEach
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @example
               * var multiLine = turf.multiLineString([
               *   [[26, 37], [35, 45]],
               *   [[36, 53], [38, 50], [41, 55]]
               * ]);
               *
               * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */


              function lineEach(geojson, callback) {
                // validation
                if (!geojson) throw new Error('geojson is required');
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  if (feature.geometry === null) return;
                  var type = feature.geometry.type;
                  var coords = feature.geometry.coordinates;

                  switch (type) {
                    case 'LineString':
                      if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
                      break;

                    case 'Polygon':
                      for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
                        if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                      }

                      break;
                  }
                });
              }
              /**
               * Callback for lineReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback lineReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name lineReduce
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var multiPoly = turf.multiPolygon([
               *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
               *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
               * ]);
               *
               * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentLine
               * });
               */


              function lineReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
                });
                return previousValue;
              }
              /**
               * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               * Point & MultiPoint will always return null.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.segmentIndex=0] Segment Index
               * @param {Object} [options.properties={}] Translate Properties to output LineString
               * @param {BBox} [options.bbox={}] Translate BBox to output LineString
               * @param {number|string} [options.id={}] Translate Id to output LineString
               * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findSegment(multiLine);
               * // => Feature<LineString<[[10, 10], [50, 30]]>>
               *
               * // First Segment of 2nd Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: 1});
               * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
               *
               * // Last Segment of Last Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
               * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
               */


              function findSegment(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find SegmentIndex


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                    if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
                    return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
                }

                throw new Error('geojson is invalid');
              }
              /**
               * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.coordIndex=0] Coord Index
               * @param {Object} [options.properties={}] Translate Properties to output Point
               * @param {BBox} [options.bbox={}] Translate BBox to output Point
               * @param {number|string} [options.id={}] Translate Id to output Point
               * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findPoint(multiLine);
               * // => Feature<Point<[10, 10]>>
               *
               * // First Segment of the 2nd Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: 1});
               * // => Feature<Point<[-10, -10]>>
               *
               * // Last Segment of last Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
               * // => Feature<Point<[-30, -40]>>
               */


              function findPoint(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var coordIndex = options.coordIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find Coord Index


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                    return helpers.point(coords, properties, options);

                  case 'MultiPoint':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    return helpers.point(coords[multiFeatureIndex], properties, options);

                  case 'LineString':
                    if (coordIndex < 0) coordIndex = coords.length + coordIndex;
                    return helpers.point(coords[coordIndex], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
                    return helpers.point(coords[geometryIndex][coordIndex], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
                    return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
                    return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
                }

                throw new Error('geojson is invalid');
              }

              exports.coordEach = coordEach;
              exports.coordReduce = coordReduce;
              exports.propEach = propEach;
              exports.propReduce = propReduce;
              exports.featureEach = featureEach;
              exports.featureReduce = featureReduce;
              exports.coordAll = coordAll;
              exports.geomEach = geomEach;
              exports.geomReduce = geomReduce;
              exports.flattenEach = flattenEach;
              exports.flattenReduce = flattenReduce;
              exports.segmentEach = segmentEach;
              exports.segmentReduce = segmentReduce;
              exports.lineEach = lineEach;
              exports.lineReduce = lineReduce;
              exports.findSegment = findSegment;
              exports.findPoint = findPoint;
            });
            unwrapExports(meta$3);
            var meta_1$2 = meta$3.coordEach;
            var meta_2$2 = meta$3.coordReduce;
            var meta_3$2 = meta$3.propEach;
            var meta_4$2 = meta$3.propReduce;
            var meta_5$2 = meta$3.featureEach;
            var meta_6$2 = meta$3.featureReduce;
            var meta_7$2 = meta$3.coordAll;
            var meta_8$2 = meta$3.geomEach;
            var meta_9$2 = meta$3.geomReduce;
            var meta_10$2 = meta$3.flattenEach;
            var meta_11$2 = meta$3.flattenReduce;
            var meta_12$2 = meta$3.segmentEach;
            var meta_13$2 = meta$3.segmentReduce;
            var meta_14$2 = meta$3.lineEach;
            var meta_15$2 = meta$3.lineReduce;
            var meta_16$2 = meta$3.findSegment;
            var meta_17$2 = meta$3.findPoint;

            var turfBBox = bbox.default;
            var featureEach$1 = meta$3.featureEach;
            var coordEach$1 = meta$3.coordEach;
            var polygon = helpers.polygon;
            var featureCollection = helpers.featureCollection;
            /**
             * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.
             *
             * @name rbush
             * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a
             * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.
             * @returns {RBush} GeoJSON RBush
             * @example
             * var geojsonRbush = require('geojson-rbush').default;
             * var tree = geojsonRbush();
             */

            function geojsonRbush(maxEntries) {
              var tree = rbush_1(maxEntries);
              /**
               * [insert](https://github.com/mourner/rbush#data-format)
               *
               * @param {Feature} feature insert single GeoJSON Feature
               * @returns {RBush} GeoJSON RBush
               * @example
               * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
               * tree.insert(poly)
               */

              tree.insert = function (feature) {
                if (feature.type !== 'Feature') throw new Error('invalid feature');
                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                return rbush_1.prototype.insert.call(this, feature);
              };
              /**
               * [load](https://github.com/mourner/rbush#bulk-inserting-data)
               *
               * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection
               * @returns {RBush} GeoJSON RBush
               * @example
               * var polys = turf.polygons([
               *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],
               *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]
               * ]);
               * tree.load(polys);
               */


              tree.load = function (features) {
                var load = []; // Load an Array of Features

                if (Array.isArray(features)) {
                  features.forEach(function (feature) {
                    if (feature.type !== 'Feature') throw new Error('invalid features');
                    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                    load.push(feature);
                  });
                } else {
                  // Load a FeatureCollection
                  featureEach$1(features, function (feature) {
                    if (feature.type !== 'Feature') throw new Error('invalid features');
                    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                    load.push(feature);
                  });
                }

                return rbush_1.prototype.load.call(this, load);
              };
              /**
               * [remove](https://github.com/mourner/rbush#removing-data)
               *
               * @param {Feature} feature remove single GeoJSON Feature
               * @param {Function} equals Pass a custom equals function to compare by value for removal.
               * @returns {RBush} GeoJSON RBush
               * @example
               * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
               *
               * tree.remove(poly);
               */


              tree.remove = function (feature, equals) {
                if (feature.type !== 'Feature') throw new Error('invalid feature');
                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                return rbush_1.prototype.remove.call(this, feature, equals);
              };
              /**
               * [clear](https://github.com/mourner/rbush#removing-data)
               *
               * @returns {RBush} GeoJSON Rbush
               * @example
               * tree.clear()
               */


              tree.clear = function () {
                return rbush_1.prototype.clear.call(this);
              };
              /**
               * [search](https://github.com/mourner/rbush#search)
               *
               * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON
               * @returns {FeatureCollection} all features that intersects with the given GeoJSON.
               * @example
               * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
               *
               * tree.search(poly);
               */


              tree.search = function (geojson) {
                var features = rbush_1.prototype.search.call(this, this.toBBox(geojson));
                return featureCollection(features);
              };
              /**
               * [collides](https://github.com/mourner/rbush#collisions)
               *
               * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON
               * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.
               * @example
               * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
               *
               * tree.collides(poly);
               */


              tree.collides = function (geojson) {
                return rbush_1.prototype.collides.call(this, this.toBBox(geojson));
              };
              /**
               * [all](https://github.com/mourner/rbush#search)
               *
               * @returns {FeatureCollection} all the features in RBush
               * @example
               * tree.all()
               */


              tree.all = function () {
                var features = rbush_1.prototype.all.call(this);
                return featureCollection(features);
              };
              /**
               * [toJSON](https://github.com/mourner/rbush#export-and-import)
               *
               * @returns {any} export data as JSON object
               * @example
               * var exported = tree.toJSON()
               */


              tree.toJSON = function () {
                return rbush_1.prototype.toJSON.call(this);
              };
              /**
               * [fromJSON](https://github.com/mourner/rbush#export-and-import)
               *
               * @param {any} json import previously exported data
               * @returns {RBush} GeoJSON RBush
               * @example
               * var exported = {
               *   "children": [
               *     {
               *       "type": "Feature",
               *       "geometry": {
               *         "type": "Point",
               *         "coordinates": [110, 50]
               *       },
               *       "properties": {},
               *       "bbox": [110, 50, 110, 50]
               *     }
               *   ],
               *   "height": 1,
               *   "leaf": true,
               *   "minX": 110,
               *   "minY": 50,
               *   "maxX": 110,
               *   "maxY": 50
               * }
               * tree.fromJSON(exported)
               */


              tree.fromJSON = function (json) {
                return rbush_1.prototype.fromJSON.call(this, json);
              };
              /**
               * Converts GeoJSON to {minX, minY, maxX, maxY} schema
               *
               * @private
               * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from
               * @returns {Object} converted to {minX, minY, maxX, maxY}
               */


              tree.toBBox = function (geojson) {
                var bbox;
                if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === 'Feature') bbox = turfBBox(geojson);else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);else throw new Error('invalid geojson');
                return {
                  minX: bbox[0],
                  minY: bbox[1],
                  maxX: bbox[2],
                  maxY: bbox[3]
                };
              };

              return tree;
            }

            var geojsonRbush_1 = geojsonRbush;
            var default_1$1 = geojsonRbush;
            geojsonRbush_1.default = default_1$1;

            var lineIntersect_1 = createCommonjsModule(function (module, exports) {

              var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                  "default": mod
                };
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var line_segment_1 = __importDefault(lineSegment_1);

              var geojson_rbush_1 = __importDefault(geojsonRbush_1);
              /**
               * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).
               *
               * @name lineIntersect
               * @param {GeoJSON} line1 any LineString or Polygon
               * @param {GeoJSON} line2 any LineString or Polygon
               * @returns {FeatureCollection<Point>} point(s) that intersect both
               * @example
               * var line1 = turf.lineString([[126, -11], [129, -21]]);
               * var line2 = turf.lineString([[123, -18], [131, -14]]);
               * var intersects = turf.lineIntersect(line1, line2);
               *
               * //addToMap
               * var addToMap = [line1, line2, intersects]
               */


              function lineIntersect(line1, line2) {
                var unique = {};
                var results = []; // First, normalize geometries to features
                // Then, handle simple 2-vertex segments

                if (line1.type === "LineString") {
                  line1 = helpers.feature(line1);
                }

                if (line2.type === "LineString") {
                  line2 = helpers.feature(line2);
                }

                if (line1.type === "Feature" && line2.type === "Feature" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === "LineString" && line2.geometry.type === "LineString" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {
                  var intersect = intersects(line1, line2);

                  if (intersect) {
                    results.push(intersect);
                  }

                  return helpers.featureCollection(results);
                } // Handles complex GeoJSON Geometries


                var tree = geojson_rbush_1.default();
                tree.load(line_segment_1.default(line2));
                meta$2.featureEach(line_segment_1.default(line1), function (segment) {
                  meta$2.featureEach(tree.search(segment), function (match) {
                    var intersect = intersects(segment, match);

                    if (intersect) {
                      // prevent duplicate points https://github.com/Turfjs/turf/issues/688
                      var key = invariant.getCoords(intersect).join(",");

                      if (!unique[key]) {
                        unique[key] = true;
                        results.push(intersect);
                      }
                    }
                  });
                });
                return helpers.featureCollection(results);
              }
              /**
               * Find a point that intersects LineStrings with two coordinates each
               *
               * @private
               * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)
               * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)
               * @returns {Feature<Point>} intersecting GeoJSON Point
               */


              function intersects(line1, line2) {
                var coords1 = invariant.getCoords(line1);
                var coords2 = invariant.getCoords(line2);

                if (coords1.length !== 2) {
                  throw new Error("<intersects> line1 must only contain 2 coordinates");
                }

                if (coords2.length !== 2) {
                  throw new Error("<intersects> line2 must only contain 2 coordinates");
                }

                var x1 = coords1[0][0];
                var y1 = coords1[0][1];
                var x2 = coords1[1][0];
                var y2 = coords1[1][1];
                var x3 = coords2[0][0];
                var y3 = coords2[0][1];
                var x4 = coords2[1][0];
                var y4 = coords2[1][1];
                var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
                var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
                var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);

                if (denom === 0) {
                  if (numeA === 0 && numeB === 0) {
                    return null;
                  }

                  return null;
                }

                var uA = numeA / denom;
                var uB = numeB / denom;

                if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
                  var x = x1 + uA * (x2 - x1);
                  var y = y1 + uA * (y2 - y1);
                  return helpers.point([x, y]);
                }

                return null;
              }

              exports.default = lineIntersect;
            });
            var LineIntersect = unwrapExports(lineIntersect_1);

            var martinez_umd = createCommonjsModule(function (module, exports) {
              /**
               * martinez v0.4.3
               * Martinez polygon clipping algorithm, does boolean operation on polygons (multipolygons, polygons with holes etc): intersection, union, difference, xor
               *
               * @author Alex Milevski <info@w8r.name>
               * @license MIT
               * @preserve
               */
              (function (global, factory) {
                factory(exports);
              })(commonjsGlobal, function (exports) {

                function DEFAULT_COMPARE(a, b) {
                  return a > b ? 1 : a < b ? -1 : 0;
                }

                var SplayTree = function SplayTree(compare, noDuplicates) {
                  if (compare === void 0) compare = DEFAULT_COMPARE;
                  if (noDuplicates === void 0) noDuplicates = false;
                  this._compare = compare;
                  this._root = null;
                  this._size = 0;
                  this._noDuplicates = !!noDuplicates;
                };

                var prototypeAccessors = {
                  size: {
                    configurable: true
                  }
                };

                SplayTree.prototype.rotateLeft = function rotateLeft(x) {
                  var y = x.right;

                  if (y) {
                    x.right = y.left;

                    if (y.left) {
                      y.left.parent = x;
                    }

                    y.parent = x.parent;
                  }

                  if (!x.parent) {
                    this._root = y;
                  } else if (x === x.parent.left) {
                    x.parent.left = y;
                  } else {
                    x.parent.right = y;
                  }

                  if (y) {
                    y.left = x;
                  }

                  x.parent = y;
                };

                SplayTree.prototype.rotateRight = function rotateRight(x) {
                  var y = x.left;

                  if (y) {
                    x.left = y.right;

                    if (y.right) {
                      y.right.parent = x;
                    }

                    y.parent = x.parent;
                  }

                  if (!x.parent) {
                    this._root = y;
                  } else if (x === x.parent.left) {
                    x.parent.left = y;
                  } else {
                    x.parent.right = y;
                  }

                  if (y) {
                    y.right = x;
                  }

                  x.parent = y;
                };

                SplayTree.prototype._splay = function _splay(x) {
                  var this$1 = this;

                  while (x.parent) {
                    var p = x.parent;

                    if (!p.parent) {
                      if (p.left === x) {
                        this$1.rotateRight(p);
                      } else {
                        this$1.rotateLeft(p);
                      }
                    } else if (p.left === x && p.parent.left === p) {
                      this$1.rotateRight(p.parent);
                      this$1.rotateRight(p);
                    } else if (p.right === x && p.parent.right === p) {
                      this$1.rotateLeft(p.parent);
                      this$1.rotateLeft(p);
                    } else if (p.left === x && p.parent.right === p) {
                      this$1.rotateRight(p);
                      this$1.rotateLeft(p);
                    } else {
                      this$1.rotateLeft(p);
                      this$1.rotateRight(p);
                    }
                  }
                };

                SplayTree.prototype.splay = function splay(x) {
                  var this$1 = this;
                  var p, gp, ggp, l, r;

                  while (x.parent) {
                    p = x.parent;
                    gp = p.parent;

                    if (gp && gp.parent) {
                      ggp = gp.parent;

                      if (ggp.left === gp) {
                        ggp.left = x;
                      } else {
                        ggp.right = x;
                      }

                      x.parent = ggp;
                    } else {
                      x.parent = null;
                      this$1._root = x;
                    }

                    l = x.left;
                    r = x.right;

                    if (x === p.left) {
                      // left
                      if (gp) {
                        if (gp.left === p) {
                          /* zig-zig */
                          if (p.right) {
                            gp.left = p.right;
                            gp.left.parent = gp;
                          } else {
                            gp.left = null;
                          }

                          p.right = gp;
                          gp.parent = p;
                        } else {
                          /* zig-zag */
                          if (l) {
                            gp.right = l;
                            l.parent = gp;
                          } else {
                            gp.right = null;
                          }

                          x.left = gp;
                          gp.parent = x;
                        }
                      }

                      if (r) {
                        p.left = r;
                        r.parent = p;
                      } else {
                        p.left = null;
                      }

                      x.right = p;
                      p.parent = x;
                    } else {
                      // right
                      if (gp) {
                        if (gp.right === p) {
                          /* zig-zig */
                          if (p.left) {
                            gp.right = p.left;
                            gp.right.parent = gp;
                          } else {
                            gp.right = null;
                          }

                          p.left = gp;
                          gp.parent = p;
                        } else {
                          /* zig-zag */
                          if (r) {
                            gp.left = r;
                            r.parent = gp;
                          } else {
                            gp.left = null;
                          }

                          x.right = gp;
                          gp.parent = x;
                        }
                      }

                      if (l) {
                        p.right = l;
                        l.parent = p;
                      } else {
                        p.right = null;
                      }

                      x.left = p;
                      p.parent = x;
                    }
                  }
                };

                SplayTree.prototype.replace = function replace(u, v) {
                  if (!u.parent) {
                    this._root = v;
                  } else if (u === u.parent.left) {
                    u.parent.left = v;
                  } else {
                    u.parent.right = v;
                  }

                  if (v) {
                    v.parent = u.parent;
                  }
                };

                SplayTree.prototype.minNode = function minNode(u) {
                  if (u === void 0) u = this._root;

                  if (u) {
                    while (u.left) {
                      u = u.left;
                    }
                  }

                  return u;
                };

                SplayTree.prototype.maxNode = function maxNode(u) {
                  if (u === void 0) u = this._root;

                  if (u) {
                    while (u.right) {
                      u = u.right;
                    }
                  }

                  return u;
                };

                SplayTree.prototype.insert = function insert(key, data) {
                  var z = this._root;
                  var p = null;
                  var comp = this._compare;
                  var cmp;

                  if (this._noDuplicates) {
                    while (z) {
                      p = z;
                      cmp = comp(z.key, key);

                      if (cmp === 0) {
                        return;
                      } else if (comp(z.key, key) < 0) {
                        z = z.right;
                      } else {
                        z = z.left;
                      }
                    }
                  } else {
                    while (z) {
                      p = z;

                      if (comp(z.key, key) < 0) {
                        z = z.right;
                      } else {
                        z = z.left;
                      }
                    }
                  }

                  z = {
                    key: key,
                    data: data,
                    left: null,
                    right: null,
                    parent: p
                  };

                  if (!p) {
                    this._root = z;
                  } else if (comp(p.key, z.key) < 0) {
                    p.right = z;
                  } else {
                    p.left = z;
                  }

                  this.splay(z);
                  this._size++;
                  return z;
                };

                SplayTree.prototype.find = function find(key) {
                  var z = this._root;
                  var comp = this._compare;

                  while (z) {
                    var cmp = comp(z.key, key);

                    if (cmp < 0) {
                      z = z.right;
                    } else if (cmp > 0) {
                      z = z.left;
                    } else {
                      return z;
                    }
                  }

                  return null;
                };
                /**
                 * Whether the tree contains a node with the given key
                 * @param{Key} key
                 * @return {boolean} true/false
                 */


                SplayTree.prototype.contains = function contains(key) {
                  var node = this._root;
                  var comparator = this._compare;

                  while (node) {
                    var cmp = comparator(key, node.key);

                    if (cmp === 0) {
                      return true;
                    } else if (cmp < 0) {
                      node = node.left;
                    } else {
                      node = node.right;
                    }
                  }

                  return false;
                };

                SplayTree.prototype.remove = function remove(key) {
                  var z = this.find(key);

                  if (!z) {
                    return false;
                  }

                  this.splay(z);

                  if (!z.left) {
                    this.replace(z, z.right);
                  } else if (!z.right) {
                    this.replace(z, z.left);
                  } else {
                    var y = this.minNode(z.right);

                    if (y.parent !== z) {
                      this.replace(y, y.right);
                      y.right = z.right;
                      y.right.parent = y;
                    }

                    this.replace(z, y);
                    y.left = z.left;
                    y.left.parent = y;
                  }

                  this._size--;
                  return true;
                };

                SplayTree.prototype.removeNode = function removeNode(z) {
                  if (!z) {
                    return false;
                  }

                  this.splay(z);

                  if (!z.left) {
                    this.replace(z, z.right);
                  } else if (!z.right) {
                    this.replace(z, z.left);
                  } else {
                    var y = this.minNode(z.right);

                    if (y.parent !== z) {
                      this.replace(y, y.right);
                      y.right = z.right;
                      y.right.parent = y;
                    }

                    this.replace(z, y);
                    y.left = z.left;
                    y.left.parent = y;
                  }

                  this._size--;
                  return true;
                };

                SplayTree.prototype.erase = function erase(key) {
                  var z = this.find(key);

                  if (!z) {
                    return;
                  }

                  this.splay(z);
                  var s = z.left;
                  var t = z.right;
                  var sMax = null;

                  if (s) {
                    s.parent = null;
                    sMax = this.maxNode(s);
                    this.splay(sMax);
                    this._root = sMax;
                  }

                  if (t) {
                    if (s) {
                      sMax.right = t;
                    } else {
                      this._root = t;
                    }

                    t.parent = sMax;
                  }

                  this._size--;
                };
                /**
                 * Removes and returns the node with smallest key
                 * @return {?Node}
                 */


                SplayTree.prototype.pop = function pop() {
                  var node = this._root,
                      returnValue = null;

                  if (node) {
                    while (node.left) {
                      node = node.left;
                    }

                    returnValue = {
                      key: node.key,
                      data: node.data
                    };
                    this.remove(node.key);
                  }

                  return returnValue;
                };
                /* eslint-disable class-methods-use-this */

                /**
                 * Successor node
                 * @param{Node} node
                 * @return {?Node}
                 */


                SplayTree.prototype.next = function next(node) {
                  var successor = node;

                  if (successor) {
                    if (successor.right) {
                      successor = successor.right;

                      while (successor && successor.left) {
                        successor = successor.left;
                      }
                    } else {
                      successor = node.parent;

                      while (successor && successor.right === node) {
                        node = successor;
                        successor = successor.parent;
                      }
                    }
                  }

                  return successor;
                };
                /**
                 * Predecessor node
                 * @param{Node} node
                 * @return {?Node}
                 */


                SplayTree.prototype.prev = function prev(node) {
                  var predecessor = node;

                  if (predecessor) {
                    if (predecessor.left) {
                      predecessor = predecessor.left;

                      while (predecessor && predecessor.right) {
                        predecessor = predecessor.right;
                      }
                    } else {
                      predecessor = node.parent;

                      while (predecessor && predecessor.left === node) {
                        node = predecessor;
                        predecessor = predecessor.parent;
                      }
                    }
                  }

                  return predecessor;
                };
                /* eslint-enable class-methods-use-this */

                /**
                 * @param{forEachCallback} callback
                 * @return {SplayTree}
                 */


                SplayTree.prototype.forEach = function forEach(callback) {
                  var current = this._root;
                  var s = [],
                      done = false,
                      i = 0;

                  while (!done) {
                    // Reach the left most Node of the current Node
                    if (current) {
                      // Place pointer to a tree node on the stack
                      // before traversing the node's left subtree
                      s.push(current);
                      current = current.left;
                    } else {
                      // BackTrack from the empty subtree and visit the Node
                      // at the top of the stack; however, if the stack is
                      // empty you are done
                      if (s.length > 0) {
                        current = s.pop();
                        callback(current, i++); // We have visited the node and its left
                        // subtree. Now, it's right subtree's turn

                        current = current.right;
                      } else {
                        done = true;
                      }
                    }
                  }

                  return this;
                };
                /**
                 * Walk key range from `low` to `high`. Stops if `fn` returns a value.
                 * @param{Key}    low
                 * @param{Key}    high
                 * @param{Function} fn
                 * @param{*?}     ctx
                 * @return {SplayTree}
                 */


                SplayTree.prototype.range = function range(low, high, fn, ctx) {
                  var this$1 = this;
                  var Q = [];
                  var compare = this._compare;
                  var node = this._root,
                      cmp;

                  while (Q.length !== 0 || node) {
                    if (node) {
                      Q.push(node);
                      node = node.left;
                    } else {
                      node = Q.pop();
                      cmp = compare(node.key, high);

                      if (cmp > 0) {
                        break;
                      } else if (compare(node.key, low) >= 0) {
                        if (fn.call(ctx, node)) {
                          return this$1;
                        } // stop if smth is returned

                      }

                      node = node.right;
                    }
                  }

                  return this;
                };
                /**
                 * Returns all keys in order
                 * @return {Array<Key>}
                 */


                SplayTree.prototype.keys = function keys() {
                  var current = this._root;
                  var s = [],
                      r = [],
                      done = false;

                  while (!done) {
                    if (current) {
                      s.push(current);
                      current = current.left;
                    } else {
                      if (s.length > 0) {
                        current = s.pop();
                        r.push(current.key);
                        current = current.right;
                      } else {
                        done = true;
                      }
                    }
                  }

                  return r;
                };
                /**
                 * Returns `data` fields of all nodes in order.
                 * @return {Array<Value>}
                 */


                SplayTree.prototype.values = function values() {
                  var current = this._root;
                  var s = [],
                      r = [],
                      done = false;

                  while (!done) {
                    if (current) {
                      s.push(current);
                      current = current.left;
                    } else {
                      if (s.length > 0) {
                        current = s.pop();
                        r.push(current.data);
                        current = current.right;
                      } else {
                        done = true;
                      }
                    }
                  }

                  return r;
                };
                /**
                 * Returns node at given index
                 * @param{number} index
                 * @return {?Node}
                 */


                SplayTree.prototype.at = function at(index) {
                  // removed after a consideration, more misleading than useful
                  // index = index % this.size;
                  // if (index < 0) index = this.size - index;
                  var current = this._root;
                  var s = [],
                      done = false,
                      i = 0;

                  while (!done) {
                    if (current) {
                      s.push(current);
                      current = current.left;
                    } else {
                      if (s.length > 0) {
                        current = s.pop();

                        if (i === index) {
                          return current;
                        }

                        i++;
                        current = current.right;
                      } else {
                        done = true;
                      }
                    }
                  }

                  return null;
                };
                /**
                 * Bulk-load items. Both array have to be same size
                 * @param{Array<Key>}  keys
                 * @param{Array<Value>}[values]
                 * @param{Boolean}     [presort=false] Pre-sort keys and values, using
                 *                                       tree's comparator. Sorting is done
                 *                                       in-place
                 * @return {AVLTree}
                 */


                SplayTree.prototype.load = function load(keys, values, presort) {
                  if (keys === void 0) keys = [];
                  if (values === void 0) values = [];
                  if (presort === void 0) presort = false;

                  if (this._size !== 0) {
                    throw new Error('bulk-load: tree is not empty');
                  }

                  var size = keys.length;

                  if (presort) {
                    sort(keys, values, 0, size - 1, this._compare);
                  }

                  this._root = loadRecursive(null, keys, values, 0, size);
                  this._size = size;
                  return this;
                };

                SplayTree.prototype.min = function min() {
                  var node = this.minNode(this._root);

                  if (node) {
                    return node.key;
                  } else {
                    return null;
                  }
                };

                SplayTree.prototype.max = function max() {
                  var node = this.maxNode(this._root);

                  if (node) {
                    return node.key;
                  } else {
                    return null;
                  }
                };

                SplayTree.prototype.isEmpty = function isEmpty() {
                  return this._root === null;
                };

                prototypeAccessors.size.get = function () {
                  return this._size;
                };
                /**
                 * Create a tree and load it with items
                 * @param{Array<Key>}        keys
                 * @param{Array<Value>?}      [values]
                  * @param{Function?}          [comparator]
                 * @param{Boolean?}           [presort=false] Pre-sort keys and values, using
                 *                                             tree's comparator. Sorting is done
                 *                                             in-place
                 * @param{Boolean?}           [noDuplicates=false] Allow duplicates
                 * @return {SplayTree}
                 */


                SplayTree.createTree = function createTree(keys, values, comparator, presort, noDuplicates) {
                  return new SplayTree(comparator, noDuplicates).load(keys, values, presort);
                };

                Object.defineProperties(SplayTree.prototype, prototypeAccessors);

                function loadRecursive(parent, keys, values, start, end) {
                  var size = end - start;

                  if (size > 0) {
                    var middle = start + Math.floor(size / 2);
                    var key = keys[middle];
                    var data = values[middle];
                    var node = {
                      key: key,
                      data: data,
                      parent: parent
                    };
                    node.left = loadRecursive(node, keys, values, start, middle);
                    node.right = loadRecursive(node, keys, values, middle + 1, end);
                    return node;
                  }

                  return null;
                }

                function sort(keys, values, left, right, compare) {
                  if (left >= right) {
                    return;
                  }

                  var pivot = keys[left + right >> 1];
                  var i = left - 1;
                  var j = right + 1;

                  while (true) {
                    do {
                      i++;
                    } while (compare(keys[i], pivot) < 0);

                    do {
                      j--;
                    } while (compare(keys[j], pivot) > 0);

                    if (i >= j) {
                      break;
                    }

                    var tmp = keys[i];
                    keys[i] = keys[j];
                    keys[j] = tmp;
                    tmp = values[i];
                    values[i] = values[j];
                    values[j] = tmp;
                  }

                  sort(keys, values, left, j, compare);
                  sort(keys, values, j + 1, right, compare);
                }

                var NORMAL = 0;
                var NON_CONTRIBUTING = 1;
                var SAME_TRANSITION = 2;
                var DIFFERENT_TRANSITION = 3;
                var INTERSECTION = 0;
                var UNION = 1;
                var DIFFERENCE = 2;
                var XOR = 3;
                /**
                 * @param  {SweepEvent} event
                 * @param  {SweepEvent} prev
                 * @param  {Operation} operation
                 */

                function computeFields(event, prev, operation) {
                  // compute inOut and otherInOut fields
                  if (prev === null) {
                    event.inOut = false;
                    event.otherInOut = true; // previous line segment in sweepline belongs to the same polygon
                  } else {
                    if (event.isSubject === prev.isSubject) {
                      event.inOut = !prev.inOut;
                      event.otherInOut = prev.otherInOut; // previous line segment in sweepline belongs to the clipping polygon
                    } else {
                      event.inOut = !prev.otherInOut;
                      event.otherInOut = prev.isVertical() ? !prev.inOut : prev.inOut;
                    } // compute prevInResult field


                    if (prev) {
                      event.prevInResult = !inResult(prev, operation) || prev.isVertical() ? prev.prevInResult : prev;
                    }
                  } // check if the line segment belongs to the Boolean operation


                  event.inResult = inResult(event, operation);
                }
                /* eslint-disable indent */


                function inResult(event, operation) {
                  switch (event.type) {
                    case NORMAL:
                      switch (operation) {
                        case INTERSECTION:
                          return !event.otherInOut;

                        case UNION:
                          return event.otherInOut;

                        case DIFFERENCE:
                          // return (event.isSubject && !event.otherInOut) ||
                          //         (!event.isSubject && event.otherInOut);
                          return event.isSubject && event.otherInOut || !event.isSubject && !event.otherInOut;

                        case XOR:
                          return true;
                      }

                      break;

                    case SAME_TRANSITION:
                      return operation === INTERSECTION || operation === UNION;

                    case DIFFERENT_TRANSITION:
                      return operation === DIFFERENCE;

                    case NON_CONTRIBUTING:
                      return false;
                  }

                  return false;
                }
                /* eslint-enable indent */


                var SweepEvent = function SweepEvent(point, left, otherEvent, isSubject, edgeType) {
                  /**
                   * Is left endpoint?
                   * @type {Boolean}
                   */
                  this.left = left;
                  /**
                   * @type {Array.<Number>}
                   */

                  this.point = point;
                  /**
                   * Other edge reference
                   * @type {SweepEvent}
                   */

                  this.otherEvent = otherEvent;
                  /**
                   * Belongs to source or clipping polygon
                   * @type {Boolean}
                   */

                  this.isSubject = isSubject;
                  /**
                   * Edge contribution type
                   * @type {Number}
                   */

                  this.type = edgeType || NORMAL;
                  /**
                   * In-out transition for the sweepline crossing polygon
                   * @type {Boolean}
                   */

                  this.inOut = false;
                  /**
                   * @type {Boolean}
                   */

                  this.otherInOut = false;
                  /**
                   * Previous event in result?
                   * @type {SweepEvent}
                   */

                  this.prevInResult = null;
                  /**
                   * Does event belong to result?
                   * @type {Boolean}
                   */

                  this.inResult = false; // connection step

                  /**
                   * @type {Boolean}
                   */

                  this.resultInOut = false;
                  this.isExteriorRing = true;
                };
                /**
                 * @param{Array.<Number>}p
                 * @return {Boolean}
                 */


                SweepEvent.prototype.isBelow = function isBelow(p) {
                  var p0 = this.point,
                      p1 = this.otherEvent.point;
                  return this.left ? (p0[0] - p[0]) * (p1[1] - p[1]) - (p1[0] - p[0]) * (p0[1] - p[1]) > 0 // signedArea(this.point, this.otherEvent.point, p) > 0 :
                  : (p1[0] - p[0]) * (p0[1] - p[1]) - (p0[0] - p[0]) * (p1[1] - p[1]) > 0; //signedArea(this.otherEvent.point, this.point, p) > 0;
                };
                /**
                 * @param{Array.<Number>}p
                 * @return {Boolean}
                 */


                SweepEvent.prototype.isAbove = function isAbove(p) {
                  return !this.isBelow(p);
                };
                /**
                 * @return {Boolean}
                 */


                SweepEvent.prototype.isVertical = function isVertical() {
                  return this.point[0] === this.otherEvent.point[0];
                };

                SweepEvent.prototype.clone = function clone() {
                  var copy = new SweepEvent(this.point, this.left, this.otherEvent, this.isSubject, this.type);
                  copy.inResult = this.inResult;
                  copy.prevInResult = this.prevInResult;
                  copy.isExteriorRing = this.isExteriorRing;
                  copy.inOut = this.inOut;
                  copy.otherInOut = this.otherInOut;
                  return copy;
                };

                function equals(p1, p2) {
                  if (p1[0] === p2[0]) {
                    if (p1[1] === p2[1]) {
                      return true;
                    } else {
                      return false;
                    }
                  }

                  return false;
                } // const EPSILON = 1e-9;
                // const abs = Math.abs;
                // TODO https://github.com/w8r/martinez/issues/6#issuecomment-262847164
                // Precision problem.
                //
                // module.exports = function equals(p1, p2) {
                //   return abs(p1[0] - p2[0]) <= EPSILON && abs(p1[1] - p2[1]) <= EPSILON;
                // };

                /**
                 * Signed area of the triangle (p0, p1, p2)
                 * @param  {Array.<Number>} p0
                 * @param  {Array.<Number>} p1
                 * @param  {Array.<Number>} p2
                 * @return {Number}
                 */


                function signedArea(p0, p1, p2) {
                  return (p0[0] - p2[0]) * (p1[1] - p2[1]) - (p1[0] - p2[0]) * (p0[1] - p2[1]);
                }
                /**
                 * @param  {SweepEvent} e1
                 * @param  {SweepEvent} e2
                 * @return {Number}
                 */


                function compareEvents(e1, e2) {
                  var p1 = e1.point;
                  var p2 = e2.point; // Different x-coordinate

                  if (p1[0] > p2[0]) {
                    return 1;
                  }

                  if (p1[0] < p2[0]) {
                    return -1;
                  } // Different points, but same x-coordinate
                  // Event with lower y-coordinate is processed first


                  if (p1[1] !== p2[1]) {
                    return p1[1] > p2[1] ? 1 : -1;
                  }

                  return specialCases(e1, e2, p1, p2);
                }
                /* eslint-disable no-unused-vars */


                function specialCases(e1, e2, p1, p2) {
                  // Same coordinates, but one is a left endpoint and the other is
                  // a right endpoint. The right endpoint is processed first
                  if (e1.left !== e2.left) {
                    return e1.left ? 1 : -1;
                  } // const p2 = e1.otherEvent.point, p3 = e2.otherEvent.point;
                  // const sa = (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])
                  // Same coordinates, both events
                  // are left endpoints or right endpoints.
                  // not collinear


                  if (signedArea(p1, e1.otherEvent.point, e2.otherEvent.point) !== 0) {
                    // the event associate to the bottom segment is processed first
                    return !e1.isBelow(e2.otherEvent.point) ? 1 : -1;
                  }

                  return !e1.isSubject && e2.isSubject ? 1 : -1;
                }
                /* eslint-enable no-unused-vars */

                /**
                 * @param  {SweepEvent} se
                 * @param  {Array.<Number>} p
                 * @param  {Queue} queue
                 * @return {Queue}
                 */


                function divideSegment(se, p, queue) {
                  var r = new SweepEvent(p, false, se, se.isSubject);
                  var l = new SweepEvent(p, true, se.otherEvent, se.isSubject);
                  /* eslint-disable no-console */

                  if (equals(se.point, se.otherEvent.point)) {
                    console.warn('what is that, a collapsed segment?', se);
                  }
                  /* eslint-enable no-console */


                  r.contourId = l.contourId = se.contourId; // avoid a rounding error. The left event would be processed after the right event

                  if (compareEvents(l, se.otherEvent) > 0) {
                    se.otherEvent.left = true;
                    l.left = false;
                  } // avoid a rounding error. The left event would be processed after the right event
                  // if (compareEvents(se, r) > 0) {}


                  se.otherEvent.otherEvent = l;
                  se.otherEvent = r;
                  queue.push(l);
                  queue.push(r);
                  return queue;
                } //const EPS = 1e-9;

                /**
                 * Finds the magnitude of the cross product of two vectors (if we pretend
                 * they're in three dimensions)
                 *
                 * @param {Object} a First vector
                 * @param {Object} b Second vector
                 * @private
                 * @returns {Number} The magnitude of the cross product
                 */


                function crossProduct(a, b) {
                  return a[0] * b[1] - a[1] * b[0];
                }
                /**
                 * Finds the dot product of two vectors.
                 *
                 * @param {Object} a First vector
                 * @param {Object} b Second vector
                 * @private
                 * @returns {Number} The dot product
                 */


                function dotProduct(a, b) {
                  return a[0] * b[0] + a[1] * b[1];
                }
                /**
                 * Finds the intersection (if any) between two line segments a and b, given the
                 * line segments' end points a1, a2 and b1, b2.
                 *
                 * This algorithm is based on Schneider and Eberly.
                 * http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf
                 * Page 244.
                 *
                 * @param {Array.<Number>} a1 point of first line
                 * @param {Array.<Number>} a2 point of first line
                 * @param {Array.<Number>} b1 point of second line
                 * @param {Array.<Number>} b2 point of second line
                 * @param {Boolean=}       noEndpointTouch whether to skip single touchpoints
                 *                                         (meaning connected segments) as
                 *                                         intersections
                 * @returns {Array.<Array.<Number>>|Null} If the lines intersect, the point of
                 * intersection. If they overlap, the two end points of the overlapping segment.
                 * Otherwise, null.
                 */


                function intersection(a1, a2, b1, b2, noEndpointTouch) {
                  // The algorithm expects our lines in the form P + sd, where P is a point,
                  // s is on the interval [0, 1], and d is a vector.
                  // We are passed two points. P can be the first point of each pair. The
                  // vector, then, could be thought of as the distance (in x and y components)
                  // from the first point to the second point.
                  // So first, let's make our vectors:
                  var va = [a2[0] - a1[0], a2[1] - a1[1]];
                  var vb = [b2[0] - b1[0], b2[1] - b1[1]]; // We also define a function to convert back to regular point form:

                  /* eslint-disable arrow-body-style */

                  function toPoint(p, s, d) {
                    return [p[0] + s * d[0], p[1] + s * d[1]];
                  }
                  /* eslint-enable arrow-body-style */
                  // The rest is pretty much a straight port of the algorithm.


                  var e = [b1[0] - a1[0], b1[1] - a1[1]];
                  var kross = crossProduct(va, vb);
                  var sqrKross = kross * kross;
                  var sqrLenA = dotProduct(va, va); //const sqrLenB  = dotProduct(vb, vb);
                  // Check for line intersection. This works because of the properties of the
                  // cross product -- specifically, two vectors are parallel if and only if the
                  // cross product is the 0 vector. The full calculation involves relative error
                  // to account for possible very small line segments. See Schneider & Eberly
                  // for details.

                  if (sqrKross > 0
                  /* EPS * sqrLenB * sqLenA */
                  ) {
                      // If they're not parallel, then (because these are line segments) they
                      // still might not actually intersect. This code checks that the
                      // intersection point of the lines is actually on both line segments.
                      var s = crossProduct(e, vb) / kross;

                      if (s < 0 || s > 1) {
                        // not on line segment a
                        return null;
                      }

                      var t = crossProduct(e, va) / kross;

                      if (t < 0 || t > 1) {
                        // not on line segment b
                        return null;
                      }

                      if (s === 0 || s === 1) {
                        // on an endpoint of line segment a
                        return noEndpointTouch ? null : [toPoint(a1, s, va)];
                      }

                      if (t === 0 || t === 1) {
                        // on an endpoint of line segment b
                        return noEndpointTouch ? null : [toPoint(b1, t, vb)];
                      }

                      return [toPoint(a1, s, va)];
                    } // If we've reached this point, then the lines are either parallel or the
                  // same, but the segments could overlap partially or fully, or not at all.
                  // So we need to find the overlap, if any. To do that, we can use e, which is
                  // the (vector) difference between the two initial points. If this is parallel
                  // with the line itself, then the two lines are the same line, and there will
                  // be overlap.
                  //const sqrLenE = dotProduct(e, e);


                  kross = crossProduct(e, va);
                  sqrKross = kross * kross;

                  if (sqrKross > 0
                  /* EPS * sqLenB * sqLenE */
                  ) {
                      // Lines are just parallel, not the same. No overlap.
                      return null;
                    }

                  var sa = dotProduct(va, e) / sqrLenA;
                  var sb = sa + dotProduct(va, vb) / sqrLenA;
                  var smin = Math.min(sa, sb);
                  var smax = Math.max(sa, sb); // this is, essentially, the FindIntersection acting on floats from
                  // Schneider & Eberly, just inlined into this function.

                  if (smin <= 1 && smax >= 0) {
                    // overlap on an end point
                    if (smin === 1) {
                      return noEndpointTouch ? null : [toPoint(a1, smin > 0 ? smin : 0, va)];
                    }

                    if (smax === 0) {
                      return noEndpointTouch ? null : [toPoint(a1, smax < 1 ? smax : 1, va)];
                    }

                    if (noEndpointTouch && smin === 0 && smax === 1) {
                      return null;
                    } // There's overlap on a segment -- two points of intersection. Return both.


                    return [toPoint(a1, smin > 0 ? smin : 0, va), toPoint(a1, smax < 1 ? smax : 1, va)];
                  }

                  return null;
                }
                /**
                 * @param  {SweepEvent} se1
                 * @param  {SweepEvent} se2
                 * @param  {Queue}      queue
                 * @return {Number}
                 */


                function possibleIntersection(se1, se2, queue) {
                  // that disallows self-intersecting polygons,
                  // did cost us half a day, so I'll leave it
                  // out of respect
                  // if (se1.isSubject === se2.isSubject) return;
                  var inter = intersection(se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);
                  var nintersections = inter ? inter.length : 0;

                  if (nintersections === 0) {
                    return 0;
                  } // no intersection
                  // the line segments intersect at an endpoint of both line segments


                  if (nintersections === 1 && (equals(se1.point, se2.point) || equals(se1.otherEvent.point, se2.otherEvent.point))) {
                    return 0;
                  }

                  if (nintersections === 2 && se1.isSubject === se2.isSubject) {
                    // if(se1.contourId === se2.contourId){
                    // console.warn('Edges of the same polygon overlap',
                    //   se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);
                    // }
                    //throw new Error('Edges of the same polygon overlap');
                    return 0;
                  } // The line segments associated to se1 and se2 intersect


                  if (nintersections === 1) {
                    // if the intersection point is not an endpoint of se1
                    if (!equals(se1.point, inter[0]) && !equals(se1.otherEvent.point, inter[0])) {
                      divideSegment(se1, inter[0], queue);
                    } // if the intersection point is not an endpoint of se2


                    if (!equals(se2.point, inter[0]) && !equals(se2.otherEvent.point, inter[0])) {
                      divideSegment(se2, inter[0], queue);
                    }

                    return 1;
                  } // The line segments associated to se1 and se2 overlap


                  var events = [];
                  var leftCoincide = false;
                  var rightCoincide = false;

                  if (equals(se1.point, se2.point)) {
                    leftCoincide = true; // linked
                  } else if (compareEvents(se1, se2) === 1) {
                    events.push(se2, se1);
                  } else {
                    events.push(se1, se2);
                  }

                  if (equals(se1.otherEvent.point, se2.otherEvent.point)) {
                    rightCoincide = true;
                  } else if (compareEvents(se1.otherEvent, se2.otherEvent) === 1) {
                    events.push(se2.otherEvent, se1.otherEvent);
                  } else {
                    events.push(se1.otherEvent, se2.otherEvent);
                  }

                  if (leftCoincide && rightCoincide || leftCoincide) {
                    // both line segments are equal or share the left endpoint
                    se2.type = NON_CONTRIBUTING;
                    se1.type = se2.inOut === se1.inOut ? SAME_TRANSITION : DIFFERENT_TRANSITION;

                    if (leftCoincide && !rightCoincide) {
                      // honestly no idea, but changing events selection from [2, 1]
                      // to [0, 1] fixes the overlapping self-intersecting polygons issue
                      divideSegment(events[1].otherEvent, events[0].point, queue);
                    }

                    return 2;
                  } // the line segments share the right endpoint


                  if (rightCoincide) {
                    divideSegment(events[0], events[1].point, queue);
                    return 3;
                  } // no line segment includes totally the other one


                  if (events[0] !== events[3].otherEvent) {
                    divideSegment(events[0], events[1].point, queue);
                    divideSegment(events[1], events[2].point, queue);
                    return 3;
                  } // one line segment includes the other one


                  divideSegment(events[0], events[1].point, queue);
                  divideSegment(events[3].otherEvent, events[2].point, queue);
                  return 3;
                }
                /**
                 * @param  {SweepEvent} le1
                 * @param  {SweepEvent} le2
                 * @return {Number}
                 */


                function compareSegments(le1, le2) {
                  if (le1 === le2) {
                    return 0;
                  } // Segments are not collinear


                  if (signedArea(le1.point, le1.otherEvent.point, le2.point) !== 0 || signedArea(le1.point, le1.otherEvent.point, le2.otherEvent.point) !== 0) {
                    // If they share their left endpoint use the right endpoint to sort
                    if (equals(le1.point, le2.point)) {
                      return le1.isBelow(le2.otherEvent.point) ? -1 : 1;
                    } // Different left endpoint: use the left endpoint to sort


                    if (le1.point[0] === le2.point[0]) {
                      return le1.point[1] < le2.point[1] ? -1 : 1;
                    } // has the line segment associated to e1 been inserted
                    // into S after the line segment associated to e2 ?


                    if (compareEvents(le1, le2) === 1) {
                      return le2.isAbove(le1.point) ? -1 : 1;
                    } // The line segment associated to e2 has been inserted
                    // into S after the line segment associated to e1


                    return le1.isBelow(le2.point) ? -1 : 1;
                  }

                  if (le1.isSubject === le2.isSubject) {
                    // same polygon
                    var p1 = le1.point,
                        p2 = le2.point;

                    if (p1[0] === p2[0] && p1[1] === p2[1]
                    /*equals(le1.point, le2.point)*/
                    ) {
                        p1 = le1.otherEvent.point;
                        p2 = le2.otherEvent.point;

                        if (p1[0] === p2[0] && p1[1] === p2[1]) {
                          return 0;
                        } else {
                          return le1.contourId > le2.contourId ? 1 : -1;
                        }
                      }
                  } else {
                    // Segments are collinear, but belong to separate polygons
                    return le1.isSubject ? -1 : 1;
                  }

                  return compareEvents(le1, le2) === 1 ? 1 : -1;
                }

                function subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation) {
                  var sweepLine = new SplayTree(compareSegments);
                  var sortedEvents = [];
                  var rightbound = Math.min(sbbox[2], cbbox[2]);
                  var prev, next, begin;

                  while (eventQueue.length !== 0) {
                    var event = eventQueue.pop();
                    sortedEvents.push(event); // optimization by bboxes for intersection and difference goes here

                    if (operation === INTERSECTION && event.point[0] > rightbound || operation === DIFFERENCE && event.point[0] > sbbox[2]) {
                      break;
                    }

                    if (event.left) {
                      next = prev = sweepLine.insert(event);
                      begin = sweepLine.minNode();

                      if (prev !== begin) {
                        prev = sweepLine.prev(prev);
                      } else {
                        prev = null;
                      }

                      next = sweepLine.next(next);
                      var prevEvent = prev ? prev.key : null;
                      var prevprevEvent = void 0;
                      computeFields(event, prevEvent, operation);

                      if (next) {
                        if (possibleIntersection(event, next.key, eventQueue) === 2) {
                          computeFields(event, prevEvent, operation);
                          computeFields(event, next.key, operation);
                        }
                      }

                      if (prev) {
                        if (possibleIntersection(prev.key, event, eventQueue) === 2) {
                          var prevprev = prev;

                          if (prevprev !== begin) {
                            prevprev = sweepLine.prev(prevprev);
                          } else {
                            prevprev = null;
                          }

                          prevprevEvent = prevprev ? prevprev.key : null;
                          computeFields(prevEvent, prevprevEvent, operation);
                          computeFields(event, prevEvent, operation);
                        }
                      }
                    } else {
                      event = event.otherEvent;
                      next = prev = sweepLine.find(event);

                      if (prev && next) {
                        if (prev !== begin) {
                          prev = sweepLine.prev(prev);
                        } else {
                          prev = null;
                        }

                        next = sweepLine.next(next);
                        sweepLine.remove(event);

                        if (next && prev) {
                          possibleIntersection(prev.key, next.key, eventQueue);
                        }
                      }
                    }
                  }

                  return sortedEvents;
                }
                /**
                 * @param  {Array.<SweepEvent>} sortedEvents
                 * @return {Array.<SweepEvent>}
                 */


                function orderEvents(sortedEvents) {
                  var event, i, len, tmp;
                  var resultEvents = [];

                  for (i = 0, len = sortedEvents.length; i < len; i++) {
                    event = sortedEvents[i];

                    if (event.left && event.inResult || !event.left && event.otherEvent.inResult) {
                      resultEvents.push(event);
                    }
                  } // Due to overlapping edges the resultEvents array can be not wholly sorted


                  var sorted = false;

                  while (!sorted) {
                    sorted = true;

                    for (i = 0, len = resultEvents.length; i < len; i++) {
                      if (i + 1 < len && compareEvents(resultEvents[i], resultEvents[i + 1]) === 1) {
                        tmp = resultEvents[i];
                        resultEvents[i] = resultEvents[i + 1];
                        resultEvents[i + 1] = tmp;
                        sorted = false;
                      }
                    }
                  }

                  for (i = 0, len = resultEvents.length; i < len; i++) {
                    event = resultEvents[i];
                    event.pos = i;
                  } // imagine, the right event is found in the beginning of the queue,
                  // when his left counterpart is not marked yet


                  for (i = 0, len = resultEvents.length; i < len; i++) {
                    event = resultEvents[i];

                    if (!event.left) {
                      tmp = event.pos;
                      event.pos = event.otherEvent.pos;
                      event.otherEvent.pos = tmp;
                    }
                  }

                  return resultEvents;
                }
                /**
                 * @param  {Number} pos
                 * @param  {Array.<SweepEvent>} resultEvents
                 * @param  {Object>}    processed
                 * @return {Number}
                 */


                function nextPos(pos, resultEvents, processed, origIndex) {
                  var newPos = pos + 1;
                  var length = resultEvents.length;

                  if (newPos > length - 1) {
                    return pos - 1;
                  }

                  var p = resultEvents[pos].point;
                  var p1 = resultEvents[newPos].point; // while in range and not the current one by value

                  while (newPos < length && p1[0] === p[0] && p1[1] === p[1]) {
                    if (!processed[newPos]) {
                      return newPos;
                    } else {
                      newPos++;
                    }

                    p1 = resultEvents[newPos].point;
                  }

                  newPos = pos - 1;

                  while (processed[newPos] && newPos >= origIndex) {
                    newPos--;
                  }

                  return newPos;
                }
                /**
                 * @param  {Array.<SweepEvent>} sortedEvents
                 * @return {Array.<*>} polygons
                 */


                function connectEdges(sortedEvents, operation) {
                  var i, len;
                  var resultEvents = orderEvents(sortedEvents); // "false"-filled array

                  var processed = {};
                  var result = [];
                  var event;

                  for (i = 0, len = resultEvents.length; i < len; i++) {
                    if (processed[i]) {
                      continue;
                    }

                    var contour = [[]];

                    if (!resultEvents[i].isExteriorRing) {
                      if (operation === DIFFERENCE && !resultEvents[i].isSubject && result.length === 0) {
                        result.push(contour);
                      } else if (result.length === 0) {
                        result.push([[contour]]);
                      } else {
                        result[result.length - 1].push(contour[0]);
                      }
                    } else if (operation === DIFFERENCE && !resultEvents[i].isSubject && result.length > 1) {
                      result[result.length - 1].push(contour[0]);
                    } else {
                      result.push(contour);
                    }

                    var ringId = result.length - 1;
                    var pos = i;
                    var initial = resultEvents[i].point;
                    contour[0].push(initial);

                    while (pos >= i) {
                      event = resultEvents[pos];
                      processed[pos] = true;

                      if (event.left) {
                        event.resultInOut = false;
                        event.contourId = ringId;
                      } else {
                        event.otherEvent.resultInOut = true;
                        event.otherEvent.contourId = ringId;
                      }

                      pos = event.pos;
                      processed[pos] = true;
                      contour[0].push(resultEvents[pos].point);
                      pos = nextPos(pos, resultEvents, processed, i);
                    }

                    pos = pos === -1 ? i : pos;
                    event = resultEvents[pos];
                    processed[pos] = processed[event.pos] = true;
                    event.otherEvent.resultInOut = true;
                    event.otherEvent.contourId = ringId;
                  } // Handle if the result is a polygon (eg not multipoly)
                  // Commented it again, let's see what do we mean by that
                  // if (result.length === 1) result = result[0];


                  return result;
                }

                var tinyqueue = TinyQueue;
                var default_1 = TinyQueue;

                function TinyQueue(data, compare) {
                  var this$1 = this;

                  if (!(this instanceof TinyQueue)) {
                    return new TinyQueue(data, compare);
                  }

                  this.data = data || [];
                  this.length = this.data.length;
                  this.compare = compare || defaultCompare;

                  if (this.length > 0) {
                    for (var i = (this.length >> 1) - 1; i >= 0; i--) {
                      this$1._down(i);
                    }
                  }
                }

                function defaultCompare(a, b) {
                  return a < b ? -1 : a > b ? 1 : 0;
                }

                TinyQueue.prototype = {
                  push: function (item) {
                    this.data.push(item);
                    this.length++;

                    this._up(this.length - 1);
                  },
                  pop: function () {
                    if (this.length === 0) {
                      return undefined;
                    }

                    var top = this.data[0];
                    this.length--;

                    if (this.length > 0) {
                      this.data[0] = this.data[this.length];

                      this._down(0);
                    }

                    this.data.pop();
                    return top;
                  },
                  peek: function () {
                    return this.data[0];
                  },
                  _up: function (pos) {
                    var data = this.data;
                    var compare = this.compare;
                    var item = data[pos];

                    while (pos > 0) {
                      var parent = pos - 1 >> 1;
                      var current = data[parent];

                      if (compare(item, current) >= 0) {
                        break;
                      }

                      data[pos] = current;
                      pos = parent;
                    }

                    data[pos] = item;
                  },
                  _down: function (pos) {
                    var this$1 = this;
                    var data = this.data;
                    var compare = this.compare;
                    var halfLength = this.length >> 1;
                    var item = data[pos];

                    while (pos < halfLength) {
                      var left = (pos << 1) + 1;
                      var right = left + 1;
                      var best = data[left];

                      if (right < this$1.length && compare(data[right], best) < 0) {
                        left = right;
                        best = data[right];
                      }

                      if (compare(best, item) >= 0) {
                        break;
                      }

                      data[pos] = best;
                      pos = left;
                    }

                    data[pos] = item;
                  }
                };
                tinyqueue.default = default_1;
                var max = Math.max;
                var min = Math.min;
                var contourId = 0;

                function processPolygon(contourOrHole, isSubject, depth, Q, bbox, isExteriorRing) {
                  var i, len, s1, s2, e1, e2;

                  for (i = 0, len = contourOrHole.length - 1; i < len; i++) {
                    s1 = contourOrHole[i];
                    s2 = contourOrHole[i + 1];
                    e1 = new SweepEvent(s1, false, undefined, isSubject);
                    e2 = new SweepEvent(s2, false, e1, isSubject);
                    e1.otherEvent = e2;

                    if (s1[0] === s2[0] && s1[1] === s2[1]) {
                      continue; // skip collapsed edges, or it breaks
                    }

                    e1.contourId = e2.contourId = depth;

                    if (!isExteriorRing) {
                      e1.isExteriorRing = false;
                      e2.isExteriorRing = false;
                    }

                    if (compareEvents(e1, e2) > 0) {
                      e2.left = true;
                    } else {
                      e1.left = true;
                    }

                    var x = s1[0],
                        y = s1[1];
                    bbox[0] = min(bbox[0], x);
                    bbox[1] = min(bbox[1], y);
                    bbox[2] = max(bbox[2], x);
                    bbox[3] = max(bbox[3], y); // Pushing it so the queue is sorted from left to right,
                    // with object on the left having the highest priority.

                    Q.push(e1);
                    Q.push(e2);
                  }
                }

                function fillQueue(subject, clipping, sbbox, cbbox, operation) {
                  var eventQueue = new tinyqueue(null, compareEvents);
                  var polygonSet, isExteriorRing, i, ii, j, jj; //, k, kk;

                  for (i = 0, ii = subject.length; i < ii; i++) {
                    polygonSet = subject[i];

                    for (j = 0, jj = polygonSet.length; j < jj; j++) {
                      isExteriorRing = j === 0;

                      if (isExteriorRing) {
                        contourId++;
                      }

                      processPolygon(polygonSet[j], true, contourId, eventQueue, sbbox, isExteriorRing);
                    }
                  }

                  for (i = 0, ii = clipping.length; i < ii; i++) {
                    polygonSet = clipping[i];

                    for (j = 0, jj = polygonSet.length; j < jj; j++) {
                      isExteriorRing = j === 0;

                      if (operation === DIFFERENCE) {
                        isExteriorRing = false;
                      }

                      if (isExteriorRing) {
                        contourId++;
                      }

                      processPolygon(polygonSet[j], false, contourId, eventQueue, cbbox, isExteriorRing);
                    }
                  }

                  return eventQueue;
                }

                var EMPTY = [];

                function trivialOperation(subject, clipping, operation) {
                  var result = null;

                  if (subject.length * clipping.length === 0) {
                    if (operation === INTERSECTION) {
                      result = EMPTY;
                    } else if (operation === DIFFERENCE) {
                      result = subject;
                    } else if (operation === UNION || operation === XOR) {
                      result = subject.length === 0 ? clipping : subject;
                    }
                  }

                  return result;
                }

                function compareBBoxes(subject, clipping, sbbox, cbbox, operation) {
                  var result = null;

                  if (sbbox[0] > cbbox[2] || cbbox[0] > sbbox[2] || sbbox[1] > cbbox[3] || cbbox[1] > sbbox[3]) {
                    if (operation === INTERSECTION) {
                      result = EMPTY;
                    } else if (operation === DIFFERENCE) {
                      result = subject;
                    } else if (operation === UNION || operation === XOR) {
                      result = subject.concat(clipping);
                    }
                  }

                  return result;
                }

                function boolean(subject, clipping, operation) {
                  if (typeof subject[0][0][0] === 'number') {
                    subject = [subject];
                  }

                  if (typeof clipping[0][0][0] === 'number') {
                    clipping = [clipping];
                  }

                  var trivial = trivialOperation(subject, clipping, operation);

                  if (trivial) {
                    return trivial === EMPTY ? null : trivial;
                  }

                  var sbbox = [Infinity, Infinity, -Infinity, -Infinity];
                  var cbbox = [Infinity, Infinity, -Infinity, -Infinity]; //console.time('fill queue');

                  var eventQueue = fillQueue(subject, clipping, sbbox, cbbox, operation); //console.timeEnd('fill queue');

                  trivial = compareBBoxes(subject, clipping, sbbox, cbbox, operation);

                  if (trivial) {
                    return trivial === EMPTY ? null : trivial;
                  } //console.time('subdivide edges');


                  var sortedEvents = subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation); //console.timeEnd('subdivide edges');
                  //console.time('connect vertices');

                  var result = connectEdges(sortedEvents, operation); //console.timeEnd('connect vertices');

                  return result;
                }

                function union(subject, clipping) {
                  return boolean(subject, clipping, UNION);
                }

                function diff(subject, clipping) {
                  return boolean(subject, clipping, DIFFERENCE);
                }

                function xor(subject, clipping) {
                  return boolean(subject, clipping, XOR);
                }

                function intersection$1(subject, clipping) {
                  return boolean(subject, clipping, INTERSECTION);
                }
                /**
                 * @enum {Number}
                 */


                var operations = {
                  UNION: UNION,
                  DIFFERENCE: DIFFERENCE,
                  INTERSECTION: INTERSECTION,
                  XOR: XOR
                };
                exports.union = union;
                exports.diff = diff;
                exports.xor = xor;
                exports.intersection = intersection$1;
                exports.operations = operations;
                Object.defineProperty(exports, '__esModule', {
                  value: true
                });
              });
            });
            unwrapExports(martinez_umd);

            var intersect_1 = createCommonjsModule(function (module, exports) {

              var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                result["default"] = mod;
                return result;
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var martinez = __importStar(martinez_umd);
              /**
               * Takes two {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and
               * finds their polygonal intersection. If they don't intersect, returns null.
               *
               * @name intersect
               * @param {Feature<Polygon | MultiPolygon>} poly1 the first polygon or multipolygon
               * @param {Feature<Polygon | MultiPolygon>} poly2 the second polygon or multipolygon
               * @param {Object} [options={}] Optional Parameters
               * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature
               * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or
               * {@link MultiPolygon}). If they do not share any area, returns `null`.
               * @example
               * var poly1 = turf.polygon([[
               *   [-122.801742, 45.48565],
               *   [-122.801742, 45.60491],
               *   [-122.584762, 45.60491],
               *   [-122.584762, 45.48565],
               *   [-122.801742, 45.48565]
               * ]]);
               *
               * var poly2 = turf.polygon([[
               *   [-122.520217, 45.535693],
               *   [-122.64038, 45.553967],
               *   [-122.720031, 45.526554],
               *   [-122.669906, 45.507309],
               *   [-122.723464, 45.446643],
               *   [-122.532577, 45.408574],
               *   [-122.487258, 45.477466],
               *   [-122.520217, 45.535693]
               * ]]);
               *
               * var intersection = turf.intersect(poly1, poly2);
               *
               * //addToMap
               * var addToMap = [poly1, poly2, intersection];
               */


              function intersect(poly1, poly2, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom1 = invariant.getGeom(poly1);
                var geom2 = invariant.getGeom(poly2);

                if (geom1.type === "Polygon" && geom2.type === "Polygon") {
                  var intersection = martinez.intersection(geom1.coordinates, geom2.coordinates);

                  if (intersection === null || intersection.length === 0) {
                    return null;
                  }

                  if (intersection.length === 1) {
                    var start = intersection[0][0][0];
                    var end = intersection[0][0][intersection[0][0].length - 1];

                    if (start[0] === end[0] && start[1] === end[1]) {
                      return helpers.polygon(intersection[0], options.properties);
                    }

                    return null;
                  }

                  return helpers.multiPolygon(intersection, options.properties);
                } else if (geom1.type === "MultiPolygon") {
                  var resultCoords = []; // iterate through the polygon and run intersect with each part, adding to the resultCoords.

                  for (var _i = 0, _a = geom1.coordinates; _i < _a.length; _i++) {
                    var coords = _a[_i];
                    var subGeom = invariant.getGeom(helpers.polygon(coords));
                    var subIntersection = intersect(subGeom, geom2);

                    if (subIntersection) {
                      var subIntGeom = invariant.getGeom(subIntersection);

                      if (subIntGeom.type === "Polygon") {
                        resultCoords.push(subIntGeom.coordinates);
                      } else if (subIntGeom.type === "MultiPolygon") {
                        resultCoords = resultCoords.concat(subIntGeom.coordinates);
                      } else {
                        throw new Error("intersection is invalid");
                      }
                    }
                  } // Make a polygon with the result


                  if (resultCoords.length === 0) {
                    return null;
                  }

                  if (resultCoords.length === 1) {
                    return helpers.polygon(resultCoords[0], options.properties);
                  } else {
                    return helpers.multiPolygon(resultCoords, options.properties);
                  }
                } else if (geom2.type === "MultiPolygon") {
                  // geom1 is a polygon and geom2 a multiPolygon,
                  // put the multiPolygon first and fallback to the previous case.
                  return intersect(geom2, geom1);
                } else {
                  // handle invalid geometry types
                  throw new Error("poly1 and poly2 must be either polygons or multiPolygons");
                }
              }

              exports.default = intersect;
            });
            var Intersect = unwrapExports(intersect_1);

            var meta$4 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, '__esModule', {
                value: true
              });
              /**
               * Callback for coordEach
               *
               * @callback coordEachCallback
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
               *
               * @name coordEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */

              function coordEach(geojson, callback, excludeWrapCoord) {
                // Handles null Geometry -- Skips this GeoJSON
                if (geojson === null) return;
                var j,
                    k,
                    l,
                    geometry,
                    stopG,
                    coords,
                    geometryMaybeCollection,
                    wrapShrink = 0,
                    coordIndex = 0,
                    isGeometryCollection,
                    type = geojson.type,
                    isFeatureCollection = type === 'FeatureCollection',
                    isFeature = type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
                    var multiFeatureIndex = 0;
                    var geometryIndex = 0;
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

                    if (geometry === null) continue;
                    coords = geometry.coordinates;
                    var geomType = geometry.type;
                    wrapShrink = excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon') ? 1 : 0;

                    switch (geomType) {
                      case null:
                        break;

                      case 'Point':
                        if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                        coordIndex++;
                        multiFeatureIndex++;
                        break;

                      case 'LineString':
                      case 'MultiPoint':
                        for (j = 0; j < coords.length; j++) {
                          if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                          coordIndex++;
                          if (geomType === 'MultiPoint') multiFeatureIndex++;
                        }

                        if (geomType === 'LineString') multiFeatureIndex++;
                        break;

                      case 'Polygon':
                      case 'MultiLineString':
                        for (j = 0; j < coords.length; j++) {
                          for (k = 0; k < coords[j].length - wrapShrink; k++) {
                            if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                            coordIndex++;
                          }

                          if (geomType === 'MultiLineString') multiFeatureIndex++;
                          if (geomType === 'Polygon') geometryIndex++;
                        }

                        if (geomType === 'Polygon') multiFeatureIndex++;
                        break;

                      case 'MultiPolygon':
                        for (j = 0; j < coords.length; j++) {
                          geometryIndex = 0;

                          for (k = 0; k < coords[j].length; k++) {
                            for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                              if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                              coordIndex++;
                            }

                            geometryIndex++;
                          }

                          multiFeatureIndex++;
                        }

                        break;

                      case 'GeometryCollection':
                        for (j = 0; j < geometry.geometries.length; j++) if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;

                        break;

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  }
                }
              }
              /**
               * Callback for coordReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback coordReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Array<number>} currentCoord The current coordinate being processed.
               * @param {number} coordIndex The current index of the coordinate being processed.
               * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               */

              /**
               * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
               *
               * @name coordReduce
               * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentCoord
               *   //=coordIndex
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentCoord;
               * });
               */


              function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
                var previousValue = initialValue;
                coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
                }, excludeWrapCoord);
                return previousValue;
              }
              /**
               * Callback for propEach
               *
               * @callback propEachCallback
               * @param {Object} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over properties in any GeoJSON object, similar to Array.forEach()
               *
               * @name propEach
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentProperties, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propEach(features, function (currentProperties, featureIndex) {
               *   //=currentProperties
               *   //=featureIndex
               * });
               */


              function propEach(geojson, callback) {
                var i;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    for (i = 0; i < geojson.features.length; i++) {
                      if (callback(geojson.features[i].properties, i) === false) break;
                    }

                    break;

                  case 'Feature':
                    callback(geojson.properties, 0);
                    break;
                }
              }
              /**
               * Callback for propReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback propReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {*} currentProperties The current Properties being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce properties in any GeoJSON object into a single value,
               * similar to how Array.reduce works. However, in this case we lazily run
               * the reduction, so an array of all properties is unnecessary.
               *
               * @name propReduce
               * @param {FeatureCollection|Feature} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
               *   //=previousValue
               *   //=currentProperties
               *   //=featureIndex
               *   return currentProperties
               * });
               */


              function propReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                propEach(geojson, function (currentProperties, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for featureEach
               *
               * @callback featureEachCallback
               * @param {Feature<any>} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Iterate over features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name featureEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.featureEach(features, function (currentFeature, featureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               * });
               */


              function featureEach(geojson, callback) {
                if (geojson.type === 'Feature') {
                  callback(geojson, 0);
                } else if (geojson.type === 'FeatureCollection') {
                  for (var i = 0; i < geojson.features.length; i++) {
                    if (callback(geojson.features[i], i) === false) break;
                  }
                }
              }
              /**
               * Callback for featureReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback featureReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name featureReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {"foo": "bar"}),
               *   turf.point([36, 53], {"hello": "world"})
               * ]);
               *
               * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   return currentFeature
               * });
               */


              function featureReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                featureEach(geojson, function (currentFeature, featureIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
                });
                return previousValue;
              }
              /**
               * Get all coordinates from any GeoJSON object.
               *
               * @name coordAll
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @returns {Array<Array<number>>} coordinate position array
               * @example
               * var features = turf.featureCollection([
               *   turf.point([26, 37], {foo: 'bar'}),
               *   turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * var coords = turf.coordAll(features);
               * //= [[26, 37], [36, 53]]
               */


              function coordAll(geojson) {
                var coords = [];
                coordEach(geojson, function (coord) {
                  coords.push(coord);
                });
                return coords;
              }
              /**
               * Callback for geomEach
               *
               * @callback geomEachCallback
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
               *
               * @name geomEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @returns {void}
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               * });
               */


              function geomEach(geojson, callback) {
                var i,
                    j,
                    g,
                    geometry,
                    stopG,
                    geometryMaybeCollection,
                    isGeometryCollection,
                    featureProperties,
                    featureBBox,
                    featureId,
                    featureIndex = 0,
                    isFeatureCollection = geojson.type === 'FeatureCollection',
                    isFeature = geojson.type === 'Feature',
                    stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
                // is because it's trying to be fast. GeoJSON supports multiple kinds
                // of objects at its root: FeatureCollection, Features, Geometries.
                // This function has the responsibility of handling all of them, and that
                // means that some of the `for` loops you see below actually just don't apply
                // to certain inputs. For instance, if you give this just a
                // Point geometry, then both loops are short-circuited and all we do
                // is gradually rename the input until it's called 'geometry'.
                //
                // This also aims to allocate as few resources as possible: just a
                // few numbers and booleans, rather than any temporary arrays as would
                // be required with the normalization approach.

                for (i = 0; i < stop; i++) {
                  geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
                  featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
                  featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
                  featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
                  isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === 'GeometryCollection' : false;
                  stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

                  for (g = 0; g < stopG; g++) {
                    geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

                    if (geometry === null) {
                      if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                      continue;
                    }

                    switch (geometry.type) {
                      case 'Point':
                      case 'LineString':
                      case 'MultiPoint':
                      case 'Polygon':
                      case 'MultiLineString':
                      case 'MultiPolygon':
                        {
                          if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          break;
                        }

                      case 'GeometryCollection':
                        {
                          for (j = 0; j < geometry.geometries.length; j++) {
                            if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
                          }

                          break;
                        }

                      default:
                        throw new Error('Unknown Geometry Type');
                    }
                  } // Only increase `featureIndex` per each feature


                  featureIndex++;
                }
              }
              /**
               * Callback for geomReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback geomReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Geometry} currentGeometry The current Geometry being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {Object} featureProperties The current Feature Properties being processed.
               * @param {Array<number>} featureBBox The current Feature BBox being processed.
               * @param {number|string} featureId The current Feature Id being processed.
               */

              /**
               * Reduce geometry in any GeoJSON object, similar to Array.reduce().
               *
               * @name geomReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.point([36, 53], {hello: 'world'})
               * ]);
               *
               * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
               *   //=previousValue
               *   //=currentGeometry
               *   //=featureIndex
               *   //=featureProperties
               *   //=featureBBox
               *   //=featureId
               *   return currentGeometry
               * });
               */


              function geomReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
                });
                return previousValue;
              }
              /**
               * Callback for flattenEach
               *
               * @callback flattenEachCallback
               * @param {Feature} currentFeature The current flattened feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Iterate over flattened features in any GeoJSON object, similar to
               * Array.forEach.
               *
               * @name flattenEach
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               * });
               */


              function flattenEach(geojson, callback) {
                geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
                  // Callback for single geometry
                  var type = geometry === null ? null : geometry.type;

                  switch (type) {
                    case null:
                    case 'Point':
                    case 'LineString':
                    case 'Polygon':
                      if (callback(helpers.feature(geometry, properties, {
                        bbox: bbox,
                        id: id
                      }), featureIndex, 0) === false) return false;
                      return;
                  }

                  var geomType; // Callback for multi-geometry

                  switch (type) {
                    case 'MultiPoint':
                      geomType = 'Point';
                      break;

                    case 'MultiLineString':
                      geomType = 'LineString';
                      break;

                    case 'MultiPolygon':
                      geomType = 'Polygon';
                      break;
                  }

                  for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
                    var coordinate = geometry.coordinates[multiFeatureIndex];
                    var geom = {
                      type: geomType,
                      coordinates: coordinate
                    };
                    if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
                  }
                });
              }
              /**
               * Callback for flattenReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback flattenReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature} currentFeature The current Feature being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               */

              /**
               * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
               *
               * @name flattenReduce
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
               * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var features = turf.featureCollection([
               *     turf.point([26, 37], {foo: 'bar'}),
               *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
               * ]);
               *
               * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
               *   //=previousValue
               *   //=currentFeature
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   return currentFeature
               * });
               */


              function flattenReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
                  if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
                });
                return previousValue;
              }
              /**
               * Callback for segmentEach
               *
               * @callback segmentEachCallback
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               * @returns {void}
               */

              /**
               * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //=currentSegment
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   //=segmentIndex
               * });
               *
               * // Calculate the total number of segments
               * var total = 0;
               * turf.segmentEach(polygon, function () {
               *     total++;
               * });
               */


              function segmentEach(geojson, callback) {
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  var segmentIndex = 0; // Exclude null Geometries

                  if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

                  var type = feature.geometry.type;
                  if (type === 'Point' || type === 'MultiPoint') return; // Generate 2-vertex line segments

                  var previousCoords;
                  var previousFeatureIndex = 0;
                  var previousMultiIndex = 0;
                  var prevGeomIndex = 0;
                  if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
                    // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
                    if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
                      previousCoords = currentCoord;
                      previousFeatureIndex = featureIndex;
                      previousMultiIndex = multiPartIndexCoord;
                      prevGeomIndex = geometryIndex;
                      segmentIndex = 0;
                      return;
                    }

                    var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);
                    if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
                    segmentIndex++;
                    previousCoords = currentCoord;
                  }) === false) return false;
                });
              }
              /**
               * Callback for segmentReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback segmentReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentSegment The current Segment being processed.
               * @param {number} featureIndex The current index of the Feature being processed.
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
               * @param {number} geometryIndex The current index of the Geometry being processed.
               * @param {number} segmentIndex The current index of the Segment being processed.
               */

              /**
               * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
               * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
               * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {void}
               * @example
               * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
               *
               * // Iterate over GeoJSON by 2-vertex segments
               * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
               *   //= previousSegment
               *   //= currentSegment
               *   //= featureIndex
               *   //= multiFeatureIndex
               *   //= geometryIndex
               *   //= segmentInex
               *   return currentSegment
               * });
               *
               * // Calculate the total number of segments
               * var initialValue = 0
               * var total = turf.segmentReduce(polygon, function (previousValue) {
               *     previousValue++;
               *     return previousValue;
               * }, initialValue);
               */


              function segmentReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                var started = false;
                segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
                  if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
                  started = true;
                });
                return previousValue;
              }
              /**
               * Callback for lineEach
               *
               * @callback lineEachCallback
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
               * similar to Array.forEach.
               *
               * @name lineEach
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @example
               * var multiLine = turf.multiLineString([
               *   [[26, 37], [35, 45]],
               *   [[36, 53], [38, 50], [41, 55]]
               * ]);
               *
               * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               * });
               */


              function lineEach(geojson, callback) {
                // validation
                if (!geojson) throw new Error('geojson is required');
                flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
                  if (feature.geometry === null) return;
                  var type = feature.geometry.type;
                  var coords = feature.geometry.coordinates;

                  switch (type) {
                    case 'LineString':
                      if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
                      break;

                    case 'Polygon':
                      for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
                        if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                      }

                      break;
                  }
                });
              }
              /**
               * Callback for lineReduce
               *
               * The first time the callback function is called, the values provided as arguments depend
               * on whether the reduce method has an initialValue argument.
               *
               * If an initialValue is provided to the reduce method:
               *  - The previousValue argument is initialValue.
               *  - The currentValue argument is the value of the first element present in the array.
               *
               * If an initialValue is not provided:
               *  - The previousValue argument is the value of the first element present in the array.
               *  - The currentValue argument is the value of the second element present in the array.
               *
               * @callback lineReduceCallback
               * @param {*} previousValue The accumulated value previously returned in the last invocation
               * of the callback, or initialValue, if supplied.
               * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
               * @param {number} featureIndex The current index of the Feature being processed
               * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
               * @param {number} geometryIndex The current index of the Geometry being processed
               */

              /**
               * Reduce features in any GeoJSON object, similar to Array.reduce().
               *
               * @name lineReduce
               * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
               * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
               * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
               * @returns {*} The value that results from the reduction.
               * @example
               * var multiPoly = turf.multiPolygon([
               *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
               *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
               * ]);
               *
               * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
               *   //=previousValue
               *   //=currentLine
               *   //=featureIndex
               *   //=multiFeatureIndex
               *   //=geometryIndex
               *   return currentLine
               * });
               */


              function lineReduce(geojson, callback, initialValue) {
                var previousValue = initialValue;
                lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
                  if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
                });
                return previousValue;
              }
              /**
               * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               * Point & MultiPoint will always return null.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.segmentIndex=0] Segment Index
               * @param {Object} [options.properties={}] Translate Properties to output LineString
               * @param {BBox} [options.bbox={}] Translate BBox to output LineString
               * @param {number|string} [options.id={}] Translate Id to output LineString
               * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findSegment(multiLine);
               * // => Feature<LineString<[[10, 10], [50, 30]]>>
               *
               * // First Segment of 2nd Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: 1});
               * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
               *
               * // Last Segment of Last Multi Feature
               * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
               * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
               */


              function findSegment(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find SegmentIndex


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                    if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
                    return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
                    return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
                }

                throw new Error('geojson is invalid');
              }
              /**
               * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
               *
               * Negative indexes are permitted.
               *
               * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.featureIndex=0] Feature Index
               * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
               * @param {number} [options.geometryIndex=0] Geometry Index
               * @param {number} [options.coordIndex=0] Coord Index
               * @param {Object} [options.properties={}] Translate Properties to output Point
               * @param {BBox} [options.bbox={}] Translate BBox to output Point
               * @param {number|string} [options.id={}] Translate Id to output Point
               * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
               * @example
               * var multiLine = turf.multiLineString([
               *     [[10, 10], [50, 30], [30, 40]],
               *     [[-10, -10], [-50, -30], [-30, -40]]
               * ]);
               *
               * // First Segment (defaults are 0)
               * turf.findPoint(multiLine);
               * // => Feature<Point<[10, 10]>>
               *
               * // First Segment of the 2nd Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: 1});
               * // => Feature<Point<[-10, -10]>>
               *
               * // Last Segment of last Multi-Feature
               * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
               * // => Feature<Point<[-30, -40]>>
               */


              function findPoint(geojson, options) {
                // Optional Parameters
                options = options || {};
                if (!helpers.isObject(options)) throw new Error('options is invalid');
                var featureIndex = options.featureIndex || 0;
                var multiFeatureIndex = options.multiFeatureIndex || 0;
                var geometryIndex = options.geometryIndex || 0;
                var coordIndex = options.coordIndex || 0; // Find FeatureIndex

                var properties = options.properties;
                var geometry;

                switch (geojson.type) {
                  case 'FeatureCollection':
                    if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
                    properties = properties || geojson.features[featureIndex].properties;
                    geometry = geojson.features[featureIndex].geometry;
                    break;

                  case 'Feature':
                    properties = properties || geojson.properties;
                    geometry = geojson.geometry;
                    break;

                  case 'Point':
                  case 'MultiPoint':
                    return null;

                  case 'LineString':
                  case 'Polygon':
                  case 'MultiLineString':
                  case 'MultiPolygon':
                    geometry = geojson;
                    break;

                  default:
                    throw new Error('geojson is invalid');
                } // Find Coord Index


                if (geometry === null) return null;
                var coords = geometry.coordinates;

                switch (geometry.type) {
                  case 'Point':
                    return helpers.point(coords, properties, options);

                  case 'MultiPoint':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    return helpers.point(coords[multiFeatureIndex], properties, options);

                  case 'LineString':
                    if (coordIndex < 0) coordIndex = coords.length + coordIndex;
                    return helpers.point(coords[coordIndex], properties, options);

                  case 'Polygon':
                    if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
                    return helpers.point(coords[geometryIndex][coordIndex], properties, options);

                  case 'MultiLineString':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
                    return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);

                  case 'MultiPolygon':
                    if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
                    if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
                    if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
                    return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
                }

                throw new Error('geojson is invalid');
              }

              exports.coordEach = coordEach;
              exports.coordReduce = coordReduce;
              exports.propEach = propEach;
              exports.propReduce = propReduce;
              exports.featureEach = featureEach;
              exports.featureReduce = featureReduce;
              exports.coordAll = coordAll;
              exports.geomEach = geomEach;
              exports.geomReduce = geomReduce;
              exports.flattenEach = flattenEach;
              exports.flattenReduce = flattenReduce;
              exports.segmentEach = segmentEach;
              exports.segmentReduce = segmentReduce;
              exports.lineEach = lineEach;
              exports.lineReduce = lineReduce;
              exports.findSegment = findSegment;
              exports.findPoint = findPoint;
            });
            unwrapExports(meta$4);
            var meta_1$3 = meta$4.coordEach;
            var meta_2$3 = meta$4.coordReduce;
            var meta_3$3 = meta$4.propEach;
            var meta_4$3 = meta$4.propReduce;
            var meta_5$3 = meta$4.featureEach;
            var meta_6$3 = meta$4.featureReduce;
            var meta_7$3 = meta$4.coordAll;
            var meta_8$3 = meta$4.geomEach;
            var meta_9$3 = meta$4.geomReduce;
            var meta_10$3 = meta$4.flattenEach;
            var meta_11$3 = meta$4.flattenReduce;
            var meta_12$3 = meta$4.segmentEach;
            var meta_13$3 = meta$4.segmentReduce;
            var meta_14$3 = meta$4.lineEach;
            var meta_15$3 = meta$4.lineReduce;
            var meta_16$3 = meta$4.findSegment;
            var meta_17$3 = meta$4.findPoint;

            var bbox_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
               *
               * @name bbox
               * @param {GeoJSON} geojson any GeoJSON object
               * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
               * @example
               * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
               * var bbox = turf.bbox(line);
               * var bboxPolygon = turf.bboxPolygon(bbox);
               *
               * //addToMap
               * var addToMap = [line, bboxPolygon]
               */

              function bbox(geojson) {
                var result = [Infinity, Infinity, -Infinity, -Infinity];
                meta$4.coordEach(geojson, function (coord) {
                  if (result[0] > coord[0]) {
                    result[0] = coord[0];
                  }

                  if (result[1] > coord[1]) {
                    result[1] = coord[1];
                  }

                  if (result[2] < coord[0]) {
                    result[2] = coord[0];
                  }

                  if (result[3] < coord[1]) {
                    result[3] = coord[1];
                  }
                });
                return result;
              }

              exports.default = bbox;
            });
            unwrapExports(bbox_1);

            var booleanPointOnLine_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Returns true if a point is on a line. Accepts a optional parameter to ignore the
               * start and end vertices of the linestring.
               *
               * @name booleanPointOnLine
               * @param {Coord} pt GeoJSON Point
               * @param {Feature<LineString>} line GeoJSON LineString
               * @param {Object} [options={}] Optional parameters
               * @param {boolean} [options.ignoreEndVertices=false] whether to ignore the start and end vertices.
               * @returns {boolean} true/false
               * @example
               * var pt = turf.point([0, 0]);
               * var line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);
               * var isPointOnLine = turf.booleanPointOnLine(pt, line);
               * //=true
               */

              function booleanPointOnLine(pt, line, options) {
                if (options === void 0) {
                  options = {};
                } // Normalize inputs


                var ptCoords = invariant.getCoord(pt);
                var lineCoords = invariant.getCoords(line); // Main

                for (var i = 0; i < lineCoords.length - 1; i++) {
                  var ignoreBoundary = false;

                  if (options.ignoreEndVertices) {
                    if (i === 0) {
                      ignoreBoundary = "start";
                    }

                    if (i === lineCoords.length - 2) {
                      ignoreBoundary = "end";
                    }

                    if (i === 0 && i + 1 === lineCoords.length - 1) {
                      ignoreBoundary = "both";
                    }
                  }

                  if (isPointOnLineSegment(lineCoords[i], lineCoords[i + 1], ptCoords, ignoreBoundary)) {
                    return true;
                  }
                }

                return false;
              } // See http://stackoverflow.com/a/4833823/1979085

              /**
               * @private
               * @param {Position} lineSegmentStart coord pair of start of line
               * @param {Position} lineSegmentEnd coord pair of end of line
               * @param {Position} pt coord pair of point to check
               * @param {boolean|string} excludeBoundary whether the point is allowed to fall on the line ends.
               * If true which end to ignore.
               * @returns {boolean} true/false
               */


              function isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt, excludeBoundary) {
                var x = pt[0];
                var y = pt[1];
                var x1 = lineSegmentStart[0];
                var y1 = lineSegmentStart[1];
                var x2 = lineSegmentEnd[0];
                var y2 = lineSegmentEnd[1];
                var dxc = pt[0] - x1;
                var dyc = pt[1] - y1;
                var dxl = x2 - x1;
                var dyl = y2 - y1;
                var cross = dxc * dyl - dyc * dxl;

                if (cross !== 0) {
                  return false;
                }

                if (!excludeBoundary) {
                  if (Math.abs(dxl) >= Math.abs(dyl)) {
                    return dxl > 0 ? x1 <= x && x <= x2 : x2 <= x && x <= x1;
                  }

                  return dyl > 0 ? y1 <= y && y <= y2 : y2 <= y && y <= y1;
                } else if (excludeBoundary === "start") {
                  if (Math.abs(dxl) >= Math.abs(dyl)) {
                    return dxl > 0 ? x1 < x && x <= x2 : x2 <= x && x < x1;
                  }

                  return dyl > 0 ? y1 < y && y <= y2 : y2 <= y && y < y1;
                } else if (excludeBoundary === "end") {
                  if (Math.abs(dxl) >= Math.abs(dyl)) {
                    return dxl > 0 ? x1 <= x && x < x2 : x2 < x && x <= x1;
                  }

                  return dyl > 0 ? y1 <= y && y < y2 : y2 < y && y <= y1;
                } else if (excludeBoundary === "both") {
                  if (Math.abs(dxl) >= Math.abs(dyl)) {
                    return dxl > 0 ? x1 < x && x < x2 : x2 < x && x < x1;
                  }

                  return dyl > 0 ? y1 < y && y < y2 : y2 < y && y < y1;
                }

                return false;
              }

              exports.default = booleanPointOnLine;
            });
            unwrapExports(booleanPointOnLine_1);

            var booleanPointInPolygon_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              }); // http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
              // modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
              // which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

              /**
               * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point
               * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.
               *
               * @name booleanPointInPolygon
               * @param {Coord} point input point
               * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon
               * @param {Object} [options={}] Optional parameters
               * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if
               * the point is inside the polygon otherwise false.
               * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
               * @example
               * var pt = turf.point([-77, 44]);
               * var poly = turf.polygon([[
               *   [-81, 41],
               *   [-81, 47],
               *   [-72, 47],
               *   [-72, 41],
               *   [-81, 41]
               * ]]);
               *
               * turf.booleanPointInPolygon(pt, poly);
               * //= true
               */

              function booleanPointInPolygon(point, polygon, options) {
                if (options === void 0) {
                  options = {};
                } // validation


                if (!point) {
                  throw new Error("point is required");
                }

                if (!polygon) {
                  throw new Error("polygon is required");
                }

                var pt = invariant.getCoord(point);
                var geom = invariant.getGeom(polygon);
                var type = geom.type;
                var bbox = polygon.bbox;
                var polys = geom.coordinates; // Quick elimination if point is not inside bbox

                if (bbox && inBBox(pt, bbox) === false) {
                  return false;
                } // normalize to multipolygon


                if (type === "Polygon") {
                  polys = [polys];
                }

                var insidePoly = false;

                for (var i = 0; i < polys.length && !insidePoly; i++) {
                  // check if it is in the outer ring first
                  if (inRing(pt, polys[i][0], options.ignoreBoundary)) {
                    var inHole = false;
                    var k = 1; // check for the point in any of the holes

                    while (k < polys[i].length && !inHole) {
                      if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {
                        inHole = true;
                      }

                      k++;
                    }

                    if (!inHole) {
                      insidePoly = true;
                    }
                  }
                }

                return insidePoly;
              }

              exports.default = booleanPointInPolygon;
              /**
               * inRing
               *
               * @private
               * @param {Array<number>} pt [x,y]
               * @param {Array<Array<number>>} ring [[x,y], [x,y],..]
               * @param {boolean} ignoreBoundary ignoreBoundary
               * @returns {boolean} inRing
               */

              function inRing(pt, ring, ignoreBoundary) {
                var isInside = false;

                if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) {
                  ring = ring.slice(0, ring.length - 1);
                }

                for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
                  var xi = ring[i][0];
                  var yi = ring[i][1];
                  var xj = ring[j][0];
                  var yj = ring[j][1];
                  var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 && (xi - pt[0]) * (xj - pt[0]) <= 0 && (yi - pt[1]) * (yj - pt[1]) <= 0;

                  if (onBoundary) {
                    return !ignoreBoundary;
                  }

                  var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;

                  if (intersect) {
                    isInside = !isInside;
                  }
                }

                return isInside;
              }
              /**
               * inBBox
               *
               * @private
               * @param {Position} pt point [x,y]
               * @param {BBox} bbox BBox [west, south, east, north]
               * @returns {boolean} true/false if point is inside BBox
               */


              function inBBox(pt, bbox) {
                return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
              }
            });
            unwrapExports(booleanPointInPolygon_1);

            var booleanWithin_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Boolean-within returns true if the first geometry is completely within the second geometry.
               * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)
               * must not intersect the exterior of the secondary (geometry b).
               * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.
               *
               * @name booleanWithin
               * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
               * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
               * @returns {boolean} true/false
               * @example
               * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
               * var point = turf.point([1, 2]);
               *
               * turf.booleanWithin(point, line);
               * //=true
               */

              function booleanWithin(feature1, feature2) {
                var type1 = invariant.getType(feature1);
                var type2 = invariant.getType(feature2);
                var geom1 = invariant.getGeom(feature1);
                var geom2 = invariant.getGeom(feature2);

                switch (type1) {
                  case 'Point':
                    switch (type2) {
                      case 'MultiPoint':
                        return isPointInMultiPoint(geom1, geom2);

                      case 'LineString':
                        return booleanPointOnLine_1.default(geom1, geom2, {
                          ignoreEndVertices: true
                        });

                      case 'Polygon':
                      case 'MultiPolygon':
                        return booleanPointInPolygon_1.default(geom1, geom2, {
                          ignoreBoundary: true
                        });

                      default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                    }

                  case 'MultiPoint':
                    switch (type2) {
                      case 'MultiPoint':
                        return isMultiPointInMultiPoint(geom1, geom2);

                      case 'LineString':
                        return isMultiPointOnLine(geom1, geom2);

                      case 'Polygon':
                      case 'MultiPolygon':
                        return isMultiPointInPoly(geom1, geom2);

                      default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                    }

                  case 'LineString':
                    switch (type2) {
                      case 'LineString':
                        return isLineOnLine(geom1, geom2);

                      case 'Polygon':
                      case 'MultiPolygon':
                        return isLineInPoly(geom1, geom2);

                      default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                    }

                  case 'Polygon':
                    switch (type2) {
                      case 'Polygon':
                      case 'MultiPolygon':
                        return isPolyInPoly(geom1, geom2);

                      default:
                        throw new Error('feature2 ' + type2 + ' geometry not supported');
                    }

                  default:
                    throw new Error('feature1 ' + type1 + ' geometry not supported');
                }
              }

              function isPointInMultiPoint(point, multiPoint) {
                var i;
                var output = false;

                for (i = 0; i < multiPoint.coordinates.length; i++) {
                  if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {
                    output = true;
                    break;
                  }
                }

                return output;
              }

              function isMultiPointInMultiPoint(multiPoint1, multiPoint2) {
                for (var i = 0; i < multiPoint1.coordinates.length; i++) {
                  var anyMatch = false;

                  for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {
                    if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {
                      anyMatch = true;
                    }
                  }

                  if (!anyMatch) {
                    return false;
                  }
                }

                return true;
              }

              function isMultiPointOnLine(multiPoint, lineString) {
                var foundInsidePoint = false;

                for (var i = 0; i < multiPoint.coordinates.length; i++) {
                  if (!booleanPointOnLine_1.default(multiPoint.coordinates[i], lineString)) {
                    return false;
                  }

                  if (!foundInsidePoint) {
                    foundInsidePoint = booleanPointOnLine_1.default(multiPoint.coordinates[i], lineString, {
                      ignoreEndVertices: true
                    });
                  }
                }

                return foundInsidePoint;
              }

              function isMultiPointInPoly(multiPoint, polygon) {
                var output = true;

                for (var i = 0; i < multiPoint.coordinates.length; i++) {
                  var isInside = booleanPointInPolygon_1.default(multiPoint.coordinates[1], polygon);

                  if (!isInside) {
                    output = false;
                    break;
                  }

                  {
                    isInside = booleanPointInPolygon_1.default(multiPoint.coordinates[1], polygon, {
                      ignoreBoundary: true
                    });
                  }
                }

                return output && isInside;
              }

              function isLineOnLine(lineString1, lineString2) {
                for (var i = 0; i < lineString1.coordinates.length; i++) {
                  if (!booleanPointOnLine_1.default(lineString1.coordinates[i], lineString2)) {
                    return false;
                  }
                }

                return true;
              }

              function isLineInPoly(linestring, polygon) {
                var polyBbox = bbox_1.default(polygon);
                var lineBbox = bbox_1.default(linestring);

                if (!doBBoxOverlap(polyBbox, lineBbox)) {
                  return false;
                }

                var foundInsidePoint = false;

                for (var i = 0; i < linestring.coordinates.length - 1; i++) {
                  if (!booleanPointInPolygon_1.default(linestring.coordinates[i], polygon)) {
                    return false;
                  }

                  if (!foundInsidePoint) {
                    foundInsidePoint = booleanPointInPolygon_1.default(linestring.coordinates[i], polygon, {
                      ignoreBoundary: true
                    });
                  }

                  if (!foundInsidePoint) {
                    var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);
                    foundInsidePoint = booleanPointInPolygon_1.default(midpoint, polygon, {
                      ignoreBoundary: true
                    });
                  }
                }

                return foundInsidePoint;
              }
              /**
               * Is Polygon2 in Polygon1
               * Only takes into account outer rings
               *
               * @private
               * @param {Geometry|Feature<Polygon>} feature1 Polygon1
               * @param {Geometry|Feature<Polygon>} feature2 Polygon2
               * @returns {boolean} true/false
               */


              function isPolyInPoly(feature1, feature2) {
                var poly1Bbox = bbox_1.default(feature1);
                var poly2Bbox = bbox_1.default(feature2);

                if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {
                  return false;
                }

                for (var i = 0; i < feature1.coordinates[0].length; i++) {
                  if (!booleanPointInPolygon_1.default(feature1.coordinates[0][i], feature2)) {
                    return false;
                  }
                }

                return true;
              }

              function doBBoxOverlap(bbox1, bbox2) {
                if (bbox1[0] > bbox2[0]) return false;
                if (bbox1[2] < bbox2[2]) return false;
                if (bbox1[1] > bbox2[1]) return false;
                if (bbox1[3] < bbox2[3]) return false;
                return true;
              }
              /**
               * compareCoords
               *
               * @private
               * @param {Position} pair1 point [x,y]
               * @param {Position} pair2 point [x,y]
               * @returns {boolean} true/false if coord pairs match
               */


              function compareCoords(pair1, pair2) {
                return pair1[0] === pair2[0] && pair1[1] === pair2[1];
              }
              /**
               * getMidpoint
               *
               * @private
               * @param {Position} pair1 point [x,y]
               * @param {Position} pair2 point [x,y]
               * @returns {Position} midpoint of pair1 and pair2
               */


              function getMidpoint(pair1, pair2) {
                return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
              }

              exports.default = booleanWithin;
            });
            var BooleanWithin = unwrapExports(booleanWithin_1);

            /**
             * featureDao module.
             * @module features/user/featureDao
             */
            /**
             * Feature DAO for reading feature user data tables
             * @class FeatureDao
             * @extends {module:user/userDao~UserDao}
             * @param  {sqlite3} db              database connection
             * @param  {FeatureTable} table           feature table
             * @param  {GeometryColumns} geometryColumns geometry columns
             * @param  {MetadataDb} metadataDb      metadata db
             */

            class FeatureDao extends UserDao {
              constructor(geoPackage, table, geometryColumns, metadataDb) {
                super(geoPackage, table);
                this.geometryColumns = geometryColumns;
                this.metadataDb = metadataDb;
                this.dataColumnsDao = new DataColumnsDao(geoPackage);
                this.featureTableIndex = new FeatureTableIndex(geoPackage, this);
                var dao = geoPackage.getGeometryColumnsDao();

                if (!dao.getContents(geometryColumns)) {
                  throw new Error('Geometry Columns ' + dao.getId(geometryColumns) + ' has null Contents');
                }

                if (!dao.getSrs(geometryColumns)) {
                  throw new Error('Geometry Columns ' + dao.getId(geometryColumns) + ' has null Spatial Reference System');
                }

                this.projection = dao.getProjection(geometryColumns);
              }

              createObject(results) {
                if (results) {
                  return this.getRow(results);
                }

                return this.newRow();
              }

              getContents() {
                var dao = this.geoPackage.getGeometryColumnsDao();
                return dao.getContents(this.geometryColumns);
              }
              /**
               * Get the feature table
               * @return {FeatureTable} the feature table
               */


              getFeatureTable() {
                return this.table;
              }
              /**
               * Create a new feature row with the column types and values
               * @param  {Array} columnTypes column types
               * @param  {Array} values      values
               * @return {FeatureRow}             feature row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new FeatureRow(this.getFeatureTable(), columnTypes, values);
              }
              /**
               * Create a new feature row
               * @return {FeatureRow} feature row
               */


              newRow() {
                return new FeatureRow(this.getFeatureTable());
              }
              /**
               * Get the geometry column name
               * @return {string} the geometry column name
               */


              getGeometryColumnName() {
                return this.geometryColumns.column_name;
              }
              /**
               * Get the geometry types
               * @return {WKBGeometryType} well known binary geometry type
               */


              getGeometryType() {
                return this.geometryColumns.getGeometryType();
              }

              getSrs() {
                return this.geoPackage.getGeometryColumnsDao().getSrs(this.geometryColumns);
              }
              /**
               * Determine if the feature table is indexed
               * @param  {Function} callback called with err if one occurred and true or false indicating the indexed status
               */


              isIndexed() {
                return this.featureTableIndex.isIndexed();
              }

              fastQueryWebMercatorBoundingBox(boundingBox, featureRowCallback) {
                var srs = this.getSrs();
                var iterator = this.featureTableIndex.queryWithBoundingBox(boundingBox, 'EPSG:3857');
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var featureRow = thisgetRow(nextRow.value);
                      return {
                        value: featureRow,
                        done: false
                      };
                    } else {
                      return {
                        done: true
                      };
                    }
                  }
                };
              }

              queryIndexedFeaturesWithWebMercatorBoundingBox(boundingBox) {
                var srs = this.getSrs();
                var projection = this.projection;
                var iterator = this.featureTableIndex.queryWithBoundingBox(boundingBox, 'EPSG:3857');
                var thisgetRow = this.getRow.bind(this);
                var projectedBoundingBox = boundingBox.projectBoundingBox('EPSG:3857', 'EPSG:4326');
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var featureRow;
                      var geometry;

                      while (!nextRow.done && !geometry) {
                        featureRow = thisgetRow(nextRow.value);
                        geometry = reprojectFeature(featureRow, srs, projection);
                        geometry = verifyFeature(geometry, projectedBoundingBox);

                        if (geometry) {
                          geometry.properties = featureRow.values;
                          return {
                            value: featureRow,
                            done: false
                          };
                        } else {
                          nextRow = iterator.next();
                        }
                      }
                    }

                    return {
                      done: true
                    };
                  }
                };
              }
              /**
               * Calls geoJSONFeatureCallback with the geoJSON of each matched feature (always in 4326 projection)
               * @param  {BoundingBox} boundingBox        4326 bounding box to query
               * @param  {function} geoJSONFeatureCallback called with err, geoJSON, doneCallback
               * @param  {function} doneCallback       called when all rows have been returned
               */


              queryForGeoJSONIndexedFeaturesWithBoundingBox(boundingBox, skipVerification) {
                var columns = [];
                var columnMap = {};
                var srs = this.getSrs();
                var projection = this.projection;
                this.table.columns.forEach(function (column) {
                  var dataColumn = this.dataColumnsDao.getDataColumns(this.table.table_name, column.name);
                  columns.push({
                    index: column.index,
                    name: column.name,
                    max: column.max,
                    min: column.min,
                    notNull: column.notNull,
                    primaryKey: column.primaryKey,
                    dataType: column.dataType ? types.name(column.dataType) : '',
                    displayName: dataColumn && dataColumn.name ? dataColumn.name : column.name,
                    dataColumn: dataColumn
                  });
                  columnMap[column.name] = columns[columns.length - 1];
                }.bind(this));
                var iterator = this.featureTableIndex.queryWithBoundingBox(boundingBox, 'EPSG:4326')[Symbol.iterator]();
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var featureRow;
                      var geometry;

                      while (!nextRow.done && !geometry) {
                        featureRow = thisgetRow(nextRow.value);
                        geometry = reprojectFeature(featureRow, srs, projection);

                        if (!skipVerification) {
                          geometry = verifyFeature(geometry, boundingBox);
                        }

                        if (geometry) {
                          var geoJson = {
                            properties: {},
                            geometry: geometry
                          };

                          for (var key in featureRow.values) {
                            if (featureRow.values.hasOwnProperty(key) && key != featureRow.getGeometryColumn().name && key != 'id') {
                              if (key.toLowerCase() == '_feature_id') {
                                geoJson.id = featureRow.values[key];
                              } else if (key.toLowerCase() == '_properties_id') {
                                geoJson.properties[key.substring(12)] = featureRow.values[key];
                              } else {
                                geoJson.properties[columnMap[key].displayName] = featureRow.values[key];
                              }
                            }
                          }

                          geoJson.id = geoJson.id || featureRow.getId();
                          return {
                            value: geoJson,
                            done: false
                          };
                        } else {
                          nextRow = iterator.next();
                        }
                      }
                    }

                    return {
                      done: true
                    };
                  }.bind(this)
                };
              }

              queryIndexedFeaturesWithBoundingBox(boundingBox) {
                var srs = this.getSrs();
                var projection = this.projection;
                var iterator = this.featureTableIndex.queryWithBoundingBox(boundingBox, 'EPSG:4326');
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var featureRow;
                      var geometry;

                      while (!nextRow.done && !geometry) {
                        featureRow = thisgetRow(nextRow.value);
                        geometry = reprojectFeature(featureRow, srs, projection);
                        geometry = verifyFeature(geometry, boundingBox);

                        if (geometry) {
                          geometry.properties = featureRow.values;
                          return {
                            value: featureRow,
                            done: false
                          };
                        } else {
                          nextRow = iterator.next();
                        }
                      }
                    }

                    return {
                      done: true
                    };
                  }.bind(this)
                };
              }

              getBoundingBox() {
                var contents = this.getContents();
                return new BoundingBox(contents.min_x, contents.max_x, contents.min_y, contents.max_y);
              }

            }

            function reprojectFeature(featureRow, srs, projection) {
              var geometry = featureRow.getGeometry().toGeoJSON();

              if (srs.organization + ':' + srs.organization_coordsys_id != 'EPSG:4326') {
                geometry = reproject_1.reproject(geometry, projection, 'EPSG:4326');
              }

              return geometry;
            }

            function verifyFeature(geometry, boundingBox) {
              try {
                if (geometry.type == 'Point') {
                  return geometry;
                } else if (geometry.type == 'LineString') {
                  var intersect = LineIntersect(geometry, boundingBox.toGeoJSON().geometry);

                  if (intersect.features.length) {
                    return geometry;
                  } else if (BooleanWithin(geometry, boundingBox.toGeoJSON().geometry)) {
                    return geometry;
                  }
                } else if (geometry.type == 'MultiLineString') {
                  for (var i = 0; i < geometry.coordinates.length; i++) {
                    var intersect = LineIntersect({
                      type: 'LineString',
                      coordinates: geometry.coordinates[i]
                    }, boundingBox.toGeoJSON().geometry);

                    if (intersect.features.length) {
                      return geometry;
                    } else if (BooleanWithin({
                      type: 'LineString',
                      coordinates: geometry.coordinates[i]
                    }, boundingBox.toGeoJSON().geometry)) {
                      return geometry;
                    }
                  }
                } else if (geometry.type == 'Polygon') {
                  var polyIntersect = Intersect(geometry, boundingBox.toGeoJSON().geometry);

                  if (polyIntersect) {
                    return geometry;
                  } else if (BooleanWithin(geometry, boundingBox.toGeoJSON().geometry)) {
                    return geometry;
                  }
                } else if (geometry.type == 'MultiPolygon') {
                  var polyIntersect = Intersect({
                    type: 'Polygon',
                    coordinates: geometry.coordinates[i]
                  }, boundingBox.toGeoJSON().geometry);

                  if (polyIntersect) {
                    return geometry;
                  } else if (BooleanWithin({
                    type: 'Polygon',
                    coordinates: geometry.coordinates[i]
                  }, boundingBox.toGeoJSON().geometry)) {
                    return geometry;
                  }
                }
              } catch (e) {}
            }

            /**
             * @module features/user/featureTable
             */
            /**
             * `FeatureTable` models [feature user data tables](http://www.geopackage.org/spec/#feature_user_tables),
             *  which contain vector [geometry data]{@link module:features/columns~GeometryColumns}.
             *
             * @class
             * @extends {module:user/userTable~UserTable}
             * @param {string} tableName table name
             * @param {module:features/user/featureColumn~FeatureColumn[]} columns feature columns
             */

            const FeatureTable = function (tableName, columns) {
              UserTable.call(this, tableName, columns);
              var geometry = undefined;

              for (var i = 0; i < columns.length; i++) {
                var column = columns[i];

                if (column.isGeometry()) {
                  this.duplicateCheck(column.index, geometry,
                  /* WKB_GEOMETRY_NAME */
                  'GEOMETRY');
                  geometry = column.index;
                }
              }

              this.missingCheck(geometry,
              /* WKB_GEOMETRY_NAME */
              'GEOMETRY');
              this.geometryIndex = geometry;
            };

            util.inherits(FeatureTable, UserTable);
            /**
             * Get the geometry feature column of this feature table.  This column
             * corresponds to a row in the [geometry columns]{@link module:features/columns~GeometryColumns}
             * table.
             *
             * @returns {module:features/user/featureColumn~FeatureColumn}
             */

            FeatureTable.prototype.getGeometryColumn = function () {
              return this.getColumnWithIndex(this.geometryIndex);
            };

            FeatureTable.prototype.getTableType = function () {
              return UserTable.FEATURE_TABLE;
            };

            /**
             * WKB module.
             * @module wkb
             */
            var wktToEnum = {};
            wktToEnum[wkt.Point] = wkb.Point;
            wktToEnum[wkt.LineString] = wkb.LineString;
            wktToEnum[wkt.Polygon] = wkb.Polygon;
            wktToEnum[wkt.MultiPoint] = wkb.MultiPoint;
            wktToEnum[wkt.MultiLineString] = wkb.MultiLineString;
            wktToEnum[wkt.MultiPolygon] = wkb.MultiPolygon;
            wktToEnum[wkt.GeometryCollection] = wkb.GeometryCollection;
            var wkb$1 = {};
            /**
             * number from name
             * @param  {string} name name
             * @return {Number}      number corresponding to the wkb name
             */

            wkb$1.fromName = function (name) {
              name = name.toUpperCase();

              if (name === 'GEOMETRY') {
                return wkb.GeometryCollection;
              }

              return wktToEnum[name];
            };

            /**
             * featureTableReader module.
             * @module features/user/featureTableReader
             */
            /**
            * Reads the metadata from an existing feature table
            * @class FeatureTableReader
            * @extends {module:user~UserTableReader}
            */

            var FeatureTableReader = function (tableNameOrGeometryColumns) {
              if (util.isString(tableNameOrGeometryColumns)) {
                UserTableReader.call(this, tableNameOrGeometryColumns);
              } else {
                UserTableReader.call(this, tableNameOrGeometryColumns.table_name);
                this.geometryColumns = tableNameOrGeometryColumns;
              }
            };

            util.inherits(FeatureTableReader, UserTableReader);

            FeatureTableReader.prototype.readFeatureTable = function (geoPackage) {
              if (!this.geometryColumns) {
                var gcd = new GeometryColumnsDao(geoPackage);
                this.geometryColumns = gcd.queryForTableName(this.table_name);
                return this.readTable(geoPackage.getDatabase());
              } else {
                return this.readTable(geoPackage.getDatabase());
              }
            };

            FeatureTableReader.prototype.createTable = function (tableName, columns) {
              return new FeatureTable(tableName, columns);
            };

            FeatureTableReader.prototype.createColumnWithResults = function (results, index, name, type, max, notNull, defaultValue, primaryKey) {
              var geometry = name === this.geometryColumns.column_name;
              var geometryType = undefined;
              var dataType = undefined;

              if (geometry) {
                geometryType = wkb$1.fromName(type);
              } else {
                dataType = types.fromName(type);
              }

              var column = new FeatureColumn(index, name, dataType, max, notNull, defaultValue, primaryKey, geometryType);
              return column;
            };

            /**
             * @module tiles/user/tileColumn
             */
            /**
             * `TileColumn` models columns in [user tile pyramid tables]{@link module:tiles/user/tileTable~TileTable}.
             *
             * @class
             * @extends {module:user/userColumn~UserColumn}
             */

            var TileColumn = function (index, name, dataType, max, notNull, defaultValue, primaryKey) {
              UserColumn.call(this, index, name, dataType, max, notNull, defaultValue, primaryKey);

              if (dataType === types.GPKG_DT_GEOMETRY) {
                throw new Error('Data Type is required to create column: ' + name);
              }
            };

            util.inherits(TileColumn, UserColumn);
            /**
             * Create an id column
             * @param  {number} index Index
             */

            TileColumn.createIdColumn = function (index) {
              return new TileColumn(index, TileColumn.COLUMN_ID, types.GPKGDataType.GPKG_DT_INTEGER, null, false, null, true);
            };
            /**
             * Create a zoom level column
             * @param  {number} index Index
             */


            TileColumn.createZoomLevelColumn = function (index) {
              return new TileColumn(index, TileColumn.COLUMN_ZOOM_LEVEL, types.GPKGDataType.GPKG_DT_INTEGER, null, true, null, false);
            };
            /**
             *  Create a tile column column
             *
             *  @param {number} index column index
             */


            TileColumn.createTileColumnColumn = function (index) {
              return new TileColumn(index, TileColumn.COLUMN_TILE_COLUMN, types.GPKGDataType.GPKG_DT_INTEGER, null, true, null, false);
            };
            /**
             *  Create a tile row column
             *
             *  @param {number} index column index
             *
             */


            TileColumn.createTileRowColumn = function (index) {
              return new TileColumn(index, TileColumn.COLUMN_TILE_ROW, types.GPKGDataType.GPKG_DT_INTEGER, null, true, null, false);
            };
            /**
             *  Create a tile data column
             *
             *  @param {number} index column index
             */


            TileColumn.createTileDataColumn = function (index) {
              return new TileColumn(index, TileColumn.COLUMN_TILE_DATA, types.GPKGDataType.GPKG_DT_BLOB, null, true, null, false);
            };

            TileColumn.COLUMN_ID = "id";
            TileColumn.COLUMN_ZOOM_LEVEL = "zoom_level";
            TileColumn.COLUMN_TILE_COLUMN = "tile_column";
            TileColumn.COLUMN_TILE_ROW = "tile_row";
            TileColumn.COLUMN_TILE_DATA = "tile_data";

            /**
             * @module tiles/user/tileTable
             */
            /**
             * `TileTable` models [tile pyramid user tables](https://www.geopackage.org/spec121/index.html#tiles_user_tables).
             *
             * @class
             * @extends {module:user/userTable~UserTable}
             * @param {string} tableName
             * @param {module:tiles/user/tileColumn~TileColumn[]} columns
             */

            var TileTable = function (tableName, columns) {
              UserTable.call(this, tableName, columns);
              var zoomLevel;
              var tileColumn;
              var tileRow;
              var tileData;
              var uniqueColumns = [];

              for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                var columnName = column.name;
                var columnIndex = column.index;

                switch (columnName) {
                  case TileColumn.COLUMN_ZOOM_LEVEL:
                    this.duplicateCheck(columnIndex, zoomLevel, TileColumn.COLUMN_ZOOM_LEVEL);
                    zoomLevel = columnIndex;
                    uniqueColumns.push(column);
                    break;

                  case TileColumn.COLUMN_TILE_COLUMN:
                    this.duplicateCheck(columnIndex, tileColumn, TileColumn.COLUMN_TILE_COLUMN);
                    tileColumn = columnIndex;
                    uniqueColumns.push(column);
                    break;

                  case TileColumn.COLUMN_TILE_ROW:
                    this.duplicateCheck(columnIndex, tileRow, TileColumn.COLUMN_TILE_ROW);
                    tileRow = columnIndex;
                    uniqueColumns.push(column);
                    break;

                  case TileColumn.COLUMN_TILE_DATA:
                    this.duplicateCheck(columnIndex, tileData, TileColumn.COLUMN_TILE_DATA);
                    tileData = columnIndex;
                    break;
                }
              }

              this.uniqueConstraints = [{
                columns: uniqueColumns
              }];
              this.missingCheck(zoomLevel, TileColumn.COLUMN_ZOOM_LEVEL);
              this.zoomLevelIndex = zoomLevel;
              this.missingCheck(tileColumn, TileColumn.COLUMN_TILE_COLUMN);
              this.tileColumnIndex = tileColumn;
              this.missingCheck(tileRow, TileColumn.COLUMN_TILE_ROW);
              this.tileRowIndex = tileRow;
              this.missingCheck(tileData, TileColumn.COLUMN_TILE_DATA);
              this.tileDataIndex = tileData;
            };

            util.inherits(TileTable, UserTable);

            TileTable.prototype.getZoomLevelColumn = function () {
              return this.getColumnWithIndex(this.zoomLevelIndex);
            };

            TileTable.prototype.getTileColumnColumn = function () {
              return this.getColumnWithIndex(this.tileColumnIndex);
            };

            TileTable.prototype.getRowColumn = function () {
              return this.getColumnWithIndex(this.tileRowIndex);
            };

            TileTable.prototype.getTileDataColumn = function () {
              return this.getColumnWithIndex(this.tileDataIndex);
            };

            TileTable.prototype.getTableType = function () {
              return UserTable.TILE_TABLE;
            };

            TileTable.createRequiredColumns = function () {
              return TileTable.createRequiredColumnsWithStartingIndex(0);
            };

            TileTable.createRequiredColumnsWithStartingIndex = function (startingIndex) {
              var columns = [];
              columns.push(TileColumn.createIdColumn(startingIndex++));
              columns.push(TileColumn.createZoomLevelColumn(startingIndex++));
              columns.push(TileColumn.createTileColumnColumn(startingIndex++));
              columns.push(TileColumn.createTileRowColumn(startingIndex++));
              columns.push(TileColumn.createTileDataColumn(startingIndex++));
              return columns;
            };

            /**
             * tileTableReader module.
             * @module tiles/user/tileTableReader
             */
            /**
            * Reads the metadata from an existing tile table
            * @class TileTableReader
            * @extends {module:user~UserTableReader}
            */

            var TileTableReader = function (tileMatrixSet) {
              UserTableReader.call(this, tileMatrixSet.table_name);
              this.tileMatrixSet = tileMatrixSet;
            };

            util.inherits(TileTableReader, UserTableReader);

            TileTableReader.prototype.readTileTable = function (geoPackage) {
              return this.readTable(geoPackage.getDatabase());
            };

            TileTableReader.prototype.createTable = function (tableName, columns) {
              return new TileTable(tableName, columns);
            };

            TileTableReader.prototype.createColumnWithResults = function (results, index, name, type, max, notNull, defaultValueIndex, primaryKey) {
              var dataType = types.fromName(type);
              var defaultValue = undefined;

              var column = new TileColumn(index, name, dataType, max, notNull, defaultValue, primaryKey);
              return column;
            };

            /**
             * Tile grid with x and y ranges
             * @module tiles/tileGrid
             * @class
             */
            var TileGrid = function (minX, maxX, minY, maxY) {
              this.min_x = minX;
              this.max_x = maxX;
              this.min_y = minY;
              this.max_y = maxY;
            };

            TileGrid.prototype.count = function () {
              return (this.max_x + 1 - this.min_x) * (this.max_y + 1 - this.min_y);
            };

            TileGrid.prototype.equals = function (tileGrid) {
              if (!tileGrid) return false;
              return this.min_x === tileGrid.min_x && this.max_x === tileGrid.max_x && this.min_y === tileGrid.min_y && this.max_y === tileGrid.max_y;
            };

            /**
             * tileRow module.
             * @module tiles/user/tileRow
             */
            /**
             * Tile Row containing the values from a single result set row
             * @param  {TileTable} tileTable tile table
             * @param  {Array} columnTypes  column types
             * @param  {Array} values       values
             */

            var TileRow = function (tileTable, columnTypes, values) {
              UserRow.call(this, tileTable, columnTypes, values);
              this.tileTable = tileTable;
            };

            util.inherits(TileRow, UserRow);

            TileRow.prototype.toObjectValue = function (value) {
              return value;
            };

            TileRow.prototype.toDatabaseValue = function (columnName) {
              return this.getValueWithColumnName(columnName);
            };
            /**
             * Get the zoom level column index
             * @return {Number} zoom level column index
             */


            TileRow.prototype.getZoomLevelColumnIndex = function () {
              return this.tileTable.zoomLevelIndex;
            };
            /**
             * Get the zoom level column
             * @return {TileColumn} zoom level column
             */


            TileRow.prototype.getZoomLevelColumn = function () {
              return this.tileTable.getZoomLevelColumn();
            };
            /**
             * Get the zoom level
             * @return {Number} zoom level
             */


            TileRow.prototype.getZoomLevel = function () {
              return this.getValueWithColumnName(this.getZoomLevelColumn().name);
            };
            /**
             * Set the zoom level
             * @param {Number} zoomLevel zoom level
             */


            TileRow.prototype.setZoomLevel = function (zoomLevel) {
              this.setValueWithIndex(this.getZoomLevelColumnIndex(), zoomLevel);
            };
            /**
             * Get the tile column column Index
             * @return {number} tile column column index
             */


            TileRow.prototype.getTileColumnColumnIndex = function () {
              return this.tileTable.tileColumnIndex;
            };
            /**
             * Get the tile column column
             * @return {TileColumn} tile column column
             */


            TileRow.prototype.getTileColumnColumn = function () {
              return this.tileTable.getTileColumnColumn();
            };
            /**
             * Get the tile column
             * @return {Number} tile column
             */


            TileRow.prototype.getTileColumn = function () {
              return this.getValueWithColumnName(this.getTileColumnColumn().name);
            };
            /**
             * Set the tile column
             * @param {number} tileColumn tile column
             */


            TileRow.prototype.setTileColumn = function (tileColumn) {
              this.setValueWithColumnName(this.getTileColumnColumn().name, tileColumn);
            };
            /**
             * Get the tile row column index
             * @return {Number} tile row column index
             */


            TileRow.prototype.getRowColumnIndex = function () {
              return this.tileTable.tileRowIndex;
            };
            /**
             * Get the tile row column
             * @return {TileColumn} tile row column
             */


            TileRow.prototype.getRowColumn = function () {
              return this.tileTable.getRowColumn();
            };
            /**
             * Get the tile row
             * @return {Number} tile row
             */


            TileRow.prototype.getRow = function () {
              return this.getValueWithColumnName(this.getRowColumn().name);
            };
            /**
             * Set the tile row
             * @param {Number} tileRow tile row
             */


            TileRow.prototype.setTileRow = function (tileRow) {
              this.setValueWithColumnName(this.getRowColumn().name, tileRow);
            };
            /**
             * Get the tile data column index
             * @return {Number} tile data column index
             */


            TileRow.prototype.getTileDataColumnIndex = function () {
              return this.tileTable.tileDataIndex;
            };
            /**
             * Get the tile data column
             * @return {TileColumn} tile data column
             */


            TileRow.prototype.getTileDataColumn = function () {
              return this.tileTable.getTileDataColumn();
            };
            /**
             * Get the tile data
             * @return {Buffer} tile data
             */


            TileRow.prototype.getTileData = function () {
              return this.getValueWithColumnName(this.getTileDataColumn().name);
            };
            /**
             * Set the tile data
             * @param {Buffer} tileData tile data
             */


            TileRow.prototype.setTileData = function (tileData) {
              this.setValueWithColumnName(this.getTileDataColumn().name, tileData);
            };
            /**
             * Get the tile data as an image
             * @return {image} tile image
             */


            TileRow.prototype.getTileDataImage = function () {// TODO
            }; // /**

            /**
             * This module exports utility functions for [slippy map (XYZ)](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames)
             * tile calculations.
             *
             * @module tiles/tileBoundingBoxUtils
             */
            var WEB_MERCATOR_HALF_WORLD_WIDTH = proj4$2('EPSG:4326', 'EPSG:3857').forward([180, 0])[0];
            var TileBoundingBoxUtils = {};
            /**
             * Calculate the bounds in tile coordinates that covers the given bounding box
             * at the given zoom level.  The result object contains the keys `minX`, `maxX`,
             * `minY`, and `maxY`, which are tile column and row values in the XYZ tile
             * scheme.
             *
             * @param {BoundingBox} webMercatorBoundingBox bounds in EPSG:3857 coordinates (meters)
             * @param {number} zoom the integral zoom level
             * @returns {{minX: number, maxX: number, minY: number, maxY: number}} bounds in tile column and row coordinates
             */

            TileBoundingBoxUtils.webMercatorTileBox = function (webMercatorBoundingBox, zoom) {
              var tilesPerSide = TileBoundingBoxUtils.tilesPerSideWithZoom(zoom);
              var tileSize = TileBoundingBoxUtils.tileSizeWithTilesPerSide(tilesPerSide);
              const minLonClip = Math.max(-WEB_MERCATOR_HALF_WORLD_WIDTH, webMercatorBoundingBox.minLongitude);
              const maxLonClip = Math.min(WEB_MERCATOR_HALF_WORLD_WIDTH, webMercatorBoundingBox.maxLongitude);
              const minLatClip = Math.max(-WEB_MERCATOR_HALF_WORLD_WIDTH, webMercatorBoundingBox.minLatitude);
              const maxLatClip = Math.min(WEB_MERCATOR_HALF_WORLD_WIDTH, webMercatorBoundingBox.maxLatitude);
              var minX = Math.floor((minLonClip + WEB_MERCATOR_HALF_WORLD_WIDTH) / tileSize);
              var maxX = Math.max(0, Math.ceil((maxLonClip + WEB_MERCATOR_HALF_WORLD_WIDTH) / tileSize) - 1);
              var minY = Math.floor((WEB_MERCATOR_HALF_WORLD_WIDTH - maxLatClip) / tileSize);
              var maxY = Math.max(0, Math.ceil((WEB_MERCATOR_HALF_WORLD_WIDTH - minLatClip) / tileSize) - 1);
              return {
                minX: minX,
                maxX: maxX,
                minY: minY,
                maxY: maxY
              };
            };

            TileBoundingBoxUtils.determinePositionAndScale = function (geoPackageTileBoundingBox, tileHeight, tileWidth, totalBoundingBox, totalHeight, totalWidth) {
              var p = {};
              var finalTileWidth = totalBoundingBox.maxLongitude - totalBoundingBox.minLongitude;
              var xoffsetMin = geoPackageTileBoundingBox.minLongitude - totalBoundingBox.minLongitude;
              var xpercentageMin = xoffsetMin / finalTileWidth;
              var finalTileHeight = totalBoundingBox.maxLatitude - totalBoundingBox.minLatitude;
              var yoffsetMax = totalBoundingBox.maxLatitude - geoPackageTileBoundingBox.maxLatitude;
              var ypercentageMax = yoffsetMax / finalTileHeight;
              var gpTileWidth = geoPackageTileBoundingBox.maxLongitude - geoPackageTileBoundingBox.minLongitude;
              var finalTilePixelsPerUnitWidth = totalWidth / finalTileWidth;
              var xPositionInFinalTileUnits = (geoPackageTileBoundingBox.minLongitude - totalBoundingBox.minLongitude) * finalTilePixelsPerUnitWidth;
              var widthInFinalTileUnits = (geoPackageTileBoundingBox.maxLongitude - geoPackageTileBoundingBox.minLongitude) * finalTilePixelsPerUnitWidth;
              var gpTileHeight = geoPackageTileBoundingBox.maxLatitude - geoPackageTileBoundingBox.minLatitude;
              var finalTilePixelsPerUnitHeight = totalHeight / finalTileHeight;
              var yPositionInFinalTileUnits = (totalBoundingBox.maxLatitude - geoPackageTileBoundingBox.maxLatitude) * finalTilePixelsPerUnitHeight;
              var heightInFinalTileUnits = (geoPackageTileBoundingBox.maxLatitude - geoPackageTileBoundingBox.minLatitude) * finalTilePixelsPerUnitHeight;
              p.yPositionInFinalTileStart = Math.round(ypercentageMax * totalHeight);
              p.xPositionInFinalTileStart = Math.round(xpercentageMin * totalWidth);
              p.dx = p.xPositionInFinalTileStart;
              p.dy = p.yPositionInFinalTileStart;
              p.sx = 0;
              p.sy = 0;
              p.dWidth = widthInFinalTileUnits;
              p.dHeight = heightInFinalTileUnits;
              p.sWidth = tileWidth;
              p.sHeight = tileHeight;
              return p;
            };
            /**
             * Calculate the bounds in EPSG:3857 coordinates of the tile at the given XYZ
             * coordinates coordinates and zoom level.
             *
             *  @param {number} x tile column
             *  @param {number} y tile row
             *  @param {number} zoom zoom level
             *  @return {BoundingBox} a bounding box in EPSG:3857 meters
             */


            TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ = function (x, y, zoom, options) {
              var tilesPerSide = TileBoundingBoxUtils.tilesPerSideWithZoom(zoom);
              var tileSize = TileBoundingBoxUtils.tileSizeWithTilesPerSide(tilesPerSide);
              var meterBuffer = 0;

              if (options && options.buffer && options.tileSize) {
                var pixelBuffer = options.buffer;
                var metersPerPixel = tileSize / options.tileSize;
                meterBuffer = metersPerPixel * pixelBuffer;
              }

              var minLon = -1 * WEB_MERCATOR_HALF_WORLD_WIDTH + x * tileSize - meterBuffer;
              var maxLon = -1 * WEB_MERCATOR_HALF_WORLD_WIDTH + (x + 1) * tileSize + meterBuffer;
              var minLat = WEB_MERCATOR_HALF_WORLD_WIDTH - (y + 1) * tileSize - meterBuffer;
              var maxLat = WEB_MERCATOR_HALF_WORLD_WIDTH - y * tileSize + meterBuffer;
              minLon = Math.max(-1 * WEB_MERCATOR_HALF_WORLD_WIDTH, minLon);
              maxLon = Math.min(WEB_MERCATOR_HALF_WORLD_WIDTH, maxLon);
              minLat = Math.max(-1 * WEB_MERCATOR_HALF_WORLD_WIDTH, minLat);
              maxLat = Math.min(WEB_MERCATOR_HALF_WORLD_WIDTH, maxLat);
              var box = new BoundingBox(minLon, maxLon, minLat, maxLat);
              return box;
            };
            /**
             *  Get the tile size in meters
             *
             *  @param tilesPerSide tiles per side
             *
             *  @return meters
             */


            TileBoundingBoxUtils.tileSizeWithTilesPerSide = function (tilesPerSide) {
              return 2 * WEB_MERCATOR_HALF_WORLD_WIDTH / tilesPerSide;
            };
            /**
             *  Get the tiles per side, width and height, at the zoom level
             *
             *  @param zoom zoom level
             *
             *  @return tiles per side
             */


            TileBoundingBoxUtils.tilesPerSideWithZoom = function (zoom) {
              return 1 << zoom;
            };
            /**
             *  Get the tile grid
             *
             *  @param webMercatorTotalBox    web mercator total bounding box
             *  @param matrixWidth            matrix width
             *  @param matrixHeight           matrix height
             *  @param boundingBox            bounding box
             *
             *  @return tile grid
             */


            TileBoundingBoxUtils.getTileGridWithTotalBoundingBox = function (totalBoundingBox, matrixWidth, matrixHeight, boundingBox) {
              var minColumn = TileBoundingBoxUtils.getTileColumnWithTotalBoundingBox(totalBoundingBox, matrixWidth, boundingBox.minLongitude);
              var maxColumn = TileBoundingBoxUtils.getTileColumnWithTotalBoundingBox(totalBoundingBox, matrixWidth, boundingBox.maxLongitude, true);

              if (minColumn < matrixWidth && maxColumn >= 0) {
                if (minColumn < 0) {
                  minColumn = 0;
                }

                if (maxColumn >= matrixWidth) {
                  maxColumn = matrixWidth - 1;
                }
              }

              var maxRow = TileBoundingBoxUtils.getRowWithTotalBoundingBox(totalBoundingBox, matrixHeight, boundingBox.minLatitude, true);
              var minRow = TileBoundingBoxUtils.getRowWithTotalBoundingBox(totalBoundingBox, matrixHeight, boundingBox.maxLatitude);

              if (minRow < matrixHeight && maxRow >= 0) {
                if (minRow < 0) {
                  minRow = 0;
                }

                if (maxRow >= matrixHeight) {
                  maxRow = matrixHeight - 1;
                }
              }

              var tileGrid = new TileGrid(minColumn, maxColumn, minRow, maxRow);
              return tileGrid;
            };
            /**
             *  Get the tile column of the longitude in degrees
             *
             *  @param webMercatorTotalBox web mercator total bounding box
             *  @param matrixWidth         matrix width
             *  @param longitude           longitude
             *
             *  @return tile column
             */


            TileBoundingBoxUtils.getTileColumnWithTotalBoundingBox = function (webMercatorTotalBox, matrixWidth, longitude, max) {
              var minX = webMercatorTotalBox.minLongitude;
              var maxX = webMercatorTotalBox.maxLongitude;
              var tileId;

              if (longitude < minX) {
                tileId = -1;
              } else if (longitude >= maxX) {
                tileId = matrixWidth;
              } else {
                var matrixWidthMeters = maxX - minX;
                var tileWidth = matrixWidthMeters / matrixWidth;
                var tileIdDouble = (longitude - minX) / tileWidth;
                tileId = ~~tileIdDouble;

                if (max) {
                  // if the edge lands right on the calculated edge, subtract one
                  if (tileIdDouble === tileId) {
                    tileId--;
                  }
                }
              }

              return tileId;
            };
            /**
             *  Get the tile row of the latitude in degrees
             *
             *  @param webMercatorTotalBox web mercator total bounding box
             *  @param matrixHeight        matrix height
             *  @param latitude            latitude
             *
             *  @return tile row
             */


            TileBoundingBoxUtils.getRowWithTotalBoundingBox = function (webMercatorTotalBox, matrixHeight, latitude, max) {
              var minY = webMercatorTotalBox.minLatitude;
              var maxY = webMercatorTotalBox.maxLatitude;
              var tileId;

              if (latitude < minY) {
                tileId = matrixHeight;
              } else if (latitude >= maxY) {
                tileId = -1;
              } else {
                var matrixHeightMeters = maxY - minY;
                var tileHeight = matrixHeightMeters / matrixHeight;
                var tileIdDouble = (maxY - latitude) / tileHeight;
                tileId = ~~tileIdDouble;

                if (max) {
                  // if the edge lands right on the calculated edge, add one
                  if (tileIdDouble === tileId) {
                    tileId--;
                  }
                }
              }

              return tileId;
            };
            /**
             *  Get the web mercator bounding box of the tile column and row in the tile
             *  matrix using the total bounding box
             *
             *  @param webMercatorTotalBox web mercator total bounding box
             *  @param tileMatrix          tile matrix
             *  @param tileColumn          tile column
             *  @param tileRow             tile row
             *
             *  @return web mercator bounding box
             */


            TileBoundingBoxUtils.getTileBoundingBox = function (box, tileMatrix, tileColumn, tileRow) {
              var tileMatrixWidth = tileMatrix.matrix_width;
              var tileMatrixHeight = tileMatrix.matrix_height;
              var tileGrid = new TileGrid(tileColumn, tileColumn, tileRow, tileRow);
              var matrixMinX = box.minLongitude;
              var matrixMaxX = box.maxLongitude;
              var matrixWidth = matrixMaxX - matrixMinX;
              var tileWidth = matrixWidth / tileMatrixWidth; // Find the longitude range

              var minLon = matrixMinX + tileWidth * tileGrid.min_x;
              var maxLon = minLon + tileWidth * (tileGrid.max_x + 1 - tileGrid.min_x); // Get the tile height

              var matrixMinY = box.minLatitude;
              var matrixMaxY = box.maxLatitude;
              var matrixHeight = matrixMaxY - matrixMinY;
              var tileHeight = matrixHeight / tileMatrixHeight; // Find the latitude range

              var maxLat = matrixMaxY - tileHeight * tileGrid.min_y;
              var minLat = maxLat - tileHeight * (tileGrid.max_y + 1 - tileGrid.min_y);
              var boundingBox = new BoundingBox(minLon, maxLon, minLat, maxLat);
              return boundingBox;
            };

            TileBoundingBoxUtils.getTileGridBoundingBox = function (matrixSetBoundingBox, tileMatrixWidth, tileMatrixHeight, tileGrid) {
              // Get the tile width
              var matrixMinX = matrixSetBoundingBox.minLongitude;
              var matrixMaxX = matrixSetBoundingBox.maxLongitude;
              var matrixWidth = matrixMaxX - matrixMinX;
              var tileWidth = matrixWidth / tileMatrixWidth; // Find the longitude range

              var minLon = matrixMinX + tileWidth * tileGrid.min_x;
              var maxLon = minLon + tileWidth * (tileGrid.max_x + 1 - tileGrid.min_x); // Get the tile height

              var matrixMinY = matrixSetBoundingBox.minLatitude;
              var matrixMaxY = matrixSetBoundingBox.maxLatitude;
              var matrixHeight = matrixMaxY - matrixMinY;
              var tileHeight = matrixHeight / tileMatrixHeight; // Find the latitude range

              var maxLat = matrixMaxY - tileHeight * tileGrid.min_y;
              var minLat = maxLat - tileHeight * (tileGrid.max_y + 1 - tileGrid.min_y);
              return new BoundingBox(minLon, maxLon, minLat, maxLat);
            };

            var TileDaoUtils = {};

            TileDaoUtils.adjustTileMatrixLengths = function (tileMatrixSet, tileMatrices) {
              var tileMatrixWidth = tileMatrixSet.maxX - tileMatrixSet.minX;
              var tileMatrixHeight = tileMatrixSet.maxY - tileMatrixSet.minY;

              for (var i = 0; i < tileMatrices.length; i++) {
                var tileMatrix = tileMatrices[i];
                var tempMatrixWidth = ~~(tileMatrixWidth / (tileMatrix.pixelXSize * ~~tileMatrix.tileWidth));
                var tempMatrixHeight = ~~(tileMatrixHeight / (tileMatrix.pixelYSize * ~~tileMatrix.tileHeight));

                if (tempMatrixWidth > ~~tileMatrix.matrixWidth) {
                  tileMatrix.matrixWidth = ~~tempMatrixWidth;
                }

                if (tempMatrixHeight > ~~tileMatrix.matrixHeight) {
                  tileMatrix.matrixHeight = ~~tempMatrixHeight;
                }
              }
            };

            /**
             * tileDao module.
             * @module tiles/user/tileDao
             */
            /**
             * `TileDao` is a {@link module:dao/dao~Dao} subclass for reading
             * [user tile tables]{@link module:tiles/user/tileTable~TileTable}.
             *
             * @class TileDao
             * @extends {module:user/userDao~UserDao}
             * @param  {GeoPackageConnection} connection
             * @param  {TileTable} table
             * @param  {TileMatrixSet} tileMatrixSet
             * @param  {TileMatrix[]} tileMatrices
             */

            class TileDao extends UserDao {
              constructor(geoPackage, table, tileMatrixSet, tileMatrices) {
                super(geoPackage, table);
                this.tileMatrixSet = tileMatrixSet;
                this.tileMatrices = tileMatrices;
                this.zoomLevelToTileMatrix = [];
                this.widths = [];
                this.heights = [];

                if (tileMatrices.length === 0) {
                  this.minZoom = 0;
                  this.maxZoom = 0;
                } else {
                  this.minZoom = this.tileMatrices[0].zoom_level;
                  this.maxZoom = this.tileMatrices[this.tileMatrices.length - 1].zoom_level;
                } // Populate the zoom level to tile matrix and the sorted tile widths and heights


                for (var i = this.tileMatrices.length - 1; i >= 0; i--) {
                  var tileMatrix = this.tileMatrices[i];
                  this.zoomLevelToTileMatrix[tileMatrix.zoom_level] = tileMatrix;
                }

                this.initialize();
              }

              initialize() {
                var tileMatrixSetDao = this.geoPackage.getTileMatrixSetDao();
                this.srs = tileMatrixSetDao.getSrs(this.tileMatrixSet);
                this.projection = this.srs.organization.toUpperCase() + ':' + this.srs.organization_coordsys_id; // Populate the zoom level to tile matrix and the sorted tile widths and heights

                for (var i = this.tileMatrices.length - 1; i >= 0; i--) {
                  var tileMatrix = this.tileMatrices[i];
                  var width = tileMatrix.pixel_x_size * tileMatrix.tile_width;
                  var height = tileMatrix.pixel_y_size * tileMatrix.tile_height;
                  var proj4Projection = proj4$2(this.projection);

                  if (proj4Projection.to_meter) {
                    width = proj4Projection.to_meter * tileMatrix.pixel_x_size * tileMatrix.tile_width;
                    height = proj4Projection.to_meter * tileMatrix.pixel_y_size * tileMatrix.tile_height;
                  }

                  this.widths.push(width);
                  this.heights.push(height);
                }

                this.setWebMapZoomLevels();
              }

              webZoomToGeoPackageZoom(webZoom) {
                var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(0, 0, webZoom);
                return this.determineGeoPackageZoomLevel(webMercatorBoundingBox, webZoom);
              }

              setWebMapZoomLevels() {
                this.minWebMapZoom = 20;
                this.maxWebMapZoom = 0;
                this.webZoomToGeoPackageZooms = {};
                var totalTileWidth = this.tileMatrixSet.max_x - this.tileMatrixSet.min_x;
                var totalTileHeight = this.tileMatrixSet.max_y - this.tileMatrixSet.min_y;

                for (var i = 0; i < this.tileMatrices.length; i++) {
                  var tileMatrix = this.tileMatrices[i];
                  var singleTileWidth = totalTileWidth / tileMatrix.matrix_width;
                  var singleTileHeight = totalTileHeight / tileMatrix.matrix_height;
                  var tileBox = new BoundingBox(this.tileMatrixSet.min_x, this.tileMatrixSet.min_x + singleTileWidth, this.tileMatrixSet.min_y, this.tileMatrixSet.min_y + singleTileHeight);
                  var proj4Projection = proj4$2(this.projection, 'EPSG:4326');
                  var ne = proj4Projection.forward([tileBox.maxLongitude, tileBox.maxLatitude]);
                  var sw = proj4Projection.forward([tileBox.minLongitude, tileBox.minLatitude]);
                  var degPerTile = ne[0] - sw[0];
                  var globeTileCount = 360.0 / degPerTile;
                  var zoom = Math.round(Math.log2(globeTileCount));

                  if (this.minWebMapZoom > zoom) {
                    this.minWebMapZoom = zoom;
                  }

                  if (this.maxWebMapZoom < zoom) {
                    this.maxWebMapZoom = zoom;
                  }

                  this.webZoomToGeoPackageZooms[zoom] = tileMatrix.zoom_level;
                }
              }

              determineGeoPackageZoomLevel(webMercatorBoundingBox, zoom) {
                return this.webZoomToGeoPackageZooms[zoom];
              }
              /**
               * Get the bounding box of tiles at the zoom level
               * @param  {Number} zoomLevel zoom level
               * @return {BoundingBox}           bounding box of the zoom level, or null if no tiles
               */


              getBoundingBoxWithZoomLevel(zoomLevel) {
                var boundingBox;
                var tileMatrix = this.getTileMatrixWithZoomLevel(zoomLevel);

                if (tileMatrix) {
                  var tileGrid = this.queryForTileGridWithZoomLevel(zoomLevel);

                  if (tileGrid) {
                    var matrixSetBoundingBox = this.getBoundingBox();
                    boundingBox = TileBoundingBoxUtils.getTileGridBoundingBox(matrixSetBoundingBox, tileMatrix.matrix_width, tileMatrix.matrix_height, tileGrid);
                  }

                  return boundingBox;
                } else {
                  return boundingBox;
                }
              }

              getBoundingBox() {
                return this.tileMatrixSet.getBoundingBox();
              }

              queryForTileGridWithZoomLevel(zoomLevel) {
                var where = this.buildWhereWithFieldAndValue(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                var whereArgs = this.buildWhereArgs(zoomLevel);
                var minX = this.minOfColumn(TileColumn.COLUMN_TILE_COLUMN, where, whereArgs);
                var maxX = this.maxOfColumn(TileColumn.COLUMN_TILE_COLUMN, where, whereArgs);
                var minY = this.minOfColumn(TileColumn.COLUMN_TILE_ROW, where, whereArgs);
                var maxY = this.maxOfColumn(TileColumn.COLUMN_TILE_ROW, where, whereArgs);
                var tileGrid;

                if (minX != null && minY != null && maxX != null && maxY != null) {
                  tileGrid = new TileGrid(minX, maxX, minY, maxY);
                }

                return tileGrid;
              }
              /**
               * Get the tile grid of the zoom level
               * @param  {Number} zoomLevel zoom level
               * @return {TileGrid}           tile grid at zoom level, null if no tile matrix at zoom level
               */


              getTileGridWithZoomLevel(zoomLevel) {
                var tileGrid;
                var tileMatrix = this.getTileMatrixWithZoomLevel(zoomLevel);

                if (tileMatrix) {
                  tileGrid = new TileGrid(0, ~~tileMatrix.matrix_width - 1, 0, ~~tileMatrix.matrix_height - 1);
                }

                return tileGrid;
              }
              /**
               * get the tile table
               * @return {TileTable} tile table
               */


              getTileTable() {
                return this.table;
              }
              /**
               * Create a new tile row with the column types and values
               * @param  {Array} columnTypes column types
               * @param  {Array} values      values
               * @return {TileRow}             tile row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new TileRow(this.getTileTable(), columnTypes, values);
              }
              /**
               * Create a new tile row
               * @return {TileRow} tile row
               */


              newRow() {
                return new TileRow(this.getTileTable());
              }
              /**
               * Adjust the tile matrix lengths if needed. Check if the tile matrix width
               * and height need to expand to account for pixel * number of pixels fitting
               * into the tile matrix lengths
               */


              adjustTileMatrixLengths() {
                TileDaoUtils.adjustTileMatrixLengths(this.tileMatrixSet, this.tileMatrices);
              }
              /**
               * Get the tile matrix at the zoom level
               * @param  {Number} zoomLevel zoom level
               * @return {TileMatrix}           tile matrix
               */


              getTileMatrixWithZoomLevel(zoomLevel) {
                return this.zoomLevelToTileMatrix[zoomLevel];
              }
              /**
               * Query for a tile.  Return null if the tile row does not exist.
               *
               * @param  {Number} column    column
               * @param  {Number} row       row
               * @param  {Number} zoomLevel zoom level
               * @return {?module:tiles/user/tileRow~TileRow} or null
               */


              queryForTile(column, row, zoomLevel) {
                var fieldValues = new ColumnValues();
                fieldValues.addColumn(TileColumn.COLUMN_TILE_COLUMN, column);
                fieldValues.addColumn(TileColumn.COLUMN_TILE_ROW, row);
                fieldValues.addColumn(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                const record = this.queryForFirstFieldValues(fieldValues);
                return record ? this.getRow(record) : null;
              }

              queryForTilesWithZoomLevel(zoomLevel, tileCallback) {
                var iterator = this.queryForEach(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      return {
                        value: thisgetRow(nextRow.value),
                        done: false
                      };
                    }

                    return {
                      done: true
                    };
                  }.bind(this)
                };
              }
              /**
               * Query for Tiles at a zoom level in descending row and column order
               * @param  {Number} zoomLevel    zoom level
               * @param  {Function} tileCallback callback for each tile
               * @param  {Function} doneCallback called when all tiles are retrieved
               */


              queryForTilesDescending(zoomLevel, tileCallback) {
                var iterator = this.queryForEach(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel, undefined, undefined, TileColumn.COLUMN_TILE_COLUMN + ' DESC, ' + TileColumn.COLUMN_TILE_ROW + ', DESC');
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      return {
                        value: thisgetRow(nextRow.value),
                        done: false
                      };
                    }

                    return {
                      done: true
                    };
                  }.bind(this)
                };
              }
              /**
               * Query for tiles at a zoom level and column
               * @param  {Number} column       column
               * @param  {Number} zoomLevel    zoom level
               * @param  {Function} tileCallback called for each tile
               * @param  {Function} doneCallback called when all tiles have been retrieved
               */


              queryForTilesInColumn(column, zoomLevel, tileCallback) {
                var fieldValues = new ColumnValues();
                fieldValues.addColumn(TileColumn.COLUMN_TILE_COLUMN, column);
                fieldValues.addColumn(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                var iterator = this.queryForFieldValues(fieldValues);
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var tileRow = thisgetRow(nextRow.value);
                      return {
                        value: tileRow,
                        done: false
                      };
                    } else {
                      return {
                        done: true
                      };
                    }
                  }
                };
              }
              /**
               * Query for tiles at a zoom level and row
               * @param  {Number} row       row
               * @param  {Number} zoomLevel    zoom level
               * @param  {Function} tileCallback called for each tile
               * @param  {Function} doneCallback called when all tiles have been retrieved
               */


              queryForTilesInRow(row, zoomLevel, tileCallback, doneCallback) {
                var fieldValues = new ColumnValues();
                fieldValues.addColumn(TileColumn.COLUMN_TILE_ROW, row);
                fieldValues.addColumn(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                var iterator = this.queryForFieldValues(fieldValues);
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var tileRow = thisgetRow(nextRow.value);
                      return {
                        value: tileRow,
                        done: false
                      };
                    } else {
                      return {
                        done: true
                      };
                    }
                  }
                };
              }
              /**
               * Query by tile grid and zoom level
               * @param  {TileGrid} tileGrid  tile grid
               * @param  {Number} zoomLevel zoom level
               * @param  {Function} tileCallback called for each tile
               * @param  {Function} doneCallback called when all tiles have been retrieved
               */


              queryByTileGrid(tileGrid, zoomLevel) {
                if (!tileGrid) return doneCallback();
                var x = tileGrid.min_x;
                var where = '';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_COLUMN, tileGrid.min_x, '>=');
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_COLUMN, tileGrid.max_x, '<=');
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_ROW, tileGrid.min_y, '>=');
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_ROW, tileGrid.max_y, '<=');
                var whereArgs = this.buildWhereArgs([zoomLevel, tileGrid.min_x, tileGrid.max_x, tileGrid.min_y, tileGrid.max_y]);
                var iterator = this.queryWhereWithArgsDistinct(where, whereArgs);
                var thisgetRow = this.getRow.bind(this);
                return {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var tileRow = thisgetRow(nextRow.value);
                      return {
                        value: tileRow,
                        done: false
                      };
                    } else {
                      return {
                        done: true
                      };
                    }
                  }
                };
              }

              deleteTile(column, row, zoomLevel) {
                var where = '';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_ZOOM_LEVEL, zoomLevel);
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_COLUMN, column);
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(TileColumn.COLUMN_TILE_ROW, row);
                var whereArgs = this.buildWhereArgs([zoomLevel, column, row]);
                return this.deleteWhere(where, whereArgs);
              }

              getSrs() {
                return this.geoPackage.getContentsDao().getSrs(this.tileMatrixSet);
              }
              /**
               * Drop the [user tile pyramid table]{@link module:tiles/user/tileTable~TileTable}
               * and delete its associated [tile matrix set]{@link module:tiles/matrixset~TileMatrixSet}
               * and [tile matrix]{@link module:tiles/matrix~TileMatrix} records.
               *
               * @return result of {@link module:user/userDao~UserDao#dropTable}
               */


              dropTable() {
                var tileMatrixDao = this.geoPackage.getTileMatrixDao();
                var dropResult = UserDao.prototype.dropTable.call(this);
                var tileMatrixSetDao = this.geoPackage.getTileMatrixSetDao();
                tileMatrixSetDao.delete(this.tileMatrixSet);

                for (var i = this.tileMatrices.length - 1; i >= 0; i--) {
                  var tileMatrix = this.tileMatrices[i];
                  tileMatrixDao.delete(tileMatrix);
                }

                var dao = this.geoPackage.getContentsDao();
                dao.deleteById(this.gpkgTableName);
                return dropResult;
              }

              rename(newName) {
                UserDao.prototype.rename.call(this, newName);
                var oldName = this.tileMatrixSet.table_name;
                var values = {};
                values[TileMatrixSetDao.COLUMN_TABLE_NAME] = newName;
                var where = this.buildWhereWithFieldAndValue(TileMatrixSetDao.COLUMN_TABLE_NAME, oldName);
                var whereArgs = this.buildWhereArgs([oldName]);
                var contentsDao = this.geoPackage.getContentsDao();
                var contents = contentsDao.queryForId(oldName);
                contents.table_name = newName;
                contents.identifier = newName;
                contentsDao.create(contents);
                var tileMatrixSetDao = this.geoPackage.getTileMatrixSetDao();
                tileMatrixSetDao.updateWithValues(values, where, whereArgs);
                var tileMatrixDao = this.geoPackage.getTileMatrixDao();
                var tileMatrixUpdate = {};
                tileMatrixUpdate[TileMatrixDao.COLUMN_TABLE_NAME] = newName;
                var tileMatrixWhere = this.buildWhereWithFieldAndValue(TileMatrixDao.COLUMN_TABLE_NAME, oldName);
                tileMatrixDao.updateWithValues(tileMatrixUpdate, tileMatrixWhere, whereArgs);
                contentsDao.deleteById(oldName);
              }

            }

            /**
             * DataColumnConstraints module.
             * @module dataColumnConstraints
             */
            /**
             * Contains data to specify restrictions on basic data type column values
             * @class DataColumnConstraints
             */

            var DataColumnConstraints = function () {
              /**
               * Case sensitive name of constraint
               * @member {string}
               */
              this.constraint_name;
              /**
               * Lowercase type name of constraint: range | enum | glob
               * @member {string}
               */

              this.constraint_type;
              /**
               * Specified case sensitive value for enum or glob or NULL for range constraint_type
               * @member {string}
               */

              this.value;
              /**
               * Minimum value for 'range' or NULL for 'enum' or 'glob' constraint_type
               * @member {Number}
               */

              this.min;
              /**
               * 0 (false) if min value is exclusive, or 1 (true) if min value is inclusive
               * @member {Number}
               */

              this.min_is_inclusive;
              /**
               * Maximum value for 'range' or NULL for 'enum' or 'glob' constraint_type
               * @member {Number}
               */

              this.max;
              /**
               * 0 (false) if max value is exclusive, or 1 (true) if max value is inclusive
               * @member {Number}
               */

              this.max_is_inclusive;
              /**
               * For ranges and globs, describes the constraing; for enums, describes the enum value.
               */

              this.description;
            };
            /**
             * Data Column Constraints Data Access Object
             * @class
             * @param  {module:geoPackage~GeoPackage} geoPackage GeoPackage object
             * @extends {module:dao/dao~Dao}
             */


            class DataColumnConstraintsDao extends Dao {
              /**
               * Creates a new DataColumnConstraints object
               * @return {module:dataColumnConstraints~DataColumnConstraints}
               */
              createObject() {
                return new DataColumnConstraints();
              }
              /**
               * query by constraint name
               * @param  {String} constraintName     constraint name
               * @return {Iterable}
               */


              queryByConstraintName(constraintName) {
                return this.queryForEach(DataColumnConstraintsDao.COLUMN_CONSTRAINT_NAME, constraintName);
              }
              /**
               * Query by the unique column values
               * @param  {String} constraintName     constraint name
               * @param  {String} constraintType     constraint type
               * @param  {String} value              value
               * @return {module:dataColumnConstraints~DataColumnConstraints}
               */


              queryUnique(constraintName, constraintType, value) {
                var dataColumnConstraints = new DataColumnConstraints();
                dataColumnConstraints.constraint_name = constraintName;
                dataColumnConstraints.constraint_type = constraintType;
                dataColumnConstraints.value = value;
                return this.queryForSameId(dataColumnConstraints);
              }

            }

            DataColumnConstraintsDao.TABLE_NAME = "gpkg_data_column_constraints";
            DataColumnConstraintsDao.COLUMN_CONSTRAINT_NAME = "constraint_name";
            DataColumnConstraintsDao.COLUMN_CONSTRAINT_TYPE = "constraint_type";
            DataColumnConstraintsDao.COLUMN_VALUE = "value";
            DataColumnConstraintsDao.COLUMN_MIN = "min";
            DataColumnConstraintsDao.COLUMN_MIN_IS_INCLUSIVE = "min_is_inclusive";
            DataColumnConstraintsDao.COLUMN_MAX = "max";
            DataColumnConstraintsDao.COLUMN_MAX_IS_INCLUSIVE = "max_is_inclusive";
            DataColumnConstraintsDao.COLUMN_DESCRIPTION = "description";
            DataColumnConstraintsDao.ENUM_TYPE = 'enum';
            DataColumnConstraintsDao.GLOB_TYPE = 'glob';
            DataColumnConstraintsDao.RANGE_TYPE = 'range';
            DataColumnConstraintsDao.prototype.gpkgTableName = DataColumnConstraintsDao.TABLE_NAME;
            DataColumnConstraintsDao.prototype.idColumns = [DataColumnConstraintsDao.COLUMN_CONSTRAINT_NAME, DataColumnConstraintsDao.COLUMN_CONSTRAINT_TYPE, DataColumnConstraintsDao.COLUMN_VALUE];

            /**
             * Metadata module.
             * @module metadata
             * @see module:dao/dao
             */
            /**
             * Contains metadata in MIME encodings structured in accordance with any
             * authoritative metadata specification
             * @class Metadata
             */

            var Metadata = function () {
              /**
               * Metadata primary key
               * @member {Number}
               */
              this.id;
              /**
               * Case sensitive name of the data scope to which this metadata applies; see Metadata Scopes below
               * @member {string}
               */

              this.md_scope;
              /**
               * URI reference to the metadata structure definition authority
               * @member {string}
               */

              this.md_standard_uri;
              /**
               * MIME encoding of metadata
               * @member {string}
               */

              this.mime_type;
              /**
               * metadata
               * @member {string}
               */

              this.metadata;
            };

            Metadata.UNDEFINED = "undefined";
            Metadata.FIELD_SESSION = "fieldSession";
            Metadata.COLLECTION_SESSION = "collectionSession";
            Metadata.SERIES = "series";
            Metadata.DATASET = "dataset";
            Metadata.FEATURE_TYPE = "featureType";
            Metadata.FEATURE = "feature";
            Metadata.ATTRIBUTE_TYPE = "attributeType";
            Metadata.ATTRIBUTE = "attribute";
            Metadata.TILE = "tile";
            Metadata.MODEL = "model";
            Metadata.CATALOG = "catalog";
            Metadata.SCHEMA = "schema";
            Metadata.TAXONOMY = "taxonomy";
            Metadata.SOFTWARE = "software";
            Metadata.SERVICE = "service";
            Metadata.COLLECTION_HARDWARE = "collectionHardware";
            Metadata.NON_GEOGRAPHIC_DATASET = "nonGeographicDataset";
            Metadata.DIMENSION_GROUP = "dimensionGroup";

            Metadata.prototype.getScopeInformation = function (type) {
              switch (type) {
                case Metadata.UNDEFINED:
                  return {
                    name: Metadata.UNDEFINED,
                    code: 'NA',
                    definition: 'Metadata information scope is undefined'
                  };

                case Metadata.FIELD_SESSION:
                  return {
                    name: Metadata.FIELD_SESSION,
                    code: '012',
                    definition: 'Information applies to the field session'
                  };

                case Metadata.COLLECTION_SESSION:
                  return {
                    name: Metadata.COLLECTION_SESSION,
                    code: '004',
                    definition: 'Information applies to the collection session'
                  };

                case Metadata.SERIES:
                  return {
                    name: Metadata.SERIES,
                    code: '006',
                    definition: 'Information applies to the (dataset) series'
                  };

                case Metadata.DATASET:
                  return {
                    name: Metadata.DATASET,
                    code: '005',
                    definition: 'Information applies to the (geographic feature) dataset'
                  };

                case Metadata.FEATURE_TYPE:
                  return {
                    name: Metadata.FEATURE_TYPE,
                    code: '010',
                    definition: 'Information applies to a feature type (class)'
                  };

                case Metadata.FEATURE:
                  return {
                    name: Metadata.FEATURE,
                    code: '009',
                    definition: 'Information applies to a feature (instance)'
                  };

                case Metadata.ATTRIBUTE_TYPE:
                  return {
                    name: Metadata.ATTRIBUTE_TYPE,
                    code: '002',
                    definition: 'Information applies to the attribute class'
                  };

                case Metadata.ATTRIBUTE:
                  return {
                    name: Metadata.ATTRIBUTE,
                    code: '001',
                    definition: 'Information applies to the characteristic of a feature (instance)'
                  };

                case Metadata.TILE:
                  return {
                    name: Metadata.TILE,
                    code: '016',
                    definition: 'Information applies to a tile, a spatial subset of geographic data'
                  };

                case Metadata.MODEL:
                  return {
                    name: Metadata.MODEL,
                    code: '015',
                    definition: 'Information applies to a copy or imitation of an existing or hypothetical object'
                  };

                case Metadata.CATALOG:
                  return {
                    name: Metadata.CATALOG,
                    code: 'NA',
                    definition: 'Metadata applies to a feature catalog'
                  };

                case Metadata.SCHEMA:
                  return {
                    name: Metadata.SCHEMA,
                    code: 'NA',
                    definition: 'Metadata applies to an application schema'
                  };

                case Metadata.TAXONOMY:
                  return {
                    name: Metadata.TAXONOMY,
                    code: 'NA',
                    definition: 'Metadata applies to a taxonomy or knowledge system'
                  };

                case Metadata.SOFTWARE:
                  return {
                    name: Metadata.SOFTWARE,
                    code: '013',
                    definition: 'Information applies to a computer program or routine'
                  };

                case Metadata.SERVICE:
                  return {
                    name: Metadata.SERVICE,
                    code: '014',
                    definition: 'Information applies to a capability which a service provider entity makes available to a service user entity through a set of interfaces that define a behaviour, such as a use case'
                  };

                case Metadata.COLLECTION_HARDWARE:
                  return {
                    name: Metadata.COLLECTION_HARDWARE,
                    code: '003',
                    definition: 'Information applies to the collection hardware class'
                  };

                case Metadata.NON_GEOGRAPHIC_DATASET:
                  return {
                    name: Metadata.NON_GEOGRAPHIC_DATASET,
                    code: '007',
                    definition: 'Information applies to non-geographic data'
                  };

                case Metadata.DIMENSION_GROUP:
                  return {
                    name: Metadata.DIMENSION_GROUP,
                    code: '008',
                    definition: 'Information applies to a dimension group'
                  };
              }
            };
            /**
             * Metadata Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             */


            class MetadataDao extends Dao {
              createObject() {
                return new Metadata();
              }

            }

            MetadataDao.TABLE_NAME = "gpkg_metadata";
            MetadataDao.COLUMN_ID = "id";
            MetadataDao.COLUMN_MD_SCOPE = "md_scope";
            MetadataDao.COLUMN_MD_STANDARD_URI = "md_standard_uri";
            MetadataDao.COLUMN_MIME_TYPE = "mime_type";
            MetadataDao.COLUMN_METADATA = "metadata";
            MetadataDao.prototype.gpkgTableName = MetadataDao.TABLE_NAME;
            MetadataDao.prototype.idColumns = [MetadataDao.COLUMN_ID];

            /**
             * MetadataReference module.
             * @module metadata/reference
             * @see module:dao/dao
             */
            /**
             * Links metadata in the gpkg_metadata table to data in the feature, and tiles tables
             * @class MetadataReference
             */

            var MetadataReference = function () {
              /**
               * Lowercase metadata reference scope; one of ‘geopackage’, ‘table’, ‘column’, ’row’, ’row/col’
               * @member {string}
               */
              this.reference_scope;
              /**
               * Name of the table to which this metadata reference applies, or NULL for reference_scope of ‘geopackage’.
               * @member {string}
               */

              this.table_name;
              /**
               * Name of the column to which this metadata reference applies; NULL for
               * reference_scope of ‘geopackage’,‘table’ or ‘row’, or the name of a column
               * in the table_name table for reference_scope of ‘column’ or ‘row/col’
               * @member {string}
               */

              this.column_name;
              /**
               * NULL for reference_scope of ‘geopackage’, ‘table’ or ‘column’, or the
               * rowed of a row record in the table_name table for reference_scope of
               * ‘row’ or ‘row/col’
               * @member {Number}
               */

              this.row_id_value;
              /**
               * timestamp value in ISO 8601 format as defined by the strftime function
               * '%Y-%m-%dT%H:%M:%fZ' format string applied to the current time
               * @member {Date}
               */

              this.timestamp;
              /**
               * gpkg_metadata table id column value for the metadata to which this
               * gpkg_metadata_reference applies
               * @member {Number}
               */

              this.md_file_id;
              /**
               * gpkg_metadata table id column value for the hierarchical parent
               * gpkg_metadata for the gpkg_metadata to which this gpkg_metadata_reference
               * applies, or NULL if md_file_id forms the root of a metadata hierarchy
               * @member {Number}
               */

              this.md_parent_id;
            };

            MetadataReference.prototype.toDatabaseValue = function (columnName) {
              if (columnName === 'timestamp') {
                return this.timestamp.toISOString();
              }

              return this[columnName];
            };
            /**
             * Set the metadata
             * @param  {Metadata} metadata metadata
             */


            MetadataReference.prototype.setMetadata = function (metadata) {
              if (metadata) {
                this.md_file_id = metadata.id;
              } else {
                this.md_file_id = -1;
              }
            };
            /**
             * Set the parent metadata
             * @param  {Metadata} metadata parent metadata
             */


            MetadataReference.prototype.setParentMetadata = function (metadata) {
              if (metadata) {
                this.md_parent_id = metadata.id;
              } else {
                this.md_parent_id = -1;
              }
            };

            MetadataReference.prototype.setReferenceScopeType = function (referenceScopeType) {
              this.reference_scope = referenceScopeType;

              switch (referenceScopeType) {
                case MetadataReference.GEOPACKAGE:
                  this.table_name = undefined;
                  this.column_name = undefined;
                  this.row_id_value = undefined;
                  break;

                case MetadataReference.TABLE:
                  this.column_name = undefined;
                  this.row_id_value = undefined;
                  break;

                case MetadataReference.ROW:
                  this.column_name = undefined;
                  break;

                case MetadataReference.COLUMN:
                  this.row_id_value = undefined;
                  break;
              }
            };

            MetadataReference.GEOPACKAGE = "geopackage";
            MetadataReference.TABLE = "table";
            MetadataReference.COLUMN = "column";
            MetadataReference.ROW = "row";
            MetadataReference.ROW_COL = "row/col";
            /**
             * Metadata Reference Data Access Object
             * @class
             * @extends {module:dao/dao~Dao}
             */

            class MetadataReferenceDao extends Dao {
              createObject() {
                return new MetadataReference();
              }

              removeMetadataParent(parentId) {
                var values = {};
                values[MetadataReferenceDao.COLUMN_MD_PARENT_ID] = null;
                var where = this.buildWhereWithFieldAndValue(MetadataReferenceDao.COLUMN_MD_PARENT_ID, parentId);
                var whereArgs = this.buildWhereArgs(parentId);
                return this.updateWithValues(values, where, whereArgs);
              }

              queryByMetadataAndParent(fileId, parentId) {
                var columnValues = new ColumnValues();
                columnValues.addColumn(MetadataReferenceDao.COLUMN_MD_FILE_ID, fileId);
                columnValues.addColumn(MetadataReferenceDao.COLUMN_MD_PARENT_ID, parentId);
                return this.queryForFieldValues(columnValues);
              }

              queryByMetadata(fileId) {
                var columnValues = new ColumnValues();
                columnValues.addColumn(MetadataReferenceDao.COLUMN_MD_FILE_ID, fileId);
                return this.queryForFieldValues(columnValues);
              }

              queryByMetadataParent(parentId) {
                var columnValues = new ColumnValues();
                columnValues.addColumn(MetadataReferenceDao.COLUMN_MD_PARENT_ID, parentId);
                return this.queryForFieldValues(columnValues);
              }

            }

            MetadataReferenceDao.TABLE_NAME = "gpkg_metadata_reference";
            MetadataReferenceDao.COLUMN_REFERENCE_SCOPE = "reference_scope";
            MetadataReferenceDao.COLUMN_TABLE_NAME = "table_name";
            MetadataReferenceDao.COLUMN_COLUMN_NAME = "column_name";
            MetadataReferenceDao.COLUMN_ROW_ID = "row_id";
            MetadataReferenceDao.COLUMN_TIMESTAMP = "timestamp";
            MetadataReferenceDao.COLUMN_MD_FILE_ID = "md_file_id";
            MetadataReferenceDao.COLUMN_MD_PARENT_ID = "md_parent_id";
            MetadataReferenceDao.prototype.gpkgTableName = MetadataReferenceDao.TABLE_NAME;
            MetadataReferenceDao.prototype.idColumns = [MetadataReferenceDao.COLUMN_MD_FILE_ID, MetadataReferenceDao.COLUMN_MD_PARENT_ID];

            /**
             * CrsWktExtension module.
             * @module extension/crsWkt
             */
            /**
             * OGC Well known text representation of Coordinate Reference Systems extensionName
             * @param  {module:geoPackage~GeoPackage} geoPackage GeoPackage object
             * @class
             * @extends {module:extension/baseExtension~BaseExtension}
             */

            var CrsWktExtension = function (geoPackage) {
              BaseExtension.call(this, geoPackage);
              this.extensionName = CrsWktExtension.EXTENSION_NAME;
              this.extensionDefinition = CrsWktExtension.EXTENSION_CRS_WKT_DEFINITION;
            };

            util.inherits(CrsWktExtension, BaseExtension);
            /**
             * Get or create the extension
             * @return {Promise<module:extension/crsWkt~CrsWktExtension>}
             */

            CrsWktExtension.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(this.extensionName, null, null, this.extensionDefinition, Extension.READ_WRITE);
            };

            CrsWktExtension.EXTENSION_NAME = 'gpkg_crs_wkt';
            CrsWktExtension.EXTENSION_CRS_WKT_AUTHOR = 'gpkg';
            CrsWktExtension.EXTENSION_CRS_WKT_NAME_NO_AUTHOR = 'crs_wkt';
            CrsWktExtension.EXTENSION_CRS_WKT_DEFINITION = 'http://www.geopackage.org/spec/#extension_crs_wkt';

            /**
             * SchemaExtension module.
             * @module SchemaExtension
             * @see module:extension/BaseExtension
             */

            var SchemaExtension = function (geoPackage) {
              BaseExtension.call(this, geoPackage);
              this.extensionName = SchemaExtension.EXTENSION_NAME;
              this.extensionDefinition = SchemaExtension.EXTENSION_SCHEMA_DEFINITION;
            };

            util.inherits(SchemaExtension, BaseExtension);

            SchemaExtension.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(this.extensionName, null, null, this.extensionDefinition, Extension.READ_WRITE);
            };

            SchemaExtension.EXTENSION_NAME = 'gpkg_schema';
            SchemaExtension.EXTENSION_SCHEMA_AUTHOR = 'gpkg';
            SchemaExtension.EXTENSION_SCHEMA_NAME_NO_AUTHOR = 'schema';
            SchemaExtension.EXTENSION_SCHEMA_DEFINITION = 'http://www.geopackage.org/spec/#extension_schema';

            function OptionBuilder (optionList) {
              var optionBuilder = {};
              optionList.forEach(function (option) {
                optionBuilder['set' + option.slice(0, 1).toUpperCase() + option.slice(1)] = function (param) {
                  this[option] = param;
                  return this;
                };

                optionBuilder['get' + option.slice(0, 1).toUpperCase() + option.slice(1)] = function () {
                  return this[option];
                };
              });
              return optionBuilder;
            }

            /**
             * @module extension/relatedTables
             */
            /**
             * Describes the relationships between a base table, a related data table, and a
             * mapping table
             * @class ExtendedRelation
             */

            var ExtendedRelation = function () {
              /**
               * Autoincrement primary key
               * @member {Number}
               */
              this.id;
              /**
               * Name of the table containing the base data (e.g., features) to relate
               * @member {String}
               */

              this.base_table_name;
              /**
               * Name of the primary key column in base_table_name
               * @member {String}
               */

              this.base_primary_column;
              /**
               * Name of the table containing the related content
               * @member {String}
               */

              this.related_table_name;
              /**
               * Name of the primary key column in related_table_name
               * @member {String}
               */

              this.related_primary_column;
              /**
               * Name (profile) of the relationship
               * @member {String}
               */

              this.relation_name;
              /**
               * Name of a mapping table
               * @member {String}
               */

              this.mapping_table_name;
            };
            /**
             * Extended Relations Data Access Object
             * @class ExtendedRelationDao
             * @extends {module:dao/dao~Dao}
             */


            class ExtendedRelationDao extends Dao {
              /**
               * Create a {module:extension/relatedTables~ExtendedRelation} object
               * @return {module:extension/relatedTables~ExtendedRelation}
               */
              createObject() {
                return new ExtendedRelation();
              }
              /**
               * Create the necessary tables for this dao
               * @return {Promise}
               */


              createTable() {
                var tc = this.geoPackage.getTableCreator();
                return tc.createExtendedRelations();
              }
              /**
               * Get all the base table names
               * @return {string[]}
               */


              getBaseTables() {
                var baseTables = [];
                var baseTableColumns = this.queryForColumns('base_table_name');

                for (var i = 0; i < baseTableColumns.length; i++) {
                  baseTables.push(baseTableColumns[i].base_table_name);
                }

                return baseTables;
              }
              /**
               * Get all the related table names
               * @return {string[]}
               */


              getRelatedTables() {
                var relatedTables = [];
                var relatedTableColumns = this.queryForColumns('related_table_name');

                for (var i = 0; i < relatedTableColumns.length; i++) {
                  relatedTables.push(relatedTableColumns[i].related_table_name);
                }

                return relatedTables;
              }
              /**
               * Get all relations for the given base table name
               * @param  {string} baseTable base table name
               * @return {module:extension/relatedTables~ExtendedRelation[]}
               */


              getBaseTableRelations(baseTable) {
                return this.queryForAllEq(ExtendedRelationDao.COLUMN_BASE_TABLE_NAME, baseTable);
              }
              /**
               * Get all relations for the given related table name
               * @param  {string} relatedTable related table name
               * @return {module:extension/relatedTables~ExtendedRelation[]}
               */


              getRelatedTableRelations(relatedTable) {
                return this.queryForAllEq(ExtendedRelationDao.COLUMN_RELATED_TABLE_NAME, relatedTable);
              }
              /**
               * Get all relations for the base table with the relation name
               * @param  {string} baseTable base table name
               * @param  {string} name      relation name
               * @return {module:extension/relatedTables~ExtendedRelation[]}
               */


              getBaseTableRelationsWithName(baseTable, name) {
                var fields = new ColumnValues();
                fields.addColumn(ExtendedRelationDao.COLUMN_BASE_TABLE_NAME, baseTable);
                fields.addColumn(ExtendedRelationDao.COLUMN_RELATION_NAME, name);
                var where = this.buildWhere(fields, 'and');
                var whereArgs = this.buildWhereArgs(fields);
                return this.queryForAll(where, whereArgs);
              }
              /**
               * Get all relations to the table.  Returns relations where the table is the base table and relations where the table is the related table.
               * @param  {string} table table name to query for
               * @return {module:extension/relatedTables~ExtendedRelation[]}
               */


              getTableRelations(table) {
                var fields = new ColumnValues();
                fields.addColumn(ExtendedRelationDao.COLUMN_BASE_TABLE_NAME, table);
                fields.addColumn(ExtendedRelationDao.COLUMN_RELATED_TABLE_NAME, table);
                var where = this.buildWhere(fields, 'or');
                var whereArgs = this.buildWhereArgs(fields);
                return this.queryForAll(where, whereArgs);
              }
              /**
               * Get all relations by the mapping table name
               * @param  {string} mappingTableName name of the mapping table
               * @return {module:extension/relatedTables~ExtendedRelation[]}
               */


              queryByMappingTableName(mappingTableName) {
                var fields = new ColumnValues();
                fields.addColumn(ExtendedRelationDao.COLUMN_MAPPING_TABLE_NAME, mappingTableName);
                var where = this.buildWhere(fields, 'and');
                var whereArgs = this.buildWhereArgs(fields);
                return this.queryForAll(where, whereArgs);
              }

            }

            ExtendedRelationDao.TABLE_NAME = 'gpkgext_relations';
            ExtendedRelationDao.COLUMN_ID = ExtendedRelationDao.TABLE_NAME + '.id';
            ExtendedRelationDao.COLUMN_BASE_TABLE_NAME = ExtendedRelationDao.TABLE_NAME + '.base_table_name';
            ExtendedRelationDao.COLUMN_BASE_PRIMARY_COLUMN = ExtendedRelationDao.TABLE_NAME + '.base_primary_column';
            ExtendedRelationDao.COLUMN_RELATED_TABLE_NAME = ExtendedRelationDao.TABLE_NAME + '.related_table_name';
            ExtendedRelationDao.COLUMN_RELATED_PRIMARY_COLUMN = ExtendedRelationDao.TABLE_NAME + '.related_primary_column';
            ExtendedRelationDao.COLUMN_RELATION_NAME = ExtendedRelationDao.TABLE_NAME + '.relation_name';
            ExtendedRelationDao.COLUMN_MAPPING_TABLE_NAME = ExtendedRelationDao.TABLE_NAME + '.mapping_table_name';
            ExtendedRelationDao.prototype.gpkgTableName = ExtendedRelationDao.TABLE_NAME;
            ExtendedRelationDao.prototype.idColumns = ['id'];

            /**
             * MediaRow module.
             * @module extension/relatedTables
             */
            /**
             * User Media Row containing the values from a single result set row
             * @class
             * @extends {module:user/userRow~UserRow}
             * @param  {module:extension/relatedTables~MediaTable} mediaTable  media table
             * @param  {module:db/dataTypes[]} columnTypes  column types
             * @param  {module:dao/columnValues~ColumnValues[]} values      values
             */

            var MediaRow = function (mediaTable, columnTypes, values) {
              UserRow.call(this, mediaTable, columnTypes, values);
              this.mediaTable = mediaTable;
            };

            util.inherits(MediaRow, UserRow);
            /**
             * Gets the id column
             * @return {module:user/userColumn~UserColumn}
             */

            MediaRow.prototype.getIdColumn = function () {
              return this.mediaTable.getIdColumn();
            };
            /**
             * Gets the id
             * @return {Number}
             */


            MediaRow.prototype.getId = function () {
              return this.getValueWithColumnName(this.getIdColumn().name);
            };
            /**
             * Get the data column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaRow.prototype.getDataColumn = function () {
              return this.mediaTable.getDataColumn();
            };
            /**
             * Gets the data
             * @return {Buffer}
             */


            MediaRow.prototype.getData = function () {
              return this.getValueWithColumnName(this.getDataColumn().name);
            };
            /**
             * Sets the data for the row
             * @param  {Buffer} data data
             */


            MediaRow.prototype.setData = function (data) {
              this.setValueWithColumnName(this.getDataColumn().name, data);
            };
            /**
             * Get the content type column
             * @return {module:user/userColumn~UserColumn}
             */


            MediaRow.prototype.getContentTypeColumn = function () {
              return this.mediaTable.getContentTypeColumn();
            };
            /**
             * Gets the content type
             * @return {string}
             */


            MediaRow.prototype.getContentType = function () {
              return this.getValueWithColumnName(this.getContentTypeColumn().name);
            };
            /**
             * Sets the content type for the row
             * @param  {string} contentType contentType
             */


            MediaRow.prototype.setContentType = function (contentType) {
              this.setValueWithColumnName(this.getContentTypeColumn().name, contentType);
            };

            /**
             * MediaDao module.
             * @module extension/relatedTables
             */
            /**
             * User Media DAO for reading user media data tables
             * @class
             * @extends {module:user/userDao~UserDao}
             * @param  {module:db/geoPackageConnection~GeoPackageConnection} connection        connection
             * @param  {string} table table name
             */

            class MediaDao extends UserDao {
              constructor(geoPackage, table) {
                super(geoPackage, table);
                this.mediaTable = table;
              }
              /**
               * Create a new media row
               * @return {module:extension/relatedTables~MediaRow}
               */


              newRow() {
                return new MediaRow(this.mediaTable);
              }
              /**
               * Create a media row with the column types and values
               * @param  {module:db/dataTypes[]} columnTypes  column types
               * @param  {module:dao/columnValues~ColumnValues[]} values      values
               * @return {module:extension/relatedTables~MediaRow}             media row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new MediaRow(this.mediaTable, columnTypes, values);
              }
              /**
               * Gets the media table
               * @return {module:extension/relatedTables~MediaTable}
               */


              getTable() {
                return this.mediaTable;
              }
              /**
               * Reads the table specified from the geopackage
               * @param  {module:geoPackage~GeoPackage} geoPackage      geopackage object
               * @param  {string} tableName       table name
               * @param  {string[]} requiredColumns required columns
               * @return {module:user/userDao~UserDao}
               */


              static readTable(geoPackage, tableName) {
                var reader = new UserTableReader(tableName);
                var userTable = reader.readTable(geoPackage.getDatabase());
                return new MediaDao(geoPackage, userTable);
              }

            }

            /**
             * SimpleAttributesRow module.
             * @module extension/relatedTables
             */
            /**
             * User Simple Attributes Row containing the values from a single result set row
             * @class
             * @extends {module:user/userRow~UserRow}
             * @param  {module:extension/relatedTables~SimpleAttributesTable} simpleAttributesTable simple attributes table
             * @param  {module:db/dataTypes[]} columnTypes  column types
             * @param  {module:dao/columnValues~ColumnValues[]} values      values
             */

            var SimpleAttributesRow = function (simpleAttributesTable, columnTypes, values) {
              UserRow.call(this, simpleAttributesTable, columnTypes, values);
              this.simpleAttributesTable = simpleAttributesTable;
            };

            util.inherits(SimpleAttributesRow, UserRow);
            /**
             * Gets the primary key id column
             * @return {module:user/userColumn~UserColumn}
             */

            SimpleAttributesRow.prototype.getIdColumn = function () {
              return this.simpleAttributesTable.getIdColumn();
            };
            /**
             * Gets the id
             * @return {Number}
             */


            SimpleAttributesRow.prototype.getId = function () {
              return this.getValueWithColumnName(this.getIdColumn().name);
            };

            /**
             * SimpleAttributesDao module.
             * @module extension/relatedTables
             */
            /**
             * User Simple Attributes DAO for reading user simple attributes data tables
             * @class
             * @extends {module:user/userDao~UserDao}
             * @param  {module:db/geoPackageConnection~GeoPackageConnection} connection        connection
             * @param  {string} table table name
             */

            class SimpleAttributesDao extends UserDao {
              constructor(geoPackage, table) {
                super(geoPackage, table);
                this.simpleAttributesTable = table;
              }
              /**
               * Create a new {module:extension/relatedTables~SimpleAttributesRow}
               * @return {module:extension/relatedTables~SimpleAttributesRow}
               */


              newRow() {
                return new SimpleAttributesRow(this.simpleAttributesTable);
              }
              /**
               * Create a new {module:extension/relatedTables~SimpleAttributesRow} with the column types and values
               * @param  {module:db/dataTypes[]} columnTypes  column types
               * @param  {module:dao/columnValues~ColumnValues[]} values      values
               * @return {module:extension/relatedTables~SimpleAttributesRow}             simple attributes row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new SimpleAttributesRow(this.simpleAttributesTable, columnTypes, values);
              }
              /**
               * Gets the {module:extension/relatedTables~SimpleAttributesTable}
               * @return {module:extension/relatedTables~SimpleAttributesTable}
               */


              getTable() {
                return this.simpleAttributesTable;
              }
              /**
               * Get the simple attributes rows from this table by ids
               * @param  {Number[]} ids array of ids
               * @return {module:extension/relatedTables~SimpleAttributesRow[]}
               */


              getRows(ids) {
                var simpleAttributesRows = [];

                for (var i = 0; i < ids.length; i++) {
                  var row = this.queryForId(ids[i]);

                  if (row) {
                    simpleAttributesRows.push(row);
                  }
                }

                return simpleAttributesRows;
              }

            }

            /**
             * @module user/custom
             */
            /**
             * Create a new user custom columnd
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Number} max max value
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *  @param {Boolean} primaryKey primary key
             */

            var UserCustomColumn = function (index, name, dataType, max, notNull, defaultValue, primaryKey) {
              UserColumn.call(this, index, name, dataType, max, notNull, defaultValue, primaryKey);

              if (dataType == null) {
                throw new Error('Data type is required to create column: ' + name);
              }
            };

            util.inherits(UserCustomColumn, UserColumn);
            /**
             *  Create a new column
             *
             *  @param {Number} index        column index
             *  @param {string} name         column name
             *  @param {module:db/dataTypes~GPKGDataType} type         data type
             *  @param {Number} max max value
             *  @param {Boolean} notNull      not null
             *  @param {Object} defaultValue default value or nil
             *
             *  @return {module:user/custom~UserCustomColumn} created column
             */

            UserCustomColumn.createColumn = function (index, name, dataType, max, notNull, defaultValue) {
              return new UserCustomColumn(index, name, dataType, max, notNull, defaultValue, false);
            };

            /**
             * userMappingTable module.
             * @module extension/relatedTables
             */
            /**
             * Contains user mapping table factory and utility methods
             * @class
             * @extends {module:user/userTable~UserTable}
             * @param  {string} tableName table name
             * @param  {module:user/userColumn~UserColumn[]} columns   user mapping columns
             */

            var UserMappingTable = function (tableName, columns) {
              UserTable.call(this, tableName, columns);
            };

            util.inherits(UserMappingTable, UserTable);
            /**
             * Creates a user mapping table with the minimum required columns followed by the additional columns
             * @param  {string} tableName name of the table
             * @param  {module:user/userColumn~UserColumn[]} additionalColumns additional columns
             * @return {module:extension/relatedTables~UserMappingTable}
             */

            UserMappingTable.create = function (tableName, columns) {
              var allColumns = UserMappingTable.createRequiredColumns(0);

              if (columns) {
                allColumns = allColumns.concat(columns);
              }

              return new UserMappingTable(tableName, allColumns);
            };
            /**
             * Get the number of required columns
             * @return {Number}
             */


            UserMappingTable.numRequiredColumns = function () {
              return UserMappingTable.createRequiredColumns(0).length;
            };
            /**
             * Create the required columns
             * @param  {Number} [startingIndex=0] starting index of the required columns
             * @return {module:user/userColumn~UserColumn[]}
             */


            UserMappingTable.createRequiredColumns = function (startingIndex) {
              startingIndex = startingIndex || 0;
              return [UserMappingTable.createBaseIdColumn(startingIndex++), UserMappingTable.createRelatedIdColumn(startingIndex)];
            };
            /**
             * Create the base id column
             * @param  {Number} index        index of the column
             * @return {module:user/userColumn~UserColumn}
             */


            UserMappingTable.createBaseIdColumn = function (index) {
              var baseIdColumn = UserCustomColumn.createColumn(index, UserMappingTable.COLUMN_BASE_ID, types.GPKGDataType.GPKG_DT_INTEGER, undefined, true);
              return baseIdColumn;
            };
            /**
             * Create the related id column
             * @param  {Number} index        index of the column
             * @return {module:user/userColumn~UserColumn}
             */


            UserMappingTable.createRelatedIdColumn = function (index) {
              return UserCustomColumn.createColumn(index, UserMappingTable.COLUMN_RELATED_ID, types.GPKGDataType.GPKG_DT_INTEGER, undefined, true);
            };
            /**
             * Get the base id column
             * @return {module:user/userColumn~UserColumn}
             */


            UserMappingTable.prototype.getBaseIdColumn = function () {
              return this.getColumnWithColumnName(UserMappingTable.COLUMN_BASE_ID);
            };
            /**
             * Get the related id column
             * @return {module:user/userColumn~UserColumn}
             */


            UserMappingTable.prototype.getRelatedIdColumn = function () {
              return this.getColumnWithColumnName(UserMappingTable.COLUMN_RELATED_ID);
            };
            /**
             * Get the required columns
             * @return {string[]}
             */


            UserMappingTable.requiredColumns = function () {
              return [UserMappingTable.COLUMN_BASE_ID, UserMappingTable.COLUMN_RELATED_ID];
            };

            UserMappingTable.COLUMN_BASE_ID = 'base_id';
            UserMappingTable.COLUMN_RELATED_ID = 'related_id';

            /**
             * UserMappingRow module.
             * @module extension/relatedTables
             */
            /**
             * User Mapping Row containing the values from a single result set row
             * @class
             * @extends {module:user/userRow~UserRow}
             * @param  {module:extension/relatedTables~UserMappingTable} userMappingTable user mapping table
             * @param  {module:db/dataTypes[]} columnTypes  column types
             * @param  {module:dao/columnValues~ColumnValues[]} values      values
             */

            var UserMappingRow = function (userMappingTable, columnTypes, values) {
              UserRow.call(this, userMappingTable, columnTypes, values);
            };

            util.inherits(UserMappingRow, UserRow);
            /**
             * Get the base id column
             * @return {module:user/userColumn~UserColumn}
             */

            UserMappingRow.prototype.getBaseIdColumn = function () {
              return this.table.getBaseIdColumn();
            };
            /**
             * Gets the base id
             * @return {Number}
             */


            UserMappingRow.prototype.getBaseId = function () {
              return this.getValueWithColumnName(this.getBaseIdColumn().name);
            };
            /**
             * Sets the base id
             * @param  {Number} baseId base id
             */


            UserMappingRow.prototype.setBaseId = function (baseId) {
              this.setValueWithColumnName(this.getBaseIdColumn().name, baseId);
            };
            /**
             * Get the related id column
             * @return {module:user/userColumn~UserColumn}
             */


            UserMappingRow.prototype.getRelatedIdColumn = function () {
              return this.table.getRelatedIdColumn();
            };
            /**
             * Gets the related id
             * @return {Number}
             */


            UserMappingRow.prototype.getRelatedId = function () {
              return this.getValueWithColumnName(this.getRelatedIdColumn().name);
            };
            /**
             * Sets the related id
             * @param  {Number} relatedId related id
             */


            UserMappingRow.prototype.setRelatedId = function (relatedId) {
              this.setValueWithColumnName(this.getRelatedIdColumn().name, relatedId);
            };

            /**
             * @module user/custom
             */
            /**
             * Create a new user custom table
             * @class
             * @extends module:user/userTable~UserTable
             * @param  {string} tableName       table name
             * @param  {module:user/userColumn~UserColumn[]} columns         user columns
             * @param  {string[]} requiredColumns required columns
             */

            var UserCustomTable = function (tableName, columns, requiredColumns) {
              UserTable.call(this, tableName, columns);

              if (requiredColumns && requiredColumns.length) {
                var found = {};

                for (var i = 0; i < columns.length; i++) {
                  var column = columns[i];

                  if (requiredColumns.indexOf(column.name) !== -1) {
                    var previousIndex = found[column.name];
                    this.duplicateCheck(column.index, previousIndex, column.name);
                    found[column.name] = column.index;
                  }
                }

                for (var i = 0; i < requiredColumns.length; i++) {
                  this.missingCheck(found[requiredColumns[i]], requiredColumns);
                }
              }
            };

            util.inherits(UserCustomTable, UserTable);

            /**
             * @module user/custom
             */
            /**
             * User custom table reader
             * @class
             * @extends module:user/userTableReader~UserTableReader
             * @param  {string} tableName       table name
             * @param  {string[]} requiredColumns required columns
             */

            var UserCustomTableReader = function (tableName, requiredColumns) {
              UserTableReader.call(this, tableName, requiredColumns);
            };

            util.inherits(UserCustomTableReader, UserTableReader);
            /**
             * Creates user custom column
             * @param  {string} tableName       table name
             * @param  {module:user/userCustom~UserCustomColumn[]} columnList      columns
             * @param  {string[]} requiredColumns required columns
             * @return {module:user/userCustom~UserCustomTable}
             */

            UserCustomTableReader.prototype.createTable = function (tableName, columnList, requiredColumns) {
              return new UserCustomTable(tableName, columnList, requiredColumns);
            };
            /**
             * Creates a user custom column
             * @param {Object} result
             * @param {Number} index        column index
             * @param {string} name         column name
             * @param {module:db/dataTypes~GPKGDataType} type         data type
             * @param {Number} max max value
             * @param {Boolean} notNull      not null
             * @param {Object} defaultValue default value or nil
             * @param {Boolean} primaryKey primary key
             * @return {module:user/custom~UserCustomColumn}
             */


            UserCustomTableReader.prototype.createColumnWithResults = function (result, index, name, type, max, notNull, defaultValue, primaryKey) {
              var dataType = types.fromName(type);
              return new UserCustomColumn(index, name, dataType, max, notNull, defaultValue, primaryKey);
            };

            /**
             * @module user/custom
             */
            /**
             * User Custom Dao
             * @class
             * @extends module:user/userDao~UserDao
             * @param  {module:geoPackage~GeoPackage} geoPackage      geopackage object
             * @param  {module:user/custom~UserCustomTable} userCustomTable user custom table
             */

            class UserCustomDao extends UserDao {
              /**
               * Create a new UserRow
               * @return {module:user/userRow~UserRow}
               */
              newRow() {
                return new UserRow(this.table);
              }
              /**
               * Reads the table specified from the geopackage
               * @param  {module:geoPackage~GeoPackage} geoPackage      geopackage object
               * @param  {string} tableName       table name
               * @param  {string[]} requiredColumns required columns
               * @return {module:user/custom~UserCustomDao}
               */


              static readTable(geoPackage, tableName, requiredColumns) {
                var reader = new UserCustomTableReader(tableName, requiredColumns);
                var userCustomTable = reader.readTable(geoPackage.getDatabase());
                return new UserCustomDao(geoPackage, userCustomTable);
              }

            }

            /**
             * @module extension/relatedTables
             */
            /**
             * User Mapping DAO for reading user mapping data tables
             * @class
             * @extends {module:user/custom/userCustomDao~UserCustomDao}
             * @param  {module:db/geoPackageConnection~GeoPackageConnection} connection        connection
             * @param  {string} table table name
             */

            class UserMappingDao extends UserCustomDao {
              constructor(userCustomDao, geoPackage) {
                super(geoPackage, new UserMappingTable(userCustomDao.table.table_name, userCustomDao.table.columns));
              }
              /**
               * Create a new {module:extension/relatedTables~UserMappingRow}
               * @return {module:extension/relatedTables~UserMappingRow}
               */


              newRow() {
                return new UserMappingRow(this.table);
              }
              /**
               * Gets the {module:extension/relatedTables~UserMappingTable}
               * @return {module:extension/relatedTables~UserMappingTable}
               */


              getTable() {
                return this.table;
              }
              /**
               * Create a user mapping row
               * @param  {module:db/dataTypes[]} columnTypes  column types
               * @param  {module:dao/columnValues~ColumnValues[]} values      values
               * @return {module:extension/relatedTables~UserMappingRow}             user mapping row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new UserMappingRow(this.table, columnTypes, values);
              }
              /**
               * Gets the user mapping row from the result
               * @param  {Object} result db result
               * @return {module:extension/relatedTables~UserMappingRow}             user mapping row
               */


              getUserMappingRow(result) {
                return this.getRow(result);
              }
              /**
               * Query by base id
               * @param  {Number} baseId base id
               * @return {Object[]}
               */


              queryByBaseId(baseId) {
                if (baseId.getBaseId) {
                  baseId = baseId.getBaseId();
                }

                return this.queryForAllEq(UserMappingTable.COLUMN_BASE_ID, baseId);
              }
              /**
               * Query by related id
               * @param  {Number} relatedId related id
               * @return {Object[]}
               */


              queryByRelatedId(relatedId) {
                if (relatedId.getRelatedId) {
                  relatedId = relatedId.getRelatedId();
                }

                return this.queryForAllEq(UserMappingTable.COLUMN_RELATED_ID, relatedId);
              }
              /**
               * Query by base id and related id
               * @param  {Number} baseId base id
               * @param  {Number} relatedId related id
               * @return {Object[]}
               */


              queryByIds(baseId, relatedId) {
                if (baseId.getBaseId) {
                  relatedId = baseId.getRelatedId();
                  baseId = baseId.getBaseId();
                }

                var values = new ColumnValues();
                values.addColumn(UserMappingTable.COLUMN_BASE_ID, baseId);
                values.addColumn(UserMappingTable.COLUMN_RELATED_ID, relatedId);
                return this.queryForFieldValues(values);
              }
              /**
               * Count user mapping rows by base id and related id
               * @param  {Number} baseId    base id
               * @param  {Number} relatedId related id
               * @return {Number}
               */


              countByIds(baseId, relatedId) {
                if (baseId.getBaseId) {
                  relatedId = baseId.getRelatedId();
                  baseId = baseId.getBaseId();
                }

                var values = new ColumnValues();
                values.addColumn(UserMappingTable.COLUMN_BASE_ID, baseId);
                values.addColumn(UserMappingTable.COLUMN_RELATED_ID, relatedId);
                return this.count(values);
              }
              /**
               * Delete by base id
               * @param  {Number} baseId base id
               * @return {Number} number of deleted rows
               */


              deleteByBaseId(baseId) {
                if (baseId.getBaseId) {
                  baseId = baseId.getBaseId();
                }

                var where = '';
                where += this.buildWhereWithFieldAndValue(UserMappingTable.COLUMN_BASE_ID, baseId);
                var whereArgs = this.buildWhereArgs([baseId]);
                return this.deleteWhere(where, whereArgs);
              }
              /**
               * Delete by related id
               * @param  {Number} relatedId related id
               * @return {Number} number of deleted rows
               */


              deleteByRelatedId(relatedId) {
                if (relatedId.getRelatedId) {
                  relatedId = relatedId.getRelatedId();
                }

                var where = '';
                where += this.buildWhereWithFieldAndValue(UserMappingTable.COLUMN_RELATED_ID, relatedId);
                var whereArgs = this.buildWhereArgs([relatedId]);
                return this.deleteWhere(where, whereArgs);
              }
              /**
               * Delete by base id and related id
               * @param  {Number} baseId    base id
               * @param  {Number} relatedId related id
               * @return {Number} number of deleted rows
               */


              deleteByIds(baseId, relatedId) {
                if (baseId.getBaseId) {
                  relatedId = baseId.getRelatedId();
                  baseId = baseId.getBaseId();
                }

                var where = '';
                where += this.buildWhereWithFieldAndValue(UserMappingTable.COLUMN_BASE_ID, baseId);
                where += ' and ';
                where += this.buildWhereWithFieldAndValue(UserMappingTable.COLUMN_RELATED_ID, relatedId);
                var whereArgs = this.buildWhereArgs([baseId, relatedId]);
                return this.deleteWhere(where, whereArgs);
              }

            }

            /**
             * RelatedTablesExtension module.
             * @module extension/relatedTables
             * @see module:extension/BaseExtension
             */
            /**
             * Related Tables Extension
             * @param  {module:geoPackage~GeoPackage} geoPackage the GeoPackage object
             * @class
             * @extends {module:extension/baseExtension~BaseExtension}
             */

            var RelatedTablesExtension = function (geoPackage) {
              BaseExtension.call(this, geoPackage);
              this.extendedRelationDao = geoPackage.getExtendedRelationDao();
            };

            util.inherits(RelatedTablesExtension, BaseExtension);
            /**
             * Get or create the extension
             * @return {Promise}
             */

            RelatedTablesExtension.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(RelatedTablesExtension.EXTENSION_NAME, 'gpkgext_relations', undefined, RelatedTablesExtension.EXTENSION_RELATED_TABLES_DEFINITION, Extension.READ_WRITE).then(function () {
                return this.extendedRelationDao.createTable();
              }.bind(this));
            };
            /**
             * Get or create the extension for the mapping table
             * @param  {string} mappingTableName user mapping table
             * @return {Promise}
             */


            RelatedTablesExtension.prototype.getOrCreateMappingTable = function (mappingTableName) {
              return this.getOrCreateExtension().then(function () {
                this.getOrCreate(RelatedTablesExtension.EXTENSION_NAME, mappingTableName, undefined, RelatedTablesExtension.EXTENSION_RELATED_TABLES_DEFINITION, Extension.READ_WRITE);
              }.bind(this));
            };
            /**
             * Set the contents in the UserRelatedTable
             * @param  {module:extension/relatedTables~UserRelatedTable} userRelatedTable user related table
             */


            RelatedTablesExtension.prototype.setContents = function (userRelatedTable) {
              var contents = this.geoPackage.getContentsDao().queryForId(userRelatedTable.table_name);
              userRelatedTable.setContents(contents);
            };
            /**
             * Reads the user table and creates a UserCustomDao
             * @param  {string} tableName       table name to reader
             * @param  {string[]} requiredColumns required columns
             * @return {module:user/custom~UserCustomDao}
             */


            RelatedTablesExtension.prototype.getUserDao = function (tableName, requiredColumns) {
              return UserCustomDao.readTable(this.geoPackage, tableName, requiredColumns);
            };
            /**
             * Gets the UserMappingDao from the mapping table name
             * @param  {string|module:extension/relatedTables~ExtendedRelation} tableName user mapping table name or ExtendedRelation object
             * @return {module:extension/relatedTables~UserMappingDao}
             */


            RelatedTablesExtension.prototype.getMappingDao = function (tableName) {
              if (tableName.mapping_table_name) {
                tableName = tableName.mapping_table_name;
              }

              return new UserMappingDao(this.getUserDao(tableName, UserMappingTable.requiredColumns()), this.geoPackage);
            };
            /**
             * Gets all relationships in the GeoPackage with an optional base table name and an optional base id
             * @param {string} [baseTableName] base table name
             * @return {module:extension/relatedTables~ExtendedRelation[]}
             */


            RelatedTablesExtension.prototype.getRelationships = function (baseTableName) {
              if (this.extendedRelationDao.isTableExists()) {
                if (baseTableName) {
                  return this.geoPackage.getExtendedRelationDao().getBaseTableRelations(baseTableName);
                }

                return this.extendedRelationDao.queryForAll();
              }

              return [];
            };

            RelatedTablesExtension.prototype.getRelatedRows = function (baseTableName, baseId) {
              var relationships = this.getRelationships(baseTableName);

              for (var i = 0; i < relationships.length; i++) {
                var relation = relationships[i];
                var mappingRows = this.getMappingRowsForBase(relation.mapping_table_name, baseId);
                relation.mappingRows = mappingRows;
                var userDao; // TODO do this for all known types

                if (relation.relation_name === 'media') {
                  userDao = MediaDao.readTable(this.geoPackage, relation.related_table_name);
                } else {
                  userDao = UserDao.readTable(this.geoPackage, relation.related_table_name);
                }

                for (var m = 0; m < mappingRows.length; m++) {
                  var mappingRow = mappingRows[m];
                  mappingRow.row = userDao.queryForId(mappingRow.related_id);
                }
              }

              return relationships;
            };

            RelatedTablesExtension.RelationshipBuilder = function () {
              return OptionBuilder(['baseTableName', 'relatedTableName', 'userMappingTable', 'mappingTableName', 'relationName', 'relationAuthor', 'relationType', 'relatedTable']);
            };
            /**
             * Convience object to build a Relationship object for querying and adding
             * @typedef {Object} module:extension/relatedTables~Relationship
             * @property  {module:extension/relatedTables~RelationType} relationType type of relationship
             * @property  {string} baseTableName base table name
             * @property  {string} relatedTableName related table name
             * @property  {string} relationAuthor relationship author
             * @property  {string} mappingTableName mapping table name
             * @property  {module:extension/relatedTables~UserMappingTable} userMappingTable UserMappingTable
             * @property  {module:extension/relatedTables~UserRelatedTable} relatedTable UserRelatedTable
             */


            RelatedTablesExtension.prototype.getRelationshipBuilder = function () {
              return RelatedTablesExtension.RelationshipBuilder();
            };
            /**
             * Adds a relationship to the GeoPackage
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addRelationship = function (relationship) {
              var extendedRelation = this.extendedRelationDao.createObject();
              var userMappingTable = relationship.userMappingTable;

              if (relationship.hasOwnProperty('base_table_name')) {
                extendedRelation = relationship;
                userMappingTable = UserMappingTable.create(extendedRelation.mapping_table_name);
              } else {
                if (relationship.relationType) {
                  relationship.relationName = relationship.relationType.name;
                }

                if (relationship.relationAuthor) {
                  relationship.relationName = this.buildRelationName(relationship.relationAuthor, relationship.relationName);
                }

                if (relationship.mappingTableName) {
                  userMappingTable = UserMappingTable.create(relationship.mappingTableName);
                }

                if (relationship.relatedTable) {
                  this.createRelatedTable(relationship.relatedTable);
                  relationship.relatedTableName = relationship.relatedTable.table_name;
                  relationship.relationName = relationship.relatedTable.relation_name;
                }

                extendedRelation.base_table_name = relationship.baseTableName;
                extendedRelation.base_primary_column = this.getPrimaryKeyColumnName(relationship.baseTableName);
                extendedRelation.related_table_name = relationship.relatedTableName;
                extendedRelation.related_primary_column = this.getPrimaryKeyColumnName(relationship.relatedTableName);
                extendedRelation.mapping_table_name = userMappingTable.table_name;
                extendedRelation.relation_name = relationship.relationName;
              }

              if (!this.validateRelationship(extendedRelation.base_table_name, extendedRelation.related_table_name, extendedRelation.relation_name)) {
                return Promise.resolve(false);
              }

              return this.createUserMappingTable(userMappingTable).then(function () {
                var mappingTableRelations = this.extendedRelationDao.queryByMappingTableName(extendedRelation.mapping_table_name);

                if (mappingTableRelations.length) {
                  return mappingTableRelations[0];
                }

                this.extendedRelationDao.create(extendedRelation);
                return extendedRelation;
              }.bind(this));
            };
            /**
             * Get the primary key column name from the specified table
             * @param  {string} tableName table name
             * @return {string}
             */


            RelatedTablesExtension.prototype.getPrimaryKeyColumnName = function (tableName) {
              var reader = new UserTableReader(tableName);
              var table = reader.readTable(this.geoPackage.getDatabase());
              return table.getPkColumn().name;
            };
            /**
             * Adds a features relationship between the base feature and related feature
             * table. Creates a default user mapping table if needed.
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addFeaturesRelationship = function (relationship) {
              if (relationship.hasOwnProperty('relation_name')) {
                relationship.relation_name = relationship.relation_name || RelationType.FEATURES.name;
              } else {
                relationship.relationType = RelationType.FEATURES;
              }

              return this.addRelationship(relationship);
            };
            /**
             * Adds a tiles relationship between the base table and related tile
             * table. Creates a default user mapping table if needed.
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addTilesRelationship = function (relationship) {
              if (relationship.hasOwnProperty('relation_name')) {
                relationship.relation_name = relationship.relation_name || RelationType.TILES.name;
              } else {
                relationship.relationType = RelationType.TILES;
              }

              return this.addRelationship(relationship);
            };
            /**
             * Adds an attributes relationship between the base table and related attribute
             * table. Creates a default user mapping table if needed.
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addAttributesRelationship = function (relationship) {
              if (relationship.hasOwnProperty('relation_name')) {
                relationship.relation_name = relationship.relation_name || RelationType.ATTRIBUTES.name;
              } else {
                relationship.relationType = RelationType.ATTRIBUTES;
              }

              return this.addRelationship(relationship);
            };
            /**
             * Adds a simple attributes relationship between the base table and user
             * simple attributes related table. Creates a default user mapping table and
             * the simple attributes table if needed.
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addSimpleAttributesRelationship = function (relationship) {
              if (relationship.hasOwnProperty('relation_name')) {
                relationship.relation_name = relationship.relation_name || RelationType.SIMPLE_ATTRIBUTES.name;
              } else {
                relationship.relationType = RelationType.SIMPLE_ATTRIBUTES;
              }

              return this.addRelationship(relationship);
            };
            /**
             * Adds a media relationship between the base table and user media related
             * table. Creates a default user mapping table and the media table if
             * needed.
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to add
             * @return {Promise<module:extension/relatedTables~ExtendedRelation>}
             */


            RelatedTablesExtension.prototype.addMediaRelationship = function (relationship) {
              if (relationship.hasOwnProperty('relation_name')) {
                relationship.relation_name = relationship.relation_name || RelationType.MEDIA.name;
              } else {
                relationship.relationType = RelationType.MEDIA;
              }

              return this.addRelationship(relationship);
            };
            /**
             * Remove a specific relationship from the GeoPackage
             * @param  {module:extension/relatedTables~Relationship|module:extension/relatedTables~ExtendedRelation} relationship relationship to remove
             * @return {Number} number of relationships removed
             */


            RelatedTablesExtension.prototype.removeRelationship = function (relationship) {
              // this is an ExtendedRelation
              if (relationship.hasOwnProperty('base_table_name')) {
                relationship.baseTableName = relationship.base_table_name;
                relationship.relatedTableName = relationship.related_table_name;
                relationship.relationName = relationship.relation_name;
                relationship.userMappingTable = relationship.mapping_table_name;
              }

              if (relationship.relationType) {
                relationship.relationName = relationship.relationType.name;
              }

              if (relationship.relationAuthor) {
                relationship.relationName = this.buildRelationName(relationship.relationAuthor, relationship.relationName);
              }

              if (this.extendedRelationDao.isTableExists()) {
                var values = new ColumnValues();
                values.addColumn(ExtendedRelationDao.COLUMN_BASE_TABLE_NAME, relationship.baseTableName);
                values.addColumn(ExtendedRelationDao.COLUMN_RELATED_TABLE_NAME, relationship.relatedTableName);
                values.addColumn(ExtendedRelationDao.COLUMN_RELATION_NAME, relationship.relationName);
                var iterator = this.extendedRelationDao.queryForFieldValues(values);
                var tablesToDelete = [];

                for (var extendedRelation of iterator) {
                  tablesToDelete.push(extendedRelation.mapping_table_name);
                }

                tablesToDelete.forEach(function (table) {
                  this.geoPackage.deleteTable(table);
                }.bind(this));
                this.extensionsDao.deleteByExtensionAndTableName(RelatedTablesExtension.EXTENSION_NAME, relationship.userMappingTable);
                return this.extendedRelationDao.delete(extendedRelation);
              }

              return 0;
            };
            /**
             * Create a default user mapping table and extension row if either does not
             * exist. When not created, there is no guarantee that an existing table has
             * the same schema as the provided tabled.
             * @param  {string|module:extension/relatedTables~UserMappingTable} userMappingTableOrName user mapping table or name
             * @return {Promise<Boolean>}
             */


            RelatedTablesExtension.prototype.createUserMappingTable = function (userMappingTableOrName) {
              var userMappingTable = userMappingTableOrName;

              if (typeof userMappingTableOrName === 'string') {
                userMappingTable = UserMappingTable.create(userMappingTableOrName);
              }

              return this.getOrCreateMappingTable(userMappingTable.table_name).then(function () {
                if (!this.geoPackage.isTable(userMappingTable.table_name)) {
                  return this.geoPackage.tableCreator.createUserTable(userMappingTable);
                }

                return true;
              }.bind(this));
            };
            /**
             * Create a user related table if it does not exist. When not created, there
             * is no guarantee that an existing table has the same schema as the
             * provided tabled.
             * @param  {module:extension/relatedTables~UserRelatedTable} relatedTable user related table
             * @return {Boolean} true if the table now exists
             */


            RelatedTablesExtension.prototype.createRelatedTable = function (relatedTable) {
              if (!this.geoPackage.isTable(relatedTable.table_name)) {
                this.geoPackage.tableCreator.createUserTable(relatedTable);
                var contents = new Contents();
                contents.table_name = relatedTable.table_name;
                contents.data_type = relatedTable.data_type;
                contents.identifier = relatedTable.table_name;
                this.geoPackage.getContentsDao().create(contents);
                var refreshed = this.geoPackage.getContentsDao().refresh(contents);
                relatedTable.setContents(refreshed);
              }

              return true;
            };
            /**
             * Validate that the relation name is valid between the base and related tables
             * @param  {string} baseTableName    base table name
             * @param  {string} relatedTableName related table name
             * @param  {string} relationName     relation name
             * @return {Boolean}
             */


            RelatedTablesExtension.prototype.validateRelationship = function (baseTableName, relatedTableName, relationName) {
              // Verify the base and related tables exist
              if (!this.geoPackage.isTable(baseTableName)) {
                console.log('Base relationship table does not exist: ' + baseTableName + ', Relation: ' + relationName);
                return false;
              }

              if (!this.geoPackage.isTable(relatedTableName)) {
                console.log('Related relationship table does not exist: ' + relatedTableName + ', Relation: ' + relationName);
                return false;
              } // Verify spec defined relation types


              var relationType = RelationType.fromName(relationName);

              if (relationType) {
                if (!this.geoPackage.isTableType(relationType.dataType, relatedTableName)) {
                  console.log('The related table must be a ' + relationType.dataType + ' table.  Related Table: ' + relatedTableName + ', Type: ' + this.geoPackage.getTableType(relatedTableName));
                  return false;
                }

                return true;
              }

              return true;
            };
            /**
             * Link related Ids
             * @param  {string} baseTableName    base table name
             * @param  {Number} baseId           base row id
             * @param  {string} relatedTableName related table name
             * @param  {Number} relatedId        related row id
             * @param  {module:extension/relatedTables~RelationType} relationType     relation type
             * @return {Promise}
             */


            RelatedTablesExtension.prototype.linkRelatedIds = function (baseTableName, baseId, relatedTableName, relatedId, relationType) {
              var baseDao = UserDao.readTable(this.geoPackage, baseTableName);
              var relatedDao = UserDao.readTable(this.geoPackage, relatedTableName);
              var baseRow = baseDao.queryForId(baseId);
              var relatedRow = relatedDao.queryForId(relatedId);
              return baseDao.linkRelatedRow(baseRow, relatedRow, relationType);
            };
            /**
             * Get the related id mappings for the base id
             * @param  {string} mappingTableName mapping table name
             * @param  {Number} baseId           base id
             * @return {Number[]} ids of related items
             */


            RelatedTablesExtension.prototype.getMappingsForBase = function (mappingTableName, baseId) {
              var mappingDao = this.getMappingDao(mappingTableName);
              var results = mappingDao.queryByBaseId(baseId);
              var relatedIds = [];

              for (var i = 0; i < results.length; i++) {
                var row = mappingDao.getUserMappingRow(results[i]);
                relatedIds.push(row.getRelatedId());
              }

              return relatedIds;
            };
            /**
             * Get the related id mapping rows for the base id
             * @param  {string} mappingTableName mapping table name
             * @param  {Number} baseId           base id
             * @return {module:extension/relatedTables~UserMappingRow[]} user mapping rows
             */


            RelatedTablesExtension.prototype.getMappingRowsForBase = function (mappingTableName, baseId) {
              var mappingDao = this.getMappingDao(mappingTableName);
              return mappingDao.queryByBaseId(baseId);
            };
            /**
             * Get the base id mappings for the base id
             * @param  {string} mappingTableName mapping table name
             * @param  {Number} relatedId           related id
             * @return {Number[]} ids of base items
             */


            RelatedTablesExtension.prototype.getMappingsForRelated = function (mappingTableName, relatedId) {
              var mappingDao = this.getMappingDao(mappingTableName);
              var results = mappingDao.queryByRelatedId(relatedId);
              var baseIds = [];

              for (var i = 0; i < results.length; i++) {
                var row = mappingDao.getUserMappingRow(results[i]);
                baseIds.push(row.getBaseId());
              }

              return baseIds;
            };
            /**
             * Returns a {module:extension/relatedTables~MediaDao} from the table specified
             * @param  {string|module:extension/relatedTables~MediaTable} tableName either a table name or a MediaTable
             * @return {module:extension/relatedTables~MediaDao}
             */


            RelatedTablesExtension.prototype.getMediaDao = function (tableName) {
              var table;

              if (tableName.TABLE_TYPE && tableName.TABLE_TYPE === 'media') {
                table = tableName;
              } else {
                if (tableName.related_table_name) {
                  tableName = tableName.related_table_name;
                }

                var reader = new UserTableReader(tableName, MediaTable.requiredColumns());
                var userTable = reader.readTable(this.geoPackage.getDatabase());
                table = new MediaTable(userTable.table_name, userTable.columns, MediaTable.requiredColumns());
                table.setContents(this.geoPackage.getContentsDao().queryForId(table.table_name));
              }

              return new MediaDao(this.geoPackage, table);
            };
            /**
             * Returns a {module:extension/relatedTables~SimpleAttributesDao} from the table specified
             * @param  {string|module:extension/relatedTables~SimpleAttributesDao} tableName either a table name or a SimpleAttributesDao
             * @return {module:extension/relatedTables~SimpleAttributesDao}
             */


            RelatedTablesExtension.prototype.getSimpleAttributesDao = function (tableName) {
              var table;

              if (tableName.TABLE_TYPE && tableName.TABLE_TYPE === 'simple_attributes') {
                table = tableName;
              } else {
                if (tableName.related_table_name) {
                  tableName = tableName.related_table_name;
                }

                var reader = new UserTableReader(tableName, SimpleAttributesTable.requiredColumns());
                var userTable = reader.readTable(this.geoPackage.getDatabase());
                table = new SimpleAttributesTable(userTable.table_name, userTable.columns, SimpleAttributesTable.requiredColumns());
                table.setContents(this.geoPackage.getContentsDao().queryForId(table.table_name));
              }

              return new SimpleAttributesDao(this.geoPackage, table);
            };
            /**
             * Builds the custom relation name with the author
             * @param  {string} author author
             * @param  {string} name   name
             * @return {string}
             */


            RelatedTablesExtension.prototype.buildRelationName = function (author, name) {
              return 'x-' + author + '_' + name;
            };
            /**
             * Remove all traces of the extension
             */


            RelatedTablesExtension.prototype.removeExtension = function () {
              if (this.extendedRelationDao.isTableExists()) {
                var extendedRelations = this.extendedRelationDao.queryForAll();
                extendedRelations.forEach(function (relation) {
                  this.geoPackage.deleteTable(relation.mapping_table_name);
                }.bind(this));
                this.geoPackage.deleteTable(ExtendedRelationDao.TABLE_NAME);
              }

              if (this.extensionsDao.isTableExists()) {
                this.extensionsDao.deleteByExtension(RelatedTablesExtension.EXTENSION_NAME);
              }
            };
            /**
             * Determine if the GeoPackage has the extension
             * @param  {string} [mappingTableName] mapping table name to check, if not specified, this checks for any mapping table name
             * @return {Boolean}
             */


            RelatedTablesExtension.prototype.has = function (mappingTableName) {
              if (mappingTableName) {
                return this.hasExtension(RelatedTablesExtension.EXTENSION_NAME, ExtendedRelationDao.TABLE_NAME) && this.hasExtension(RelatedTablesExtension.EXTENSION_NAME, mappingTableName);
              }

              return this.hasExtension(RelatedTablesExtension.EXTENSION_NAME, ExtendedRelationDao.TABLE_NAME);
            };

            RelatedTablesExtension.EXTENSION_NAME = 'related_tables';
            RelatedTablesExtension.EXTENSION_RELATED_TABLES_AUTHOR = 'gpkg';
            RelatedTablesExtension.EXTENSION_RELATED_TABLES_NAME_NO_AUTHOR = 'related_tables';
            RelatedTablesExtension.EXTENSION_RELATED_TABLES_DEFINITION = 'TBD';

            /**
             * @module extension/contents
             */
            /**
             * @class ContentsId
             */

            var ContentsId = function () {
              /**
               * Autoincrement primary key
               * @member {Number}
               */
              this.id;
              /**
               * The name of the actual content table, foreign key to gpkg_contents
               * @member {String}
               */

              this.table_name;
            };

            ContentsId.prototype.setContents = function (contents) {
              if (contents) {
                this.table_name = contents.table_name;
              }
            };
            /**
             * Contents Id Data Access Object
             * @class ContentsIdDao
             * @extends {module:dao/dao~Dao}
             */


            class ContentsIdDao extends Dao {
              /**
               * Create a {module:extension/contents~ContentsId} object
               * @return {module:extension/contents~ContentsId}
               */
              createObject() {
                return new ContentsId();
              }
              /**
               * Create the necessary tables for this dao
               * @return {Promise}
               */


              createTable() {
                var tc = this.geoPackage.getTableCreator();
                return tc.createContentsId();
              }

              create(object) {
                var id = Dao.prototype.create.call(this, object);
                object.id = id;
                return id;
              }

              getContents(contentsId) {
                return this.geoPackage.getContentsDao().queryForId(contentsId.table_name);
              }

              queryForTableName(tableName) {
                var results = this.queryForAllEq(ContentsIdDao.COLUMN_TABLE_NAME, tableName);

                if (results.length) {
                  return results[0];
                }

                return;
              }

              deleteByTableName(tableName) {
                var where = this.buildWhereWithFieldAndValue(ContentsIdDao.COLUMN_TABLE_NAME, tableName);
                var whereArgs = this.buildWhereArgs(tableName);
                return this.deleteWhere(where, whereArgs);
              }

            }

            ContentsIdDao.TABLE_NAME = 'nga_contents_id';
            ContentsIdDao.COLUMN_ID = ContentsIdDao.TABLE_NAME + '.id';
            ContentsIdDao.COLUMN_TABLE_NAME = ContentsIdDao.TABLE_NAME + '.table_name';
            ContentsIdDao.prototype.gpkgTableName = ContentsIdDao.TABLE_NAME;
            ContentsIdDao.prototype.idColumns = ['id'];

            /**
             * @module attributes/attributeTable
             */
            /**
             * Represents a user attribute table
             * @class AttributeTable
             * @extends {module:user/userTable~UserTable}
             * @constructor
             * @param  {string} tableName table name
             * @param  {module:user/userColumn~UserColumn[]} columns   attribute columns
             */

            var AttributeTable = function (tableName, columns) {
              /**
               * Contents of this AttributeTable
               * @member {module:core/contents~Contents}
               */
              this.contents;
              UserTable.call(this, tableName, columns);
            };

            util.inherits(AttributeTable, UserTable);
            /**
             * Set the contents
             * @param  {module:core/contents~Contents} contents the contents
             */

            AttributeTable.prototype.setContents = function (contents) {
              this.contents = contents;

              if (contents.data_type !== ContentsDao.GPKG_CDT_ATTRIBUTES_NAME) {
                throw new Error('The Contents of an Attributes Table must have a data type of ' + ContentsDao.GPKG_CDT_ATTRIBUTES_NAME);
              }
            };

            /**
             * attributeTableReader module.
             * @module attributes/attributeTableReader
             */
            /**
            * Reads the metadata from an existing attribute table
            * @class AttributeTableReader
            * @extends {module:user/userTableReader~UserTableReader}
            * @classdesc Reads the metadata from an existing attributes table
            */

            var AttributeTableReader = function (tableName) {
              UserTableReader.call(this, tableName);
            };

            util.inherits(AttributeTableReader, UserTableReader);
            /**
             * @inheritdoc
             */

            AttributeTableReader.prototype.createTable = function (tableName, columns) {
              return new AttributeTable(tableName, columns);
            };

            /**
             * AttributeRow module.
             * @module attributes/attributeRow
             */
            /**
             * Attribute Row containing the values from a single result set row
             * @class AttributeRow
             * @extends module:user/userRow~UserRow
             * @param  {module:attributes/attributeTable~AttributeTable} attributeTable attribute table
             * @param  {module:db/dataTypes[]} columnTypes  column types
             * @param  {module:dao/columnValues~ColumnValues[]} values      values
             */

            var AttributeRow = function (attributeTable, columnTypes, values) {
              UserRow.call(this, attributeTable, columnTypes, values);
            };

            util.inherits(AttributeRow, UserRow);

            /**
             * @module attributes/attributeDao
             */
            /**
             * Attribute DAO for reading attribute user data tables
             * @class AttributeDao
             * @extends {module:user/userDao~UserDao}
             * @param  {module:geoPackage~GeoPackage} geopackage              geopackage object
             * @param  {module:attributes/attributeTable~AttributeTable} table           attribute table
             */

            class AttributeDao extends UserDao {
              constructor(geoPackage, table) {
                super(geoPackage, table);

                if (!table.contents) {
                  throw new Error('Attributes table has null Contents');
                }
                /**
                 * Contents of this AttributeDao
                 * @member {module:core/contents~Contents}
                 */


                this.contents = table.contents;
              }
              /**
               * Create a new attribute row with the column types and values
               * @param  {Array} columnTypes column types
               * @param  {module:dao/columnValues~ColumnValues[]} values      values
               * @return {moule:attributes/attributeRow~AttributeRow}             attribute row
               */


              newRowWithColumnTypes(columnTypes, values) {
                return new AttributeRow(this.table, columnTypes, values);
              }
              /**
               * Create a new attribute row
               * @return {module:attributes/attributeRow~AttributeRow} attribute row
               */


              newRow() {
                return new AttributeRow(this.table);
              }

            }

            var proj4Defs = {"EPSG:3819":'+proj=longlat +ellps=bessel +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408 +no_defs ',"EPSG:3821":'+proj=longlat +ellps=aust_SA +no_defs ',"EPSG:3824":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:3889":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:3906":'+proj=longlat +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +no_defs ',"EPSG:4001":'+proj=longlat +ellps=airy +no_defs ',"EPSG:4002":'+proj=longlat +ellps=mod_airy +no_defs ',"EPSG:4003":'+proj=longlat +ellps=aust_SA +no_defs ',"EPSG:4004":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4005":'+proj=longlat +a=6377492.018 +b=6356173.508712696 +no_defs ',"EPSG:4006":'+proj=longlat +ellps=bess_nam +no_defs ',"EPSG:4007":'+proj=longlat +a=6378293.645208759 +b=6356617.987679838 +no_defs ',"EPSG:4008":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4009":'+proj=longlat +a=6378450.047548896 +b=6356826.621488444 +no_defs ',"EPSG:4010":'+proj=longlat +a=6378300.789 +b=6356566.435 +no_defs ',"EPSG:4011":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4012":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4013":'+proj=longlat +a=6378249.145 +b=6356514.966398753 +no_defs ',"EPSG:4014":'+proj=longlat +a=6378249.2 +b=6356514.996941779 +no_defs ',"EPSG:4015":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +no_defs ',"EPSG:4016":'+proj=longlat +ellps=evrstSS +no_defs ',"EPSG:4018":'+proj=longlat +a=6377304.063 +b=6356103.038993155 +no_defs ',"EPSG:4019":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:4020":'+proj=longlat +ellps=helmert +no_defs ',"EPSG:4021":'+proj=longlat +a=6378160 +b=6356774.50408554 +no_defs ',"EPSG:4022":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4023":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4024":'+proj=longlat +ellps=krass +no_defs ',"EPSG:4025":'+proj=longlat +ellps=WGS66 +no_defs ',"EPSG:4027":'+proj=longlat +a=6376523 +b=6355862.933255573 +no_defs ',"EPSG:4028":'+proj=longlat +a=6378298.3 +b=6356657.142669561 +no_defs ',"EPSG:4029":'+proj=longlat +a=6378300 +b=6356751.689189189 +no_defs ',"EPSG:4030":'+proj=longlat +ellps=WGS84 +no_defs ',"EPSG:4031":'+proj=longlat +ellps=WGS84 +no_defs ',"EPSG:4032":'+proj=longlat +a=6378136.2 +b=6356751.516927429 +no_defs ',"EPSG:4033":'+proj=longlat +a=6378136.3 +b=6356751.616592146 +no_defs ',"EPSG:4034":'+proj=longlat +a=6378249.144808011 +b=6356514.966204134 +no_defs ',"EPSG:4035":'+proj=longlat +a=6371000 +b=6371000 +no_defs ',"EPSG:4036":'+proj=longlat +ellps=GRS67 +no_defs ',"EPSG:4041":'+proj=longlat +a=6378135 +b=6356750.304921594 +no_defs ',"EPSG:4042":'+proj=longlat +a=6377299.36559538 +b=6356098.359005156 +no_defs ',"EPSG:4043":'+proj=longlat +ellps=WGS72 +no_defs ',"EPSG:4044":'+proj=longlat +a=6377301.243 +b=6356100.230165384 +no_defs ',"EPSG:4045":'+proj=longlat +a=6377299.151 +b=6356098.145120132 +no_defs ',"EPSG:4046":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4047":'+proj=longlat +a=6371007 +b=6371007 +no_defs ',"EPSG:4052":'+proj=longlat +a=6370997 +b=6370997 +no_defs ',"EPSG:4053":'+proj=longlat +a=6371228 +b=6371228 +no_defs ',"EPSG:4054":'+proj=longlat +a=6378273 +b=6356889.449 +no_defs ',"EPSG:4055":'+proj=longlat +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4075":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4081":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4120":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4121":'+proj=longlat +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +no_defs ',"EPSG:4122":'+proj=longlat +a=6378135 +b=6356750.304921594 +no_defs ',"EPSG:4123":'+proj=longlat +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +no_defs ',"EPSG:4124":'+proj=longlat +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +no_defs ',"EPSG:4125":'+proj=longlat +ellps=bessel +towgs84=-404.78,685.68,45.47,0,0,0,0 +no_defs ',"EPSG:4126":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:4127":'+proj=longlat +ellps=clrk66 +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586 +no_defs ',"EPSG:4128":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4129":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4130":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,-0,-0,-0,0 +no_defs ',"EPSG:4131":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=198,881,317,0,0,0,0 +no_defs ',"EPSG:4132":'+proj=longlat +ellps=clrk80 +towgs84=-241.54,-163.64,396.06,0,0,0,0 +no_defs ',"EPSG:4133":'+proj=longlat +ellps=GRS80 +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014 +no_defs ',"EPSG:4134":'+proj=longlat +ellps=clrk80 +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101 +no_defs ',"EPSG:4135":'+proj=longlat +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +no_defs ',"EPSG:4136":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4137":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4138":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4139":'+proj=longlat +ellps=clrk66 +towgs84=11,72,-101,0,0,0,0 +no_defs ',"EPSG:4140":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4141":'+proj=longlat +ellps=GRS80 +towgs84=-48,55,52,0,0,0,0 +no_defs ',"EPSG:4142":'+proj=longlat +ellps=clrk80 +towgs84=-125,53,467,0,0,0,0 +no_defs ',"EPSG:4143":'+proj=longlat +ellps=clrk80 +towgs84=-124.76,53,466.79,0,0,0,0 +no_defs ',"EPSG:4144":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=214,804,268,0,0,0,0 +no_defs ',"EPSG:4145":'+proj=longlat +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +no_defs ',"EPSG:4146":'+proj=longlat +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +no_defs ',"EPSG:4147":'+proj=longlat +ellps=krass +towgs84=-17.51,-108.32,-62.39,0,0,0,0 +no_defs ',"EPSG:4148":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4149":'+proj=longlat +ellps=bessel +towgs84=674.4,15.1,405.3,0,0,0,0 +no_defs ',"EPSG:4150":'+proj=longlat +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +no_defs ',"EPSG:4151":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4152":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4153":'+proj=longlat +ellps=intl +towgs84=-133.63,-157.5,-158.62,0,0,0,0 +no_defs ',"EPSG:4154":'+proj=longlat +ellps=intl +towgs84=-117,-132,-164,0,0,0,0 +no_defs ',"EPSG:4155":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-83,37,124,0,0,0,0 +no_defs ',"EPSG:4156":'+proj=longlat +ellps=bessel +towgs84=589,76,480,0,0,0,0 +no_defs ',"EPSG:4157":'+proj=longlat +a=6378293.645208759 +b=6356617.987679838 +no_defs ',"EPSG:4158":'+proj=longlat +ellps=intl +towgs84=-0.465,372.095,171.736,0,0,0,0 +no_defs ',"EPSG:4159":'+proj=longlat +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +no_defs ',"EPSG:4160":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4161":'+proj=longlat +ellps=intl +towgs84=27.5,14,186.4,0,0,0,0 +no_defs ',"EPSG:4162":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4163":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4164":'+proj=longlat +ellps=krass +towgs84=-76,-138,67,0,0,0,0 +no_defs ',"EPSG:4165":'+proj=longlat +ellps=intl +towgs84=-173,253,27,0,0,0,0 +no_defs ',"EPSG:4166":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4167":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4168":'+proj=longlat +a=6378300 +b=6356751.689189189 +towgs84=-199,32,322,0,0,0,0 +no_defs ',"EPSG:4169":'+proj=longlat +ellps=clrk66 +towgs84=-115,118,426,0,0,0,0 +no_defs ',"EPSG:4170":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4171":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4172":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4173":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4174":'+proj=longlat +a=6378300 +b=6356751.689189189 +no_defs ',"EPSG:4175":'+proj=longlat +ellps=clrk80 +towgs84=-88,4,101,0,0,0,0 +no_defs ',"EPSG:4176":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4178":'+proj=longlat +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +no_defs ',"EPSG:4179":'+proj=longlat +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +no_defs ',"EPSG:4180":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4181":'+proj=longlat +ellps=intl +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598 +no_defs ',"EPSG:4182":'+proj=longlat +ellps=intl +towgs84=-425,-169,81,0,0,0,0 +no_defs ',"EPSG:4183":'+proj=longlat +ellps=intl +towgs84=-104,167,-38,0,0,0,0 +no_defs ',"EPSG:4184":'+proj=longlat +ellps=intl +towgs84=-203,141,53,0,0,0,0 +no_defs ',"EPSG:4185":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4188":'+proj=longlat +ellps=airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +no_defs ',"EPSG:4189":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4190":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4191":'+proj=longlat +ellps=krass +no_defs ',"EPSG:4192":'+proj=longlat +ellps=intl +towgs84=-206.1,-174.7,-87.7,0,0,0,0 +no_defs ',"EPSG:4193":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-70.9,-151.8,-41.4,0,0,0,0 +no_defs ',"EPSG:4194":'+proj=longlat +ellps=intl +towgs84=164,138,-189,0,0,0,0 +no_defs ',"EPSG:4195":'+proj=longlat +ellps=intl +towgs84=105,326,-102.5,0,0,0.814,-0.6 +no_defs ',"EPSG:4196":'+proj=longlat +ellps=intl +towgs84=-45,417,-3.5,0,0,0.814,-0.6 +no_defs ',"EPSG:4197":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4198":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4199":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4200":'+proj=longlat +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +no_defs ',"EPSG:4201":'+proj=longlat +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0 +no_defs ',"EPSG:4202":'+proj=longlat +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +no_defs ',"EPSG:4203":'+proj=longlat +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +no_defs ',"EPSG:4204":'+proj=longlat +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +no_defs ',"EPSG:4205":'+proj=longlat +ellps=krass +towgs84=-43,-163,45,0,0,0,0 +no_defs ',"EPSG:4206":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4207":'+proj=longlat +ellps=intl +towgs84=-304.046,-60.576,103.64,0,0,0,0 +no_defs ',"EPSG:4208":'+proj=longlat +ellps=intl +towgs84=-151.99,287.04,-147.45,0,0,0,0 +no_defs ',"EPSG:4209":'+proj=longlat +a=6378249.145 +b=6356514.966398753 +towgs84=-143,-90,-294,0,0,0,0 +no_defs ',"EPSG:4210":'+proj=longlat +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +no_defs ',"EPSG:4211":'+proj=longlat +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +no_defs ',"EPSG:4212":'+proj=longlat +ellps=clrk80 +towgs84=31.95,300.99,419.19,0,0,0,0 +no_defs ',"EPSG:4213":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-106,-87,188,0,0,0,0 +no_defs ',"EPSG:4214":'+proj=longlat +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +no_defs ',"EPSG:4215":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4216":'+proj=longlat +ellps=clrk66 +towgs84=-73,213,296,0,0,0,0 +no_defs ',"EPSG:4218":'+proj=longlat +ellps=intl +towgs84=307,304,-318,0,0,0,0 +no_defs ',"EPSG:4219":'+proj=longlat +ellps=bessel +towgs84=-384,664,-48,0,0,0,0 +no_defs ',"EPSG:4220":'+proj=longlat +ellps=clrk80 +towgs84=-50.9,-347.6,-231,0,0,0,0 +no_defs ',"EPSG:4221":'+proj=longlat +ellps=intl +towgs84=-148,136,90,0,0,0,0 +no_defs ',"EPSG:4222":'+proj=longlat +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +no_defs ',"EPSG:4223":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +no_defs ',"EPSG:4224":'+proj=longlat +ellps=intl +towgs84=-134,229,-29,0,0,0,0 +no_defs ',"EPSG:4225":'+proj=longlat +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +no_defs ',"EPSG:4226":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4227":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-190.421,8.532,238.69,0,0,0,0 +no_defs ',"EPSG:4228":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4229":'+proj=longlat +ellps=helmert +towgs84=-130,110,-13,0,0,0,0 +no_defs ',"EPSG:4230":'+proj=longlat +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +no_defs ',"EPSG:4231":'+proj=longlat +ellps=intl +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218 +no_defs ',"EPSG:4232":'+proj=longlat +ellps=clrk80 +towgs84=-346,-1,224,0,0,0,0 +no_defs ',"EPSG:4233":'+proj=longlat +ellps=intl +towgs84=-133,-321,50,0,0,0,0 +no_defs ',"EPSG:4234":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4235":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4236":'+proj=longlat +ellps=intl +towgs84=-637,-549,-203,0,0,0,0 +no_defs ',"EPSG:4237":'+proj=longlat +ellps=GRS67 +towgs84=52.17,-71.82,-14.9,0,0,0,0 +no_defs ',"EPSG:4238":'+proj=longlat +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +no_defs ',"EPSG:4239":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=217,823,299,0,0,0,0 +no_defs ',"EPSG:4240":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=210,814,289,0,0,0,0 +no_defs ',"EPSG:4241":'+proj=longlat +a=6378249.144808011 +b=6356514.966204134 +no_defs ',"EPSG:4242":'+proj=longlat +ellps=clrk66 +towgs84=70,207,389.5,0,0,0,0 +no_defs ',"EPSG:4243":'+proj=longlat +a=6377299.36559538 +b=6356098.359005156 +no_defs ',"EPSG:4244":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=-97,787,86,0,0,0,0 +no_defs ',"EPSG:4245":'+proj=longlat +a=6377304.063 +b=6356103.038993155 +towgs84=-11,851,5,0,0,0,0 +no_defs ',"EPSG:4246":'+proj=longlat +ellps=clrk80 +towgs84=-294.7,-200.1,525.5,0,0,0,0 +no_defs ',"EPSG:4247":'+proj=longlat +ellps=intl +towgs84=-273.5,110.6,-357.9,0,0,0,0 +no_defs ',"EPSG:4248":'+proj=longlat +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +no_defs ',"EPSG:4249":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4250":'+proj=longlat +ellps=clrk80 +towgs84=-130,29,364,0,0,0,0 +no_defs ',"EPSG:4251":'+proj=longlat +ellps=clrk80 +towgs84=-90,40,88,0,0,0,0 +no_defs ',"EPSG:4252":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4253":'+proj=longlat +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +no_defs ',"EPSG:4254":'+proj=longlat +ellps=intl +towgs84=16,196,93,0,0,0,0 +no_defs ',"EPSG:4255":'+proj=longlat +ellps=intl +towgs84=-333,-222,114,0,0,0,0 +no_defs ',"EPSG:4256":'+proj=longlat +ellps=clrk80 +towgs84=41,-220,-134,0,0,0,0 +no_defs ',"EPSG:4257":'+proj=longlat +ellps=bessel +towgs84=-587.8,519.75,145.76,0,0,0,0 +no_defs ',"EPSG:4258":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4259":'+proj=longlat +ellps=intl +towgs84=-254.1,-5.36,-100.29,0,0,0,0 +no_defs ',"EPSG:4260":'+proj=longlat +ellps=clrk80 +towgs84=-70.9,-151.8,-41.4,0,0,0,0 +no_defs ',"EPSG:4261":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +no_defs ',"EPSG:4262":'+proj=longlat +ellps=bessel +towgs84=639,405,60,0,0,0,0 +no_defs ',"EPSG:4263":'+proj=longlat +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +no_defs ',"EPSG:4264":'+proj=longlat +ellps=intl +towgs84=-252.95,-4.11,-96.38,0,0,0,0 +no_defs ',"EPSG:4265":'+proj=longlat +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +no_defs ',"EPSG:4266":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-74,-130,42,0,0,0,0 +no_defs ',"EPSG:4267":'+proj=longlat +datum=NAD27 +no_defs ',"EPSG:4268":'+proj=longlat +a=6378450.047548896 +b=6356826.621488444 +no_defs ',"EPSG:4269":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4270":'+proj=longlat +ellps=clrk80 +towgs84=-242.2,-144.9,370.3,0,0,0,0 +no_defs ',"EPSG:4271":'+proj=longlat +ellps=intl +towgs84=-10,375,165,0,0,0,0 +no_defs ',"EPSG:4272":'+proj=longlat +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +no_defs ',"EPSG:4273":'+proj=longlat +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +no_defs ',"EPSG:4274":'+proj=longlat +ellps=intl +towgs84=-223.237,110.193,36.649,0,0,0,0 +no_defs ',"EPSG:4275":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +no_defs ',"EPSG:4276":'+proj=longlat +ellps=WGS66 +no_defs ',"EPSG:4277":'+proj=longlat +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +no_defs ',"EPSG:4278":'+proj=longlat +ellps=airy +no_defs ',"EPSG:4279":'+proj=longlat +ellps=airy +no_defs ',"EPSG:4280":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4281":'+proj=longlat +a=6378300.789 +b=6356566.435 +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1 +no_defs ',"EPSG:4282":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-148,51,-291,0,0,0,0 +no_defs ',"EPSG:4283":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4284":'+proj=longlat +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +no_defs ',"EPSG:4285":'+proj=longlat +ellps=intl +towgs84=-128.16,-282.42,21.93,0,0,0,0 +no_defs ',"EPSG:4286":'+proj=longlat +ellps=helmert +no_defs ',"EPSG:4287":'+proj=longlat +ellps=intl +towgs84=164,138,-189,0,0,0,0 +no_defs ',"EPSG:4288":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4289":'+proj=longlat +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +no_defs ',"EPSG:4291":'+proj=longlat +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +no_defs ',"EPSG:4292":'+proj=longlat +ellps=intl +towgs84=-355,21,72,0,0,0,0 +no_defs ',"EPSG:4293":'+proj=longlat +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +no_defs ',"EPSG:4294":'+proj=longlat +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +no_defs ',"EPSG:4295":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4296":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4297":'+proj=longlat +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +no_defs ',"EPSG:4298":'+proj=longlat +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +no_defs ',"EPSG:4299":'+proj=longlat +ellps=mod_airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +no_defs ',"EPSG:4300":'+proj=longlat +ellps=mod_airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +no_defs ',"EPSG:4301":'+proj=longlat +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +no_defs ',"EPSG:4302":'+proj=longlat +a=6378293.645208759 +b=6356617.987679838 +towgs84=-61.702,284.488,472.052,0,0,0,0 +no_defs ',"EPSG:4303":'+proj=longlat +ellps=helmert +no_defs ',"EPSG:4304":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-73,-247,227,0,0,0,0 +no_defs ',"EPSG:4306":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4307":'+proj=longlat +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +no_defs ',"EPSG:4308":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4309":'+proj=longlat +ellps=intl +towgs84=-155,171,37,0,0,0,0 +no_defs ',"EPSG:4310":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4311":'+proj=longlat +ellps=intl +towgs84=-265,120,-358,0,0,0,0 +no_defs ',"EPSG:4312":'+proj=longlat +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +no_defs ',"EPSG:4313":'+proj=longlat +ellps=intl +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747 +no_defs ',"EPSG:4314":'+proj=longlat +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +no_defs ',"EPSG:4315":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-23,259,-9,0,0,0,0 +no_defs ',"EPSG:4316":'+proj=longlat +ellps=intl +towgs84=103.25,-100.4,-307.19,0,0,0,0 +no_defs ',"EPSG:4317":'+proj=longlat +ellps=krass +towgs84=28,-121,-77,0,0,0,0 +no_defs ',"EPSG:4318":'+proj=longlat +ellps=WGS84 +towgs84=-3.2,-5.7,2.8,0,0,0,0 +no_defs ',"EPSG:4319":'+proj=longlat +ellps=GRS80 +towgs84=-20.8,11.3,2.4,0,0,0,0 +no_defs ',"EPSG:4322":'+proj=longlat +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +no_defs ',"EPSG:4324":'+proj=longlat +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +no_defs ',"EPSG:4326":'+proj=longlat +datum=WGS84 +no_defs ',"EPSG:4463":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4470":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4475":'+proj=longlat +ellps=intl +towgs84=-381.788,-57.501,-256.673,0,0,0,0 +no_defs ',"EPSG:4483":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4490":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:4555":'+proj=longlat +ellps=krass +no_defs ',"EPSG:4558":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4600":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4601":'+proj=longlat +ellps=clrk80 +towgs84=-255,-15,71,0,0,0,0 +no_defs ',"EPSG:4602":'+proj=longlat +ellps=clrk80 +towgs84=725,685,536,0,0,0,0 +no_defs ',"EPSG:4603":'+proj=longlat +ellps=clrk80 +towgs84=72,213.7,93,0,0,0,0 +no_defs ',"EPSG:4604":'+proj=longlat +ellps=clrk80 +towgs84=174,359,365,0,0,0,0 +no_defs ',"EPSG:4605":'+proj=longlat +ellps=clrk80 +towgs84=9,183,236,0,0,0,0 +no_defs ',"EPSG:4606":'+proj=longlat +ellps=clrk80 +towgs84=-149,128,296,0,0,0,0 +no_defs ',"EPSG:4607":'+proj=longlat +ellps=clrk80 +towgs84=195.671,332.517,274.607,0,0,0,0 +no_defs ',"EPSG:4608":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4609":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:4610":'+proj=longlat +a=6378140 +b=6356755.288157528 +no_defs ',"EPSG:4611":'+proj=longlat +ellps=intl +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425 +no_defs ',"EPSG:4612":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4613":'+proj=longlat +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +no_defs ',"EPSG:4614":'+proj=longlat +ellps=intl +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706 +no_defs ',"EPSG:4615":'+proj=longlat +ellps=intl +towgs84=-499,-249,314,0,0,0,0 +no_defs ',"EPSG:4616":'+proj=longlat +ellps=intl +towgs84=-289,-124,60,0,0,0,0 +no_defs ',"EPSG:4617":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4618":'+proj=longlat +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +no_defs ',"EPSG:4619":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4620":'+proj=longlat +ellps=clrk80 +towgs84=-106,-129,165,0,0,0,0 +no_defs ',"EPSG:4621":'+proj=longlat +ellps=intl +towgs84=137,248,-430,0,0,0,0 +no_defs ',"EPSG:4622":'+proj=longlat +ellps=intl +towgs84=-467,-16,-300,0,0,0,0 +no_defs ',"EPSG:4623":'+proj=longlat +ellps=intl +towgs84=-186,230,110,0,0,0,0 +no_defs ',"EPSG:4624":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4625":'+proj=longlat +ellps=intl +towgs84=186,482,151,0,0,0,0 +no_defs ',"EPSG:4626":'+proj=longlat +ellps=intl +towgs84=94,-948,-1262,0,0,0,0 +no_defs ',"EPSG:4627":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4628":'+proj=longlat +ellps=intl +towgs84=162,117,154,0,0,0,0 +no_defs ',"EPSG:4629":'+proj=longlat +ellps=intl +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746 +no_defs ',"EPSG:4630":'+proj=longlat +ellps=intl +towgs84=84,274,65,0,0,0,0 +no_defs ',"EPSG:4631":'+proj=longlat +ellps=intl +towgs84=145,-187,103,0,0,0,0 +no_defs ',"EPSG:4632":'+proj=longlat +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +no_defs ',"EPSG:4633":'+proj=longlat +ellps=intl +towgs84=335.47,222.58,-230.94,0,0,0,0 +no_defs ',"EPSG:4634":'+proj=longlat +ellps=intl +towgs84=-13,-348,292,0,0,0,0 +no_defs ',"EPSG:4635":'+proj=longlat +ellps=intl +towgs84=-122.383,-188.696,103.344,3.5107,-4.9668,-5.7047,4.4798 +no_defs ',"EPSG:4636":'+proj=longlat +ellps=intl +towgs84=365,194,166,0,0,0,0 +no_defs ',"EPSG:4637":'+proj=longlat +ellps=intl +towgs84=325,154,172,0,0,0,0 +no_defs ',"EPSG:4638":'+proj=longlat +ellps=clrk66 +towgs84=30,430,368,0,0,0,0 +no_defs ',"EPSG:4639":'+proj=longlat +ellps=intl +towgs84=253,-132,-127,0,0,0,0 +no_defs ',"EPSG:4640":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4641":'+proj=longlat +ellps=intl +towgs84=287.58,177.78,-135.41,0,0,0,0 +no_defs ',"EPSG:4642":'+proj=longlat +ellps=intl +towgs84=-13,-348,292,0,0,0,0 +no_defs ',"EPSG:4643":'+proj=longlat +ellps=intl +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7 +no_defs ',"EPSG:4644":'+proj=longlat +ellps=intl +towgs84=-10.18,-350.43,291.37,0,0,0,0 +no_defs ',"EPSG:4645":'+proj=longlat +ellps=intl +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4646":'+proj=longlat +ellps=intl +towgs84=-963,510,-359,0,0,0,0 +no_defs ',"EPSG:4657":'+proj=longlat +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0 +no_defs ',"EPSG:4658":'+proj=longlat +ellps=intl +towgs84=-73,46,-86,0,0,0,0 +no_defs ',"EPSG:4659":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4660":'+proj=longlat +ellps=intl +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805 +no_defs ',"EPSG:4661":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4662":'+proj=longlat +ellps=intl +towgs84=-11.64,-348.6,291.98,0,0,0,0 +no_defs ',"EPSG:4663":'+proj=longlat +ellps=intl +towgs84=-502.862,-247.438,312.724,0,0,0,0 +no_defs ',"EPSG:4664":'+proj=longlat +ellps=intl +towgs84=-204.619,140.176,55.226,0,0,0,0 +no_defs ',"EPSG:4665":'+proj=longlat +ellps=intl +towgs84=-106.226,166.366,-37.893,0,0,0,0 +no_defs ',"EPSG:4666":'+proj=longlat +ellps=bessel +towgs84=508.088,-191.042,565.223,0,0,0,0 +no_defs ',"EPSG:4667":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4668":'+proj=longlat +ellps=intl +towgs84=-86,-98,-119,0,0,0,0 +no_defs ',"EPSG:4669":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4670":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4671":'+proj=longlat +a=6378249.2 +b=6356515 +no_defs ',"EPSG:4672":'+proj=longlat +ellps=intl +towgs84=175,-38,113,0,0,0,0 +no_defs ',"EPSG:4673":'+proj=longlat +ellps=intl +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263 +no_defs ',"EPSG:4674":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4675":'+proj=longlat +ellps=clrk66 +towgs84=-100,-248,259,0,0,0,0 +no_defs ',"EPSG:4676":'+proj=longlat +ellps=krass +no_defs ',"EPSG:4677":'+proj=longlat +ellps=krass +no_defs ',"EPSG:4678":'+proj=longlat +ellps=krass +towgs84=44.585,-131.212,-39.544,0,0,0,0 +no_defs ',"EPSG:4679":'+proj=longlat +ellps=clrk80 +towgs84=-80.01,253.26,291.19,0,0,0,0 +no_defs ',"EPSG:4680":'+proj=longlat +ellps=clrk80 +towgs84=124.5,-63.5,-281,0,0,0,0 +no_defs ',"EPSG:4681":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4682":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=283.7,735.9,261.1,0,0,0,0 +no_defs ',"EPSG:4683":'+proj=longlat +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +no_defs ',"EPSG:4684":'+proj=longlat +ellps=intl +towgs84=-133,-321,50,0,0,0,0 +no_defs ',"EPSG:4685":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4686":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4687":'+proj=longlat +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +no_defs ',"EPSG:4688":'+proj=longlat +ellps=intl +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074 +no_defs ',"EPSG:4689":'+proj=longlat +ellps=intl +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311 +no_defs ',"EPSG:4690":'+proj=longlat +ellps=intl +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741 +no_defs ',"EPSG:4691":'+proj=longlat +ellps=intl +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773 +no_defs ',"EPSG:4692":'+proj=longlat +ellps=intl +towgs84=217.037,86.959,23.956,0,0,0,0 +no_defs ',"EPSG:4693":'+proj=longlat +ellps=WGS84 +towgs84=0,-0.15,0.68,0,0,0,0 +no_defs ',"EPSG:4694":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4695":'+proj=longlat +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +no_defs ',"EPSG:4696":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4697":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4698":'+proj=longlat +ellps=intl +towgs84=145,-187,103,0,0,0,0 +no_defs ',"EPSG:4699":'+proj=longlat +ellps=clrk80 +towgs84=-770.1,158.4,-498.2,0,0,0,0 +no_defs ',"EPSG:4700":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4701":'+proj=longlat +ellps=clrk80 +towgs84=-79.9,-158,-168.9,0,0,0,0 +no_defs ',"EPSG:4702":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4703":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4704":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4705":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4706":'+proj=longlat +ellps=helmert +towgs84=-146.21,112.63,4.05,0,0,0,0 +no_defs ',"EPSG:4707":'+proj=longlat +ellps=intl +towgs84=114,-116,-333,0,0,0,0 +no_defs ',"EPSG:4708":'+proj=longlat +ellps=aust_SA +towgs84=-491,-22,435,0,0,0,0 +no_defs ',"EPSG:4709":'+proj=longlat +ellps=intl +towgs84=145,75,-272,0,0,0,0 +no_defs ',"EPSG:4710":'+proj=longlat +ellps=intl +towgs84=-320,550,-494,0,0,0,0 +no_defs ',"EPSG:4711":'+proj=longlat +ellps=intl +towgs84=124,-234,-25,0,0,0,0 +no_defs ',"EPSG:4712":'+proj=longlat +ellps=intl +towgs84=-205,107,53,0,0,0,0 +no_defs ',"EPSG:4713":'+proj=longlat +ellps=clrk80 +towgs84=-79,-129,145,0,0,0,0 +no_defs ',"EPSG:4714":'+proj=longlat +ellps=intl +towgs84=-127,-769,472,0,0,0,0 +no_defs ',"EPSG:4715":'+proj=longlat +ellps=intl +towgs84=-104,-129,239,0,0,0,0 +no_defs ',"EPSG:4716":'+proj=longlat +ellps=intl +towgs84=298,-304,-375,0,0,0,0 +no_defs ',"EPSG:4717":'+proj=longlat +ellps=clrk66 +towgs84=-2,151,181,0,0,0,0 +no_defs ',"EPSG:4718":'+proj=longlat +ellps=intl +towgs84=230,-199,-752,0,0,0,0 +no_defs ',"EPSG:4719":'+proj=longlat +ellps=intl +towgs84=211,147,111,0,0,0,0 +no_defs ',"EPSG:4720":'+proj=longlat +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +no_defs ',"EPSG:4721":'+proj=longlat +ellps=intl +towgs84=265.025,384.929,-194.046,0,0,0,0 +no_defs ',"EPSG:4722":'+proj=longlat +ellps=intl +towgs84=-794,119,-298,0,0,0,0 +no_defs ',"EPSG:4723":'+proj=longlat +ellps=clrk66 +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925 +no_defs ',"EPSG:4724":'+proj=longlat +ellps=intl +towgs84=208,-435,-229,0,0,0,0 +no_defs ',"EPSG:4725":'+proj=longlat +ellps=intl +towgs84=189,-79,-202,0,0,0,0 +no_defs ',"EPSG:4726":'+proj=longlat +ellps=clrk66 +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081 +no_defs ',"EPSG:4727":'+proj=longlat +ellps=intl +towgs84=403,-81,277,0,0,0,0 +no_defs ',"EPSG:4728":'+proj=longlat +ellps=intl +towgs84=-307,-92,127,0,0,0,0 +no_defs ',"EPSG:4729":'+proj=longlat +ellps=intl +towgs84=185,165,42,0,0,0,0 +no_defs ',"EPSG:4730":'+proj=longlat +ellps=intl +towgs84=170,42,84,0,0,0,0 +no_defs ',"EPSG:4731":'+proj=longlat +ellps=clrk80 +towgs84=51,391,-36,0,0,0,0 +no_defs ',"EPSG:4732":'+proj=longlat +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0 +no_defs ',"EPSG:4733":'+proj=longlat +ellps=intl +towgs84=276,-57,149,0,0,0,0 +no_defs ',"EPSG:4734":'+proj=longlat +ellps=intl +towgs84=-632,438,-609,0,0,0,0 +no_defs ',"EPSG:4735":'+proj=longlat +ellps=intl +towgs84=647,1777,-1124,0,0,0,0 +no_defs ',"EPSG:4736":'+proj=longlat +ellps=clrk80 +towgs84=260,12,-147,0,0,0,0 +no_defs ',"EPSG:4737":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4738":'+proj=longlat +a=6378293.645208759 +b=6356617.987679838 +no_defs ',"EPSG:4739":'+proj=longlat +ellps=intl +towgs84=-156,-271,-189,0,0,0,0 +no_defs ',"EPSG:4740":'+proj=longlat +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0 +no_defs ',"EPSG:4741":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4742":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:4743":'+proj=longlat +ellps=clrk80 +towgs84=70.995,-335.916,262.898,0,0,0,0 +no_defs ',"EPSG:4744":'+proj=longlat +ellps=clrk80 +no_defs ',"EPSG:4745":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4746":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:4747":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4748":'+proj=longlat +a=6378306.3696 +b=6356571.996 +towgs84=51,391,-36,0,0,0,0 +no_defs ',"EPSG:4749":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4750":'+proj=longlat +ellps=WGS84 +towgs84=-56.263,16.136,-22.856,0,0,0,0 +no_defs ',"EPSG:4751":'+proj=longlat +a=6377295.664 +b=6356094.667915204 +no_defs ',"EPSG:4752":'+proj=longlat +a=6378306.3696 +b=6356571.996 +towgs84=51,391,-36,0,0,0,0 +no_defs ',"EPSG:4753":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4754":'+proj=longlat +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +no_defs ',"EPSG:4755":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4756":'+proj=longlat +ellps=WGS84 +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188 +no_defs ',"EPSG:4757":'+proj=longlat +ellps=WGS84 +no_defs ',"EPSG:4758":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4759":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4760":'+proj=longlat +ellps=WGS66 +no_defs ',"EPSG:4761":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4762":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4763":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4764":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4765":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:4801":'+proj=longlat +ellps=bessel +towgs84=674.4,15.1,405.3,0,0,0,0 +pm=bern +no_defs ',"EPSG:4802":'+proj=longlat +ellps=intl +towgs84=307,304,-318,0,0,0,0 +pm=bogota +no_defs ',"EPSG:4803":'+proj=longlat +ellps=intl +towgs84=-304.046,-60.576,103.64,0,0,0,0 +pm=lisbon +no_defs ',"EPSG:4804":'+proj=longlat +ellps=bessel +towgs84=-587.8,519.75,145.76,0,0,0,0 +pm=jakarta +no_defs ',"EPSG:4805":'+proj=longlat +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +no_defs ',"EPSG:4806":'+proj=longlat +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +pm=rome +no_defs ',"EPSG:4807":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +no_defs ',"EPSG:4808":'+proj=longlat +ellps=bessel +pm=jakarta +no_defs ',"EPSG:4809":'+proj=longlat +ellps=intl +pm=brussels +no_defs ',"EPSG:4810":'+proj=longlat +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +pm=paris +no_defs ',"EPSG:4811":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-73,-247,227,0,0,0,0 +pm=paris +no_defs ',"EPSG:4813":'+proj=longlat +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +pm=jakarta +no_defs ',"EPSG:4814":'+proj=longlat +ellps=bessel +pm=stockholm +no_defs ',"EPSG:4815":'+proj=longlat +ellps=bessel +pm=athens +no_defs ',"EPSG:4816":'+proj=longlat +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +pm=paris +no_defs ',"EPSG:4817":'+proj=longlat +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +no_defs ',"EPSG:4818":'+proj=longlat +ellps=bessel +towgs84=589,76,480,0,0,0,0 +pm=ferro +no_defs ',"EPSG:4819":'+proj=longlat +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +pm=paris +no_defs ',"EPSG:4820":'+proj=longlat +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +pm=jakarta +no_defs ',"EPSG:4821":'+proj=longlat +a=6378249.2 +b=6356515 +pm=paris +no_defs ',"EPSG:4823":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4824":'+proj=longlat +ellps=intl +no_defs ',"EPSG:4901":'+proj=longlat +a=6376523 +b=6355862.933255573 +pm=2.337208333333333 +no_defs ',"EPSG:4902":'+proj=longlat +a=6376523 +b=6355862.933255573 +pm=paris +no_defs ',"EPSG:4903":'+proj=longlat +a=6378298.3 +b=6356657.142669561 +pm=madrid +no_defs ',"EPSG:4904":'+proj=longlat +ellps=bessel +towgs84=508.088,-191.042,565.223,0,0,0,0 +pm=lisbon +no_defs ',"EPSG:5013":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5132":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:5228":'+proj=longlat +ellps=bessel +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378 +no_defs ',"EPSG:5229":'+proj=longlat +ellps=bessel +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378 +pm=ferro +no_defs ',"EPSG:5233":'+proj=longlat +a=6377276.345 +b=6356075.41314024 +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338 +no_defs ',"EPSG:5246":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:5252":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5264":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5324":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5340":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5354":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5360":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5365":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5371":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5373":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5381":'+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5393":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5451":'+proj=longlat +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +no_defs ',"EPSG:5464":'+proj=longlat +a=6378293.645208759 +b=6356617.987679838 +no_defs ',"EPSG:5467":'+proj=longlat +ellps=clrk66 +no_defs ',"EPSG:5489":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5524":'+proj=longlat +ellps=intl +no_defs ',"EPSG:5527":'+proj=longlat +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +no_defs ',"EPSG:5546":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5561":'+proj=longlat +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +no_defs ',"EPSG:5593":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:5681":'+proj=longlat +ellps=bessel +no_defs ',"EPSG:5886":'+proj=longlat +ellps=GRS80 +no_defs ',"EPSG:6135":'+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs ',"EPSG:2000":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +units=m +no_defs ',"EPSG:2001":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=-255,-15,71,0,0,0,0 +units=m +no_defs ',"EPSG:2002":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=725,685,536,0,0,0,0 +units=m +no_defs ',"EPSG:2003":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=72,213.7,93,0,0,0,0 +units=m +no_defs ',"EPSG:2004":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=174,359,365,0,0,0,0 +units=m +no_defs ',"EPSG:2005":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=9,183,236,0,0,0,0 +units=m +no_defs ',"EPSG:2006":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=-149,128,296,0,0,0,0 +units=m +no_defs ',"EPSG:2007":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=195.671,332.517,274.607,0,0,0,0 +units=m +no_defs ',"EPSG:2008":'+proj=tmerc +lat_0=0 +lon_0=-55.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2009":'+proj=tmerc +lat_0=0 +lon_0=-58.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2010":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2011":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2012":'+proj=tmerc +lat_0=0 +lon_0=-67.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2013":'+proj=tmerc +lat_0=0 +lon_0=-70.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2014":'+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2015":'+proj=tmerc +lat_0=0 +lon_0=-76.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2016":'+proj=tmerc +lat_0=0 +lon_0=-79.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2017":'+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2018":'+proj=tmerc +lat_0=0 +lon_0=-76.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2019":'+proj=tmerc +lat_0=0 +lon_0=-79.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2020":'+proj=tmerc +lat_0=0 +lon_0=-82.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2021":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2022":'+proj=tmerc +lat_0=0 +lon_0=-84 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2023":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2024":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2025":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2026":'+proj=tmerc +lat_0=0 +lon_0=-96 +k=0.9999 +x_0=304800 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2027":'+proj=utm +zone=15 +ellps=clrk66 +units=m +no_defs ',"EPSG:2028":'+proj=utm +zone=16 +ellps=clrk66 +units=m +no_defs ',"EPSG:2029":'+proj=utm +zone=17 +ellps=clrk66 +units=m +no_defs ',"EPSG:2030":'+proj=utm +zone=18 +ellps=clrk66 +units=m +no_defs ',"EPSG:2031":'+proj=utm +zone=17 +ellps=clrk66 +units=m +no_defs ',"EPSG:2032":'+proj=utm +zone=18 +ellps=clrk66 +units=m +no_defs ',"EPSG:2033":'+proj=utm +zone=19 +ellps=clrk66 +units=m +no_defs ',"EPSG:2034":'+proj=utm +zone=20 +ellps=clrk66 +units=m +no_defs ',"EPSG:2035":'+proj=utm +zone=21 +ellps=clrk66 +units=m +no_defs ',"EPSG:2036":'+proj=sterea +lat_0=46.5 +lon_0=-66.5 +k=0.999912 +x_0=2500000 +y_0=7500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2037":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2038":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2039":'+proj=tmerc +lat_0=31.73439361111111 +lon_0=35.20451694444445 +k=1.0000067 +x_0=219529.584 +y_0=626907.39 +ellps=GRS80 +towgs84=-48,55,52,0,0,0,0 +units=m +no_defs ',"EPSG:2040":'+proj=utm +zone=30 +ellps=clrk80 +towgs84=-125,53,467,0,0,0,0 +units=m +no_defs ',"EPSG:2041":'+proj=utm +zone=30 +ellps=clrk80 +towgs84=-124.76,53,466.79,0,0,0,0 +units=m +no_defs ',"EPSG:2042":'+proj=utm +zone=29 +ellps=clrk80 +towgs84=-125,53,467,0,0,0,0 +units=m +no_defs ',"EPSG:2043":'+proj=utm +zone=29 +ellps=clrk80 +towgs84=-124.76,53,466.79,0,0,0,0 +units=m +no_defs ',"EPSG:2044":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=-17.51,-108.32,-62.39,0,0,0,0 +units=m +no_defs ',"EPSG:2045":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=-17.51,-108.32,-62.39,0,0,0,0 +units=m +no_defs ',"EPSG:2046":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2047":'+proj=tmerc +lat_0=0 +lon_0=17 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2048":'+proj=tmerc +lat_0=0 +lon_0=19 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2049":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2050":'+proj=tmerc +lat_0=0 +lon_0=23 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2051":'+proj=tmerc +lat_0=0 +lon_0=25 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2052":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2053":'+proj=tmerc +lat_0=0 +lon_0=29 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2054":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2055":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2056":'+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=2600000 +y_0=1200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs ',"EPSG:2057":'+proj=omerc +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444 +ellps=intl +towgs84=-133.63,-157.5,-158.62,0,0,0,0 +units=m +no_defs ',"EPSG:2058":'+proj=utm +zone=38 +ellps=intl +towgs84=-117,-132,-164,0,0,0,0 +units=m +no_defs ',"EPSG:2059":'+proj=utm +zone=39 +ellps=intl +towgs84=-117,-132,-164,0,0,0,0 +units=m +no_defs ',"EPSG:2060":'+proj=utm +zone=40 +ellps=intl +towgs84=-117,-132,-164,0,0,0,0 +units=m +no_defs ',"EPSG:2061":'+proj=utm +zone=41 +ellps=intl +towgs84=-117,-132,-164,0,0,0,0 +units=m +no_defs ',"EPSG:2062":'+proj=lcc +lat_1=40 +lat_0=40 +lon_0=0 +k_0=0.9988085293 +x_0=600000 +y_0=600000 +a=6378298.3 +b=6356657.142669561 +pm=madrid +units=m +no_defs ',"EPSG:2063":'+proj=utm +zone=28 +a=6378249.2 +b=6356515 +towgs84=-23,259,-9,0,0,0,0 +units=m +no_defs ',"EPSG:2064":'+proj=utm +zone=29 +a=6378249.2 +b=6356515 +towgs84=-23,259,-9,0,0,0,0 +units=m +no_defs ',"EPSG:2065":'+proj=krovak +lat_0=49.5 +lon_0=42.5 +alpha=30.28813972222222 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=589,76,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:2066":'+proj=cass +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952 +a=6378293.645208759 +b=6356617.987679838 +to_meter=0.201166195164 +no_defs ',"EPSG:2067":'+proj=utm +zone=20 +ellps=intl +towgs84=-0.465,372.095,171.736,0,0,0,0 +units=m +no_defs ',"EPSG:2068":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2069":'+proj=tmerc +lat_0=0 +lon_0=11 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2070":'+proj=tmerc +lat_0=0 +lon_0=13 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2071":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2072":'+proj=tmerc +lat_0=0 +lon_0=17 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2073":'+proj=tmerc +lat_0=0 +lon_0=19 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2074":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2075":'+proj=tmerc +lat_0=0 +lon_0=23 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2076":'+proj=tmerc +lat_0=0 +lon_0=25 +k=0.9999 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2077":'+proj=utm +zone=32 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2078":'+proj=utm +zone=33 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2079":'+proj=utm +zone=34 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2080":'+proj=utm +zone=35 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2081":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=intl +units=m +no_defs ',"EPSG:2082":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=intl +towgs84=27.5,14,186.4,0,0,0,0 +units=m +no_defs ',"EPSG:2083":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=intl +towgs84=16,196,93,0,0,0,0 +units=m +no_defs ',"EPSG:2084":'+proj=utm +zone=19 +south +ellps=intl +towgs84=16,196,93,0,0,0,0 +units=m +no_defs ',"EPSG:2085":'+proj=lcc +lat_1=22.35 +lat_0=22.35 +lon_0=-81 +k_0=0.99993602 +x_0=500000 +y_0=280296.016 +datum=NAD27 +units=m +no_defs ',"EPSG:2086":'+proj=lcc +lat_1=20.71666666666667 +lat_0=20.71666666666667 +lon_0=-76.83333333333333 +k_0=0.99994848 +x_0=500000 +y_0=229126.939 +datum=NAD27 +units=m +no_defs ',"EPSG:2087":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-115.854,-99.0583,-152.462,0,0,0,0 +units=m +no_defs ',"EPSG:2088":'+proj=tmerc +lat_0=0 +lon_0=11 +k=0.9996 +x_0=500000 +y_0=0 +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +units=m +no_defs ',"EPSG:2089":'+proj=utm +zone=38 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2090":'+proj=utm +zone=39 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2091":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=-76,-138,67,0,0,0,0 +units=m +no_defs ',"EPSG:2092":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=-76,-138,67,0,0,0,0 +units=m +no_defs ',"EPSG:2093":'+proj=tmerc +lat_0=0 +lon_0=106 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=-17.51,-108.32,-62.39,0,0,0,0 +units=m +no_defs ',"EPSG:2094":'+proj=tmerc +lat_0=0 +lon_0=106 +k=0.9996 +x_0=500000 +y_0=0 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:2095":'+proj=utm +zone=28 +ellps=intl +towgs84=-173,253,27,0,0,0,0 +units=m +no_defs ',"EPSG:2096":'+proj=tmerc +lat_0=38 +lon_0=129 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:2097":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:2098":'+proj=tmerc +lat_0=38 +lon_0=125 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:2099":'+proj=cass +lat_0=25.38236111111111 +lon_0=50.76138888888889 +x_0=100000 +y_0=100000 +ellps=helmert +units=m +no_defs ',"EPSG:2100":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-199.87,74.79,246.62,0,0,0,0 +units=m +no_defs ',"EPSG:2101":'+proj=lcc +lat_1=10.16666666666667 +lat_0=10.16666666666667 +lon_0=-71.60561777777777 +k_0=1 +x_0=0 +y_0=-52684.972 +ellps=intl +units=m +no_defs ',"EPSG:2102":'+proj=lcc +lat_1=10.16666666666667 +lat_0=10.16666666666667 +lon_0=-71.60561777777777 +k_0=1 +x_0=200000 +y_0=147315.028 +ellps=intl +units=m +no_defs ',"EPSG:2103":'+proj=lcc +lat_1=10.16666666666667 +lat_0=10.16666666666667 +lon_0=-71.60561777777777 +k_0=1 +x_0=500000 +y_0=447315.028 +ellps=intl +units=m +no_defs ',"EPSG:2104":'+proj=lcc +lat_1=10.16666666666667 +lat_0=10.16666666666667 +lon_0=-71.60561777777777 +k_0=1 +x_0=-17044 +y_0=-23139.97 +ellps=intl +units=m +no_defs ',"EPSG:2105":'+proj=tmerc +lat_0=-36.87972222222222 +lon_0=174.7641666666667 +k=0.9999 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2106":'+proj=tmerc +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2107":'+proj=tmerc +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2108":'+proj=tmerc +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2109":'+proj=tmerc +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2110":'+proj=tmerc +lat_0=-39.51222222222222 +lon_0=175.64 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2111":'+proj=tmerc +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2112":'+proj=tmerc +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2113":'+proj=tmerc +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2114":'+proj=tmerc +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2115":'+proj=tmerc +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2116":'+proj=tmerc +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2117":'+proj=tmerc +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2118":'+proj=tmerc +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2119":'+proj=tmerc +lat_0=-42.68888888888888 +lon_0=173.01 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2120":'+proj=tmerc +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2121":'+proj=tmerc +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2122":'+proj=tmerc +lat_0=-43.11 +lon_0=170.2608333333333 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2123":'+proj=tmerc +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2124":'+proj=tmerc +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2125":'+proj=tmerc +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2126":'+proj=tmerc +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2127":'+proj=tmerc +lat_0=-44.735 +lon_0=169.4675 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2128":'+proj=tmerc +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2129":'+proj=tmerc +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2130":'+proj=tmerc +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2131":'+proj=tmerc +lat_0=-45.86138888888889 +lon_0=170.2825 +k=0.99996 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2132":'+proj=tmerc +lat_0=-46.6 +lon_0=168.3427777777778 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2133":'+proj=utm +zone=58 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2134":'+proj=utm +zone=59 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2135":'+proj=utm +zone=60 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2136":'+proj=tmerc +lat_0=4.666666666666667 +lon_0=-1 +k=0.99975 +x_0=274319.7391633579 +y_0=0 +a=6378300 +b=6356751.689189189 +towgs84=-199,32,322,0,0,0,0 +to_meter=0.3047997101815088 +no_defs ',"EPSG:2137":'+proj=tmerc +lat_0=0 +lon_0=-1 +k=0.9996 +x_0=500000 +y_0=0 +a=6378300 +b=6356751.689189189 +towgs84=-199,32,322,0,0,0,0 +units=m +no_defs ',"EPSG:2138":'+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=clrk66 +units=m +no_defs ',"EPSG:2139":'+proj=tmerc +lat_0=0 +lon_0=-55.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2140":'+proj=tmerc +lat_0=0 +lon_0=-58.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2141":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2142":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2143":'+proj=tmerc +lat_0=0 +lon_0=-67.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2144":'+proj=tmerc +lat_0=0 +lon_0=-70.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2145":'+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2146":'+proj=tmerc +lat_0=0 +lon_0=-76.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2147":'+proj=tmerc +lat_0=0 +lon_0=-79.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2148":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2149":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2150":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2151":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2152":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2153":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2154":'+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2155":'+proj=lcc +lat_1=-14.26666666666667 +lat_0=-14.26666666666667 +lon_0=170 +k_0=1 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=-115,118,426,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2156":'+proj=utm +zone=59 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2157":'+proj=tmerc +lat_0=53.5 +lon_0=-8 +k=0.99982 +x_0=600000 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2158":'+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2159":'+proj=tmerc +lat_0=6.666666666666667 +lon_0=-12 +k=1 +x_0=152399.8550907544 +y_0=0 +a=6378300 +b=6356751.689189189 +to_meter=0.3047997101815088 +no_defs ',"EPSG:2160":'+proj=tmerc +lat_0=6.666666666666667 +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053 +a=6378300 +b=6356751.689189189 +to_meter=0.3047997101815088 +no_defs ',"EPSG:2161":'+proj=utm +zone=28 +ellps=clrk80 +towgs84=-88,4,101,0,0,0,0 +units=m +no_defs ',"EPSG:2162":'+proj=utm +zone=29 +ellps=clrk80 +towgs84=-88,4,101,0,0,0,0 +units=m +no_defs ',"EPSG:2163":'+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs ',"EPSG:2164":'+proj=tmerc +lat_0=0 +lon_0=-5 +k=0.9996 +x_0=500000 +y_0=0 +ellps=clrk80 +towgs84=-125,53,467,0,0,0,0 +units=m +no_defs ',"EPSG:2165":'+proj=tmerc +lat_0=0 +lon_0=-5 +k=0.9996 +x_0=500000 +y_0=0 +ellps=clrk80 +towgs84=-124.76,53,466.79,0,0,0,0 +units=m +no_defs ',"EPSG:2166":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2167":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2168":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2169":'+proj=tmerc +lat_0=49.83333333333334 +lon_0=6.166666666666667 +k=1 +x_0=80000 +y_0=100000 +ellps=intl +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598 +units=m +no_defs ',"EPSG:2170":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:2171":'+proj=sterea +lat_0=50.625 +lon_0=21.08333333333333 +k=0.9998 +x_0=4637000 +y_0=5647000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:2172":'+proj=sterea +lat_0=53.00194444444445 +lon_0=21.50277777777778 +k=0.9998 +x_0=4603000 +y_0=5806000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:2173":'+proj=sterea +lat_0=53.58333333333334 +lon_0=17.00833333333333 +k=0.9998 +x_0=3501000 +y_0=5999000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:2174":'+proj=sterea +lat_0=51.67083333333333 +lon_0=16.67222222222222 +k=0.9998 +x_0=3703000 +y_0=5627000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:2175":'+proj=tmerc +lat_0=0 +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:2176":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.999923 +x_0=5500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2177":'+proj=tmerc +lat_0=0 +lon_0=18 +k=0.999923 +x_0=6500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2178":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.999923 +x_0=7500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2179":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.999923 +x_0=8500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2180":'+proj=tmerc +lat_0=0 +lon_0=19 +k=0.9993 +x_0=500000 +y_0=-5300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2188":'+proj=utm +zone=25 +ellps=intl +towgs84=-425,-169,81,0,0,0,0 +units=m +no_defs ',"EPSG:2189":'+proj=utm +zone=26 +ellps=intl +towgs84=-104,167,-38,0,0,0,0 +units=m +no_defs ',"EPSG:2190":'+proj=utm +zone=26 +ellps=intl +towgs84=-203,141,53,0,0,0,0 +units=m +no_defs ',"EPSG:2191":'+proj=utm +zone=28 +ellps=intl +units=m +no_defs ',"EPSG:2192":'+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=2.337229166666667 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2193":'+proj=tmerc +lat_0=0 +lon_0=173 +k=0.9996 +x_0=1600000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2194":'+proj=lcc +lat_1=-14.26666666666667 +lat_0=-14.26666666666667 +lon_0=-170 +k_0=1 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=-115,118,426,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2195":'+proj=utm +zone=2 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2196":'+proj=tmerc +lat_0=0 +lon_0=9.5 +k=0.99995 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2197":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.99995 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2198":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2199":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:2200":'+proj=sterea +lat_0=46.5 +lon_0=-66.5 +k=0.999912 +x_0=300000 +y_0=800000 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2201":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2202":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2203":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2204":'+proj=lcc +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666 +lon_0=-86 +x_0=609601.2192024384 +y_0=30480.06096012192 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:2205":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2206":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2207":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2208":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=11500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2209":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=12500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2210":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=13500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2211":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=14500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2212":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=15500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2213":'+proj=tmerc +lat_0=0 +lon_0=30 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2214":'+proj=tmerc +lat_0=0 +lon_0=10.5 +k=0.999 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=-206.1,-174.7,-87.7,0,0,0,0 +units=m +no_defs ',"EPSG:2215":'+proj=utm +zone=32 +a=6378249.2 +b=6356515 +towgs84=-70.9,-151.8,-41.4,0,0,0,0 +units=m +no_defs ',"EPSG:2216":'+proj=utm +zone=22 +ellps=intl +towgs84=164,138,-189,0,0,0,0 +units=m +no_defs ',"EPSG:2217":'+proj=utm +zone=23 +ellps=intl +towgs84=164,138,-189,0,0,0,0 +units=m +no_defs ',"EPSG:2219":'+proj=utm +zone=19 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2220":'+proj=utm +zone=20 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2222":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2223":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2224":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2225":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2226":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2227":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2228":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2229":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2230":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2231":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2232":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2233":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2234":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096012192 +y_0=152400.3048006096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2235":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2236":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2237":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2238":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2239":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2240":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2241":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2242":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2243":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2244":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=99999.99989839978 +y_0=249364.9987299975 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2245":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=249364.9987299975 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2246":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2247":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000.0001016001 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2248":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=399999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2249":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000.0001016002 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2250":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2251":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=7999999.999968001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2252":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=5999999.999976001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2253":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=3999999.999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2254":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2255":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2256":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2257":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2258":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2259":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2260":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2261":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=249999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2262":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2263":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2264":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.2192024384 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2265":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2266":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2267":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2268":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2269":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000.0001424 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2270":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000.0001464 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2271":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2272":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2273":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2274":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2275":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000.0001016002 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2276":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2277":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=699999.9998983998 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2278":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=3999999.9998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2279":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000.0000000001 +y_0=5000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2280":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=999999.9999960001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2281":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=1999999.999992 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2282":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.0001504 +y_0=2999999.999988 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2283":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2284":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2285":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2286":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2287":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2288":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2289":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2290":'+proj=sterea +lat_0=47.25 +lon_0=-63 +k=0.999912 +x_0=700000 +y_0=400000 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2291":'+proj=sterea +lat_0=47.25 +lon_0=-63 +k=0.999912 +x_0=400000 +y_0=800000 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2292":'+proj=sterea +lat_0=47.25 +lon_0=-63 +k=0.999912 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2294":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=4500000 +y_0=0 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2295":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=5500000 +y_0=0 +a=6378135 +b=6356750.304921594 +units=m +no_defs ',"EPSG:2308":'+proj=tmerc +lat_0=0 +lon_0=109 +k=0.9996 +x_0=500000 +y_0=10000000 +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +units=m +no_defs ',"EPSG:2309":'+proj=tmerc +lat_0=0 +lon_0=116 +k=0.9996 +x_0=500000 +y_0=10000000 +datum=WGS84 +units=m +no_defs ',"EPSG:2310":'+proj=tmerc +lat_0=0 +lon_0=132 +k=0.9996 +x_0=500000 +y_0=10000000 +datum=WGS84 +units=m +no_defs ',"EPSG:2311":'+proj=tmerc +lat_0=0 +lon_0=6 +k=0.9996 +x_0=500000 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:2312":'+proj=utm +zone=33 +ellps=clrk80 +units=m +no_defs ',"EPSG:2313":'+proj=utm +zone=33 +ellps=clrk80 +units=m +no_defs ',"EPSG:2314":'+proj=cass +lat_0=10.44166666666667 +lon_0=-61.33333333333334 +x_0=86501.46392052001 +y_0=65379.0134283 +a=6378293.645208759 +b=6356617.987679838 +towgs84=-61.702,284.488,472.052,0,0,0,0 +to_meter=0.3047972654 +no_defs ',"EPSG:2315":'+proj=utm +zone=19 +south +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:2316":'+proj=utm +zone=20 +south +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:2317":'+proj=lcc +lat_1=9 +lat_2=3 +lat_0=6 +lon_0=-66 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:2318":'+proj=lcc +lat_1=17 +lat_2=33 +lat_0=25.08951 +lon_0=48 +x_0=0 +y_0=0 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:2319":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2320":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2321":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2322":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2323":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2324":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2325":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:2326":'+proj=tmerc +lat_0=22.31213333333334 +lon_0=114.1785555555556 +k=1 +x_0=836694.05 +y_0=819069.8 +ellps=intl +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425 +units=m +no_defs ',"EPSG:2327":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2328":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2329":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2330":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2331":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2332":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2333":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2334":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2335":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2336":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2337":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2338":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2339":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2340":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2341":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2342":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2343":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2344":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2345":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2346":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2347":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2348":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2349":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2350":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2351":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2352":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2353":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2354":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2355":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2356":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2357":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2358":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2359":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2360":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2361":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2362":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2363":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2364":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2365":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2366":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2367":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2368":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2369":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2370":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2371":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2372":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2373":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2374":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2375":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2376":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2377":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2378":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2379":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2380":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2381":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2382":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2383":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2384":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2385":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2386":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2387":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2388":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2389":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2390":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +a=6378140 +b=6356755.288157528 +units=m +no_defs ',"EPSG:2391":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=1500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:2392":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=2500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:2393":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=3500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:2394":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=4500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:2395":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=-76,-138,67,0,0,0,0 +units=m +no_defs ',"EPSG:2396":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=-76,-138,67,0,0,0,0 +units=m +no_defs ',"EPSG:2397":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2398":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2399":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:2400":'+proj=tmerc +lat_0=0 +lon_0=15.80827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:2401":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2402":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2403":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2404":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2405":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2406":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2407":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2408":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2409":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2410":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2411":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2412":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2413":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2414":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2415":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2416":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2417":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2418":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2419":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2420":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2421":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2422":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2423":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2424":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2425":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2426":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2427":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2428":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2429":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2430":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2431":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2432":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2433":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2434":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2435":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2436":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2437":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2438":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2439":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2440":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2441":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2442":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:2443":'+proj=tmerc +lat_0=33 +lon_0=129.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2444":'+proj=tmerc +lat_0=33 +lon_0=131 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2445":'+proj=tmerc +lat_0=36 +lon_0=132.1666666666667 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2446":'+proj=tmerc +lat_0=33 +lon_0=133.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2447":'+proj=tmerc +lat_0=36 +lon_0=134.3333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2448":'+proj=tmerc +lat_0=36 +lon_0=136 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2449":'+proj=tmerc +lat_0=36 +lon_0=137.1666666666667 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2450":'+proj=tmerc +lat_0=36 +lon_0=138.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2451":'+proj=tmerc +lat_0=36 +lon_0=139.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2452":'+proj=tmerc +lat_0=40 +lon_0=140.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2453":'+proj=tmerc +lat_0=44 +lon_0=140.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2454":'+proj=tmerc +lat_0=44 +lon_0=142.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2455":'+proj=tmerc +lat_0=44 +lon_0=144.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2456":'+proj=tmerc +lat_0=26 +lon_0=142 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2457":'+proj=tmerc +lat_0=26 +lon_0=127.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2458":'+proj=tmerc +lat_0=26 +lon_0=124 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2459":'+proj=tmerc +lat_0=26 +lon_0=131 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2460":'+proj=tmerc +lat_0=20 +lon_0=136 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2461":'+proj=tmerc +lat_0=26 +lon_0=154 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2462":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:2463":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2464":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2465":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2466":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2467":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2468":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2469":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2470":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2471":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2472":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2473":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2474":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2475":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2476":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2477":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2478":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2479":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2480":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2481":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2482":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2483":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2484":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2485":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2486":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2487":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2488":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2489":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2490":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2491":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2492":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2493":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2494":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2495":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2496":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2497":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2498":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2499":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2500":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2501":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2502":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2503":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2504":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2505":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2506":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2507":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2508":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2509":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2510":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2511":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2512":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2513":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2514":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2515":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2516":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2517":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2518":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2519":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2520":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2521":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2522":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2523":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2524":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2525":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2526":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2527":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=11500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2528":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=12500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2529":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2530":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2531":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2532":'+proj=tmerc +lat_0=0 +lon_0=48 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2533":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2534":'+proj=tmerc +lat_0=0 +lon_0=54 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2535":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2536":'+proj=tmerc +lat_0=0 +lon_0=60 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2537":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2538":'+proj=tmerc +lat_0=0 +lon_0=66 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2539":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2540":'+proj=tmerc +lat_0=0 +lon_0=72 +k=1 +x_0=24500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2541":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2542":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2543":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2544":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2545":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2546":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2547":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2548":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2549":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2550":'+proj=utm +zone=50 +south +ellps=bessel +towgs84=-404.78,685.68,45.47,0,0,0,0 +units=m +no_defs ',"EPSG:2551":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2552":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2553":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2554":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2555":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2556":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2557":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2558":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2559":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2560":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2561":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2562":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2563":'+proj=tmerc +lat_0=0 +lon_0=138 +k=1 +x_0=46500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2564":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=47500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2565":'+proj=tmerc +lat_0=0 +lon_0=144 +k=1 +x_0=48500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2566":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=49500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2567":'+proj=tmerc +lat_0=0 +lon_0=150 +k=1 +x_0=50500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2568":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=51500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2569":'+proj=tmerc +lat_0=0 +lon_0=156 +k=1 +x_0=52500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2570":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=53500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2571":'+proj=tmerc +lat_0=0 +lon_0=162 +k=1 +x_0=54500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2572":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=55500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2573":'+proj=tmerc +lat_0=0 +lon_0=168 +k=1 +x_0=56500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2574":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=57500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2575":'+proj=tmerc +lat_0=0 +lon_0=174 +k=1 +x_0=58500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2576":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=59500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2577":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=60000000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2578":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=61500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2579":'+proj=tmerc +lat_0=0 +lon_0=-174 +k=1 +x_0=62500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2580":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=63500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2581":'+proj=tmerc +lat_0=0 +lon_0=-168 +k=1 +x_0=64500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2582":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2583":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2584":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2585":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2586":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2587":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2588":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2589":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2590":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2591":'+proj=tmerc +lat_0=0 +lon_0=48 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2592":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2593":'+proj=tmerc +lat_0=0 +lon_0=54 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2594":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2595":'+proj=tmerc +lat_0=0 +lon_0=60 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2596":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2597":'+proj=tmerc +lat_0=0 +lon_0=66 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2598":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2599":'+proj=tmerc +lat_0=0 +lon_0=72 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2600":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2601":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2602":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2603":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2604":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2605":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2606":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2607":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2608":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2609":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2610":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2611":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2612":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2613":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2614":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2615":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2616":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2617":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2618":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2619":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2620":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2621":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2622":'+proj=tmerc +lat_0=0 +lon_0=138 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2623":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2624":'+proj=tmerc +lat_0=0 +lon_0=144 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2625":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2626":'+proj=tmerc +lat_0=0 +lon_0=150 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2627":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2628":'+proj=tmerc +lat_0=0 +lon_0=156 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2629":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2630":'+proj=tmerc +lat_0=0 +lon_0=162 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2631":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2632":'+proj=tmerc +lat_0=0 +lon_0=168 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2633":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2634":'+proj=tmerc +lat_0=0 +lon_0=174 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2635":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2636":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2637":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2638":'+proj=tmerc +lat_0=0 +lon_0=-174 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2639":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2640":'+proj=tmerc +lat_0=0 +lon_0=-168 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2641":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2642":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2643":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2644":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2645":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=11500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2646":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=12500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2647":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2648":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2649":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2650":'+proj=tmerc +lat_0=0 +lon_0=48 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2651":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2652":'+proj=tmerc +lat_0=0 +lon_0=54 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2653":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2654":'+proj=tmerc +lat_0=0 +lon_0=60 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2655":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2656":'+proj=tmerc +lat_0=0 +lon_0=66 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2657":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2658":'+proj=tmerc +lat_0=0 +lon_0=72 +k=1 +x_0=24500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2659":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2660":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2661":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2662":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2663":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2664":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2665":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2666":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2667":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2668":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2669":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2670":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2671":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2672":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2673":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2674":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2675":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2676":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2677":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2678":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2679":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2680":'+proj=tmerc +lat_0=0 +lon_0=138 +k=1 +x_0=46500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2681":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=47500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2682":'+proj=tmerc +lat_0=0 +lon_0=144 +k=1 +x_0=48500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2683":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=49500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2684":'+proj=tmerc +lat_0=0 +lon_0=150 +k=1 +x_0=50500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2685":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=51500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2686":'+proj=tmerc +lat_0=0 +lon_0=156 +k=1 +x_0=52500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2687":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=53500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2688":'+proj=tmerc +lat_0=0 +lon_0=162 +k=1 +x_0=54500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2689":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=55500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2690":'+proj=tmerc +lat_0=0 +lon_0=168 +k=1 +x_0=56500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2691":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=57500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2692":'+proj=tmerc +lat_0=0 +lon_0=174 +k=1 +x_0=58500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2693":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=59500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2694":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=60000000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2695":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=61500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2696":'+proj=tmerc +lat_0=0 +lon_0=-174 +k=1 +x_0=62500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2697":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=63500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2698":'+proj=tmerc +lat_0=0 +lon_0=-168 +k=1 +x_0=64500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2699":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2700":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2701":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2702":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2703":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2704":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2705":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2706":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2707":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2708":'+proj=tmerc +lat_0=0 +lon_0=48 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2709":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2710":'+proj=tmerc +lat_0=0 +lon_0=54 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2711":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2712":'+proj=tmerc +lat_0=0 +lon_0=60 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2713":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2714":'+proj=tmerc +lat_0=0 +lon_0=66 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2715":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2716":'+proj=tmerc +lat_0=0 +lon_0=72 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2717":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2718":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2719":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2720":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2721":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2722":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2723":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2724":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2725":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2726":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2727":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2728":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2729":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2730":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2731":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2732":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2733":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2734":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2735":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2736":'+proj=utm +zone=36 +south +ellps=clrk66 +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586 +units=m +no_defs ',"EPSG:2737":'+proj=utm +zone=37 +south +ellps=clrk66 +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586 +units=m +no_defs ',"EPSG:2738":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2739":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2740":'+proj=tmerc +lat_0=0 +lon_0=138 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2741":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2742":'+proj=tmerc +lat_0=0 +lon_0=144 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2743":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2744":'+proj=tmerc +lat_0=0 +lon_0=150 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2745":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2746":'+proj=tmerc +lat_0=0 +lon_0=156 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2747":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2748":'+proj=tmerc +lat_0=0 +lon_0=162 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2749":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2750":'+proj=tmerc +lat_0=0 +lon_0=168 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2751":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2752":'+proj=tmerc +lat_0=0 +lon_0=174 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2753":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2754":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2755":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2756":'+proj=tmerc +lat_0=0 +lon_0=-174 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2757":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2758":'+proj=tmerc +lat_0=0 +lon_0=-168 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:2759":'+proj=tmerc +lat_0=30.5 +lon_0=-85.83333333333333 +k=0.99996 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2760":'+proj=tmerc +lat_0=30 +lon_0=-87.5 +k=0.999933333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2761":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2762":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2763":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2764":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2765":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2766":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2767":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2768":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2769":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2770":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2771":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2772":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2773":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2774":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2775":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096 +y_0=152400.3048 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2776":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2777":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2778":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2779":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2780":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2781":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2782":'+proj=tmerc +lat_0=18.83333333333333 +lon_0=-155.5 +k=0.999966667 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2783":'+proj=tmerc +lat_0=20.33333333333333 +lon_0=-156.6666666666667 +k=0.999966667 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2784":'+proj=tmerc +lat_0=21.16666666666667 +lon_0=-158 +k=0.99999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2785":'+proj=tmerc +lat_0=21.83333333333333 +lon_0=-159.5 +k=0.99999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2786":'+proj=tmerc +lat_0=21.66666666666667 +lon_0=-160.1666666666667 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2787":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2788":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2789":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2790":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2791":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2792":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=100000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2793":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2794":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2795":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2796":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2797":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2798":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2799":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2800":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2801":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2802":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2803":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2804":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2805":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2806":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2807":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=8000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2808":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=6000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2809":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=4000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2810":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2811":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2812":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2813":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2814":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2815":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.999933333 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2816":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-92.5 +k=0.999933333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2817":'+proj=tmerc +lat_0=36.16666666666666 +lon_0=-94.5 +k=0.999941177 +x_0=850000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2818":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2819":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2820":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000 +y_0=8000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2821":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2822":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2823":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2824":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2825":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2826":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2827":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2828":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2829":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2830":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2831":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2832":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2833":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2834":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2835":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2836":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2837":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2838":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2839":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2840":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=100000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2841":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2842":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2843":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2844":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2845":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2846":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=700000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2847":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2848":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2849":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2850":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2851":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2852":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2853":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2854":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2855":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2856":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2857":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2858":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2859":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2860":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2861":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2862":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2863":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=400000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2864":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2865":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2866":'+proj=lcc +lat_1=18.43333333333333 +lat_2=18.03333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2867":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2868":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2869":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2870":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2871":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2872":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2873":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2874":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2875":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2876":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2877":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2878":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2879":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096012192 +y_0=152400.3048006096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2880":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2881":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2882":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2883":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2884":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2885":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2886":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2887":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2888":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2889":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=99999.99989839978 +y_0=249364.9987299975 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2890":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=249364.9987299975 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2891":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2892":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000.0001016001 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2893":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=399999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2894":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000.0001016002 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2895":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2896":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=7999999.999968001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2897":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=5999999.999976001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2898":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=3999999.999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2899":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2900":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2901":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2902":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2903":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2904":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2905":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2906":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=249999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2907":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2908":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2909":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2910":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2911":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2912":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2913":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000.0001424 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2914":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000.0001464 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2915":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2916":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000.0001016002 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2917":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2918":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=699999.9998983998 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2919":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=3999999.9998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2920":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000.0000000001 +y_0=5000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2921":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=999999.9999960001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2922":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=1999999.999992 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2923":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.0001504 +y_0=2999999.999988 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2924":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2925":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2926":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2927":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2928":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2929":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2930":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2931":'+proj=tmerc +lat_0=0 +lon_0=13 +k=0.9996 +x_0=500000 +y_0=0 +a=6378249.2 +b=6356515 +towgs84=-106,-87,188,0,0,0,0 +units=m +no_defs ',"EPSG:2932":'+proj=tmerc +lat_0=24.45 +lon_0=51.21666666666667 +k=0.99999 +x_0=200000 +y_0=300000 +ellps=intl +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706 +units=m +no_defs ',"EPSG:2933":'+proj=utm +zone=50 +south +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +units=m +no_defs ',"EPSG:2934":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:2935":'+proj=tmerc +lat_0=0.1166666666666667 +lon_0=41.53333333333333 +k=1 +x_0=1300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2936":'+proj=tmerc +lat_0=0.1166666666666667 +lon_0=44.53333333333333 +k=1 +x_0=2300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2937":'+proj=tmerc +lat_0=0.1166666666666667 +lon_0=47.53333333333333 +k=1 +x_0=3300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2938":'+proj=tmerc +lat_0=0.1166666666666667 +lon_0=50.53333333333333 +k=1 +x_0=4300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2939":'+proj=tmerc +lat_0=0.1333333333333333 +lon_0=50.76666666666667 +k=1 +x_0=2300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2940":'+proj=tmerc +lat_0=0.1333333333333333 +lon_0=53.76666666666667 +k=1 +x_0=3300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2941":'+proj=tmerc +lat_0=0.1333333333333333 +lon_0=56.76666666666667 +k=1 +x_0=4300000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:2942":'+proj=utm +zone=28 +ellps=intl +towgs84=-499,-249,314,0,0,0,0 +units=m +no_defs ',"EPSG:2943":'+proj=utm +zone=28 +ellps=intl +towgs84=-289,-124,60,0,0,0,0 +units=m +no_defs ',"EPSG:2944":'+proj=tmerc +lat_0=0 +lon_0=-55.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2945":'+proj=tmerc +lat_0=0 +lon_0=-58.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2946":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2947":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2948":'+proj=tmerc +lat_0=0 +lon_0=-67.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2949":'+proj=tmerc +lat_0=0 +lon_0=-70.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2950":'+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2951":'+proj=tmerc +lat_0=0 +lon_0=-76.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2952":'+proj=tmerc +lat_0=0 +lon_0=-79.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2953":'+proj=sterea +lat_0=46.5 +lon_0=-66.5 +k=0.999912 +x_0=2500000 +y_0=7500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2954":'+proj=sterea +lat_0=47.25 +lon_0=-63 +k=0.999912 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2955":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2956":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2957":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2958":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2959":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2960":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2961":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2962":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2964":'+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:2965":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=99999.99989839978 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2966":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2967":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=99999.99989839978 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2968":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:2969":'+proj=utm +zone=20 +ellps=intl +towgs84=137,248,-430,0,0,0,0 +units=m +no_defs ',"EPSG:2970":'+proj=utm +zone=20 +ellps=intl +towgs84=-467,-16,-300,0,0,0,0 +units=m +no_defs ',"EPSG:2971":'+proj=utm +zone=22 +ellps=intl +towgs84=-186,230,110,0,0,0,0 +units=m +no_defs ',"EPSG:2972":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2973":'+proj=utm +zone=20 +ellps=intl +towgs84=186,482,151,0,0,0,0 +units=m +no_defs ',"EPSG:2975":'+proj=utm +zone=40 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2976":'+proj=utm +zone=6 +south +ellps=intl +towgs84=162,117,154,0,0,0,0 +units=m +no_defs ',"EPSG:2977":'+proj=utm +zone=5 +south +ellps=intl +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746 +units=m +no_defs ',"EPSG:2978":'+proj=utm +zone=7 +south +ellps=intl +towgs84=84,274,65,0,0,0,0 +units=m +no_defs ',"EPSG:2979":'+proj=utm +zone=42 +south +ellps=intl +towgs84=145,-187,103,0,0,0,0 +units=m +no_defs ',"EPSG:2980":'+proj=utm +zone=38 +south +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +units=m +no_defs ',"EPSG:2981":'+proj=utm +zone=58 +south +ellps=intl +towgs84=335.47,222.58,-230.94,0,0,0,0 +units=m +no_defs ',"EPSG:2982":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-13,-348,292,0,0,0,0 +units=m +no_defs ',"EPSG:2983":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-122.383,-188.696,103.344,3.5107,-4.9668,-5.7047,4.4798 +units=m +no_defs ',"EPSG:2984":'+proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=intl +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2987":'+proj=utm +zone=21 +ellps=clrk66 +towgs84=30,430,368,0,0,0,0 +units=m +no_defs ',"EPSG:2988":'+proj=utm +zone=1 +south +ellps=intl +towgs84=253,-132,-127,0,0,0,0 +units=m +no_defs ',"EPSG:2989":'+proj=utm +zone=20 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2990":'+proj=tmerc +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=50000 +y_0=160000 +ellps=intl +towgs84=94,-948,-1262,0,0,0,0 +units=m +no_defs ',"EPSG:2991":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2992":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=399999.9999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2993":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:2994":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=399999.9999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:2995":'+proj=utm +zone=58 +south +ellps=intl +towgs84=287.58,177.78,-135.41,0,0,0,0 +units=m +no_defs ',"EPSG:2996":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-13,-348,292,0,0,0,0 +units=m +no_defs ',"EPSG:2997":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7 +units=m +no_defs ',"EPSG:2998":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-10.18,-350.43,291.37,0,0,0,0 +units=m +no_defs ',"EPSG:2999":'+proj=utm +zone=38 +south +ellps=intl +towgs84=-963,510,-359,0,0,0,0 +units=m +no_defs ',"EPSG:3000":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +units=m +no_defs ',"EPSG:3001":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +units=m +no_defs ',"EPSG:3002":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-587.8,519.75,145.76,0,0,0,0 +units=m +no_defs ',"EPSG:3003":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=1500000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +units=m +no_defs ',"EPSG:3004":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9996 +x_0=2520000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +units=m +no_defs ',"EPSG:3005":'+proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3006":'+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3007":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3008":'+proj=tmerc +lat_0=0 +lon_0=13.5 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3009":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3010":'+proj=tmerc +lat_0=0 +lon_0=16.5 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3011":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3012":'+proj=tmerc +lat_0=0 +lon_0=14.25 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3013":'+proj=tmerc +lat_0=0 +lon_0=15.75 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3014":'+proj=tmerc +lat_0=0 +lon_0=17.25 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3015":'+proj=tmerc +lat_0=0 +lon_0=18.75 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3016":'+proj=tmerc +lat_0=0 +lon_0=20.25 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3017":'+proj=tmerc +lat_0=0 +lon_0=21.75 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3018":'+proj=tmerc +lat_0=0 +lon_0=23.25 +k=1 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3019":'+proj=tmerc +lat_0=0 +lon_0=11.30827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3020":'+proj=tmerc +lat_0=0 +lon_0=13.55827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3021":'+proj=tmerc +lat_0=0 +lon_0=15.80827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3022":'+proj=tmerc +lat_0=0 +lon_0=18.05827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3023":'+proj=tmerc +lat_0=0 +lon_0=20.30827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3024":'+proj=tmerc +lat_0=0 +lon_0=22.55827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +units=m +no_defs ',"EPSG:3025":'+proj=tmerc +lat_0=0 +lon_0=11.30827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3026":'+proj=tmerc +lat_0=0 +lon_0=13.55827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3027":'+proj=tmerc +lat_0=0 +lon_0=15.80827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3028":'+proj=tmerc +lat_0=0 +lon_0=18.05827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3029":'+proj=tmerc +lat_0=0 +lon_0=20.30827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3030":'+proj=tmerc +lat_0=0 +lon_0=22.55827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3031":'+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3032":'+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=70 +k=1 +x_0=6000000 +y_0=6000000 +datum=WGS84 +units=m +no_defs ',"EPSG:3033":'+proj=lcc +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70 +x_0=6000000 +y_0=6000000 +datum=WGS84 +units=m +no_defs ',"EPSG:3034":'+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3035":'+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3036":'+proj=utm +zone=36 +south +ellps=WGS84 +towgs84=0,0,0,-0,-0,-0,0 +units=m +no_defs ',"EPSG:3037":'+proj=utm +zone=37 +south +ellps=WGS84 +towgs84=0,0,0,-0,-0,-0,0 +units=m +no_defs ',"EPSG:3038":'+proj=utm +zone=26 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3039":'+proj=utm +zone=27 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3040":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3041":'+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3042":'+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3043":'+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3044":'+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3045":'+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3046":'+proj=utm +zone=34 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3047":'+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3048":'+proj=utm +zone=36 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3049":'+proj=utm +zone=37 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3050":'+proj=utm +zone=38 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3051":'+proj=utm +zone=39 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3054":'+proj=utm +zone=26 +ellps=intl +towgs84=-73,46,-86,0,0,0,0 +units=m +no_defs ',"EPSG:3055":'+proj=utm +zone=27 +ellps=intl +towgs84=-73,46,-86,0,0,0,0 +units=m +no_defs ',"EPSG:3056":'+proj=utm +zone=28 +ellps=intl +towgs84=-73,46,-86,0,0,0,0 +units=m +no_defs ',"EPSG:3057":'+proj=lcc +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3058":'+proj=tmerc +lat_0=0 +lon_0=-8.5 +k=1 +x_0=50000 +y_0=-7800000 +ellps=intl +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805 +units=m +no_defs ',"EPSG:3059":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=-6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3060":'+proj=utm +zone=58 +south +ellps=intl +towgs84=-11.64,-348.6,291.98,0,0,0,0 +units=m +no_defs ',"EPSG:3061":'+proj=utm +zone=28 +ellps=intl +towgs84=-502.862,-247.438,312.724,0,0,0,0 +units=m +no_defs ',"EPSG:3062":'+proj=utm +zone=26 +ellps=intl +towgs84=-204.619,140.176,55.226,0,0,0,0 +units=m +no_defs ',"EPSG:3063":'+proj=utm +zone=26 +ellps=intl +towgs84=-106.226,166.366,-37.893,0,0,0,0 +units=m +no_defs ',"EPSG:3064":'+proj=utm +zone=32 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3065":'+proj=utm +zone=33 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3066":'+proj=tmerc +lat_0=0 +lon_0=37 +k=0.9998 +x_0=500000 +y_0=-3000000 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:3067":'+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3068":'+proj=cass +lat_0=52.41864827777778 +lon_0=13.62720366666667 +x_0=40000 +y_0=10000 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:3069":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9996 +x_0=500000 +y_0=-4500000 +datum=NAD27 +units=m +no_defs ',"EPSG:3070":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9996 +x_0=520000 +y_0=-4480000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3071":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9996 +x_0=520000 +y_0=-4480000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3072":'+proj=tmerc +lat_0=43.83333333333334 +lon_0=-67.875 +k=0.99998 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3073":'+proj=tmerc +lat_0=43 +lon_0=-69.125 +k=0.99998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3074":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.375 +k=0.99998 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3075":'+proj=tmerc +lat_0=43.83333333333334 +lon_0=-67.875 +k=0.99998 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3076":'+proj=tmerc +lat_0=43 +lon_0=-69.125 +k=0.99998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3077":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.375 +k=0.99998 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3078":'+proj=omerc +lat_0=45.30916666666666 +lonc=-86 +alpha=337.25556 +k=0.9996 +x_0=2546731.496 +y_0=-4354009.816 +no_uoff +gamma=337.25556 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3079":'+proj=omerc +lat_0=45.30916666666666 +lonc=-86 +alpha=337.25556 +k=0.9996 +x_0=2546731.496 +y_0=-4354009.816 +no_uoff +gamma=337.25556 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3080":'+proj=lcc +lat_1=27.41666666666667 +lat_2=34.91666666666666 +lat_0=31.16666666666667 +lon_0=-100 +x_0=914400 +y_0=914400 +datum=NAD27 +units=ft +no_defs ',"EPSG:3081":'+proj=lcc +lat_1=27.41666666666667 +lat_2=34.91666666666666 +lat_0=31.16666666666667 +lon_0=-100 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3082":'+proj=lcc +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3083":'+proj=aea +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3084":'+proj=lcc +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3085":'+proj=aea +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3086":'+proj=aea +lat_1=24 +lat_2=31.5 +lat_0=24 +lon_0=-84 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3087":'+proj=aea +lat_1=24 +lat_2=31.5 +lat_0=24 +lon_0=-84 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3088":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3089":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3090":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3091":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3092":'+proj=utm +zone=51 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:3093":'+proj=utm +zone=52 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:3094":'+proj=utm +zone=53 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:3095":'+proj=utm +zone=54 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:3096":'+proj=utm +zone=55 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:3097":'+proj=utm +zone=51 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3098":'+proj=utm +zone=52 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3099":'+proj=utm +zone=53 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3100":'+proj=utm +zone=54 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3101":'+proj=utm +zone=55 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3102":'+proj=lcc +lat_1=-14.26666666666667 +lat_0=-14.26666666666667 +lon_0=-170 +k_0=1 +x_0=152400.3048006096 +y_0=95169.31165862332 +ellps=clrk66 +towgs84=-115,118,426,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3103":'+proj=utm +zone=28 +ellps=clrk80 +units=m +no_defs ',"EPSG:3104":'+proj=utm +zone=29 +ellps=clrk80 +units=m +no_defs ',"EPSG:3105":'+proj=utm +zone=30 +ellps=clrk80 +units=m +no_defs ',"EPSG:3106":'+proj=tmerc +lat_0=0 +lon_0=90 +k=0.9996 +x_0=500000 +y_0=0 +a=6377276.345 +b=6356075.41314024 +towgs84=283.7,735.9,261.1,0,0,0,0 +units=m +no_defs ',"EPSG:3107":'+proj=lcc +lat_1=-28 +lat_2=-36 +lat_0=-32 +lon_0=135 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3108":'+proj=tmerc +lat_0=49.5 +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000 +y_0=50000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3109":'+proj=tmerc +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001 +x_0=40000 +y_0=70000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3110":'+proj=lcc +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145 +x_0=2500000 +y_0=4500000 +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:3111":'+proj=lcc +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145 +x_0=2500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3112":'+proj=lcc +lat_1=-18 +lat_2=-36 +lat_0=0 +lon_0=134 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3113":'+proj=tmerc +lat_0=-28 +lon_0=153 +k=0.99999 +x_0=50000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3114":'+proj=tmerc +lat_0=4.596200416666666 +lon_0=-80.07750791666666 +k=1 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3115":'+proj=tmerc +lat_0=4.596200416666666 +lon_0=-77.07750791666666 +k=1 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3116":'+proj=tmerc +lat_0=4.596200416666666 +lon_0=-74.07750791666666 +k=1 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3117":'+proj=tmerc +lat_0=4.596200416666666 +lon_0=-71.07750791666666 +k=1 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3118":'+proj=tmerc +lat_0=4.596200416666666 +lon_0=-68.07750791666666 +k=1 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3119":'+proj=tmerc +lat_0=0 +lon_0=10.5 +k=0.999 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=-206.1,-174.7,-87.7,0,0,0,0 +units=m +no_defs ',"EPSG:3120":'+proj=sterea +lat_0=50.625 +lon_0=21.08333333333333 +k=0.9998 +x_0=4637000 +y_0=5467000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3121":'+proj=tmerc +lat_0=0 +lon_0=117 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +units=m +no_defs ',"EPSG:3122":'+proj=tmerc +lat_0=0 +lon_0=119 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +units=m +no_defs ',"EPSG:3123":'+proj=tmerc +lat_0=0 +lon_0=121 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +units=m +no_defs ',"EPSG:3124":'+proj=tmerc +lat_0=0 +lon_0=123 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +units=m +no_defs ',"EPSG:3125":'+proj=tmerc +lat_0=0 +lon_0=125 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06 +units=m +no_defs ',"EPSG:3126":'+proj=tmerc +lat_0=0 +lon_0=19 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3127":'+proj=tmerc +lat_0=0 +lon_0=20 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3128":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3129":'+proj=tmerc +lat_0=0 +lon_0=22 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3130":'+proj=tmerc +lat_0=0 +lon_0=23 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3131":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3132":'+proj=tmerc +lat_0=0 +lon_0=25 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3133":'+proj=tmerc +lat_0=0 +lon_0=26 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3134":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3135":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3136":'+proj=tmerc +lat_0=0 +lon_0=29 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3137":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3138":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3140":'+proj=cass +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272 +a=6378306.3696 +b=6356571.996 +towgs84=51,391,-36,0,0,0,0 +to_meter=0.201168 +no_defs ',"EPSG:3141":'+proj=utm +zone=60 +south +ellps=intl +towgs84=265.025,384.929,-194.046,0,0,0,0 +units=m +no_defs ',"EPSG:3142":'+proj=utm +zone=1 +south +ellps=intl +towgs84=265.025,384.929,-194.046,0,0,0,0 +units=m +no_defs ',"EPSG:3143":'+proj=tmerc +lat_0=-17 +lon_0=178.75 +k=0.99985 +x_0=2000000 +y_0=4000000 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:3146":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3147":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3148":'+proj=utm +zone=48 +a=6377276.345 +b=6356075.41314024 +towgs84=198,881,317,0,0,0,0 +units=m +no_defs ',"EPSG:3149":'+proj=utm +zone=49 +a=6377276.345 +b=6356075.41314024 +towgs84=198,881,317,0,0,0,0 +units=m +no_defs ',"EPSG:3150":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:3151":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:3152":'+proj=tmerc +lat_0=0 +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3153":'+proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3154":'+proj=utm +zone=7 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3155":'+proj=utm +zone=8 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3156":'+proj=utm +zone=9 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3157":'+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3158":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3159":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3160":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3161":'+proj=lcc +lat_1=44.5 +lat_2=53.5 +lat_0=0 +lon_0=-85 +x_0=930000 +y_0=6430000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3162":'+proj=lcc +lat_1=44.5 +lat_2=53.5 +lat_0=0 +lon_0=-85 +x_0=930000 +y_0=6430000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3163":'+proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3164":'+proj=utm +zone=58 +south +ellps=WGS84 +towgs84=-56.263,16.136,-22.856,0,0,0,0 +units=m +no_defs ',"EPSG:3165":'+proj=lcc +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02 +ellps=intl +towgs84=-10.18,-350.43,291.37,0,0,0,0 +units=m +no_defs ',"EPSG:3166":'+proj=lcc +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354 +ellps=intl +towgs84=-10.18,-350.43,291.37,0,0,0,0 +units=m +no_defs ',"EPSG:3167":'+proj=omerc +lat_0=4 +lonc=102.25 +alpha=323.0257905 +k=0.99984 +x_0=40000 +y_0=0 +no_uoff +gamma=323.1301023611111 +a=6377295.664 +b=6356094.667915204 +to_meter=20.116756 +no_defs ',"EPSG:3168":'+proj=omerc +lat_0=4 +lonc=102.25 +alpha=323.0257905 +k=0.99984 +x_0=804670.24 +y_0=0 +no_uoff +gamma=323.1301023611111 +a=6377295.664 +b=6356094.667915204 +units=m +no_defs ',"EPSG:3169":'+proj=utm +zone=57 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3170":'+proj=utm +zone=58 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3171":'+proj=utm +zone=59 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3172":'+proj=utm +zone=59 +south +ellps=intl +towgs84=287.58,177.78,-135.41,0,0,0,0 +units=m +no_defs ',"EPSG:3174":'+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3175":'+proj=aea +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3176":'+proj=tmerc +lat_0=0 +lon_0=106 +k=0.9996 +x_0=500000 +y_0=0 +a=6377276.345 +b=6356075.41314024 +towgs84=198,881,317,0,0,0,0 +units=m +no_defs ',"EPSG:3177":'+proj=tmerc +lat_0=0 +lon_0=17 +k=0.9965000000000001 +x_0=1000000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3178":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3179":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3180":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3181":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3182":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3183":'+proj=utm +zone=23 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3184":'+proj=utm +zone=24 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3185":'+proj=utm +zone=25 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3186":'+proj=utm +zone=26 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3187":'+proj=utm +zone=27 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3188":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3189":'+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3190":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3191":'+proj=tmerc +lat_0=0 +lon_0=11 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3192":'+proj=tmerc +lat_0=0 +lon_0=13 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3193":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3194":'+proj=tmerc +lat_0=0 +lon_0=17 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3195":'+proj=tmerc +lat_0=0 +lon_0=19 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3196":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3197":'+proj=tmerc +lat_0=0 +lon_0=23 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3198":'+proj=tmerc +lat_0=0 +lon_0=25 +k=0.99995 +x_0=200000 +y_0=0 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3199":'+proj=utm +zone=32 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3200":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=45 +k_0=0.9987864078000001 +x_0=1500000 +y_0=1166200 +ellps=clrk80 +towgs84=-241.54,-163.64,396.06,0,0,0,0 +units=m +no_defs ',"EPSG:3201":'+proj=utm +zone=33 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3202":'+proj=utm +zone=34 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3203":'+proj=utm +zone=35 +ellps=intl +towgs84=-208.406,-109.878,-2.5764,0,0,0,0 +units=m +no_defs ',"EPSG:3204":'+proj=lcc +lat_1=-60.66666666666666 +lat_2=-63.33333333333334 +lat_0=-90 +lon_0=-66 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3205":'+proj=lcc +lat_1=-60.66666666666666 +lat_2=-63.33333333333334 +lat_0=-90 +lon_0=-54 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3206":'+proj=lcc +lat_1=-60.66666666666666 +lat_2=-63.33333333333334 +lat_0=-90 +lon_0=-42 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3207":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=-174 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3208":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=-66 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3209":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=-54 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3210":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=42 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3211":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=54 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3212":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=66 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3213":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=78 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3214":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3215":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=102 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3216":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=114 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3217":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=126 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3218":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=138 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3219":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=150 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3220":'+proj=lcc +lat_1=-64.66666666666667 +lat_2=-67.33333333333333 +lat_0=-90 +lon_0=162 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3221":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-102 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3222":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3223":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-78 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3224":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-66 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3225":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-18 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3226":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=-6 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3227":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=6 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3228":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=18 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3229":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=30 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3230":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=42 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3231":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=54 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3232":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=66 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3233":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=78 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3234":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3235":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=102 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3236":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=114 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3237":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=126 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3238":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=138 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3239":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=150 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3240":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=162 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3241":'+proj=lcc +lat_1=-68.66666666666667 +lat_2=-71.33333333333333 +lat_0=-90 +lon_0=174 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3242":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-153 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3243":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-135 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3244":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-117 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3245":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-99 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3246":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-81 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3247":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-63 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3248":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-27 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3249":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=-9 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3250":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=9 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3251":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=27 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3252":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=45 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3253":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=63 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3254":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=81 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3255":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=99 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3256":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=117 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3257":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=135 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3258":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=153 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3259":'+proj=lcc +lat_1=-72.66666666666667 +lat_2=-75.33333333333333 +lat_0=-90 +lon_0=171 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3260":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-168 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3261":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-144 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3262":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-120 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3263":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-96 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3264":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-72 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3265":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-48 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3266":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=-24 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3267":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3268":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=24 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3269":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=48 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3270":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=72 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3271":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=96 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3272":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=120 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3273":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=144 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3274":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=168 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3275":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-165 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3276":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-135 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3277":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-105 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3278":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-75 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3279":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3280":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-15 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3281":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=15 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3282":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3283":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=75 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3284":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=105 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3285":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=135 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3286":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=165 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3287":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-150 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3288":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-90 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3289":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=-30 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3290":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=30 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3291":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=90 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3292":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=150 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3293":'+proj=stere +lat_0=-90 +lat_ts=-80.23861111111111 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3294":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-78 +lon_0=162 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3296":'+proj=utm +zone=5 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs ',"EPSG:3297":'+proj=utm +zone=6 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs ',"EPSG:3298":'+proj=utm +zone=7 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs ',"EPSG:3299":'+proj=utm +zone=8 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs ',"EPSG:3300":'+proj=lcc +lat_1=59.33333333333334 +lat_2=58 +lat_0=57.51755393055556 +lon_0=24 +x_0=500000 +y_0=6375000 +ellps=GRS80 +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014 +units=m +no_defs ',"EPSG:3301":'+proj=lcc +lat_1=59.33333333333334 +lat_2=58 +lat_0=57.51755393055556 +lon_0=24 +x_0=500000 +y_0=6375000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3302":'+proj=utm +zone=7 +south +ellps=intl +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311 +units=m +no_defs ',"EPSG:3303":'+proj=utm +zone=7 +south +ellps=intl +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074 +units=m +no_defs ',"EPSG:3304":'+proj=utm +zone=6 +south +ellps=intl +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741 +units=m +no_defs ',"EPSG:3305":'+proj=utm +zone=6 +south +ellps=intl +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773 +units=m +no_defs ',"EPSG:3306":'+proj=utm +zone=5 +south +ellps=intl +towgs84=217.037,86.959,23.956,0,0,0,0 +units=m +no_defs ',"EPSG:3307":'+proj=utm +zone=39 +ellps=WGS84 +towgs84=0,-0.15,0.68,0,0,0,0 +units=m +no_defs ',"EPSG:3308":'+proj=lcc +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25 +lon_0=147 +x_0=9300000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3309":'+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=NAD27 +units=m +no_defs ',"EPSG:3310":'+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3311":'+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3312":'+proj=utm +zone=21 +ellps=intl +towgs84=-186,230,110,0,0,0,0 +units=m +no_defs ',"EPSG:3313":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3314":'+proj=lcc +lat_1=-6.5 +lat_2=-11.5 +lat_0=0 +lon_0=26 +x_0=0 +y_0=0 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3315":'+proj=tmerc +lat_0=-9 +lon_0=26 +k=0.9998 +x_0=0 +y_0=0 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3316":'+proj=tmerc +lat_0=0 +lon_0=22 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3317":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3318":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3319":'+proj=tmerc +lat_0=0 +lon_0=14 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3320":'+proj=tmerc +lat_0=0 +lon_0=16 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3321":'+proj=tmerc +lat_0=0 +lon_0=18 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3322":'+proj=tmerc +lat_0=0 +lon_0=20 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3323":'+proj=tmerc +lat_0=0 +lon_0=22 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3324":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3325":'+proj=tmerc +lat_0=0 +lon_0=26 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3326":'+proj=tmerc +lat_0=0 +lon_0=28 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3327":'+proj=tmerc +lat_0=0 +lon_0=30 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +units=m +no_defs ',"EPSG:3328":'+proj=sterea +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714 +x_0=500000 +y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3329":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3330":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3331":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3332":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3333":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3334":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3335":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3336":'+proj=utm +zone=42 +south +ellps=intl +towgs84=145,-187,103,0,0,0,0 +units=m +no_defs ',"EPSG:3337":'+proj=lcc +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1 +x_0=1000000 +y_0=1000000 +ellps=clrk80 +towgs84=-770.1,158.4,-498.2,0,0,0,0 +units=m +no_defs ',"EPSG:3338":'+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3339":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +towgs84=-79.9,-158,-168.9,0,0,0,0 +units=m +no_defs ',"EPSG:3340":'+proj=tmerc +lat_0=0 +lon_0=14 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +towgs84=-79.9,-158,-168.9,0,0,0,0 +units=m +no_defs ',"EPSG:3341":'+proj=tmerc +lat_0=0 +lon_0=16 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=clrk80 +towgs84=-79.9,-158,-168.9,0,0,0,0 +units=m +no_defs ',"EPSG:3342":'+proj=utm +zone=33 +south +ellps=clrk80 +towgs84=-79.9,-158,-168.9,0,0,0,0 +units=m +no_defs ',"EPSG:3343":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3344":'+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3345":'+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3346":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3347":'+proj=lcc +lat_1=49 +lat_2=77 +lat_0=63.390675 +lon_0=-91.86666666666666 +x_0=6200000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3348":'+proj=lcc +lat_1=49 +lat_2=77 +lat_0=63.390675 +lon_0=-91.86666666666666 +x_0=6200000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3349":'+proj=merc +lon_0=-150 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3350":'+proj=tmerc +lat_0=0.1 +lon_0=21.95 +k=1 +x_0=250000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3351":'+proj=tmerc +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3352":'+proj=tmerc +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3353":'+proj=utm +zone=32 +south +ellps=intl +units=m +no_defs ',"EPSG:3354":'+proj=utm +zone=32 +south +ellps=intl +units=m +no_defs ',"EPSG:3355":'+proj=tmerc +lat_0=30 +lon_0=31 +k=1 +x_0=615000 +y_0=810000 +ellps=helmert +towgs84=-146.21,112.63,4.05,0,0,0,0 +units=m +no_defs ',"EPSG:3356":'+proj=utm +zone=17 +ellps=clrk66 +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925 +units=m +no_defs ',"EPSG:3357":'+proj=utm +zone=17 +ellps=clrk66 +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081 +units=m +no_defs ',"EPSG:3358":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3359":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.2192024385 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3360":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3361":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3362":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3363":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3364":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3365":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3366":'+proj=cass +lat_0=22.31213333333334 +lon_0=114.1785555555556 +x_0=40243.57775604237 +y_0=19069.93351512578 +a=6378293.645208759 +b=6356617.987679838 +units=m +no_defs ',"EPSG:3367":'+proj=utm +zone=28 +ellps=clrk80 +units=m +no_defs ',"EPSG:3368":'+proj=utm +zone=29 +ellps=clrk80 +units=m +no_defs ',"EPSG:3369":'+proj=utm +zone=30 +ellps=clrk80 +units=m +no_defs ',"EPSG:3370":'+proj=utm +zone=59 +datum=NAD27 +units=m +no_defs ',"EPSG:3371":'+proj=utm +zone=60 +datum=NAD27 +units=m +no_defs ',"EPSG:3372":'+proj=utm +zone=59 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3373":'+proj=utm +zone=60 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3374":'+proj=utm +zone=29 +ellps=intl +units=m +no_defs ',"EPSG:3375":'+proj=omerc +lat_0=4 +lonc=102.25 +alpha=323.0257964666666 +k=0.99984 +x_0=804671 +y_0=0 +no_uoff +gamma=323.1301023611111 +ellps=GRS80 +units=m +no_defs ',"EPSG:3376":'+proj=omerc +lat_0=4 +lonc=115 +alpha=53.31580995 +k=0.99984 +x_0=0 +y_0=0 +no_uoff +gamma=53.13010236111111 +ellps=GRS80 +units=m +no_defs ',"EPSG:3377":'+proj=cass +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32 +ellps=GRS80 +units=m +no_defs ',"EPSG:3378":'+proj=cass +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573 +ellps=GRS80 +units=m +no_defs ',"EPSG:3379":'+proj=cass +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858 +ellps=GRS80 +units=m +no_defs ',"EPSG:3380":'+proj=cass +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049 +ellps=GRS80 +units=m +no_defs ',"EPSG:3381":'+proj=cass +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895 +ellps=GRS80 +units=m +no_defs ',"EPSG:3382":'+proj=cass +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283 +ellps=GRS80 +units=m +no_defs ',"EPSG:3383":'+proj=cass +lat_0=5.964672713888889 +lon_0=100.6363711111111 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:3384":'+proj=cass +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779 +ellps=GRS80 +units=m +no_defs ',"EPSG:3385":'+proj=cass +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894 +ellps=GRS80 +units=m +no_defs ',"EPSG:3386":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:3387":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=5500000 +y_0=0 +ellps=intl +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496 +units=m +no_defs ',"EPSG:3388":'+proj=merc +lon_0=51 +lat_ts=42 +x_0=0 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3389":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=60500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:3390":'+proj=tmerc +lat_0=0 +lon_0=180 +k=1 +x_0=60500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:3391":'+proj=utm +zone=37 +ellps=clrk80 +towgs84=70.995,-335.916,262.898,0,0,0,0 +units=m +no_defs ',"EPSG:3392":'+proj=utm +zone=38 +ellps=clrk80 +towgs84=70.995,-335.916,262.898,0,0,0,0 +units=m +no_defs ',"EPSG:3393":'+proj=utm +zone=39 +ellps=clrk80 +towgs84=70.995,-335.916,262.898,0,0,0,0 +units=m +no_defs ',"EPSG:3394":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=45 +k_0=0.9987864078000001 +x_0=1500000 +y_0=1166200 +ellps=clrk80 +units=m +no_defs ',"EPSG:3395":'+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3396":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3397":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3398":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3399":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:3400":'+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3401":'+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3402":'+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3403":'+proj=tmerc +lat_0=0 +lon_0=-115 +k=0.9992 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3404":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.2192024384 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3405":'+proj=utm +zone=48 +ellps=WGS84 +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188 +units=m +no_defs ',"EPSG:3406":'+proj=utm +zone=49 +ellps=WGS84 +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188 +units=m +no_defs ',"EPSG:3407":'+proj=cass +lat_0=22.31213333333334 +lon_0=114.1785555555556 +x_0=40243.57775604237 +y_0=19069.93351512578 +a=6378293.645208759 +b=6356617.987679838 +to_meter=0.3047972654 +no_defs ',"EPSG:3408":'+proj=laea +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs ',"EPSG:3409":'+proj=laea +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs ',"EPSG:3410":'+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs ',"EPSG:3411":'+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs ',"EPSG:3412":'+proj=stere +lat_0=-90 +lat_ts=-70 +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs ',"EPSG:3413":'+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3414":'+proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs ',"EPSG:3415":'+proj=lcc +lat_1=18 +lat_2=24 +lat_0=21 +lon_0=114 +x_0=500000 +y_0=500000 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:3416":'+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5 +lon_0=13.33333333333333 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3417":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3418":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3419":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3420":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3421":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000.00001016 +y_0=8000000.000010163 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3422":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000.00001016 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3423":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000.0000101599 +y_0=3999999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3424":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3425":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3426":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3427":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3428":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3429":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000.00001016 +y_0=8000000.000010163 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3430":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000.00001016 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3431":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000.0000101599 +y_0=3999999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3432":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3433":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3434":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3435":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3436":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=699999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3437":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3438":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=99999.99998983997 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3439":'+proj=utm +zone=39 +ellps=clrk80 +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101 +units=m +no_defs ',"EPSG:3440":'+proj=utm +zone=40 +ellps=clrk80 +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101 +units=m +no_defs ',"EPSG:3441":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3442":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3443":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3444":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=699999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3445":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3446":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=99999.99998983997 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3447":'+proj=lcc +lat_1=49.83333333333334 +lat_2=51.16666666666666 +lat_0=50.797815 +lon_0=4.359215833333333 +x_0=150328 +y_0=166262 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3448":'+proj=lcc +lat_1=18 +lat_0=18 +lon_0=-77 +k_0=1 +x_0=750000 +y_0=650000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3449":'+proj=utm +zone=17 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3450":'+proj=utm +zone=18 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3451":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3452":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3453":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.5 +lon_0=-91.33333333333333 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3454":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3455":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3456":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3457":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3458":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3459":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3460":'+proj=tmerc +lat_0=-17 +lon_0=178.75 +k=0.99985 +x_0=2000000 +y_0=4000000 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:3461":'+proj=utm +zone=28 +a=6378249.2 +b=6356515 +towgs84=-83,37,124,0,0,0,0 +units=m +no_defs ',"EPSG:3462":'+proj=utm +zone=29 +a=6378249.2 +b=6356515 +towgs84=-83,37,124,0,0,0,0 +units=m +no_defs ',"EPSG:3463":'+proj=tmerc +lat_0=43.5 +lon_0=-69.125 +k=0.99998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3464":'+proj=tmerc +lat_0=43.5 +lon_0=-69.125 +k=0.99998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3465":'+proj=tmerc +lat_0=30.5 +lon_0=-85.83333333333333 +k=0.99996 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3466":'+proj=tmerc +lat_0=30 +lon_0=-87.5 +k=0.999933333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3467":'+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3468":'+proj=omerc +lat_0=57 +lonc=-133.6666666666667 +alpha=323.1301023611111 +k=0.9999 +x_0=5000000 +y_0=-5000000 +no_uoff +gamma=323.1301023611111 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3469":'+proj=tmerc +lat_0=54 +lon_0=-142 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3470":'+proj=tmerc +lat_0=54 +lon_0=-146 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3471":'+proj=tmerc +lat_0=54 +lon_0=-150 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3472":'+proj=tmerc +lat_0=54 +lon_0=-154 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3473":'+proj=tmerc +lat_0=54 +lon_0=-158 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3474":'+proj=tmerc +lat_0=54 +lon_0=-162 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3475":'+proj=tmerc +lat_0=54 +lon_0=-166 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3476":'+proj=tmerc +lat_0=54 +lon_0=-170 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3477":'+proj=lcc +lat_1=53.83333333333334 +lat_2=51.83333333333334 +lat_0=51 +lon_0=-176 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3478":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3479":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3480":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3481":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3482":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3483":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3484":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3485":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3486":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3487":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3488":'+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3489":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3490":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3491":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3492":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3493":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3494":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3495":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3496":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3497":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3498":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3499":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3500":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000.0001016 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3501":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3502":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3503":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3504":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3505":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3506":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8288036576 +y_0=304800.6096012192 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3507":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096 +y_0=152400.3048 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3508":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096012192 +y_0=152400.3048006096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3509":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3510":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3511":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3512":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3513":'+proj=aea +lat_1=24 +lat_2=31.5 +lat_0=24 +lon_0=-84 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3514":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3515":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3516":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3517":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3518":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3519":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3520":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3521":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3522":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3523":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3524":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3525":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000.0001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3526":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3527":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3528":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3529":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3530":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3531":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=699999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3532":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=100000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3533":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=99999.99989839978 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3534":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3535":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=249999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3536":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3537":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3538":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3539":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3540":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3541":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=399999.99998984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3542":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3543":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=399999.99998984 +y_0=399999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3544":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3545":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3546":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3547":'+proj=lcc +lat_1=37.08333333333334 +lat_2=38.66666666666666 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=1500000 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3548":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3549":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000.0001016001 +y_0=500000.0001016001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3550":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3551":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3552":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3553":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=999999.9999898402 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3554":'+proj=tmerc +lat_0=43.5 +lon_0=-69.125 +k=0.99998 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3555":'+proj=tmerc +lat_0=43.83333333333334 +lon_0=-67.875 +k=0.99998 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3556":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.375 +k=0.99998 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3557":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3558":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3559":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3560":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3561":'+proj=tmerc +lat_0=18.83333333333333 +lon_0=-155.5 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3562":'+proj=tmerc +lat_0=20.33333333333333 +lon_0=-156.6666666666667 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3563":'+proj=tmerc +lat_0=21.16666666666667 +lon_0=-158 +k=0.99999 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3564":'+proj=tmerc +lat_0=21.83333333333333 +lon_0=-159.5 +k=0.99999 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3565":'+proj=tmerc +lat_0=21.66666666666667 +lon_0=-160.1666666666667 +k=1 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=61,-285,-181,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3566":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=2000000.00001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3567":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.00001016 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3568":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3569":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=2000000.00001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3570":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.00001016 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3571":'+proj=laea +lat_0=90 +lon_0=180 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3572":'+proj=laea +lat_0=90 +lon_0=-150 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3573":'+proj=laea +lat_0=90 +lon_0=-100 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3574":'+proj=laea +lat_0=90 +lon_0=-40 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3575":'+proj=laea +lat_0=90 +lon_0=10 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3576":'+proj=laea +lat_0=90 +lon_0=90 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3577":'+proj=aea +lat_1=-18 +lat_2=-36 +lat_0=0 +lon_0=132 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3578":'+proj=aea +lat_1=61.66666666666666 +lat_2=68 +lat_0=59 +lon_0=-132.5 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3579":'+proj=aea +lat_1=61.66666666666666 +lat_2=68 +lat_0=59 +lon_0=-132.5 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3580":'+proj=lcc +lat_1=62 +lat_2=70 +lat_0=0 +lon_0=-112 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3581":'+proj=lcc +lat_1=62 +lat_2=70 +lat_0=0 +lon_0=-112 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3582":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=399999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3583":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3584":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3585":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3586":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000.0001016002 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3587":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=6000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3588":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=5999999.999976001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3589":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=8000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3590":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=7999999.999968001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3591":'+proj=omerc +lat_0=45.30916666666666 +lonc=-86 +alpha=337.25556 +k=0.9996 +x_0=2546731.496 +y_0=-4354009.816 +no_uoff +gamma=337.25556 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3592":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=4000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3593":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=3999999.999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3594":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3595":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3596":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3597":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3598":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3599":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3600":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=699999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3601":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-92.5 +k=0.999933333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3602":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.999933333 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3603":'+proj=tmerc +lat_0=36.16666666666666 +lon_0=-94.5 +k=0.999941177 +x_0=850000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3604":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3605":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3606":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3607":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3608":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000.00001016 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3609":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000 +y_0=8000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3610":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000.00001016 +y_0=8000000.000010163 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3611":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3612":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000.0000101599 +y_0=3999999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3613":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3614":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3615":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3616":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3617":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3618":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3619":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3620":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3621":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3622":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3623":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3624":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=249999.9998983998 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3625":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3626":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3627":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3628":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3629":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3630":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3631":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3632":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.2192024384 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3633":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3634":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3635":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3636":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=599999.9999976 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3637":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3638":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3639":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3640":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3641":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3642":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3643":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3644":'+proj=lcc +lat_1=43 +lat_2=45.5 +lat_0=41.75 +lon_0=-120.5 +x_0=399999.9999984 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3645":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3646":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000.0001424 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3647":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3648":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000.0001464 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3649":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3650":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3651":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3652":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3653":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=100000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3654":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=99999.99998983997 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3655":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3656":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3657":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3658":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3659":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3660":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3661":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3662":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3663":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=700000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3664":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=699999.9998983998 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3665":'+proj=aea +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3666":'+proj=lcc +lat_1=27.5 +lat_2=35 +lat_0=18 +lon_0=-100 +x_0=1500000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3667":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3668":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000.0001016002 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3669":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3670":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3671":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3672":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000.0000000001 +y_0=5000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3673":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3674":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=3999999.9998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3675":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3676":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=1999999.999992 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3677":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=2000000.00001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3678":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3679":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.0001504 +y_0=999999.9999960001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3680":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000.00001016 +y_0=999999.9999898402 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3681":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3682":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.0001504 +y_0=2999999.999988 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:3683":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000.00001016 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3684":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3685":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3686":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=2000000.0001016 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3687":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3688":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000.0001016 +y_0=999999.9998983998 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3689":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3690":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3691":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3692":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000.0001016001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3693":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3694":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3695":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3696":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3697":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3698":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3699":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3700":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3701":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9996 +x_0=520000 +y_0=-4480000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3702":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3703":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=400000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3704":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3705":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3706":'+proj=utm +zone=59 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3707":'+proj=utm +zone=60 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3708":'+proj=utm +zone=1 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3709":'+proj=utm +zone=2 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3710":'+proj=utm +zone=3 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3711":'+proj=utm +zone=4 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3712":'+proj=utm +zone=5 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3713":'+proj=utm +zone=6 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3714":'+proj=utm +zone=7 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3715":'+proj=utm +zone=8 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3716":'+proj=utm +zone=9 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3717":'+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3718":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3719":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3720":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3721":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3722":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3723":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3724":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3725":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3726":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3727":'+proj=tmerc +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000 +y_0=50000 +ellps=intl +towgs84=94,-948,-1262,0,0,0,0 +units=m +no_defs ',"EPSG:3728":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3729":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3730":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3731":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=399999.99998984 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3732":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3733":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3734":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3735":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3736":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3737":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=399999.99998984 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3738":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3739":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3740":'+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3741":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3742":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3743":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3744":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3745":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3746":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3747":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3748":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3749":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3750":'+proj=utm +zone=4 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3751":'+proj=utm +zone=5 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3752":'+proj=merc +lon_0=100 +lat_ts=-41 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3753":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3754":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3755":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3756":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=399999.99998984 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3757":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3758":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3759":'+proj=tmerc +lat_0=21.16666666666667 +lon_0=-158 +k=0.99999 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3760":'+proj=tmerc +lat_0=21.16666666666667 +lon_0=-158 +k=0.99999 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3761":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3762":'+proj=lcc +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3763":'+proj=tmerc +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3764":'+proj=tmerc +lat_0=-44 +lon_0=-176.5 +k=1 +x_0=400000 +y_0=800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3765":'+proj=tmerc +lat_0=0 +lon_0=16.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3766":'+proj=lcc +lat_1=45.91666666666666 +lat_2=43.08333333333334 +lat_0=0 +lon_0=16.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3767":'+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3768":'+proj=utm +zone=34 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3769":'+proj=utm +zone=20 +ellps=clrk66 +towgs84=-73,213,296,0,0,0,0 +units=m +no_defs ',"EPSG:3770":'+proj=tmerc +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000 +y_0=100000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3771":'+proj=tmerc +lat_0=0 +lon_0=-111 +k=0.9999 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3772":'+proj=tmerc +lat_0=0 +lon_0=-114 +k=0.9999 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3773":'+proj=tmerc +lat_0=0 +lon_0=-117 +k=0.9999 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3774":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3775":'+proj=tmerc +lat_0=0 +lon_0=-111 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3776":'+proj=tmerc +lat_0=0 +lon_0=-114 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3777":'+proj=tmerc +lat_0=0 +lon_0=-117 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3778":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3779":'+proj=tmerc +lat_0=0 +lon_0=-111 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3780":'+proj=tmerc +lat_0=0 +lon_0=-114 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3781":'+proj=tmerc +lat_0=0 +lon_0=-117 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3782":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3783":'+proj=tmerc +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3784":'+proj=utm +zone=9 +south +ellps=intl +towgs84=185,165,42,0,0,0,0 +units=m +no_defs ',"EPSG:3785":'+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs',"EPSG:3786":'+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6371007 +b=6371007 +units=m +no_defs ',"EPSG:3787":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=500000 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:3788":'+proj=tmerc +lat_0=0 +lon_0=166 +k=1 +x_0=3500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3789":'+proj=tmerc +lat_0=0 +lon_0=169 +k=1 +x_0=3500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3790":'+proj=tmerc +lat_0=0 +lon_0=179 +k=1 +x_0=3500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3791":'+proj=tmerc +lat_0=0 +lon_0=-178 +k=1 +x_0=3500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3793":'+proj=tmerc +lat_0=0 +lon_0=-176.5 +k=1 +x_0=3500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3794":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=500000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3795":'+proj=lcc +lat_1=23 +lat_2=21.7 +lat_0=22.35 +lon_0=-81 +x_0=500000 +y_0=280296.016 +datum=NAD27 +units=m +no_defs ',"EPSG:3796":'+proj=lcc +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333 +x_0=500000 +y_0=229126.939 +datum=NAD27 +units=m +no_defs ',"EPSG:3797":'+proj=lcc +lat_1=50 +lat_2=46 +lat_0=44 +lon_0=-70 +x_0=800000 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3798":'+proj=lcc +lat_1=50 +lat_2=46 +lat_0=44 +lon_0=-70 +x_0=800000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3799":'+proj=lcc +lat_1=50 +lat_2=46 +lat_0=44 +lon_0=-70 +x_0=800000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3800":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:3801":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3802":'+proj=tmerc +lat_0=0 +lon_0=-120 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3812":'+proj=lcc +lat_1=49.83333333333334 +lat_2=51.16666666666666 +lat_0=50.797815 +lon_0=4.359215833333333 +x_0=649328 +y_0=665262 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3814":'+proj=tmerc +lat_0=32.5 +lon_0=-89.75 +k=0.9998335 +x_0=500000 +y_0=1300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3815":'+proj=tmerc +lat_0=32.5 +lon_0=-89.75 +k=0.9998335 +x_0=500000 +y_0=1300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3816":'+proj=tmerc +lat_0=32.5 +lon_0=-89.75 +k=0.9998335 +x_0=500000 +y_0=1300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3825":'+proj=tmerc +lat_0=0 +lon_0=119 +k=0.9999 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3826":'+proj=tmerc +lat_0=0 +lon_0=121 +k=0.9999 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3827":'+proj=tmerc +lat_0=0 +lon_0=119 +k=0.9999 +x_0=250000 +y_0=0 +ellps=aust_SA +units=m +no_defs ',"EPSG:3828":'+proj=tmerc +lat_0=0 +lon_0=121 +k=0.9999 +x_0=250000 +y_0=0 +ellps=aust_SA +units=m +no_defs ',"EPSG:3829":'+proj=utm +zone=51 +ellps=intl +towgs84=-637,-549,-203,0,0,0,0 +units=m +no_defs ',"EPSG:3832":'+proj=merc +lon_0=150 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3833":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=2500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3834":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=2500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3835":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3836":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3837":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3838":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3839":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3840":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3841":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3842":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3843":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:3844":'+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000 +y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:3845":'+proj=tmerc +lat_0=0 +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3846":'+proj=tmerc +lat_0=0 +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3847":'+proj=tmerc +lat_0=0 +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3848":'+proj=tmerc +lat_0=0 +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3849":'+proj=tmerc +lat_0=0 +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3850":'+proj=tmerc +lat_0=0 +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3851":'+proj=lcc +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173 +x_0=3000000 +y_0=7000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3852":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-90 +lon_0=157 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3854":'+proj=tmerc +lat_0=0 +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',//"EPSG:3857":'+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs',
            "EPSG:3873":'+proj=tmerc +lat_0=0 +lon_0=19 +k=1 +x_0=19500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3874":'+proj=tmerc +lat_0=0 +lon_0=20 +k=1 +x_0=20500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3875":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=21500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3876":'+proj=tmerc +lat_0=0 +lon_0=22 +k=1 +x_0=22500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3877":'+proj=tmerc +lat_0=0 +lon_0=23 +k=1 +x_0=23500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3878":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=24500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3879":'+proj=tmerc +lat_0=0 +lon_0=25 +k=1 +x_0=25500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3880":'+proj=tmerc +lat_0=0 +lon_0=26 +k=1 +x_0=26500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3881":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=27500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3882":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=28500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3883":'+proj=tmerc +lat_0=0 +lon_0=29 +k=1 +x_0=29500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3884":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=30500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3885":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=31500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3890":'+proj=utm +zone=37 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3891":'+proj=utm +zone=38 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3892":'+proj=utm +zone=39 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3893":'+proj=tmerc +lat_0=29.02626833333333 +lon_0=46.5 +k=0.9994 +x_0=800000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:3907":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3908":'+proj=tmerc +lat_0=0 +lon_0=18 +k=0.9999 +x_0=6500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3909":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3910":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9999 +x_0=8500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3911":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=500000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3912":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=500000 +y_0=-5000000 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +units=m +no_defs ',"EPSG:3920":'+proj=utm +zone=20 +ellps=clrk66 +towgs84=11,72,-101,0,0,0,0 +units=m +no_defs ',"EPSG:3942":'+proj=lcc +lat_1=41.25 +lat_2=42.75 +lat_0=42 +lon_0=3 +x_0=1700000 +y_0=1200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3943":'+proj=lcc +lat_1=42.25 +lat_2=43.75 +lat_0=43 +lon_0=3 +x_0=1700000 +y_0=2200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3944":'+proj=lcc +lat_1=43.25 +lat_2=44.75 +lat_0=44 +lon_0=3 +x_0=1700000 +y_0=3200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3945":'+proj=lcc +lat_1=44.25 +lat_2=45.75 +lat_0=45 +lon_0=3 +x_0=1700000 +y_0=4200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3946":'+proj=lcc +lat_1=45.25 +lat_2=46.75 +lat_0=46 +lon_0=3 +x_0=1700000 +y_0=5200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3947":'+proj=lcc +lat_1=46.25 +lat_2=47.75 +lat_0=47 +lon_0=3 +x_0=1700000 +y_0=6200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3948":'+proj=lcc +lat_1=47.25 +lat_2=48.75 +lat_0=48 +lon_0=3 +x_0=1700000 +y_0=7200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3949":'+proj=lcc +lat_1=48.25 +lat_2=49.75 +lat_0=49 +lon_0=3 +x_0=1700000 +y_0=8200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3950":'+proj=lcc +lat_1=49.25 +lat_2=50.75 +lat_0=50 +lon_0=3 +x_0=1700000 +y_0=9200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3968":'+proj=lcc +lat_1=37 +lat_2=39.5 +lat_0=36 +lon_0=-79.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3969":'+proj=lcc +lat_1=37 +lat_2=39.5 +lat_0=36 +lon_0=-79.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3970":'+proj=lcc +lat_1=37 +lat_2=39.5 +lat_0=36 +lon_0=-79.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3973":'+proj=laea +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3974":'+proj=laea +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3975":'+proj=cea +lon_0=0 +lat_ts=30 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3976":'+proj=stere +lat_0=-90 +lat_ts=-70 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3978":'+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3979":'+proj=lcc +lat_1=49 +lat_2=77 +lat_0=49 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:3985":'+proj=lcc +lat_1=-6.5 +lat_2=-11.5 +lat_0=9 +lon_0=26 +x_0=500000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3986":'+proj=tmerc +lat_0=-9 +lon_0=30 +k=1 +x_0=200000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3987":'+proj=tmerc +lat_0=-9 +lon_0=28 +k=1 +x_0=200000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3988":'+proj=tmerc +lat_0=-9 +lon_0=26 +k=1 +x_0=200000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3989":'+proj=tmerc +lat_0=-9 +lon_0=24 +k=1 +x_0=200000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:3991":'+proj=lcc +lat_1=18.43333333333333 +lat_2=18.03333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=152400.3048006096 +y_0=0 +ellps=clrk66 +towgs84=11,72,-101,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3992":'+proj=lcc +lat_1=18.43333333333333 +lat_2=18.03333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=152400.3048006096 +y_0=30480.06096012192 +ellps=clrk66 +towgs84=11,72,-101,0,0,0,0 +units=us-ft +no_defs ',"EPSG:3994":'+proj=merc +lon_0=100 +lat_ts=-41 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3995":'+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3996":'+proj=stere +lat_0=90 +lat_ts=75 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:3997":'+proj=tmerc +lat_0=0 +lon_0=55.33333333333334 +k=1 +x_0=500000 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:4026":'+proj=tmerc +lat_0=0 +lon_0=28.4 +k=0.9999400000000001 +x_0=200000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4037":'+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs ',"EPSG:4038":'+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs ',"EPSG:4048":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4049":'+proj=tmerc +lat_0=0 +lon_0=14 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4050":'+proj=tmerc +lat_0=0 +lon_0=16 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4051":'+proj=tmerc +lat_0=0 +lon_0=18 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4056":'+proj=tmerc +lat_0=0 +lon_0=20 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4057":'+proj=tmerc +lat_0=0 +lon_0=22 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4058":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4059":'+proj=tmerc +lat_0=0 +lon_0=26 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4060":'+proj=tmerc +lat_0=0 +lon_0=28 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4061":'+proj=utm +zone=33 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4062":'+proj=utm +zone=34 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4063":'+proj=utm +zone=35 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4071":'+proj=utm +zone=23 +south +ellps=intl +towgs84=-134,229,-29,0,0,0,0 +units=m +no_defs ',"EPSG:4082":'+proj=utm +zone=27 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4083":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4087":'+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:4088":'+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +a=6371007 +b=6371007 +units=m +no_defs ',"EPSG:4093":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.99998 +x_0=200000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4094":'+proj=tmerc +lat_0=0 +lon_0=10 +k=0.99998 +x_0=400000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4095":'+proj=tmerc +lat_0=0 +lon_0=11.75 +k=0.99998 +x_0=600000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4096":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=800000 +y_0=-5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4217":'+proj=tmerc +lat_0=0 +lon_0=171 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4399":'+proj=tmerc +lat_0=0 +lon_0=171 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4400":'+proj=tmerc +lat_0=0 +lon_0=177 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4401":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4402":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4403":'+proj=tmerc +lat_0=0 +lon_0=-165 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4404":'+proj=tmerc +lat_0=0 +lon_0=-159 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4405":'+proj=tmerc +lat_0=0 +lon_0=-153 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4406":'+proj=tmerc +lat_0=0 +lon_0=-147 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4407":'+proj=tmerc +lat_0=0 +lon_0=-141 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4408":'+proj=tmerc +lat_0=0 +lon_0=-135 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4409":'+proj=tmerc +lat_0=0 +lon_0=-129 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4410":'+proj=tmerc +lat_0=0 +lon_0=-123 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4411":'+proj=tmerc +lat_0=0 +lon_0=-117 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4412":'+proj=tmerc +lat_0=0 +lon_0=-111 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4413":'+proj=tmerc +lat_0=0 +lon_0=-105 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4414":'+proj=tmerc +lat_0=13.5 +lon_0=144.75 +k=1 +x_0=100000 +y_0=200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4415":'+proj=lcc +lat_1=-6.5 +lat_2=-11.5 +lat_0=-9 +lon_0=26 +x_0=500000 +y_0=500000 +ellps=clrk66 +towgs84=-103.746,-9.614,-255.95,0,0,0,0 +units=m +no_defs ',"EPSG:4417":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:4418":'+proj=tmerc +lat_0=0 +lon_0=-75 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4419":'+proj=tmerc +lat_0=0 +lon_0=-69 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4420":'+proj=tmerc +lat_0=0 +lon_0=177 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4421":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4422":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4423":'+proj=tmerc +lat_0=0 +lon_0=-165 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4424":'+proj=tmerc +lat_0=0 +lon_0=-159 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4425":'+proj=tmerc +lat_0=0 +lon_0=-153 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4426":'+proj=tmerc +lat_0=0 +lon_0=-147 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4427":'+proj=tmerc +lat_0=0 +lon_0=-141 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4428":'+proj=tmerc +lat_0=0 +lon_0=-135 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4429":'+proj=tmerc +lat_0=0 +lon_0=-129 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4430":'+proj=tmerc +lat_0=0 +lon_0=-123 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4431":'+proj=tmerc +lat_0=0 +lon_0=-117 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4432":'+proj=tmerc +lat_0=0 +lon_0=-111 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4433":'+proj=tmerc +lat_0=0 +lon_0=-105 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4434":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:4437":'+proj=lcc +lat_1=18.43333333333333 +lat_2=18.03333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4438":'+proj=tmerc +lat_0=0 +lon_0=-75 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4439":'+proj=tmerc +lat_0=0 +lon_0=-69 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4455":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4456":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.5 +lon_0=-74 +x_0=609601.2192024384 +y_0=30480.06096012192 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:4457":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:4462":'+proj=lcc +lat_1=-18 +lat_2=-36 +lat_0=-27 +lon_0=132 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:4467":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4471":'+proj=utm +zone=38 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4474":'+proj=utm +zone=38 +south +ellps=intl +towgs84=-382,-59,-262,0,0,0,0 +units=m +no_defs ',"EPSG:4484":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4485":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4486":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4487":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4488":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4489":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4491":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4492":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4493":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4494":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4495":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4496":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4497":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4498":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4499":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4500":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4501":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4502":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4503":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4504":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4505":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4506":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4507":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4508":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4509":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4510":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4511":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4512":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4513":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4514":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4515":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4516":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4517":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4518":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4519":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4520":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4521":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4522":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4523":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4524":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4525":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4526":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4527":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4528":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4529":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4530":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4531":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4532":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4533":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4534":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4535":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4536":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4537":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4538":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4539":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4540":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4541":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4542":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4543":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4544":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4545":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4546":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4547":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4548":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4549":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4550":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4551":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4552":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4553":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4554":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +units=m +no_defs ',"EPSG:4559":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4568":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4569":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4570":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4571":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4572":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4573":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4574":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4575":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4576":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4577":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4578":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4579":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4580":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4581":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4582":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4583":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4584":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4585":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4586":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4587":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4588":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4589":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4647":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=32500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4652":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4653":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4654":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4655":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4656":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4766":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4767":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4768":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4769":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=33500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4770":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=34500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4771":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=35500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4772":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=36500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4773":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=37500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4774":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=38500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4775":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=39500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4776":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=40500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4777":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=41500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4778":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=42500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4779":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=43500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4780":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=44500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4781":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=45500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4782":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4783":'+proj=tmerc +lat_0=0 +lon_0=78 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4784":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4785":'+proj=tmerc +lat_0=0 +lon_0=84 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4786":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4787":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4788":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4789":'+proj=tmerc +lat_0=0 +lon_0=96 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4790":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4791":'+proj=tmerc +lat_0=0 +lon_0=102 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4792":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4793":'+proj=tmerc +lat_0=0 +lon_0=108 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4794":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4795":'+proj=tmerc +lat_0=0 +lon_0=114 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4796":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4797":'+proj=tmerc +lat_0=0 +lon_0=120 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4798":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4799":'+proj=tmerc +lat_0=0 +lon_0=126 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4800":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4812":'+proj=tmerc +lat_0=0 +lon_0=132 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4822":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +units=m +no_defs ',"EPSG:4826":'+proj=lcc +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202 +datum=WGS84 +units=m +no_defs ',"EPSG:4839":'+proj=lcc +lat_1=48.66666666666666 +lat_2=53.66666666666666 +lat_0=51 +lon_0=10.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4855":'+proj=tmerc +lat_0=0 +lon_0=5.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4856":'+proj=tmerc +lat_0=0 +lon_0=6.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4857":'+proj=tmerc +lat_0=0 +lon_0=7.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4858":'+proj=tmerc +lat_0=0 +lon_0=8.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4859":'+proj=tmerc +lat_0=0 +lon_0=9.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4860":'+proj=tmerc +lat_0=0 +lon_0=10.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4861":'+proj=tmerc +lat_0=0 +lon_0=11.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4862":'+proj=tmerc +lat_0=0 +lon_0=12.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4863":'+proj=tmerc +lat_0=0 +lon_0=13.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4864":'+proj=tmerc +lat_0=0 +lon_0=14.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4865":'+proj=tmerc +lat_0=0 +lon_0=15.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4866":'+proj=tmerc +lat_0=0 +lon_0=16.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4867":'+proj=tmerc +lat_0=0 +lon_0=17.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4868":'+proj=tmerc +lat_0=0 +lon_0=18.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4869":'+proj=tmerc +lat_0=0 +lon_0=19.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4870":'+proj=tmerc +lat_0=0 +lon_0=20.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4871":'+proj=tmerc +lat_0=0 +lon_0=21.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4872":'+proj=tmerc +lat_0=0 +lon_0=22.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4873":'+proj=tmerc +lat_0=0 +lon_0=23.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4874":'+proj=tmerc +lat_0=0 +lon_0=24.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4875":'+proj=tmerc +lat_0=0 +lon_0=25.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4876":'+proj=tmerc +lat_0=0 +lon_0=26.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4877":'+proj=tmerc +lat_0=0 +lon_0=27.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4878":'+proj=tmerc +lat_0=0 +lon_0=28.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4879":'+proj=tmerc +lat_0=0 +lon_0=29.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:4880":'+proj=tmerc +lat_0=0 +lon_0=30.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5014":'+proj=utm +zone=25 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5015":'+proj=utm +zone=26 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5016":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5018":'+proj=tmerc +lat_0=39.66666666666666 +lon_0=-8.131906111111112 +k=1 +x_0=0 +y_0=0 +ellps=intl +towgs84=-304.046,-60.576,103.64,0,0,0,0 +units=m +no_defs ',"EPSG:5041":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5042":'+proj=stere +lat_0=-90 +lat_ts=-90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5048":'+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5069":'+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:5070":'+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5071":'+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5072":'+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5105":'+proj=tmerc +lat_0=58 +lon_0=5.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5106":'+proj=tmerc +lat_0=58 +lon_0=6.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5107":'+proj=tmerc +lat_0=58 +lon_0=7.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5108":'+proj=tmerc +lat_0=58 +lon_0=8.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5109":'+proj=tmerc +lat_0=58 +lon_0=9.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5110":'+proj=tmerc +lat_0=58 +lon_0=10.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5111":'+proj=tmerc +lat_0=58 +lon_0=11.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5112":'+proj=tmerc +lat_0=58 +lon_0=12.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5113":'+proj=tmerc +lat_0=58 +lon_0=13.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5114":'+proj=tmerc +lat_0=58 +lon_0=14.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5115":'+proj=tmerc +lat_0=58 +lon_0=15.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5116":'+proj=tmerc +lat_0=58 +lon_0=16.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5117":'+proj=tmerc +lat_0=58 +lon_0=17.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5118":'+proj=tmerc +lat_0=58 +lon_0=18.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5119":'+proj=tmerc +lat_0=58 +lon_0=19.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5120":'+proj=tmerc +lat_0=58 +lon_0=20.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5121":'+proj=tmerc +lat_0=58 +lon_0=21.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5122":'+proj=tmerc +lat_0=58 +lon_0=22.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5123":'+proj=tmerc +lat_0=58 +lon_0=23.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5124":'+proj=tmerc +lat_0=58 +lon_0=24.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5125":'+proj=tmerc +lat_0=58 +lon_0=25.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5126":'+proj=tmerc +lat_0=58 +lon_0=26.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5127":'+proj=tmerc +lat_0=58 +lon_0=27.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5128":'+proj=tmerc +lat_0=58 +lon_0=28.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5129":'+proj=tmerc +lat_0=58 +lon_0=29.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5130":'+proj=tmerc +lat_0=58 +lon_0=30.5 +k=1 +x_0=100000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5167":'+proj=tmerc +lat_0=38 +lon_0=131 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5168":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=550000 +ellps=bessel +units=m +no_defs ',"EPSG:5169":'+proj=tmerc +lat_0=38 +lon_0=125 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5170":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5171":'+proj=tmerc +lat_0=38 +lon_0=129 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5172":'+proj=tmerc +lat_0=38 +lon_0=131 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5173":'+proj=tmerc +lat_0=38 +lon_0=125.0028902777778 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5174":'+proj=tmerc +lat_0=38 +lon_0=127.0028902777778 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5175":'+proj=tmerc +lat_0=38 +lon_0=127.0028902777778 +k=1 +x_0=200000 +y_0=550000 +ellps=bessel +units=m +no_defs ',"EPSG:5176":'+proj=tmerc +lat_0=38 +lon_0=129.0028902777778 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5177":'+proj=tmerc +lat_0=38 +lon_0=131.0028902777778 +k=1 +x_0=200000 +y_0=500000 +ellps=bessel +units=m +no_defs ',"EPSG:5178":'+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=bessel +units=m +no_defs ',"EPSG:5179":'+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5180":'+proj=tmerc +lat_0=38 +lon_0=125 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5181":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5182":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=550000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5183":'+proj=tmerc +lat_0=38 +lon_0=129 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5184":'+proj=tmerc +lat_0=38 +lon_0=131 +k=1 +x_0=200000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5185":'+proj=tmerc +lat_0=38 +lon_0=125 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5186":'+proj=tmerc +lat_0=38 +lon_0=127 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5187":'+proj=tmerc +lat_0=38 +lon_0=129 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5188":'+proj=tmerc +lat_0=38 +lon_0=131 +k=1 +x_0=200000 +y_0=600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5221":'+proj=krovak +lat_0=49.5 +lon_0=42.5 +alpha=30.28813972222222 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=589,76,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:5223":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9996 +x_0=500000 +y_0=500000 +datum=WGS84 +units=m +no_defs ',"EPSG:5234":'+proj=tmerc +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418 +x_0=200000 +y_0=200000 +a=6377276.345 +b=6356075.41314024 +towgs84=-97,787,86,0,0,0,0 +units=m +no_defs ',"EPSG:5235":'+proj=tmerc +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418 +x_0=500000 +y_0=500000 +a=6377276.345 +b=6356075.41314024 +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338 +units=m +no_defs ',"EPSG:5243":'+proj=lcc +lat_1=48.66666666666666 +lat_2=53.66666666666666 +lat_0=51 +lon_0=10.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5247":'+proj=omerc +lat_0=4 +lonc=115 +alpha=53.31580995 +k=0.99984 +x_0=0 +y_0=0 +no_uoff +gamma=53.13010236111111 +ellps=GRS80 +units=m +no_defs ',"EPSG:5253":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5254":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5255":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5256":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5257":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5258":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5259":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5266":'+proj=tmerc +lat_0=0 +lon_0=90 +k=1 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5269":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5270":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5271":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=11500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5272":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=12500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5273":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=13500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5274":'+proj=tmerc +lat_0=0 +lon_0=42 +k=1 +x_0=14500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5275":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=15500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5292":'+proj=tmerc +lat_0=0 +lon_0=90.73333333333333 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5293":'+proj=tmerc +lat_0=0 +lon_0=89.55 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5294":'+proj=tmerc +lat_0=0 +lon_0=89.84999999999999 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5295":'+proj=tmerc +lat_0=0 +lon_0=90.03333333333333 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5296":'+proj=tmerc +lat_0=0 +lon_0=90.15000000000001 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5297":'+proj=tmerc +lat_0=0 +lon_0=91.13333333333334 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5298":'+proj=tmerc +lat_0=0 +lon_0=91.23333333333333 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5299":'+proj=tmerc +lat_0=0 +lon_0=89.34999999999999 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5300":'+proj=tmerc +lat_0=0 +lon_0=91.34999999999999 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5301":'+proj=tmerc +lat_0=0 +lon_0=89.84999999999999 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5302":'+proj=tmerc +lat_0=0 +lon_0=91.56666666666666 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5303":'+proj=tmerc +lat_0=0 +lon_0=89.06666666666666 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5304":'+proj=tmerc +lat_0=0 +lon_0=90.26666666666667 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5305":'+proj=tmerc +lat_0=0 +lon_0=89.55 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5306":'+proj=tmerc +lat_0=0 +lon_0=91.75 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5307":'+proj=tmerc +lat_0=0 +lon_0=90.5 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5308":'+proj=tmerc +lat_0=0 +lon_0=90.16666666666667 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5309":'+proj=tmerc +lat_0=0 +lon_0=90.11666666666666 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5310":'+proj=tmerc +lat_0=0 +lon_0=91.56666666666666 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5311":'+proj=tmerc +lat_0=0 +lon_0=90.86666666666666 +k=1 +x_0=250000 +y_0=-2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5316":'+proj=tmerc +lat_0=0 +lon_0=-7 +k=0.999997 +x_0=200000 +y_0=-6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5320":'+proj=lcc +lat_1=44.5 +lat_2=54.5 +lat_0=0 +lon_0=-84 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5321":'+proj=lcc +lat_1=44.5 +lat_2=54.5 +lat_0=0 +lon_0=-84 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5325":'+proj=lcc +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19 +x_0=1700000 +y_0=300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5329":'+proj=merc +lon_0=3.192280555555556 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-403,684,41,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:5330":'+proj=merc +lon_0=3.192280555555556 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:5331":'+proj=merc +lon_0=3.192280555555556 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-587.8,519.75,145.76,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:5337":'+proj=utm +zone=25 +south +ellps=intl +towgs84=-151.99,287.04,-147.45,0,0,0,0 +units=m +no_defs ',"EPSG:5343":'+proj=tmerc +lat_0=-90 +lon_0=-72 +k=1 +x_0=1500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5344":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5345":'+proj=tmerc +lat_0=-90 +lon_0=-66 +k=1 +x_0=3500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5346":'+proj=tmerc +lat_0=-90 +lon_0=-63 +k=1 +x_0=4500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5347":'+proj=tmerc +lat_0=-90 +lon_0=-60 +k=1 +x_0=5500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5348":'+proj=tmerc +lat_0=-90 +lon_0=-57 +k=1 +x_0=6500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5349":'+proj=tmerc +lat_0=-90 +lon_0=-54 +k=1 +x_0=7500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5355":'+proj=utm +zone=20 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5356":'+proj=utm +zone=19 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5357":'+proj=utm +zone=21 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5361":'+proj=utm +zone=19 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5362":'+proj=utm +zone=18 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5367":'+proj=tmerc +lat_0=0 +lon_0=-84 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5382":'+proj=utm +zone=21 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5383":'+proj=utm +zone=22 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5387":'+proj=utm +zone=18 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5388":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5389":'+proj=utm +zone=19 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5396":'+proj=utm +zone=26 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5456":'+proj=lcc +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696 +x_0=500000 +y_0=271820.522 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5457":'+proj=lcc +lat_1=9 +lat_0=9 +lon_0=-83.66666666666667 +k_0=0.99995696 +x_0=500000 +y_0=327987.436 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5458":'+proj=lcc +lat_1=16.81666666666667 +lat_0=16.81666666666667 +lon_0=-90.33333333333333 +k_0=0.99992226 +x_0=500000 +y_0=292209.579 +datum=NAD27 +units=m +no_defs ',"EPSG:5459":'+proj=lcc +lat_1=14.9 +lat_0=14.9 +lon_0=-90.33333333333333 +k_0=0.99989906 +x_0=500000 +y_0=325992.681 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5460":'+proj=lcc +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704 +x_0=500000 +y_0=295809.184 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5461":'+proj=lcc +lat_1=13.86666666666667 +lat_0=13.86666666666667 +lon_0=-85.5 +k_0=0.99990314 +x_0=500000 +y_0=359891.816 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5462":'+proj=lcc +lat_1=11.73333333333333 +lat_0=11.73333333333333 +lon_0=-85.5 +k_0=0.9999222800000001 +x_0=500000 +y_0=288876.327 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5463":'+proj=utm +zone=17 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:5466":'+proj=tmerc +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299 +a=6378293.645208759 +b=6356617.987679838 +units=m +no_defs ',"EPSG:5469":'+proj=lcc +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909 +x_0=500000 +y_0=294865.303 +ellps=clrk66 +units=m +no_defs ',"EPSG:5472":'+proj=poly +lat_0=8.25 +lon_0=-81 +x_0=914391.7962 +y_0=999404.7217154861 +ellps=clrk66 +to_meter=0.9143917962 +no_defs ',"EPSG:5479":'+proj=lcc +lat_1=-76.66666666666667 +lat_2=-79.33333333333333 +lat_0=-78 +lon_0=163 +x_0=7000000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5480":'+proj=lcc +lat_1=-73.66666666666667 +lat_2=-75.33333333333333 +lat_0=-74.5 +lon_0=165 +x_0=5000000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5481":'+proj=lcc +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5 +lon_0=166 +x_0=3000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5482":'+proj=stere +lat_0=-90 +lat_ts=-90 +lon_0=180 +k=0.994 +x_0=5000000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5490":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5513":'+proj=krovak +lat_0=49.5 +lon_0=24.83333333333333 +alpha=30.28813972222222 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=589,76,480,0,0,0,0 +units=m +no_defs ',"EPSG:5514":'+proj=krovak +lat_0=49.5 +lon_0=24.83333333333333 +alpha=30.28813972222222 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=589,76,480,0,0,0,0 +units=m +no_defs ',"EPSG:5518":'+proj=tmerc +lat_0=-44 +lon_0=-176.5 +k=1 +x_0=350000 +y_0=650000 +ellps=intl +towgs84=175,-38,113,0,0,0,0 +units=m +no_defs ',"EPSG:5519":'+proj=tmerc +lat_0=-44 +lon_0=-176.5 +k=1 +x_0=350000 +y_0=650000 +ellps=intl +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263 +units=m +no_defs ',"EPSG:5520":'+proj=tmerc +lat_0=0 +lon_0=3 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5523":'+proj=tmerc +lat_0=0 +lon_0=11.5 +k=0.9996 +x_0=1500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:5530":'+proj=poly +lat_0=0 +lon_0=-54 +x_0=5000000 +y_0=10000000 +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5531":'+proj=utm +zone=21 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5532":'+proj=utm +zone=22 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:5533":'+proj=utm +zone=23 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5534":'+proj=utm +zone=24 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5535":'+proj=utm +zone=25 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5536":'+proj=utm +zone=21 +south +ellps=intl +units=m +no_defs ',"EPSG:5537":'+proj=utm +zone=22 +south +ellps=intl +units=m +no_defs ',"EPSG:5538":'+proj=utm +zone=23 +south +ellps=intl +units=m +no_defs ',"EPSG:5539":'+proj=utm +zone=24 +south +ellps=intl +units=m +no_defs ',"EPSG:5550":'+proj=utm +zone=54 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5551":'+proj=utm +zone=55 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5552":'+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5559":'+proj=lcc +lat_1=16.81666666666667 +lat_0=16.81666666666667 +lon_0=-90.33333333333333 +k_0=0.99992226 +x_0=500000 +y_0=292209.579 +ellps=clrk66 +towgs84=213.11,9.37,-74.95,0,0,0,0 +units=m +no_defs ',"EPSG:5562":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5563":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5564":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5565":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5566":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5567":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5568":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5569":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5570":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5571":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5572":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5573":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5574":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=11500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5575":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=12500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5576":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5577":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5578":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5579":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5580":'+proj=tmerc +lat_0=0 +lon_0=30 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5581":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5582":'+proj=tmerc +lat_0=0 +lon_0=36 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5583":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=25,-141,-78.5,-0,0.35,0.736,0 +units=m +no_defs ',"EPSG:5588":'+proj=sterea +lat_0=46.5 +lon_0=-66.5 +k=0.999912 +x_0=304800 +y_0=304800 +datum=NAD27 +units=ft +no_defs ',"EPSG:5589":'+proj=tmerc +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299 +a=6378293.645208759 +b=6356617.987679838 +to_meter=0.3047972654 +no_defs ',"EPSG:5596":'+proj=tmerc +lat_0=0 +lon_0=11.33333333333333 +k=1 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5623":'+proj=tmerc +lat_0=41.5 +lon_0=-83.66666666666667 +k=0.999942857 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:5624":'+proj=tmerc +lat_0=41.5 +lon_0=-85.75 +k=0.999909091 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:5625":'+proj=tmerc +lat_0=41.5 +lon_0=-88.75 +k=0.999909091 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:5627":'+proj=tmerc +lat_0=0 +lon_0=6 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:5629":'+proj=utm +zone=38 +south +ellps=WGS84 +towgs84=0,0,0,-0,-0,-0,0 +units=m +no_defs ',"EPSG:5631":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=2500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:5632":'+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5633":'+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5634":'+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5635":'+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5636":'+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5637":'+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5638":'+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5639":'+proj=lcc +lat_1=35 +lat_2=65 +lat_0=52 +lon_0=10 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5641":'+proj=merc +lon_0=-43 +lat_ts=-2 +x_0=5000000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5643":'+proj=lcc +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48 +lon_0=10 +x_0=815000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:5644":'+proj=utm +zone=39 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5646":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:5649":'+proj=tmerc +lat_0=0 +lon_0=3 +k=0.9996 +x_0=31500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5650":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9996 +x_0=33500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5651":'+proj=tmerc +lat_0=0 +lon_0=3 +k=0.9996 +x_0=31500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5652":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=32500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5653":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9996 +x_0=33500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5654":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:5655":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:5659":'+proj=tmerc +lat_0=0 +lon_0=9 +k=0.9996 +x_0=500053 +y_0=-3999820 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +units=m +no_defs ',"EPSG:5663":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:5664":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=2500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:5665":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:5666":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5667":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5668":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5669":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5670":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:5671":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:5672":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs ',"EPSG:5673":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:5674":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:5675":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=26,-121,-78,0,0,0,0 +units=m +no_defs ',"EPSG:5676":'+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5677":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5678":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5679":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5680":'+proj=tmerc +lat_0=0 +lon_0=3 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:5682":'+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5683":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5684":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5685":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:5700":'+proj=utm +zone=1 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5825":'+proj=tmerc +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086 +x_0=200000 +y_0=600000 +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:5836":'+proj=utm +zone=37 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5837":'+proj=utm +zone=40 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5839":'+proj=utm +zone=17 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5842":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9996 +x_0=500000 +y_0=10000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5844":'+proj=tmerc +lat_0=0 +lon_0=30 +k=0.9999 +x_0=500000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5858":'+proj=utm +zone=22 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5875":'+proj=utm +zone=18 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5876":'+proj=utm +zone=19 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5877":'+proj=utm +zone=20 +south +ellps=aust_SA +towgs84=-67.35,3.88,-38.22,0,0,0,0 +units=m +no_defs ',"EPSG:5879":'+proj=utm +zone=38 +south +ellps=intl +towgs84=-381.788,-57.501,-256.673,0,0,0,0 +units=m +no_defs ',"EPSG:5880":'+proj=poly +lat_0=0 +lon_0=-54 +x_0=5000000 +y_0=10000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:5887":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=0.9996 +x_0=1500000 +y_0=5000000 +ellps=GRS80 +units=m +no_defs ',"EPSG:5890":'+proj=stere +lat_0=90 +lat_ts=70 +lon_0=90 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs ',"EPSG:5921":'+proj=lcc +lat_1=85 +lat_2=77 +lat_0=81.31722600000001 +lon_0=-111 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5922":'+proj=lcc +lat_1=85 +lat_2=77 +lat_0=81.31722600000001 +lon_0=-39 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5923":'+proj=lcc +lat_1=85 +lat_2=77 +lat_0=81.31722600000001 +lon_0=33 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5924":'+proj=lcc +lat_1=85 +lat_2=77 +lat_0=81.31722600000001 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5925":'+proj=lcc +lat_1=85 +lat_2=77 +lat_0=81.31722600000001 +lon_0=177 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5926":'+proj=lcc +lat_1=77 +lat_2=69 +lat_0=73.15574086111111 +lon_0=-111 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5927":'+proj=lcc +lat_1=77 +lat_2=69 +lat_0=73.15574086111111 +lon_0=-39 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5928":'+proj=lcc +lat_1=77 +lat_2=69 +lat_0=73.15574086111111 +lon_0=33 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5929":'+proj=lcc +lat_1=77 +lat_2=69 +lat_0=73.15574086111111 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5930":'+proj=lcc +lat_1=77 +lat_2=69 +lat_0=73.15574086111111 +lon_0=177 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5931":'+proj=lcc +lat_1=69 +lat_2=61 +lat_0=65.10127088888888 +lon_0=-111 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5932":'+proj=lcc +lat_1=69 +lat_2=61 +lat_0=65.10127088888888 +lon_0=-39 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5933":'+proj=lcc +lat_1=69 +lat_2=61 +lat_0=65.10127088888888 +lon_0=33 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5934":'+proj=lcc +lat_1=69 +lat_2=61 +lat_0=65.10127088888888 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5935":'+proj=lcc +lat_1=69 +lat_2=61 +lat_0=65.10127088888888 +lon_0=177 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:5936":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=-150 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5937":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=-100 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5938":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=-33 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5939":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=18 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:5940":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=105 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:6050":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=-30 +x_0=25500000 +y_0=1500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6051":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=-52 +x_0=18500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6052":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=-12 +x_0=20500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6053":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-69 +x_0=29500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6054":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-39 +x_0=31500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6055":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-10 +x_0=33500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6056":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-64 +x_0=20500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6057":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-39 +x_0=22500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6058":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-14 +x_0=24500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6059":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-62 +x_0=41500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6060":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-42 +x_0=43500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6061":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-22 +x_0=45500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6062":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-56 +x_0=26500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6063":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-38 +x_0=28500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6064":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-20 +x_0=30500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6065":'+proj=lcc +lat_1=67 +lat_2=63.66666666666666 +lat_0=65.35103930555555 +lon_0=-51 +x_0=11500000 +y_0=7500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6066":'+proj=lcc +lat_1=67 +lat_2=63.66666666666666 +lat_0=65.35103930555555 +lon_0=-34 +x_0=13500000 +y_0=7500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6067":'+proj=lcc +lat_1=63.66666666666666 +lat_2=60.33333333333334 +lat_0=62.01530688888889 +lon_0=-52 +x_0=20500000 +y_0=8500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6068":'+proj=lcc +lat_1=63.66666666666666 +lat_2=60.33333333333334 +lat_0=62.01530688888889 +lon_0=-37 +x_0=22500000 +y_0=8500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6069":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=16 +x_0=22500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6070":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=21 +x_0=11500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6071":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=10 +x_0=26500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6072":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=34 +x_0=28500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6073":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=14 +x_0=11500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6074":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=34 +x_0=13500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6075":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=53 +x_0=24500000 +y_0=2500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6076":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=93 +x_0=26500000 +y_0=2500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6077":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=52 +x_0=13500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6078":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=83 +x_0=15500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6079":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=114 +x_0=17500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6080":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=145 +x_0=19500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6081":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=58 +x_0=30500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6082":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=82 +x_0=32500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6083":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=106 +x_0=34500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6084":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=130 +x_0=36500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6085":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=154 +x_0=38500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6086":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=179 +x_0=40500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6087":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=54 +x_0=15500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6088":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=74 +x_0=17500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6089":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=95 +x_0=19500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6090":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=116 +x_0=21500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6091":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=137 +x_0=23500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6092":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=158 +x_0=25500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6093":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=179 +x_0=27500000 +y_0=5500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6094":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-163 +x_0=29500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6095":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-147 +x_0=31500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6096":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-165 +x_0=14500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6097":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-147 +x_0=16500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6098":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=-90 +x_0=23500000 +y_0=1500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6099":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=-115 +x_0=14500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6100":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=-75 +x_0=16500000 +y_0=2500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6101":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-129 +x_0=25500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6102":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-99 +x_0=27500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6103":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-69 +x_0=29500000 +y_0=3500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6104":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-129 +x_0=14500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6105":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-104 +x_0=16500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6106":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-79 +x_0=18500000 +y_0=4500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6107":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-131 +x_0=33500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6108":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-111 +x_0=35500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6109":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-91 +x_0=37500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6110":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-71 +x_0=39500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6111":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-132 +x_0=18500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6112":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-113 +x_0=20500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6113":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-94 +x_0=22500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6114":'+proj=lcc +lat_1=70.33333333333333 +lat_2=67 +lat_0=68.68747555555557 +lon_0=-75 +x_0=24500000 +y_0=6500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6115":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=30 +x_0=27500000 +y_0=1500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6116":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=90 +x_0=29500000 +y_0=1500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6117":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=150 +x_0=31500000 +y_0=1500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6118":'+proj=lcc +lat_1=87 +lat_2=83.66666666666667 +lat_0=85.43711833333333 +lon_0=-150 +x_0=21500000 +y_0=1500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6119":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=133 +x_0=28500000 +y_0=2500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6120":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=166 +x_0=10500000 +y_0=2500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6121":'+proj=lcc +lat_1=83.66666666666667 +lat_2=80.33333333333333 +lat_0=82.05842488888888 +lon_0=-154 +x_0=12500000 +y_0=2500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6122":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=176 +x_0=21500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6123":'+proj=lcc +lat_1=80.33333333333333 +lat_2=77 +lat_0=78.70733752777778 +lon_0=-153 +x_0=23500000 +y_0=3500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6124":'+proj=lcc +lat_1=77 +lat_2=73.66666666666667 +lat_0=75.36440330555556 +lon_0=-155 +x_0=12500000 +y_0=4500000 +datum=WGS84 +units=m +no_defs ',"EPSG:6125":'+proj=lcc +lat_1=73.66666666666667 +lat_2=70.33333333333333 +lat_0=72.02500919444445 +lon_0=-5 +x_0=47500000 +y_0=5500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:6128":'+proj=utm +zone=17 +ellps=clrk66 +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925 +units=ft +no_defs ',"EPSG:6129":'+proj=utm +zone=17 +ellps=clrk66 +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081 +units=ft +no_defs ',"EPSG:6141":'+proj=lcc +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=80.56666666666666 +x_0=899160 +y_0=579120 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=ft +no_defs ',"EPSG:20004":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20005":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20006":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20007":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20008":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20009":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20010":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20011":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=11500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20012":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=12500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20013":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20014":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20015":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20016":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20017":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20018":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20019":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20020":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20021":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20022":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20023":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20024":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=24500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20025":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20026":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20027":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20028":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20029":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20030":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20031":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20032":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20064":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20065":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20066":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20067":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20068":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20069":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20070":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20071":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20072":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20073":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20074":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20075":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20076":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20077":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20078":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20079":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20080":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20081":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20082":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20083":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20084":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20085":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20086":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20087":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20088":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20089":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20090":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20091":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20092":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22 +units=m +no_defs ',"EPSG:20135":'+proj=utm +zone=35 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0 +units=m +no_defs ',"EPSG:20136":'+proj=utm +zone=36 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0 +units=m +no_defs ',"EPSG:20137":'+proj=utm +zone=37 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0 +units=m +no_defs ',"EPSG:20138":'+proj=utm +zone=38 +ellps=clrk80 +towgs84=-166,-15,204,0,0,0,0 +units=m +no_defs ',"EPSG:20248":'+proj=utm +zone=48 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20249":'+proj=utm +zone=49 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20250":'+proj=utm +zone=50 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20251":'+proj=utm +zone=51 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20252":'+proj=utm +zone=52 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20253":'+proj=utm +zone=53 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20254":'+proj=utm +zone=54 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20255":'+proj=utm +zone=55 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20256":'+proj=utm +zone=56 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20257":'+proj=utm +zone=57 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20258":'+proj=utm +zone=58 +south +ellps=aust_SA +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29 +units=m +no_defs ',"EPSG:20348":'+proj=utm +zone=48 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20349":'+proj=utm +zone=49 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20350":'+proj=utm +zone=50 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20351":'+proj=utm +zone=51 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20352":'+proj=utm +zone=52 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20353":'+proj=utm +zone=53 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20354":'+proj=utm +zone=54 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20355":'+proj=utm +zone=55 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20356":'+proj=utm +zone=56 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20357":'+proj=utm +zone=57 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20358":'+proj=utm +zone=58 +south +ellps=aust_SA +towgs84=-134,-48,149,0,0,0,0 +units=m +no_defs ',"EPSG:20436":'+proj=utm +zone=36 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20437":'+proj=utm +zone=37 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20438":'+proj=utm +zone=38 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20439":'+proj=utm +zone=39 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20440":'+proj=utm +zone=40 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20499":'+proj=utm +zone=39 +ellps=intl +towgs84=-143,-236,7,0,0,0,0 +units=m +no_defs ',"EPSG:20538":'+proj=utm +zone=38 +ellps=krass +towgs84=-43,-163,45,0,0,0,0 +units=m +no_defs ',"EPSG:20539":'+proj=utm +zone=39 +ellps=krass +towgs84=-43,-163,45,0,0,0,0 +units=m +no_defs ',"EPSG:20790":'+proj=tmerc +lat_0=39.66666666666666 +lon_0=1 +k=1 +x_0=200000 +y_0=300000 +ellps=intl +towgs84=-304.046,-60.576,103.64,0,0,0,0 +pm=lisbon +units=m +no_defs ',"EPSG:20791":'+proj=tmerc +lat_0=39.66666666666666 +lon_0=1 +k=1 +x_0=0 +y_0=0 +ellps=intl +towgs84=-304.046,-60.576,103.64,0,0,0,0 +pm=lisbon +units=m +no_defs ',"EPSG:20822":'+proj=utm +zone=22 +south +ellps=intl +towgs84=-151.99,287.04,-147.45,0,0,0,0 +units=m +no_defs ',"EPSG:20823":'+proj=utm +zone=23 +south +ellps=intl +towgs84=-151.99,287.04,-147.45,0,0,0,0 +units=m +no_defs ',"EPSG:20824":'+proj=utm +zone=24 +south +ellps=intl +towgs84=-151.99,287.04,-147.45,0,0,0,0 +units=m +no_defs ',"EPSG:20934":'+proj=utm +zone=34 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-143,-90,-294,0,0,0,0 +units=m +no_defs ',"EPSG:20935":'+proj=utm +zone=35 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-143,-90,-294,0,0,0,0 +units=m +no_defs ',"EPSG:20936":'+proj=utm +zone=36 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-143,-90,-294,0,0,0,0 +units=m +no_defs ',"EPSG:21035":'+proj=utm +zone=35 +south +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21036":'+proj=utm +zone=36 +south +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21037":'+proj=utm +zone=37 +south +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21095":'+proj=utm +zone=35 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21096":'+proj=utm +zone=36 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21097":'+proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs ',"EPSG:21100":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:21148":'+proj=utm +zone=48 +south +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +units=m +no_defs ',"EPSG:21149":'+proj=utm +zone=49 +south +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +units=m +no_defs ',"EPSG:21150":'+proj=utm +zone=50 +south +ellps=bessel +towgs84=-377,681,-50,0,0,0,0 +units=m +no_defs ',"EPSG:21291":'+proj=tmerc +lat_0=0 +lon_0=-62 +k=0.9995000000000001 +x_0=400000 +y_0=0 +ellps=clrk80 +towgs84=31.95,300.99,419.19,0,0,0,0 +units=m +no_defs ',"EPSG:21292":'+proj=tmerc +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986 +x_0=30000 +y_0=75000 +ellps=clrk80 +towgs84=31.95,300.99,419.19,0,0,0,0 +units=m +no_defs ',"EPSG:21413":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21414":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21415":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21416":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21417":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21418":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21419":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21420":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21421":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21422":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21423":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21453":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21454":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21455":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21456":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21457":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21458":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21459":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21460":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21461":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21462":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21463":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21473":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21474":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21475":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21476":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21477":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21478":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21479":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21480":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21481":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21482":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21483":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=15.8,-154.4,-82.3,0,0,0,0 +units=m +no_defs ',"EPSG:21500":'+proj=lcc +lat_1=49.83333333333334 +lat_2=51.16666666666666 +lat_0=90 +lon_0=0 +x_0=150000 +y_0=5400000 +ellps=intl +pm=brussels +units=m +no_defs ',"EPSG:21780":'+proj=somerc +lat_0=46.95240555555556 +lon_0=0 +k_0=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=674.4,15.1,405.3,0,0,0,0 +pm=bern +units=m +no_defs ',"EPSG:21781":'+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.4,15.1,405.3,0,0,0,0 +units=m +no_defs ',"EPSG:21782":'+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=674.4,15.1,405.3,0,0,0,0 +units=m +no_defs ',"EPSG:21817":'+proj=utm +zone=17 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21818":'+proj=utm +zone=18 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21891":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-77.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21892":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-74.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21893":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-71.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21894":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-68.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21896":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-77.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21897":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-74.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21898":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-71.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:21899":'+proj=tmerc +lat_0=4.599047222222222 +lon_0=-68.08091666666667 +k=1 +x_0=1000000 +y_0=1000000 +ellps=intl +towgs84=307,304,-318,0,0,0,0 +units=m +no_defs ',"EPSG:22032":'+proj=utm +zone=32 +south +ellps=clrk80 +towgs84=-50.9,-347.6,-231,0,0,0,0 +units=m +no_defs ',"EPSG:22033":'+proj=utm +zone=33 +south +ellps=clrk80 +towgs84=-50.9,-347.6,-231,0,0,0,0 +units=m +no_defs ',"EPSG:22091":'+proj=tmerc +lat_0=0 +lon_0=11.5 +k=0.9996 +x_0=500000 +y_0=10000000 +ellps=clrk80 +towgs84=-50.9,-347.6,-231,0,0,0,0 +units=m +no_defs ',"EPSG:22092":'+proj=tmerc +lat_0=0 +lon_0=12 +k=0.9996 +x_0=500000 +y_0=10000000 +ellps=clrk80 +towgs84=-50.9,-347.6,-231,0,0,0,0 +units=m +no_defs ',"EPSG:22171":'+proj=tmerc +lat_0=-90 +lon_0=-72 +k=1 +x_0=1500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22172":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22173":'+proj=tmerc +lat_0=-90 +lon_0=-66 +k=1 +x_0=3500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22174":'+proj=tmerc +lat_0=-90 +lon_0=-63 +k=1 +x_0=4500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22175":'+proj=tmerc +lat_0=-90 +lon_0=-60 +k=1 +x_0=5500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22176":'+proj=tmerc +lat_0=-90 +lon_0=-57 +k=1 +x_0=6500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22177":'+proj=tmerc +lat_0=-90 +lon_0=-54 +k=1 +x_0=7500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22181":'+proj=tmerc +lat_0=-90 +lon_0=-72 +k=1 +x_0=1500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22182":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22183":'+proj=tmerc +lat_0=-90 +lon_0=-66 +k=1 +x_0=3500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22184":'+proj=tmerc +lat_0=-90 +lon_0=-63 +k=1 +x_0=4500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22185":'+proj=tmerc +lat_0=-90 +lon_0=-60 +k=1 +x_0=5500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22186":'+proj=tmerc +lat_0=-90 +lon_0=-57 +k=1 +x_0=6500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22187":'+proj=tmerc +lat_0=-90 +lon_0=-54 +k=1 +x_0=7500000 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:22191":'+proj=tmerc +lat_0=-90 +lon_0=-72 +k=1 +x_0=1500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22192":'+proj=tmerc +lat_0=-90 +lon_0=-69 +k=1 +x_0=2500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22193":'+proj=tmerc +lat_0=-90 +lon_0=-66 +k=1 +x_0=3500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22194":'+proj=tmerc +lat_0=-90 +lon_0=-63 +k=1 +x_0=4500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22195":'+proj=tmerc +lat_0=-90 +lon_0=-60 +k=1 +x_0=5500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22196":'+proj=tmerc +lat_0=-90 +lon_0=-57 +k=1 +x_0=6500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22197":'+proj=tmerc +lat_0=-90 +lon_0=-54 +k=1 +x_0=7500000 +y_0=0 +ellps=intl +towgs84=-148,136,90,0,0,0,0 +units=m +no_defs ',"EPSG:22234":'+proj=utm +zone=34 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22235":'+proj=utm +zone=35 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22236":'+proj=utm +zone=36 +south +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22275":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22277":'+proj=tmerc +lat_0=0 +lon_0=17 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22279":'+proj=tmerc +lat_0=0 +lon_0=19 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22281":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22283":'+proj=tmerc +lat_0=0 +lon_0=23 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22285":'+proj=tmerc +lat_0=0 +lon_0=25 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22287":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22289":'+proj=tmerc +lat_0=0 +lon_0=29 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22291":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22293":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=0 +y_0=0 +axis=wsu +a=6378249.145 +b=6356514.966398753 +towgs84=-136,-108,-292,0,0,0,0 +units=m +no_defs ',"EPSG:22332":'+proj=utm +zone=32 +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +units=m +no_defs ',"EPSG:22391":'+proj=lcc +lat_1=36 +lat_0=36 +lon_0=9.9 +k_0=0.999625544 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +units=m +no_defs ',"EPSG:22392":'+proj=lcc +lat_1=33.3 +lat_0=33.3 +lon_0=9.9 +k_0=0.999625769 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-263,6,431,0,0,0,0 +units=m +no_defs ',"EPSG:22521":'+proj=utm +zone=21 +south +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +units=m +no_defs ',"EPSG:22522":'+proj=utm +zone=22 +south +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +units=m +no_defs ',"EPSG:22523":'+proj=utm +zone=23 +south +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +units=m +no_defs ',"EPSG:22524":'+proj=utm +zone=24 +south +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +units=m +no_defs ',"EPSG:22525":'+proj=utm +zone=25 +south +ellps=intl +towgs84=-206,172,-6,0,0,0,0 +units=m +no_defs ',"EPSG:22700":'+proj=lcc +lat_1=34.65 +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256 +x_0=300000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-190.421,8.532,238.69,0,0,0,0 +units=m +no_defs ',"EPSG:22770":'+proj=lcc +lat_1=34.65 +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256 +x_0=300000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-190.421,8.532,238.69,0,0,0,0 +units=m +no_defs ',"EPSG:22780":'+proj=sterea +lat_0=34.2 +lon_0=39.15 +k=0.9995341 +x_0=0 +y_0=0 +a=6378249.2 +b=6356515 +towgs84=-190.421,8.532,238.69,0,0,0,0 +units=m +no_defs ',"EPSG:22832":'+proj=utm +zone=32 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:22991":'+proj=tmerc +lat_0=30 +lon_0=35 +k=1 +x_0=300000 +y_0=1100000 +ellps=helmert +towgs84=-130,110,-13,0,0,0,0 +units=m +no_defs ',"EPSG:22992":'+proj=tmerc +lat_0=30 +lon_0=31 +k=1 +x_0=615000 +y_0=810000 +ellps=helmert +towgs84=-130,110,-13,0,0,0,0 +units=m +no_defs ',"EPSG:22993":'+proj=tmerc +lat_0=30 +lon_0=27 +k=1 +x_0=700000 +y_0=200000 +ellps=helmert +towgs84=-130,110,-13,0,0,0,0 +units=m +no_defs ',"EPSG:22994":'+proj=tmerc +lat_0=30 +lon_0=27 +k=1 +x_0=700000 +y_0=1200000 +ellps=helmert +towgs84=-130,110,-13,0,0,0,0 +units=m +no_defs ',"EPSG:23028":'+proj=utm +zone=28 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23029":'+proj=utm +zone=29 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23030":'+proj=utm +zone=30 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23031":'+proj=utm +zone=31 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23032":'+proj=utm +zone=32 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23033":'+proj=utm +zone=33 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23034":'+proj=utm +zone=34 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23035":'+proj=utm +zone=35 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23036":'+proj=utm +zone=36 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23037":'+proj=utm +zone=37 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23038":'+proj=utm +zone=38 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23090":'+proj=tmerc +lat_0=0 +lon_0=0 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23095":'+proj=tmerc +lat_0=0 +lon_0=5 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs ',"EPSG:23239":'+proj=utm +zone=39 +ellps=clrk80 +towgs84=-346,-1,224,0,0,0,0 +units=m +no_defs ',"EPSG:23240":'+proj=utm +zone=40 +ellps=clrk80 +towgs84=-346,-1,224,0,0,0,0 +units=m +no_defs ',"EPSG:23433":'+proj=utm +zone=33 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:23700":'+proj=somerc +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000 +y_0=200000 +ellps=GRS67 +towgs84=52.17,-71.82,-14.9,0,0,0,0 +units=m +no_defs ',"EPSG:23830":'+proj=tmerc +lat_0=0 +lon_0=94.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23831":'+proj=tmerc +lat_0=0 +lon_0=97.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23832":'+proj=tmerc +lat_0=0 +lon_0=100.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23833":'+proj=tmerc +lat_0=0 +lon_0=103.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23834":'+proj=tmerc +lat_0=0 +lon_0=106.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23835":'+proj=tmerc +lat_0=0 +lon_0=109.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23836":'+proj=tmerc +lat_0=0 +lon_0=112.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23837":'+proj=tmerc +lat_0=0 +lon_0=115.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23838":'+proj=tmerc +lat_0=0 +lon_0=118.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23839":'+proj=tmerc +lat_0=0 +lon_0=121.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23840":'+proj=tmerc +lat_0=0 +lon_0=124.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23841":'+proj=tmerc +lat_0=0 +lon_0=127.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23842":'+proj=tmerc +lat_0=0 +lon_0=130.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23843":'+proj=tmerc +lat_0=0 +lon_0=133.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23844":'+proj=tmerc +lat_0=0 +lon_0=136.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23845":'+proj=tmerc +lat_0=0 +lon_0=139.5 +k=0.9999 +x_0=200000 +y_0=1500000 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23846":'+proj=utm +zone=46 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23847":'+proj=utm +zone=47 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23848":'+proj=utm +zone=48 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23849":'+proj=utm +zone=49 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23850":'+proj=utm +zone=50 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23851":'+proj=utm +zone=51 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23852":'+proj=utm +zone=52 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23853":'+proj=utm +zone=53 +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23866":'+proj=utm +zone=46 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23867":'+proj=utm +zone=47 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23868":'+proj=utm +zone=48 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23869":'+proj=utm +zone=49 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23870":'+proj=utm +zone=50 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23871":'+proj=utm +zone=51 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23872":'+proj=utm +zone=52 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23877":'+proj=utm +zone=47 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23878":'+proj=utm +zone=48 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23879":'+proj=utm +zone=49 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23880":'+proj=utm +zone=50 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23881":'+proj=utm +zone=51 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23882":'+proj=utm +zone=52 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23883":'+proj=utm +zone=53 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23884":'+proj=utm +zone=54 +south +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:23886":'+proj=utm +zone=46 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23887":'+proj=utm +zone=47 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23888":'+proj=utm +zone=48 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23889":'+proj=utm +zone=49 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23890":'+proj=utm +zone=50 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23891":'+proj=utm +zone=51 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23892":'+proj=utm +zone=52 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23893":'+proj=utm +zone=53 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23894":'+proj=utm +zone=54 +south +a=6378160 +b=6356774.50408554 +towgs84=-24,-15,5,0,0,0,0 +units=m +no_defs ',"EPSG:23946":'+proj=utm +zone=46 +a=6377276.345 +b=6356075.41314024 +towgs84=217,823,299,0,0,0,0 +units=m +no_defs ',"EPSG:23947":'+proj=utm +zone=47 +a=6377276.345 +b=6356075.41314024 +towgs84=217,823,299,0,0,0,0 +units=m +no_defs ',"EPSG:23948":'+proj=utm +zone=48 +a=6377276.345 +b=6356075.41314024 +towgs84=217,823,299,0,0,0,0 +units=m +no_defs ',"EPSG:24047":'+proj=utm +zone=47 +a=6377276.345 +b=6356075.41314024 +towgs84=210,814,289,0,0,0,0 +units=m +no_defs ',"EPSG:24048":'+proj=utm +zone=48 +a=6377276.345 +b=6356075.41314024 +towgs84=210,814,289,0,0,0,0 +units=m +no_defs ',"EPSG:24100":'+proj=lcc +lat_1=18 +lat_0=18 +lon_0=-77 +k_0=1 +x_0=167638.49597 +y_0=121918.90616 +a=6378249.144808011 +b=6356514.966204134 +to_meter=0.3047972654 +no_defs ',"EPSG:24200":'+proj=lcc +lat_1=18 +lat_0=18 +lon_0=-77 +k_0=1 +x_0=250000 +y_0=150000 +ellps=clrk66 +towgs84=70,207,389.5,0,0,0,0 +units=m +no_defs ',"EPSG:24305":'+proj=utm +zone=45 +a=6377276.345 +b=6356075.41314024 +towgs84=214,804,268,0,0,0,0 +units=m +no_defs ',"EPSG:24306":'+proj=utm +zone=46 +a=6377276.345 +b=6356075.41314024 +towgs84=214,804,268,0,0,0,0 +units=m +no_defs ',"EPSG:24311":'+proj=utm +zone=41 +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +units=m +no_defs ',"EPSG:24312":'+proj=utm +zone=42 +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +units=m +no_defs ',"EPSG:24313":'+proj=utm +zone=43 +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +units=m +no_defs ',"EPSG:24342":'+proj=utm +zone=42 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24343":'+proj=utm +zone=43 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24344":'+proj=utm +zone=44 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24345":'+proj=utm +zone=45 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24346":'+proj=utm +zone=46 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24347":'+proj=utm +zone=47 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24370":'+proj=lcc +lat_1=39.5 +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24371":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=68 +k_0=0.99878641 +x_0=2743195.592233322 +y_0=914398.5307444407 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24372":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=74 +k_0=0.99878641 +x_0=2743195.592233322 +y_0=914398.5307444407 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24373":'+proj=lcc +lat_1=19 +lat_0=19 +lon_0=80 +k_0=0.99878641 +x_0=2743195.592233322 +y_0=914398.5307444407 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24374":'+proj=lcc +lat_1=12 +lat_0=12 +lon_0=80 +k_0=0.99878641 +x_0=2743195.592233322 +y_0=914398.5307444407 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24375":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=90 +k_0=0.99878641 +x_0=2743185.69 +y_0=914395.23 +a=6377276.345 +b=6356075.41314024 +towgs84=214,804,268,0,0,0,0 +units=m +no_defs ',"EPSG:24376":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=68 +k_0=0.99878641 +x_0=2743196.4 +y_0=914398.8 +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +units=m +no_defs ',"EPSG:24377":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=74 +k_0=0.99878641 +x_0=2743196.4 +y_0=914398.8 +a=6377301.243 +b=6356100.230165384 +towgs84=283,682,231,0,0,0,0 +units=m +no_defs ',"EPSG:24378":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=68 +k_0=0.99878641 +x_0=2743195.5 +y_0=914398.5 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24379":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=74 +k_0=0.99878641 +x_0=2743195.5 +y_0=914398.5 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24380":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=90 +k_0=0.99878641 +x_0=2743195.5 +y_0=914398.5 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24381":'+proj=lcc +lat_1=19 +lat_0=19 +lon_0=80 +k_0=0.99878641 +x_0=2743195.5 +y_0=914398.5 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24382":'+proj=lcc +lat_1=26 +lat_0=26 +lon_0=90 +k_0=0.99878641 +x_0=2743195.592233322 +y_0=914398.5307444407 +a=6377299.36559538 +b=6356098.359005156 +to_meter=0.9143985307444408 +no_defs ',"EPSG:24383":'+proj=lcc +lat_1=12 +lat_0=12 +lon_0=80 +k_0=0.99878641 +x_0=2743195.5 +y_0=914398.5 +a=6377299.151 +b=6356098.145120132 +towgs84=295,736,257,0,0,0,0 +units=m +no_defs ',"EPSG:24500":'+proj=cass +lat_0=1.287646666666667 +lon_0=103.8530022222222 +x_0=30000 +y_0=30000 +a=6377304.063 +b=6356103.038993155 +towgs84=-11,851,5,0,0,0,0 +units=m +no_defs ',"EPSG:24547":'+proj=utm +zone=47 +a=6377304.063 +b=6356103.038993155 +towgs84=-11,851,5,0,0,0,0 +units=m +no_defs ',"EPSG:24548":'+proj=utm +zone=48 +a=6377304.063 +b=6356103.038993155 +towgs84=-11,851,5,0,0,0,0 +units=m +no_defs ',"EPSG:24571":'+proj=omerc +lat_0=4 +lonc=102.25 +alpha=323.0257905 +k=0.99984 +x_0=804671.2997750348 +y_0=0 +no_uoff +gamma=323.1301023611111 +a=6377304.063 +b=6356103.038993155 +towgs84=-11,851,5,0,0,0,0 +to_meter=20.11678249437587 +no_defs ',"EPSG:24600":'+proj=lcc +lat_1=32.5 +lat_0=32.5 +lon_0=45 +k_0=0.9987864078000001 +x_0=1500000 +y_0=1166200 +ellps=clrk80 +towgs84=-294.7,-200.1,525.5,0,0,0,0 +units=m +no_defs ',"EPSG:24718":'+proj=utm +zone=18 +ellps=intl +towgs84=-273.5,110.6,-357.9,0,0,0,0 +units=m +no_defs ',"EPSG:24719":'+proj=utm +zone=19 +ellps=intl +towgs84=-273.5,110.6,-357.9,0,0,0,0 +units=m +no_defs ',"EPSG:24720":'+proj=utm +zone=20 +ellps=intl +towgs84=-273.5,110.6,-357.9,0,0,0,0 +units=m +no_defs ',"EPSG:24817":'+proj=utm +zone=17 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24818":'+proj=utm +zone=18 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24819":'+proj=utm +zone=19 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24820":'+proj=utm +zone=20 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24821":'+proj=utm +zone=21 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24877":'+proj=utm +zone=17 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24878":'+proj=utm +zone=18 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24879":'+proj=utm +zone=19 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24880":'+proj=utm +zone=20 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24881":'+proj=utm +zone=21 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24882":'+proj=utm +zone=22 +south +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24891":'+proj=tmerc +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24892":'+proj=tmerc +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:24893":'+proj=tmerc +lat_0=-9.5 +lon_0=-70.5 +k=0.99952992 +x_0=1324000 +y_0=1040084.558 +ellps=intl +towgs84=-288,175,-376,0,0,0,0 +units=m +no_defs ',"EPSG:25000":'+proj=tmerc +lat_0=4.666666666666667 +lon_0=-1 +k=0.99975 +x_0=274319.51 +y_0=0 +ellps=clrk80 +towgs84=-130,29,364,0,0,0,0 +units=m +no_defs ',"EPSG:25231":'+proj=utm +zone=31 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:25391":'+proj=tmerc +lat_0=0 +lon_0=117 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +units=m +no_defs ',"EPSG:25392":'+proj=tmerc +lat_0=0 +lon_0=119 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +units=m +no_defs ',"EPSG:25393":'+proj=tmerc +lat_0=0 +lon_0=121 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +units=m +no_defs ',"EPSG:25394":'+proj=tmerc +lat_0=0 +lon_0=123 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +units=m +no_defs ',"EPSG:25395":'+proj=tmerc +lat_0=0 +lon_0=125 +k=0.99995 +x_0=500000 +y_0=0 +ellps=clrk66 +towgs84=-133,-77,-51,0,0,0,0 +units=m +no_defs ',"EPSG:25700":'+proj=merc +lon_0=110 +k=0.997 +x_0=3900000 +y_0=900000 +ellps=bessel +towgs84=-587.8,519.75,145.76,0,0,0,0 +pm=jakarta +units=m +no_defs ',"EPSG:25828":'+proj=utm +zone=28 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25829":'+proj=utm +zone=29 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25830":'+proj=utm +zone=30 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25831":'+proj=utm +zone=31 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25832":'+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25833":'+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25834":'+proj=utm +zone=34 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25835":'+proj=utm +zone=35 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25836":'+proj=utm +zone=36 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25837":'+proj=utm +zone=37 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25838":'+proj=utm +zone=38 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25884":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:25932":'+proj=utm +zone=32 +south +ellps=intl +towgs84=-254.1,-5.36,-100.29,0,0,0,0 +units=m +no_defs ',"EPSG:26191":'+proj=lcc +lat_1=33.3 +lat_0=33.3 +lon_0=-5.4 +k_0=0.999625769 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +units=m +no_defs ',"EPSG:26192":'+proj=lcc +lat_1=29.7 +lat_0=29.7 +lon_0=-5.4 +k_0=0.9996155960000001 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +units=m +no_defs ',"EPSG:26193":'+proj=lcc +lat_1=26.1 +lat_0=26.1 +lon_0=-5.4 +k_0=0.9996 +x_0=1200000 +y_0=400000 +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +units=m +no_defs ',"EPSG:26194":'+proj=lcc +lat_1=26.1 +lat_0=26.1 +lon_0=-5.4 +k_0=0.999616304 +x_0=1200000 +y_0=400000 +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +units=m +no_defs ',"EPSG:26195":'+proj=lcc +lat_1=22.5 +lat_0=22.5 +lon_0=-5.4 +k_0=0.999616437 +x_0=1500000 +y_0=400000 +a=6378249.2 +b=6356515 +towgs84=31,146,47,0,0,0,0 +units=m +no_defs ',"EPSG:26237":'+proj=utm +zone=37 +ellps=bessel +towgs84=639,405,60,0,0,0,0 +units=m +no_defs ',"EPSG:26331":'+proj=utm +zone=31 +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs ',"EPSG:26332":'+proj=utm +zone=32 +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs ',"EPSG:26391":'+proj=tmerc +lat_0=4 +lon_0=4.5 +k=0.99975 +x_0=230738.26 +y_0=0 +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs ',"EPSG:26392":'+proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs ',"EPSG:26393":'+proj=tmerc +lat_0=4 +lon_0=12.5 +k=0.99975 +x_0=1110369.7 +y_0=0 +ellps=clrk80 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs ',"EPSG:26432":'+proj=utm +zone=32 +south +ellps=intl +towgs84=-252.95,-4.11,-96.38,0,0,0,0 +units=m +no_defs ',"EPSG:26591":'+proj=tmerc +lat_0=0 +lon_0=-3.45233333333333 +k=0.9996 +x_0=1500000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +pm=rome +units=m +no_defs ',"EPSG:26592":'+proj=tmerc +lat_0=0 +lon_0=2.54766666666666 +k=0.9996 +x_0=2520000 +y_0=0 +ellps=intl +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68 +pm=rome +units=m +no_defs ',"EPSG:26632":'+proj=utm +zone=32 +a=6378249.2 +b=6356515 +towgs84=-74,-130,42,0,0,0,0 +units=m +no_defs ',"EPSG:26692":'+proj=utm +zone=32 +south +a=6378249.2 +b=6356515 +towgs84=-74,-130,42,0,0,0,0 +units=m +no_defs ',"EPSG:26701":'+proj=utm +zone=1 +datum=NAD27 +units=m +no_defs ',"EPSG:26702":'+proj=utm +zone=2 +datum=NAD27 +units=m +no_defs ',"EPSG:26703":'+proj=utm +zone=3 +datum=NAD27 +units=m +no_defs ',"EPSG:26704":'+proj=utm +zone=4 +datum=NAD27 +units=m +no_defs ',"EPSG:26705":'+proj=utm +zone=5 +datum=NAD27 +units=m +no_defs ',"EPSG:26706":'+proj=utm +zone=6 +datum=NAD27 +units=m +no_defs ',"EPSG:26707":'+proj=utm +zone=7 +datum=NAD27 +units=m +no_defs ',"EPSG:26708":'+proj=utm +zone=8 +datum=NAD27 +units=m +no_defs ',"EPSG:26709":'+proj=utm +zone=9 +datum=NAD27 +units=m +no_defs ',"EPSG:26710":'+proj=utm +zone=10 +datum=NAD27 +units=m +no_defs ',"EPSG:26711":'+proj=utm +zone=11 +datum=NAD27 +units=m +no_defs ',"EPSG:26712":'+proj=utm +zone=12 +datum=NAD27 +units=m +no_defs ',"EPSG:26713":'+proj=utm +zone=13 +datum=NAD27 +units=m +no_defs ',"EPSG:26714":'+proj=utm +zone=14 +datum=NAD27 +units=m +no_defs ',"EPSG:26715":'+proj=utm +zone=15 +datum=NAD27 +units=m +no_defs ',"EPSG:26716":'+proj=utm +zone=16 +datum=NAD27 +units=m +no_defs ',"EPSG:26717":'+proj=utm +zone=17 +datum=NAD27 +units=m +no_defs ',"EPSG:26718":'+proj=utm +zone=18 +datum=NAD27 +units=m +no_defs ',"EPSG:26719":'+proj=utm +zone=19 +datum=NAD27 +units=m +no_defs ',"EPSG:26720":'+proj=utm +zone=20 +datum=NAD27 +units=m +no_defs ',"EPSG:26721":'+proj=utm +zone=21 +datum=NAD27 +units=m +no_defs ',"EPSG:26722":'+proj=utm +zone=22 +datum=NAD27 +units=m +no_defs ',"EPSG:26729":'+proj=tmerc +lat_0=30.5 +lon_0=-85.83333333333333 +k=0.99996 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26730":'+proj=tmerc +lat_0=30 +lon_0=-87.5 +k=0.999933333 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26731":'+proj=omerc +lat_0=57 +lonc=-133.6666666666667 +alpha=323.1301023611111 +k=0.9999 +x_0=5000000.001016002 +y_0=-5000000.001016002 +no_uoff +gamma=323.1301023611111 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26732":'+proj=tmerc +lat_0=54 +lon_0=-142 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26733":'+proj=tmerc +lat_0=54 +lon_0=-146 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26734":'+proj=tmerc +lat_0=54 +lon_0=-150 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26735":'+proj=tmerc +lat_0=54 +lon_0=-154 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26736":'+proj=tmerc +lat_0=54 +lon_0=-158 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26737":'+proj=tmerc +lat_0=54 +lon_0=-162 +k=0.9999 +x_0=213360.4267208534 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26738":'+proj=tmerc +lat_0=54 +lon_0=-166 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26739":'+proj=tmerc +lat_0=54 +lon_0=-170 +k=0.9999 +x_0=182880.3657607315 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26740":'+proj=lcc +lat_1=53.83333333333334 +lat_2=51.83333333333334 +lat_0=51 +lon_0=-176 +x_0=914401.8288036576 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26741":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26742":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26743":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26744":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26745":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26746":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26747":'+proj=lcc +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333 +lon_0=-118.3333333333333 +x_0=1276106.450596901 +y_0=127079.524511049 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26748":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26749":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26750":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26751":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26752":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26753":'+proj=lcc +lat_1=39.71666666666667 +lat_2=40.78333333333333 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26754":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26755":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26756":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=182880.3657607315 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26757":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26758":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26759":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26760":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26766":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26767":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26768":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26769":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26770":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26771":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26772":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26773":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26774":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26775":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26776":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26777":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26778":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26779":'+proj=lcc +lat_1=37.96666666666667 +lat_2=38.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26780":'+proj=lcc +lat_1=36.73333333333333 +lat_2=37.93333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26781":'+proj=lcc +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667 +lon_0=-92.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26782":'+proj=lcc +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667 +lon_0=-91.33333333333333 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26783":'+proj=tmerc +lat_0=43.83333333333334 +lon_0=-68.5 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26784":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26785":'+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.83333333333334 +lon_0=-77 +x_0=243840.4876809754 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26786":'+proj=lcc +lat_1=41.71666666666667 +lat_2=42.68333333333333 +lat_0=41 +lon_0=-71.5 +x_0=182880.3657607315 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26787":'+proj=lcc +lat_1=41.28333333333333 +lat_2=41.48333333333333 +lat_0=41 +lon_0=-70.5 +x_0=60960.12192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26791":'+proj=lcc +lat_1=47.03333333333333 +lat_2=48.63333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26792":'+proj=lcc +lat_1=45.61666666666667 +lat_2=47.05 +lat_0=45 +lon_0=-94.25 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26793":'+proj=lcc +lat_1=43.78333333333333 +lat_2=45.21666666666667 +lat_0=43 +lon_0=-94 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26794":'+proj=tmerc +lat_0=29.66666666666667 +lon_0=-88.83333333333333 +k=0.99996 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26795":'+proj=tmerc +lat_0=30.5 +lon_0=-90.33333333333333 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26796":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.999933333 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26797":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-92.5 +k=0.999933333 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26798":'+proj=tmerc +lat_0=36.16666666666666 +lon_0=-94.5 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26799":'+proj=lcc +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333 +lon_0=-118.3333333333333 +x_0=1276106.450596901 +y_0=1268253.006858014 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:26801":'+proj=tmerc +lat_0=41.5 +lon_0=-83.66666666666667 +k=0.999942857 +x_0=152400.3048006096 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26802":'+proj=tmerc +lat_0=41.5 +lon_0=-85.75 +k=0.999909091 +x_0=152400.3048006096 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26803":'+proj=tmerc +lat_0=41.5 +lon_0=-88.75 +k=0.999909091 +x_0=152400.3048006096 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26811":'+proj=lcc +lat_1=45.48333333333333 +lat_2=47.08333333333334 +lat_0=44.78333333333333 +lon_0=-87 +x_0=609601.2192024384 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26812":'+proj=lcc +lat_1=44.18333333333333 +lat_2=45.7 +lat_0=43.31666666666667 +lon_0=-84.33333333333333 +x_0=609601.2192024384 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26813":'+proj=lcc +lat_1=42.1 +lat_2=43.66666666666666 +lat_0=41.5 +lon_0=-84.33333333333333 +x_0=609601.2192024384 +y_0=0 +a=6378450.047548896 +b=6356826.621488444 +units=us-ft +no_defs ',"EPSG:26814":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26815":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26819":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26820":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26821":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26822":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.0000101601 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26823":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26824":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26825":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26826":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26830":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26831":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26832":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26833":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.0000101601 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26834":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26835":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26836":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26837":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26841":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26842":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26843":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101601 +y_0=99999.99998984 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26844":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.0000101601 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26845":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26846":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=1968500 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26847":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26848":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26849":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26850":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26851":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26852":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26853":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26854":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26855":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26856":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26857":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26858":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26859":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26860":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26861":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26862":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26863":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26864":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26865":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26866":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26867":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000.0000101599 +y_0=99999.99998983997 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26868":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000.00001016 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26869":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26870":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:26891":'+proj=tmerc +lat_0=0 +lon_0=-82.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26892":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26893":'+proj=tmerc +lat_0=0 +lon_0=-84 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26894":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26895":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26896":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26897":'+proj=tmerc +lat_0=0 +lon_0=-96 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26898":'+proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26899":'+proj=tmerc +lat_0=0 +lon_0=-56 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26901":'+proj=utm +zone=1 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26902":'+proj=utm +zone=2 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26903":'+proj=utm +zone=3 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26904":'+proj=utm +zone=4 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26905":'+proj=utm +zone=5 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26906":'+proj=utm +zone=6 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26907":'+proj=utm +zone=7 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26908":'+proj=utm +zone=8 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26909":'+proj=utm +zone=9 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26910":'+proj=utm +zone=10 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26911":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26912":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26913":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26914":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26915":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26916":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26917":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26918":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26919":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26920":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26921":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26922":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26923":'+proj=utm +zone=23 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26929":'+proj=tmerc +lat_0=30.5 +lon_0=-85.83333333333333 +k=0.99996 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26930":'+proj=tmerc +lat_0=30 +lon_0=-87.5 +k=0.999933333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26931":'+proj=omerc +lat_0=57 +lonc=-133.6666666666667 +alpha=323.1301023611111 +k=0.9999 +x_0=5000000 +y_0=-5000000 +no_uoff +gamma=323.1301023611111 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26932":'+proj=tmerc +lat_0=54 +lon_0=-142 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26933":'+proj=tmerc +lat_0=54 +lon_0=-146 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26934":'+proj=tmerc +lat_0=54 +lon_0=-150 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26935":'+proj=tmerc +lat_0=54 +lon_0=-154 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26936":'+proj=tmerc +lat_0=54 +lon_0=-158 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26937":'+proj=tmerc +lat_0=54 +lon_0=-162 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26938":'+proj=tmerc +lat_0=54 +lon_0=-166 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26939":'+proj=tmerc +lat_0=54 +lon_0=-170 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26940":'+proj=lcc +lat_1=53.83333333333334 +lat_2=51.83333333333334 +lat_0=51 +lon_0=-176 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26941":'+proj=lcc +lat_1=41.66666666666666 +lat_2=40 +lat_0=39.33333333333334 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26942":'+proj=lcc +lat_1=39.83333333333334 +lat_2=38.33333333333334 +lat_0=37.66666666666666 +lon_0=-122 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26943":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.06666666666667 +lat_0=36.5 +lon_0=-120.5 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26944":'+proj=lcc +lat_1=37.25 +lat_2=36 +lat_0=35.33333333333334 +lon_0=-119 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26945":'+proj=lcc +lat_1=35.46666666666667 +lat_2=34.03333333333333 +lat_0=33.5 +lon_0=-118 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26946":'+proj=lcc +lat_1=33.88333333333333 +lat_2=32.78333333333333 +lat_0=32.16666666666666 +lon_0=-116.25 +x_0=2000000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26948":'+proj=tmerc +lat_0=31 +lon_0=-110.1666666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26949":'+proj=tmerc +lat_0=31 +lon_0=-111.9166666666667 +k=0.9999 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26950":'+proj=tmerc +lat_0=31 +lon_0=-113.75 +k=0.999933333 +x_0=213360 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26951":'+proj=lcc +lat_1=36.23333333333333 +lat_2=34.93333333333333 +lat_0=34.33333333333334 +lon_0=-92 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26952":'+proj=lcc +lat_1=34.76666666666667 +lat_2=33.3 +lat_0=32.66666666666666 +lon_0=-92 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26953":'+proj=lcc +lat_1=40.78333333333333 +lat_2=39.71666666666667 +lat_0=39.33333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26954":'+proj=lcc +lat_1=39.75 +lat_2=38.45 +lat_0=37.83333333333334 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26955":'+proj=lcc +lat_1=38.43333333333333 +lat_2=37.23333333333333 +lat_0=36.66666666666666 +lon_0=-105.5 +x_0=914401.8289 +y_0=304800.6096 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26956":'+proj=lcc +lat_1=41.86666666666667 +lat_2=41.2 +lat_0=40.83333333333334 +lon_0=-72.75 +x_0=304800.6096 +y_0=152400.3048 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26957":'+proj=tmerc +lat_0=38 +lon_0=-75.41666666666667 +k=0.999995 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26958":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-81 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26959":'+proj=tmerc +lat_0=24.33333333333333 +lon_0=-82 +k=0.999941177 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26960":'+proj=lcc +lat_1=30.75 +lat_2=29.58333333333333 +lat_0=29 +lon_0=-84.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26961":'+proj=tmerc +lat_0=18.83333333333333 +lon_0=-155.5 +k=0.999966667 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26962":'+proj=tmerc +lat_0=20.33333333333333 +lon_0=-156.6666666666667 +k=0.999966667 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26963":'+proj=tmerc +lat_0=21.16666666666667 +lon_0=-158 +k=0.99999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26964":'+proj=tmerc +lat_0=21.83333333333333 +lon_0=-159.5 +k=0.99999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26965":'+proj=tmerc +lat_0=21.66666666666667 +lon_0=-160.1666666666667 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26966":'+proj=tmerc +lat_0=30 +lon_0=-82.16666666666667 +k=0.9999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26967":'+proj=tmerc +lat_0=30 +lon_0=-84.16666666666667 +k=0.9999 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26968":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-112.1666666666667 +k=0.9999473679999999 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26969":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-114 +k=0.9999473679999999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26970":'+proj=tmerc +lat_0=41.66666666666666 +lon_0=-115.75 +k=0.999933333 +x_0=800000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26971":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26972":'+proj=tmerc +lat_0=36.66666666666666 +lon_0=-90.16666666666667 +k=0.999941177 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26973":'+proj=tmerc +lat_0=37.5 +lon_0=-85.66666666666667 +k=0.999966667 +x_0=100000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26974":'+proj=tmerc +lat_0=37.5 +lon_0=-87.08333333333333 +k=0.999966667 +x_0=900000 +y_0=250000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26975":'+proj=lcc +lat_1=43.26666666666667 +lat_2=42.06666666666667 +lat_0=41.5 +lon_0=-93.5 +x_0=1500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26976":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.61666666666667 +lat_0=40 +lon_0=-93.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26977":'+proj=lcc +lat_1=39.78333333333333 +lat_2=38.71666666666667 +lat_0=38.33333333333334 +lon_0=-98 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26978":'+proj=lcc +lat_1=38.56666666666667 +lat_2=37.26666666666667 +lat_0=36.66666666666666 +lon_0=-98.5 +x_0=400000 +y_0=400000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26979":'+proj=lcc +lat_1=37.96666666666667 +lat_2=37.96666666666667 +lat_0=37.5 +lon_0=-84.25 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26980":'+proj=lcc +lat_1=37.93333333333333 +lat_2=36.73333333333333 +lat_0=36.33333333333334 +lon_0=-85.75 +x_0=500000 +y_0=500000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26981":'+proj=lcc +lat_1=32.66666666666666 +lat_2=31.16666666666667 +lat_0=30.5 +lon_0=-92.5 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26982":'+proj=lcc +lat_1=30.7 +lat_2=29.3 +lat_0=28.5 +lon_0=-91.33333333333333 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26983":'+proj=tmerc +lat_0=43.66666666666666 +lon_0=-68.5 +k=0.9999 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26984":'+proj=tmerc +lat_0=42.83333333333334 +lon_0=-70.16666666666667 +k=0.999966667 +x_0=900000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26985":'+proj=lcc +lat_1=39.45 +lat_2=38.3 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26986":'+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26987":'+proj=lcc +lat_1=41.48333333333333 +lat_2=41.28333333333333 +lat_0=41 +lon_0=-70.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26988":'+proj=lcc +lat_1=47.08333333333334 +lat_2=45.48333333333333 +lat_0=44.78333333333333 +lon_0=-87 +x_0=8000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26989":'+proj=lcc +lat_1=45.7 +lat_2=44.18333333333333 +lat_0=43.31666666666667 +lon_0=-84.36666666666666 +x_0=6000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26990":'+proj=lcc +lat_1=43.66666666666666 +lat_2=42.1 +lat_0=41.5 +lon_0=-84.36666666666666 +x_0=4000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26991":'+proj=lcc +lat_1=48.63333333333333 +lat_2=47.03333333333333 +lat_0=46.5 +lon_0=-93.09999999999999 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26992":'+proj=lcc +lat_1=47.05 +lat_2=45.61666666666667 +lat_0=45 +lon_0=-94.25 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26993":'+proj=lcc +lat_1=45.21666666666667 +lat_2=43.78333333333333 +lat_0=43 +lon_0=-94 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26994":'+proj=tmerc +lat_0=29.5 +lon_0=-88.83333333333333 +k=0.99995 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26995":'+proj=tmerc +lat_0=29.5 +lon_0=-90.33333333333333 +k=0.99995 +x_0=700000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26996":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-90.5 +k=0.999933333 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26997":'+proj=tmerc +lat_0=35.83333333333334 +lon_0=-92.5 +k=0.999933333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:26998":'+proj=tmerc +lat_0=36.16666666666666 +lon_0=-94.5 +k=0.999941177 +x_0=850000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:27037":'+proj=utm +zone=37 +ellps=clrk80 +towgs84=-242.2,-144.9,370.3,0,0,0,0 +units=m +no_defs ',"EPSG:27038":'+proj=utm +zone=38 +ellps=clrk80 +towgs84=-242.2,-144.9,370.3,0,0,0,0 +units=m +no_defs ',"EPSG:27039":'+proj=utm +zone=39 +ellps=clrk80 +towgs84=-242.2,-144.9,370.3,0,0,0,0 +units=m +no_defs ',"EPSG:27040":'+proj=utm +zone=40 +ellps=clrk80 +towgs84=-242.2,-144.9,370.3,0,0,0,0 +units=m +no_defs ',"EPSG:27120":'+proj=utm +zone=20 +ellps=intl +towgs84=-10,375,165,0,0,0,0 +units=m +no_defs ',"EPSG:27200":'+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27205":'+proj=tmerc +lat_0=-36.87986527777778 +lon_0=174.7643393611111 +k=0.9999 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27206":'+proj=tmerc +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27207":'+proj=tmerc +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27208":'+proj=tmerc +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27209":'+proj=tmerc +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27210":'+proj=tmerc +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27211":'+proj=tmerc +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27212":'+proj=tmerc +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27213":'+proj=tmerc +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27214":'+proj=tmerc +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27215":'+proj=tmerc +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27216":'+proj=tmerc +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27217":'+proj=tmerc +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27218":'+proj=tmerc +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27219":'+proj=tmerc +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27220":'+proj=tmerc +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27221":'+proj=tmerc +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27222":'+proj=tmerc +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27223":'+proj=tmerc +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27224":'+proj=tmerc +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27225":'+proj=tmerc +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27226":'+proj=tmerc +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27227":'+proj=tmerc +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27228":'+proj=tmerc +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27229":'+proj=tmerc +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27230":'+proj=tmerc +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27231":'+proj=tmerc +lat_0=-45.86151336111111 +lon_0=170.2825891111111 +k=0.99996 +x_0=300000 +y_0=700000 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27232":'+proj=tmerc +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27258":'+proj=utm +zone=58 +south +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27259":'+proj=utm +zone=59 +south +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27260":'+proj=utm +zone=60 +south +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +units=m +no_defs ',"EPSG:27291":'+proj=tmerc +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +to_meter=0.9143984146160287 +no_defs ',"EPSG:27292":'+proj=tmerc +lat_0=-44 +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143 +ellps=intl +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993 +to_meter=0.9143984146160287 +no_defs ',"EPSG:27391":'+proj=tmerc +lat_0=58 +lon_0=-4.666666666666667 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27392":'+proj=tmerc +lat_0=58 +lon_0=-2.333333333333333 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27393":'+proj=tmerc +lat_0=58 +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27394":'+proj=tmerc +lat_0=58 +lon_0=2.5 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27395":'+proj=tmerc +lat_0=58 +lon_0=6.166666666666667 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27396":'+proj=tmerc +lat_0=58 +lon_0=10.16666666666667 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27397":'+proj=tmerc +lat_0=58 +lon_0=14.16666666666667 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27398":'+proj=tmerc +lat_0=58 +lon_0=18.33333333333333 +k=1 +x_0=0 +y_0=0 +a=6377492.018 +b=6356173.508712696 +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21 +pm=oslo +units=m +no_defs ',"EPSG:27429":'+proj=utm +zone=29 +ellps=intl +towgs84=-223.237,110.193,36.649,0,0,0,0 +units=m +no_defs ',"EPSG:27492":'+proj=tmerc +lat_0=39.66666666666666 +lon_0=-8.131906111111112 +k=1 +x_0=180.598 +y_0=-86.98999999999999 +ellps=intl +towgs84=-223.237,110.193,36.649,0,0,0,0 +units=m +no_defs ',"EPSG:27493":'+proj=tmerc +lat_0=39.66666666666666 +lon_0=-8.131906111111112 +k=1 +x_0=180.598 +y_0=-86.98999999999999 +ellps=intl +towgs84=-223.237,110.193,36.649,0,0,0,0 +units=m +no_defs ',"EPSG:27500":'+proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=5.399999999999999 +k_0=0.99950908 +x_0=500000 +y_0=300000 +a=6376523 +b=6355862.933255573 +pm=2.337208333333333 +units=m +no_defs ',"EPSG:27561":'+proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27562":'+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27563":'+proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.999877499 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27564":'+proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.99994471 +x_0=234.358 +y_0=185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27571":'+proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=1200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27572":'+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27573":'+proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.999877499 +x_0=600000 +y_0=3200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27574":'+proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27581":'+proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=1200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27582":'+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27583":'+proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.999877499 +x_0=600000 +y_0=3200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27584":'+proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27591":'+proj=lcc +lat_1=49.50000000000001 +lat_0=49.50000000000001 +lon_0=0 +k_0=0.999877341 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27592":'+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27593":'+proj=lcc +lat_1=44.10000000000001 +lat_0=44.10000000000001 +lon_0=0 +k_0=0.999877499 +x_0=600000 +y_0=200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27594":'+proj=lcc +lat_1=42.16500000000001 +lat_0=42.16500000000001 +lon_0=0 +k_0=0.99994471 +x_0=234.358 +y_0=185861.369 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:27700":'+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs ',"EPSG:28191":'+proj=cass +lat_0=31.73409694444445 +lon_0=35.21208055555556 +x_0=170251.555 +y_0=126867.909 +a=6378300.789 +b=6356566.435 +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1 +units=m +no_defs ',"EPSG:28192":'+proj=tmerc +lat_0=31.73409694444445 +lon_0=35.21208055555556 +k=1 +x_0=170251.555 +y_0=1126867.909 +a=6378300.789 +b=6356566.435 +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1 +units=m +no_defs ',"EPSG:28193":'+proj=cass +lat_0=31.73409694444445 +lon_0=35.21208055555556 +x_0=170251.555 +y_0=1126867.909 +a=6378300.789 +b=6356566.435 +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1 +units=m +no_defs ',"EPSG:28232":'+proj=utm +zone=32 +south +a=6378249.2 +b=6356515 +towgs84=-148,51,-291,0,0,0,0 +units=m +no_defs ',"EPSG:28348":'+proj=utm +zone=48 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28349":'+proj=utm +zone=49 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28350":'+proj=utm +zone=50 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28351":'+proj=utm +zone=51 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28352":'+proj=utm +zone=52 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28353":'+proj=utm +zone=53 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28354":'+proj=utm +zone=54 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28355":'+proj=utm +zone=55 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28356":'+proj=utm +zone=56 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28357":'+proj=utm +zone=57 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28358":'+proj=utm +zone=58 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:28402":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=2500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28403":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=3500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28404":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=4500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28405":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=5500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28406":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=6500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28407":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=7500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28408":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=8500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28409":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=9500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28410":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=10500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28411":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=11500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28412":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=12500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28413":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=13500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28414":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=14500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28415":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=15500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28416":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=16500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28417":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=17500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28418":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=18500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28419":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=19500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28420":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=20500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28421":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=21500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28422":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=22500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28423":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=23500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28424":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=24500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28425":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=25500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28426":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=26500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28427":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=27500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28428":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=28500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28429":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=29500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28430":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=30500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28431":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=31500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28432":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=32500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28462":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28463":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28464":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28465":'+proj=tmerc +lat_0=0 +lon_0=27 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28466":'+proj=tmerc +lat_0=0 +lon_0=33 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28467":'+proj=tmerc +lat_0=0 +lon_0=39 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28468":'+proj=tmerc +lat_0=0 +lon_0=45 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28469":'+proj=tmerc +lat_0=0 +lon_0=51 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28470":'+proj=tmerc +lat_0=0 +lon_0=57 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28471":'+proj=tmerc +lat_0=0 +lon_0=63 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28472":'+proj=tmerc +lat_0=0 +lon_0=69 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28473":'+proj=tmerc +lat_0=0 +lon_0=75 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28474":'+proj=tmerc +lat_0=0 +lon_0=81 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28475":'+proj=tmerc +lat_0=0 +lon_0=87 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28476":'+proj=tmerc +lat_0=0 +lon_0=93 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28477":'+proj=tmerc +lat_0=0 +lon_0=99 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28478":'+proj=tmerc +lat_0=0 +lon_0=105 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28479":'+proj=tmerc +lat_0=0 +lon_0=111 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28480":'+proj=tmerc +lat_0=0 +lon_0=117 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28481":'+proj=tmerc +lat_0=0 +lon_0=123 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28482":'+proj=tmerc +lat_0=0 +lon_0=129 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28483":'+proj=tmerc +lat_0=0 +lon_0=135 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28484":'+proj=tmerc +lat_0=0 +lon_0=141 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28485":'+proj=tmerc +lat_0=0 +lon_0=147 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28486":'+proj=tmerc +lat_0=0 +lon_0=153 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28487":'+proj=tmerc +lat_0=0 +lon_0=159 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28488":'+proj=tmerc +lat_0=0 +lon_0=165 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28489":'+proj=tmerc +lat_0=0 +lon_0=171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28490":'+proj=tmerc +lat_0=0 +lon_0=177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28491":'+proj=tmerc +lat_0=0 +lon_0=-177 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28492":'+proj=tmerc +lat_0=0 +lon_0=-171 +k=1 +x_0=500000 +y_0=0 +ellps=krass +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12 +units=m +no_defs ',"EPSG:28600":'+proj=tmerc +lat_0=24.45 +lon_0=51.21666666666667 +k=0.99999 +x_0=200000 +y_0=300000 +ellps=intl +towgs84=-128.16,-282.42,21.93,0,0,0,0 +units=m +no_defs ',"EPSG:28991":'+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=0 +y_0=0 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs ',"EPSG:28992":'+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs ',"EPSG:29100":'+proj=poly +lat_0=0 +lon_0=-54 +x_0=5000000 +y_0=10000000 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29101":'+proj=poly +lat_0=0 +lon_0=-54 +x_0=5000000 +y_0=10000000 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29118":'+proj=utm +zone=18 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29119":'+proj=utm +zone=19 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29120":'+proj=utm +zone=20 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29121":'+proj=utm +zone=21 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29122":'+proj=utm +zone=22 +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29168":'+proj=utm +zone=18 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29169":'+proj=utm +zone=19 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29170":'+proj=utm +zone=20 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29171":'+proj=utm +zone=21 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29172":'+proj=utm +zone=22 +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29177":'+proj=utm +zone=17 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29178":'+proj=utm +zone=18 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29179":'+proj=utm +zone=19 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29180":'+proj=utm +zone=20 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29181":'+proj=utm +zone=21 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29182":'+proj=utm +zone=22 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29183":'+proj=utm +zone=23 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29184":'+proj=utm +zone=24 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29185":'+proj=utm +zone=25 +south +ellps=GRS67 +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29187":'+proj=utm +zone=17 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29188":'+proj=utm +zone=18 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29189":'+proj=utm +zone=19 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29190":'+proj=utm +zone=20 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29191":'+proj=utm +zone=21 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29192":'+proj=utm +zone=22 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29193":'+proj=utm +zone=23 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29194":'+proj=utm +zone=24 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29195":'+proj=utm +zone=25 +south +ellps=aust_SA +towgs84=-57,1,-41,0,0,0,0 +units=m +no_defs ',"EPSG:29220":'+proj=utm +zone=20 +south +ellps=intl +towgs84=-355,21,72,0,0,0,0 +units=m +no_defs ',"EPSG:29221":'+proj=utm +zone=21 +south +ellps=intl +towgs84=-355,21,72,0,0,0,0 +units=m +no_defs ',"EPSG:29333":'+proj=utm +zone=33 +south +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +units=m +no_defs ',"EPSG:29371":'+proj=tmerc +lat_0=-22 +lon_0=11 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29373":'+proj=tmerc +lat_0=-22 +lon_0=13 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29375":'+proj=tmerc +lat_0=-22 +lon_0=15 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29377":'+proj=tmerc +lat_0=-22 +lon_0=17 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29379":'+proj=tmerc +lat_0=-22 +lon_0=19 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29381":'+proj=tmerc +lat_0=-22 +lon_0=21 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29383":'+proj=tmerc +lat_0=-22 +lon_0=23 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29385":'+proj=tmerc +lat_0=-22 +lon_0=25 +k=1 +x_0=0 +y_0=0 +axis=wsu +ellps=bess_nam +towgs84=616,97,-251,0,0,0,0 +to_meter=1.0000135965 +no_defs ',"EPSG:29635":'+proj=utm +zone=35 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:29636":'+proj=utm +zone=36 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:29700":'+proj=omerc +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9 +k=0.9995000000000001 +x_0=400000 +y_0=800000 +gamma=18.9 +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:29702":'+proj=omerc +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9 +k=0.9995000000000001 +x_0=400000 +y_0=800000 +gamma=18.9 +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +pm=paris +units=m +no_defs ',"EPSG:29738":'+proj=utm +zone=38 +south +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +units=m +no_defs ',"EPSG:29739":'+proj=utm +zone=39 +south +ellps=intl +towgs84=-189,-242,-91,0,0,0,0 +units=m +no_defs ',"EPSG:29849":'+proj=utm +zone=49 +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +units=m +no_defs ',"EPSG:29850":'+proj=utm +zone=50 +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +units=m +no_defs ',"EPSG:29871":'+proj=omerc +lat_0=4 +lonc=115 +alpha=53.31582047222222 +k=0.99984 +x_0=590476.8714630401 +y_0=442857.653094361 +gamma=53.13010236111111 +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +to_meter=20.11676512155263 +no_defs ',"EPSG:29872":'+proj=omerc +lat_0=4 +lonc=115 +alpha=53.31582047222222 +k=0.99984 +x_0=590476.8727431979 +y_0=442857.6545573985 +gamma=53.13010236111111 +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +to_meter=0.3047994715386762 +no_defs ',"EPSG:29873":'+proj=omerc +lat_0=4 +lonc=115 +alpha=53.31582047222222 +k=0.99984 +x_0=590476.87 +y_0=442857.65 +gamma=53.13010236111111 +ellps=evrstSS +towgs84=-679,669,-48,0,0,0,0 +units=m +no_defs ',"EPSG:29900":'+proj=tmerc +lat_0=53.5 +lon_0=-8 +k=1.000035 +x_0=200000 +y_0=250000 +ellps=mod_airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +units=m +no_defs ',"EPSG:29901":'+proj=tmerc +lat_0=53.5 +lon_0=-8 +k=1 +x_0=200000 +y_0=250000 +ellps=airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +units=m +no_defs ',"EPSG:29902":'+proj=tmerc +lat_0=53.5 +lon_0=-8 +k=1.000035 +x_0=200000 +y_0=250000 +ellps=mod_airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +units=m +no_defs ',"EPSG:29903":'+proj=tmerc +lat_0=53.5 +lon_0=-8 +k=1.000035 +x_0=200000 +y_0=250000 +ellps=mod_airy +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15 +units=m +no_defs ',"EPSG:30161":'+proj=tmerc +lat_0=33 +lon_0=129.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30162":'+proj=tmerc +lat_0=33 +lon_0=131 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30163":'+proj=tmerc +lat_0=36 +lon_0=132.1666666666667 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30164":'+proj=tmerc +lat_0=33 +lon_0=133.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30165":'+proj=tmerc +lat_0=36 +lon_0=134.3333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30166":'+proj=tmerc +lat_0=36 +lon_0=136 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30167":'+proj=tmerc +lat_0=36 +lon_0=137.1666666666667 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30168":'+proj=tmerc +lat_0=36 +lon_0=138.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30169":'+proj=tmerc +lat_0=36 +lon_0=139.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30170":'+proj=tmerc +lat_0=40 +lon_0=140.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30171":'+proj=tmerc +lat_0=44 +lon_0=140.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30172":'+proj=tmerc +lat_0=44 +lon_0=142.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30173":'+proj=tmerc +lat_0=44 +lon_0=144.25 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30174":'+proj=tmerc +lat_0=26 +lon_0=142 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30175":'+proj=tmerc +lat_0=26 +lon_0=127.5 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30176":'+proj=tmerc +lat_0=26 +lon_0=124 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30177":'+proj=tmerc +lat_0=26 +lon_0=131 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30178":'+proj=tmerc +lat_0=20 +lon_0=136 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30179":'+proj=tmerc +lat_0=26 +lon_0=154 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=-146.414,507.337,680.507,0,0,0,0 +units=m +no_defs ',"EPSG:30200":'+proj=cass +lat_0=10.44166666666667 +lon_0=-61.33333333333334 +x_0=86501.46392051999 +y_0=65379.0134283 +a=6378293.645208759 +b=6356617.987679838 +towgs84=-61.702,284.488,472.052,0,0,0,0 +to_meter=0.201166195164 +no_defs ',"EPSG:30339":'+proj=utm +zone=39 +ellps=helmert +units=m +no_defs ',"EPSG:30340":'+proj=utm +zone=40 +ellps=helmert +units=m +no_defs ',"EPSG:30491":'+proj=lcc +lat_1=36 +lat_0=36 +lon_0=2.7 +k_0=0.999625544 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-73,-247,227,0,0,0,0 +units=m +no_defs ',"EPSG:30492":'+proj=lcc +lat_1=33.3 +lat_0=33.3 +lon_0=2.7 +k_0=0.999625769 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +towgs84=-73,-247,227,0,0,0,0 +units=m +no_defs ',"EPSG:30493":'+proj=lcc +lat_1=36 +lat_0=36 +lon_0=2.7 +k_0=0.999625544 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:30494":'+proj=lcc +lat_1=33.3 +lat_0=33.3 +lon_0=2.7 +k_0=0.999625769 +x_0=500000 +y_0=300000 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:30729":'+proj=utm +zone=29 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30730":'+proj=utm +zone=30 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30731":'+proj=utm +zone=31 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30732":'+proj=utm +zone=32 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30791":'+proj=lcc +lat_1=36 +lat_0=36 +lon_0=2.7 +k_0=0.999625544 +x_0=500135 +y_0=300090 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30792":'+proj=lcc +lat_1=33.3 +lat_0=33.3 +lon_0=2.7 +k_0=0.999625769 +x_0=500135 +y_0=300090 +ellps=clrk80 +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547 +units=m +no_defs ',"EPSG:30800":'+proj=tmerc +lat_0=0 +lon_0=15.80827777777778 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +units=m +no_defs ',"EPSG:31028":'+proj=utm +zone=28 +a=6378249.2 +b=6356515 +units=m +no_defs ',"EPSG:31121":'+proj=utm +zone=21 +ellps=intl +towgs84=-265,120,-358,0,0,0,0 +units=m +no_defs ',"EPSG:31154":'+proj=tmerc +lat_0=0 +lon_0=-54 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-265,120,-358,0,0,0,0 +units=m +no_defs ',"EPSG:31170":'+proj=tmerc +lat_0=0 +lon_0=-55.68333333333333 +k=0.9996 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-265,120,-358,0,0,0,0 +units=m +no_defs ',"EPSG:31171":'+proj=tmerc +lat_0=0 +lon_0=-55.68333333333333 +k=0.9999 +x_0=500000 +y_0=0 +ellps=intl +towgs84=-265,120,-358,0,0,0,0 +units=m +no_defs ',"EPSG:31251":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31252":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31253":'+proj=tmerc +lat_0=0 +lon_0=34 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31254":'+proj=tmerc +lat_0=0 +lon_0=10.33333333333333 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31255":'+proj=tmerc +lat_0=0 +lon_0=13.33333333333333 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31256":'+proj=tmerc +lat_0=0 +lon_0=16.33333333333333 +k=1 +x_0=0 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31257":'+proj=tmerc +lat_0=0 +lon_0=10.33333333333333 +k=1 +x_0=150000 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31258":'+proj=tmerc +lat_0=0 +lon_0=13.33333333333333 +k=1 +x_0=450000 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31259":'+proj=tmerc +lat_0=0 +lon_0=16.33333333333333 +k=1 +x_0=750000 +y_0=-5000000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31265":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31266":'+proj=tmerc +lat_0=0 +lon_0=18 +k=1 +x_0=6500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31267":'+proj=tmerc +lat_0=0 +lon_0=21 +k=1 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31268":'+proj=tmerc +lat_0=0 +lon_0=24 +k=1 +x_0=8500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31275":'+proj=tmerc +lat_0=0 +lon_0=15 +k=0.9999 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31276":'+proj=tmerc +lat_0=0 +lon_0=18 +k=0.9999 +x_0=6500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31277":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31278":'+proj=tmerc +lat_0=0 +lon_0=21 +k=0.9999 +x_0=7500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31279":'+proj=tmerc +lat_0=0 +lon_0=24 +k=0.9999 +x_0=8500000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31281":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31282":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31283":'+proj=tmerc +lat_0=0 +lon_0=34 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31284":'+proj=tmerc +lat_0=0 +lon_0=10.33333333333333 +k=1 +x_0=150000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31285":'+proj=tmerc +lat_0=0 +lon_0=13.33333333333333 +k=1 +x_0=450000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31286":'+proj=tmerc +lat_0=0 +lon_0=16.33333333333333 +k=1 +x_0=750000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31287":'+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5 +lon_0=13.33333333333333 +x_0=400000 +y_0=400000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31288":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=150000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31289":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=450000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31290":'+proj=tmerc +lat_0=0 +lon_0=34 +k=1 +x_0=750000 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31291":'+proj=tmerc +lat_0=0 +lon_0=28 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31292":'+proj=tmerc +lat_0=0 +lon_0=31 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31293":'+proj=tmerc +lat_0=0 +lon_0=34 +k=1 +x_0=0 +y_0=0 +ellps=bessel +towgs84=682,-203,480,0,0,0,0 +pm=ferro +units=m +no_defs ',"EPSG:31294":'+proj=tmerc +lat_0=0 +lon_0=10.33333333333333 +k=1 +x_0=150000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31295":'+proj=tmerc +lat_0=0 +lon_0=13.33333333333333 +k=1 +x_0=450000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31296":'+proj=tmerc +lat_0=0 +lon_0=16.33333333333333 +k=1 +x_0=750000 +y_0=0 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31297":'+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5 +lon_0=13.33333333333333 +x_0=400000 +y_0=400000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs ',"EPSG:31300":'+proj=lcc +lat_1=49.83333333333334 +lat_2=51.16666666666666 +lat_0=90 +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378 +ellps=intl +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747 +units=m +no_defs ',"EPSG:31370":'+proj=lcc +lat_1=51.16666723333333 +lat_2=49.8333339 +lat_0=90 +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438 +ellps=intl +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747 +units=m +no_defs ',"EPSG:31461":'+proj=tmerc +lat_0=0 +lon_0=3 +k=1 +x_0=1500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31462":'+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31463":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31464":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31465":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31466":'+proj=tmerc +lat_0=0 +lon_0=6 +k=1 +x_0=2500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31467":'+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31468":'+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31469":'+proj=tmerc +lat_0=0 +lon_0=15 +k=1 +x_0=5500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs ',"EPSG:31528":'+proj=utm +zone=28 +a=6378249.2 +b=6356515 +towgs84=-23,259,-9,0,0,0,0 +units=m +no_defs ',"EPSG:31529":'+proj=utm +zone=29 +a=6378249.2 +b=6356515 +towgs84=-23,259,-9,0,0,0,0 +units=m +no_defs ',"EPSG:31600":'+proj=sterea +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667 +x_0=500000 +y_0=500000 +ellps=intl +towgs84=103.25,-100.4,-307.19,0,0,0,0 +units=m +no_defs ',"EPSG:31700":'+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000 +y_0=500000 +ellps=krass +towgs84=28,-121,-77,0,0,0,0 +units=m +no_defs ',"EPSG:31838":'+proj=utm +zone=38 +ellps=WGS84 +towgs84=-3.2,-5.7,2.8,0,0,0,0 +units=m +no_defs ',"EPSG:31839":'+proj=utm +zone=39 +ellps=WGS84 +towgs84=-3.2,-5.7,2.8,0,0,0,0 +units=m +no_defs ',"EPSG:31900":'+proj=tmerc +lat_0=0 +lon_0=48 +k=0.9996 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-20.8,11.3,2.4,0,0,0,0 +units=m +no_defs ',"EPSG:31901":'+proj=tmerc +lat_0=0 +lon_0=48 +k=1 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=-20.8,11.3,2.4,0,0,0,0 +units=m +no_defs ',"EPSG:31965":'+proj=utm +zone=11 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31966":'+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31967":'+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31968":'+proj=utm +zone=14 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31969":'+proj=utm +zone=15 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31970":'+proj=utm +zone=16 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31971":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31972":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31973":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31974":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31975":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31976":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31977":'+proj=utm +zone=17 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31978":'+proj=utm +zone=18 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31979":'+proj=utm +zone=19 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31980":'+proj=utm +zone=20 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31981":'+proj=utm +zone=21 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31982":'+proj=utm +zone=22 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31983":'+proj=utm +zone=23 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31984":'+proj=utm +zone=24 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31985":'+proj=utm +zone=25 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31986":'+proj=utm +zone=17 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31987":'+proj=utm +zone=18 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31988":'+proj=utm +zone=19 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31989":'+proj=utm +zone=20 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31990":'+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31991":'+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31992":'+proj=utm +zone=17 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31993":'+proj=utm +zone=18 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31994":'+proj=utm +zone=19 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31995":'+proj=utm +zone=20 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31996":'+proj=utm +zone=21 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31997":'+proj=utm +zone=22 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31998":'+proj=utm +zone=23 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:31999":'+proj=utm +zone=24 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32000":'+proj=utm +zone=25 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32001":'+proj=lcc +lat_1=48.71666666666667 +lat_2=47.85 +lat_0=47 +lon_0=-109.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32002":'+proj=lcc +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334 +lon_0=-109.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32003":'+proj=lcc +lat_1=46.4 +lat_2=44.86666666666667 +lat_0=44 +lon_0=-109.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32005":'+proj=lcc +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334 +lon_0=-100 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32006":'+proj=lcc +lat_1=40.28333333333333 +lat_2=41.71666666666667 +lat_0=39.66666666666666 +lon_0=-99.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32007":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32008":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32009":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32010":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32011":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.66666666666667 +k=0.9999749999999999 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32012":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32013":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32014":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32015":'+proj=tmerc +lat_0=40 +lon_0=-74.33333333333333 +k=0.999966667 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32016":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32017":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32018":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.5 +lon_0=-74 +x_0=304800.6096012192 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32019":'+proj=lcc +lat_1=34.33333333333334 +lat_2=36.16666666666666 +lat_0=33.75 +lon_0=-79 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32020":'+proj=lcc +lat_1=47.43333333333333 +lat_2=48.73333333333333 +lat_0=47 +lon_0=-100.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32021":'+proj=lcc +lat_1=46.18333333333333 +lat_2=47.48333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32022":'+proj=lcc +lat_1=40.43333333333333 +lat_2=41.7 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32023":'+proj=lcc +lat_1=38.73333333333333 +lat_2=40.03333333333333 +lat_0=38 +lon_0=-82.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32024":'+proj=lcc +lat_1=35.56666666666667 +lat_2=36.76666666666667 +lat_0=35 +lon_0=-98 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32025":'+proj=lcc +lat_1=33.93333333333333 +lat_2=35.23333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32026":'+proj=lcc +lat_1=44.33333333333334 +lat_2=46 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32027":'+proj=lcc +lat_1=42.33333333333334 +lat_2=44 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32028":'+proj=lcc +lat_1=40.88333333333333 +lat_2=41.95 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32029":'+proj=lcc +lat_1=39.93333333333333 +lat_2=40.8 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32030":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.9999938 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32031":'+proj=lcc +lat_1=33.76666666666667 +lat_2=34.96666666666667 +lat_0=33 +lon_0=-81 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32033":'+proj=lcc +lat_1=32.33333333333334 +lat_2=33.66666666666666 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32034":'+proj=lcc +lat_1=44.41666666666666 +lat_2=45.68333333333333 +lat_0=43.83333333333334 +lon_0=-100 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32035":'+proj=lcc +lat_1=42.83333333333334 +lat_2=44.4 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32036":'+proj=lcc +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666 +lon_0=-86 +x_0=30480.06096012192 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32037":'+proj=lcc +lat_1=34.65 +lat_2=36.18333333333333 +lat_0=34 +lon_0=-101.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32038":'+proj=lcc +lat_1=32.13333333333333 +lat_2=33.96666666666667 +lat_0=31.66666666666667 +lon_0=-97.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32039":'+proj=lcc +lat_1=30.11666666666667 +lat_2=31.88333333333333 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32040":'+proj=lcc +lat_1=28.38333333333333 +lat_2=30.28333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32041":'+proj=lcc +lat_1=26.16666666666667 +lat_2=27.83333333333333 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32042":'+proj=lcc +lat_1=40.71666666666667 +lat_2=41.78333333333333 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32043":'+proj=lcc +lat_1=39.01666666666667 +lat_2=40.65 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32044":'+proj=lcc +lat_1=37.21666666666667 +lat_2=38.35 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32045":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32046":'+proj=lcc +lat_1=38.03333333333333 +lat_2=39.2 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32047":'+proj=lcc +lat_1=36.76666666666667 +lat_2=37.96666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32048":'+proj=lcc +lat_1=47.5 +lat_2=48.73333333333333 +lat_0=47 +lon_0=-120.8333333333333 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32049":'+proj=lcc +lat_1=45.83333333333334 +lat_2=47.33333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32050":'+proj=lcc +lat_1=39 +lat_2=40.25 +lat_0=38.5 +lon_0=-79.5 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32051":'+proj=lcc +lat_1=37.48333333333333 +lat_2=38.88333333333333 +lat_0=37 +lon_0=-81 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32052":'+proj=lcc +lat_1=45.56666666666667 +lat_2=46.76666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32053":'+proj=lcc +lat_1=44.25 +lat_2=45.5 +lat_0=43.83333333333334 +lon_0=-90 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32054":'+proj=lcc +lat_1=42.73333333333333 +lat_2=44.06666666666667 +lat_0=42 +lon_0=-90 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32055":'+proj=tmerc +lat_0=40.66666666666666 +lon_0=-105.1666666666667 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32056":'+proj=tmerc +lat_0=40.66666666666666 +lon_0=-107.3333333333333 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32057":'+proj=tmerc +lat_0=40.66666666666666 +lon_0=-108.75 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32058":'+proj=tmerc +lat_0=40.66666666666666 +lon_0=-110.0833333333333 +k=0.999941177 +x_0=152400.3048006096 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32061":'+proj=lcc +lat_1=16.81666666666667 +lat_0=16.81666666666667 +lon_0=-90.33333333333333 +k_0=0.99992226 +x_0=500000 +y_0=292209.579 +datum=NAD27 +units=m +no_defs ',"EPSG:32062":'+proj=lcc +lat_1=14.9 +lat_0=14.9 +lon_0=-90.33333333333333 +k_0=0.99989906 +x_0=500000 +y_0=325992.681 +datum=NAD27 +units=m +no_defs ',"EPSG:32064":'+proj=tmerc +lat_0=0 +lon_0=-99 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32065":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32066":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32067":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32074":'+proj=tmerc +lat_0=0 +lon_0=-99 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32075":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32076":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32077":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32081":'+proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32082":'+proj=tmerc +lat_0=0 +lon_0=-56 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32083":'+proj=tmerc +lat_0=0 +lon_0=-58.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32084":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32085":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32086":'+proj=tmerc +lat_0=0 +lon_0=-67.5 +k=0.9999 +x_0=304800 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32098":'+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +datum=NAD27 +units=m +no_defs ',"EPSG:32099":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-91.33333333333333 +x_0=609601.2192024384 +y_0=0 +datum=NAD27 +units=us-ft +no_defs ',"EPSG:32100":'+proj=lcc +lat_1=49 +lat_2=45 +lat_0=44.25 +lon_0=-109.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32104":'+proj=lcc +lat_1=43 +lat_2=40 +lat_0=39.83333333333334 +lon_0=-100 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32107":'+proj=tmerc +lat_0=34.75 +lon_0=-115.5833333333333 +k=0.9999 +x_0=200000 +y_0=8000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32108":'+proj=tmerc +lat_0=34.75 +lon_0=-116.6666666666667 +k=0.9999 +x_0=500000 +y_0=6000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32109":'+proj=tmerc +lat_0=34.75 +lon_0=-118.5833333333333 +k=0.9999 +x_0=800000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32110":'+proj=tmerc +lat_0=42.5 +lon_0=-71.66666666666667 +k=0.999966667 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32111":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32112":'+proj=tmerc +lat_0=31 +lon_0=-104.3333333333333 +k=0.999909091 +x_0=165000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32113":'+proj=tmerc +lat_0=31 +lon_0=-106.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32114":'+proj=tmerc +lat_0=31 +lon_0=-107.8333333333333 +k=0.999916667 +x_0=830000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32115":'+proj=tmerc +lat_0=38.83333333333334 +lon_0=-74.5 +k=0.9999 +x_0=150000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32116":'+proj=tmerc +lat_0=40 +lon_0=-76.58333333333333 +k=0.9999375 +x_0=250000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32117":'+proj=tmerc +lat_0=40 +lon_0=-78.58333333333333 +k=0.9999375 +x_0=350000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32118":'+proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32119":'+proj=lcc +lat_1=36.16666666666666 +lat_2=34.33333333333334 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32120":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.43333333333333 +lat_0=47 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32121":'+proj=lcc +lat_1=47.48333333333333 +lat_2=46.18333333333333 +lat_0=45.66666666666666 +lon_0=-100.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32122":'+proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32123":'+proj=lcc +lat_1=40.03333333333333 +lat_2=38.73333333333333 +lat_0=38 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32124":'+proj=lcc +lat_1=36.76666666666667 +lat_2=35.56666666666667 +lat_0=35 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32125":'+proj=lcc +lat_1=35.23333333333333 +lat_2=33.93333333333333 +lat_0=33.33333333333334 +lon_0=-98 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32126":'+proj=lcc +lat_1=46 +lat_2=44.33333333333334 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32127":'+proj=lcc +lat_1=44 +lat_2=42.33333333333334 +lat_0=41.66666666666666 +lon_0=-120.5 +x_0=1500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32128":'+proj=lcc +lat_1=41.95 +lat_2=40.88333333333333 +lat_0=40.16666666666666 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32129":'+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32130":'+proj=tmerc +lat_0=41.08333333333334 +lon_0=-71.5 +k=0.99999375 +x_0=100000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32133":'+proj=lcc +lat_1=34.83333333333334 +lat_2=32.5 +lat_0=31.83333333333333 +lon_0=-81 +x_0=609600 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32134":'+proj=lcc +lat_1=45.68333333333333 +lat_2=44.41666666666666 +lat_0=43.83333333333334 +lon_0=-100 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32135":'+proj=lcc +lat_1=44.4 +lat_2=42.83333333333334 +lat_0=42.33333333333334 +lon_0=-100.3333333333333 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32136":'+proj=lcc +lat_1=36.41666666666666 +lat_2=35.25 +lat_0=34.33333333333334 +lon_0=-86 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32137":'+proj=lcc +lat_1=36.18333333333333 +lat_2=34.65 +lat_0=34 +lon_0=-101.5 +x_0=200000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32138":'+proj=lcc +lat_1=33.96666666666667 +lat_2=32.13333333333333 +lat_0=31.66666666666667 +lon_0=-98.5 +x_0=600000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32139":'+proj=lcc +lat_1=31.88333333333333 +lat_2=30.11666666666667 +lat_0=29.66666666666667 +lon_0=-100.3333333333333 +x_0=700000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32140":'+proj=lcc +lat_1=30.28333333333333 +lat_2=28.38333333333333 +lat_0=27.83333333333333 +lon_0=-99 +x_0=600000 +y_0=4000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32141":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.66666666666667 +lon_0=-98.5 +x_0=300000 +y_0=5000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32142":'+proj=lcc +lat_1=41.78333333333333 +lat_2=40.71666666666667 +lat_0=40.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32143":'+proj=lcc +lat_1=40.65 +lat_2=39.01666666666667 +lat_0=38.33333333333334 +lon_0=-111.5 +x_0=500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32144":'+proj=lcc +lat_1=38.35 +lat_2=37.21666666666667 +lat_0=36.66666666666666 +lon_0=-111.5 +x_0=500000 +y_0=3000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32145":'+proj=tmerc +lat_0=42.5 +lon_0=-72.5 +k=0.999964286 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32146":'+proj=lcc +lat_1=39.2 +lat_2=38.03333333333333 +lat_0=37.66666666666666 +lon_0=-78.5 +x_0=3500000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32147":'+proj=lcc +lat_1=37.96666666666667 +lat_2=36.76666666666667 +lat_0=36.33333333333334 +lon_0=-78.5 +x_0=3500000 +y_0=1000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32148":'+proj=lcc +lat_1=48.73333333333333 +lat_2=47.5 +lat_0=47 +lon_0=-120.8333333333333 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32149":'+proj=lcc +lat_1=47.33333333333334 +lat_2=45.83333333333334 +lat_0=45.33333333333334 +lon_0=-120.5 +x_0=500000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32150":'+proj=lcc +lat_1=40.25 +lat_2=39 +lat_0=38.5 +lon_0=-79.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32151":'+proj=lcc +lat_1=38.88333333333333 +lat_2=37.48333333333333 +lat_0=37 +lon_0=-81 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32152":'+proj=lcc +lat_1=46.76666666666667 +lat_2=45.56666666666667 +lat_0=45.16666666666666 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32153":'+proj=lcc +lat_1=45.5 +lat_2=44.25 +lat_0=43.83333333333334 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32154":'+proj=lcc +lat_1=44.06666666666667 +lat_2=42.73333333333333 +lat_0=42 +lon_0=-90 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32155":'+proj=tmerc +lat_0=40.5 +lon_0=-105.1666666666667 +k=0.9999375 +x_0=200000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32156":'+proj=tmerc +lat_0=40.5 +lon_0=-107.3333333333333 +k=0.9999375 +x_0=400000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32157":'+proj=tmerc +lat_0=40.5 +lon_0=-108.75 +k=0.9999375 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32158":'+proj=tmerc +lat_0=40.5 +lon_0=-110.0833333333333 +k=0.9999375 +x_0=800000 +y_0=100000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32161":'+proj=lcc +lat_1=18.43333333333333 +lat_2=18.03333333333333 +lat_0=17.83333333333333 +lon_0=-66.43333333333334 +x_0=200000 +y_0=200000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32164":'+proj=tmerc +lat_0=0 +lon_0=-99 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:32165":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:32166":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:32167":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9996 +x_0=500000.001016002 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ',"EPSG:32180":'+proj=tmerc +lat_0=0 +lon_0=-55.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32181":'+proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32182":'+proj=tmerc +lat_0=0 +lon_0=-56 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32183":'+proj=tmerc +lat_0=0 +lon_0=-58.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32184":'+proj=tmerc +lat_0=0 +lon_0=-61.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32185":'+proj=tmerc +lat_0=0 +lon_0=-64.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32186":'+proj=tmerc +lat_0=0 +lon_0=-67.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32187":'+proj=tmerc +lat_0=0 +lon_0=-70.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32188":'+proj=tmerc +lat_0=0 +lon_0=-73.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32189":'+proj=tmerc +lat_0=0 +lon_0=-76.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32190":'+proj=tmerc +lat_0=0 +lon_0=-79.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32191":'+proj=tmerc +lat_0=0 +lon_0=-82.5 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32192":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32193":'+proj=tmerc +lat_0=0 +lon_0=-84 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32194":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32195":'+proj=tmerc +lat_0=0 +lon_0=-90 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32196":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32197":'+proj=tmerc +lat_0=0 +lon_0=-96 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32198":'+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32199":'+proj=lcc +lat_1=27.83333333333333 +lat_2=26.16666666666667 +lat_0=25.5 +lon_0=-91.33333333333333 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32201":'+proj=utm +zone=1 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32202":'+proj=utm +zone=2 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32203":'+proj=utm +zone=3 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32204":'+proj=utm +zone=4 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32205":'+proj=utm +zone=5 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32206":'+proj=utm +zone=6 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32207":'+proj=utm +zone=7 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32208":'+proj=utm +zone=8 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32209":'+proj=utm +zone=9 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32210":'+proj=utm +zone=10 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32211":'+proj=utm +zone=11 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32212":'+proj=utm +zone=12 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32213":'+proj=utm +zone=13 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32214":'+proj=utm +zone=14 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32215":'+proj=utm +zone=15 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32216":'+proj=utm +zone=16 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32217":'+proj=utm +zone=17 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32218":'+proj=utm +zone=18 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32219":'+proj=utm +zone=19 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32220":'+proj=utm +zone=20 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32221":'+proj=utm +zone=21 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32222":'+proj=utm +zone=22 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32223":'+proj=utm +zone=23 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32224":'+proj=utm +zone=24 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32225":'+proj=utm +zone=25 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32226":'+proj=utm +zone=26 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32227":'+proj=utm +zone=27 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32228":'+proj=utm +zone=28 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32229":'+proj=utm +zone=29 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32230":'+proj=utm +zone=30 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32231":'+proj=utm +zone=31 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32232":'+proj=utm +zone=32 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32233":'+proj=utm +zone=33 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32234":'+proj=utm +zone=34 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32235":'+proj=utm +zone=35 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32236":'+proj=utm +zone=36 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32237":'+proj=utm +zone=37 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32238":'+proj=utm +zone=38 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32239":'+proj=utm +zone=39 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32240":'+proj=utm +zone=40 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32241":'+proj=utm +zone=41 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32242":'+proj=utm +zone=42 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32243":'+proj=utm +zone=43 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32244":'+proj=utm +zone=44 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32245":'+proj=utm +zone=45 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32246":'+proj=utm +zone=46 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32247":'+proj=utm +zone=47 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32248":'+proj=utm +zone=48 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32249":'+proj=utm +zone=49 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32250":'+proj=utm +zone=50 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32251":'+proj=utm +zone=51 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32252":'+proj=utm +zone=52 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32253":'+proj=utm +zone=53 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32254":'+proj=utm +zone=54 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32255":'+proj=utm +zone=55 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32256":'+proj=utm +zone=56 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32257":'+proj=utm +zone=57 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32258":'+proj=utm +zone=58 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32259":'+proj=utm +zone=59 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32260":'+proj=utm +zone=60 +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32301":'+proj=utm +zone=1 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32302":'+proj=utm +zone=2 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32303":'+proj=utm +zone=3 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32304":'+proj=utm +zone=4 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32305":'+proj=utm +zone=5 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32306":'+proj=utm +zone=6 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32307":'+proj=utm +zone=7 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32308":'+proj=utm +zone=8 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32309":'+proj=utm +zone=9 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32310":'+proj=utm +zone=10 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32311":'+proj=utm +zone=11 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32312":'+proj=utm +zone=12 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32313":'+proj=utm +zone=13 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32314":'+proj=utm +zone=14 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32315":'+proj=utm +zone=15 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32316":'+proj=utm +zone=16 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32317":'+proj=utm +zone=17 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32318":'+proj=utm +zone=18 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32319":'+proj=utm +zone=19 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32320":'+proj=utm +zone=20 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32321":'+proj=utm +zone=21 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32322":'+proj=utm +zone=22 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32323":'+proj=utm +zone=23 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32324":'+proj=utm +zone=24 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32325":'+proj=utm +zone=25 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32326":'+proj=utm +zone=26 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32327":'+proj=utm +zone=27 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32328":'+proj=utm +zone=28 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32329":'+proj=utm +zone=29 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32330":'+proj=utm +zone=30 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32331":'+proj=utm +zone=31 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32332":'+proj=utm +zone=32 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32333":'+proj=utm +zone=33 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32334":'+proj=utm +zone=34 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32335":'+proj=utm +zone=35 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32336":'+proj=utm +zone=36 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32337":'+proj=utm +zone=37 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32338":'+proj=utm +zone=38 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32339":'+proj=utm +zone=39 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32340":'+proj=utm +zone=40 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32341":'+proj=utm +zone=41 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32342":'+proj=utm +zone=42 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32343":'+proj=utm +zone=43 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32344":'+proj=utm +zone=44 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32345":'+proj=utm +zone=45 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32346":'+proj=utm +zone=46 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32347":'+proj=utm +zone=47 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32348":'+proj=utm +zone=48 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32349":'+proj=utm +zone=49 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32350":'+proj=utm +zone=50 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32351":'+proj=utm +zone=51 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32352":'+proj=utm +zone=52 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32353":'+proj=utm +zone=53 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32354":'+proj=utm +zone=54 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32355":'+proj=utm +zone=55 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32356":'+proj=utm +zone=56 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32357":'+proj=utm +zone=57 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32358":'+proj=utm +zone=58 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32359":'+proj=utm +zone=59 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32360":'+proj=utm +zone=60 +south +ellps=WGS72 +towgs84=0,0,4.5,0,0,0.554,0.2263 +units=m +no_defs ',"EPSG:32401":'+proj=utm +zone=1 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32402":'+proj=utm +zone=2 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32403":'+proj=utm +zone=3 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32404":'+proj=utm +zone=4 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32405":'+proj=utm +zone=5 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32406":'+proj=utm +zone=6 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32407":'+proj=utm +zone=7 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32408":'+proj=utm +zone=8 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32409":'+proj=utm +zone=9 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32410":'+proj=utm +zone=10 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32411":'+proj=utm +zone=11 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32412":'+proj=utm +zone=12 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32413":'+proj=utm +zone=13 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32414":'+proj=utm +zone=14 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32415":'+proj=utm +zone=15 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32416":'+proj=utm +zone=16 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32417":'+proj=utm +zone=17 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32418":'+proj=utm +zone=18 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32419":'+proj=utm +zone=19 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32420":'+proj=utm +zone=20 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32421":'+proj=utm +zone=21 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32422":'+proj=utm +zone=22 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32423":'+proj=utm +zone=23 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32424":'+proj=utm +zone=24 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32425":'+proj=utm +zone=25 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32426":'+proj=utm +zone=26 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32427":'+proj=utm +zone=27 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32428":'+proj=utm +zone=28 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32429":'+proj=utm +zone=29 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32430":'+proj=utm +zone=30 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32431":'+proj=utm +zone=31 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32432":'+proj=utm +zone=32 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32433":'+proj=utm +zone=33 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32434":'+proj=utm +zone=34 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32435":'+proj=utm +zone=35 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32436":'+proj=utm +zone=36 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32437":'+proj=utm +zone=37 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32438":'+proj=utm +zone=38 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32439":'+proj=utm +zone=39 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32440":'+proj=utm +zone=40 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32441":'+proj=utm +zone=41 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32442":'+proj=utm +zone=42 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32443":'+proj=utm +zone=43 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32444":'+proj=utm +zone=44 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32445":'+proj=utm +zone=45 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32446":'+proj=utm +zone=46 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32447":'+proj=utm +zone=47 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32448":'+proj=utm +zone=48 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32449":'+proj=utm +zone=49 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32450":'+proj=utm +zone=50 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32451":'+proj=utm +zone=51 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32452":'+proj=utm +zone=52 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32453":'+proj=utm +zone=53 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32454":'+proj=utm +zone=54 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32455":'+proj=utm +zone=55 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32456":'+proj=utm +zone=56 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32457":'+proj=utm +zone=57 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32458":'+proj=utm +zone=58 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32459":'+proj=utm +zone=59 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32460":'+proj=utm +zone=60 +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32501":'+proj=utm +zone=1 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32502":'+proj=utm +zone=2 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32503":'+proj=utm +zone=3 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32504":'+proj=utm +zone=4 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32505":'+proj=utm +zone=5 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32506":'+proj=utm +zone=6 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32507":'+proj=utm +zone=7 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32508":'+proj=utm +zone=8 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32509":'+proj=utm +zone=9 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32510":'+proj=utm +zone=10 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32511":'+proj=utm +zone=11 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32512":'+proj=utm +zone=12 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32513":'+proj=utm +zone=13 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32514":'+proj=utm +zone=14 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32515":'+proj=utm +zone=15 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32516":'+proj=utm +zone=16 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32517":'+proj=utm +zone=17 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32518":'+proj=utm +zone=18 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32519":'+proj=utm +zone=19 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32520":'+proj=utm +zone=20 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32521":'+proj=utm +zone=21 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32522":'+proj=utm +zone=22 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32523":'+proj=utm +zone=23 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32524":'+proj=utm +zone=24 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32525":'+proj=utm +zone=25 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32526":'+proj=utm +zone=26 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32527":'+proj=utm +zone=27 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32528":'+proj=utm +zone=28 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32529":'+proj=utm +zone=29 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32530":'+proj=utm +zone=30 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32531":'+proj=utm +zone=31 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32532":'+proj=utm +zone=32 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32533":'+proj=utm +zone=33 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32534":'+proj=utm +zone=34 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32535":'+proj=utm +zone=35 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32536":'+proj=utm +zone=36 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32537":'+proj=utm +zone=37 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32538":'+proj=utm +zone=38 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32539":'+proj=utm +zone=39 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32540":'+proj=utm +zone=40 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32541":'+proj=utm +zone=41 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32542":'+proj=utm +zone=42 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32543":'+proj=utm +zone=43 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32544":'+proj=utm +zone=44 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32545":'+proj=utm +zone=45 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32546":'+proj=utm +zone=46 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32547":'+proj=utm +zone=47 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32548":'+proj=utm +zone=48 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32549":'+proj=utm +zone=49 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32550":'+proj=utm +zone=50 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32551":'+proj=utm +zone=51 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32552":'+proj=utm +zone=52 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32553":'+proj=utm +zone=53 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32554":'+proj=utm +zone=54 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32555":'+proj=utm +zone=55 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32556":'+proj=utm +zone=56 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32557":'+proj=utm +zone=57 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32558":'+proj=utm +zone=58 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32559":'+proj=utm +zone=59 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32560":'+proj=utm +zone=60 +south +ellps=WGS72 +towgs84=0,0,1.9,0,0,0.814,-0.38 +units=m +no_defs ',"EPSG:32601":'+proj=utm +zone=1 +datum=WGS84 +units=m +no_defs ',"EPSG:32602":'+proj=utm +zone=2 +datum=WGS84 +units=m +no_defs ',"EPSG:32603":'+proj=utm +zone=3 +datum=WGS84 +units=m +no_defs ',"EPSG:32604":'+proj=utm +zone=4 +datum=WGS84 +units=m +no_defs ',"EPSG:32605":'+proj=utm +zone=5 +datum=WGS84 +units=m +no_defs ',"EPSG:32606":'+proj=utm +zone=6 +datum=WGS84 +units=m +no_defs ',"EPSG:32607":'+proj=utm +zone=7 +datum=WGS84 +units=m +no_defs ',"EPSG:32608":'+proj=utm +zone=8 +datum=WGS84 +units=m +no_defs ',"EPSG:32609":'+proj=utm +zone=9 +datum=WGS84 +units=m +no_defs ',"EPSG:32610":'+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs ',"EPSG:32611":'+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs ',"EPSG:32612":'+proj=utm +zone=12 +datum=WGS84 +units=m +no_defs ',"EPSG:32613":'+proj=utm +zone=13 +datum=WGS84 +units=m +no_defs ',"EPSG:32614":'+proj=utm +zone=14 +datum=WGS84 +units=m +no_defs ',"EPSG:32615":'+proj=utm +zone=15 +datum=WGS84 +units=m +no_defs ',"EPSG:32616":'+proj=utm +zone=16 +datum=WGS84 +units=m +no_defs ',"EPSG:32617":'+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs ',"EPSG:32618":'+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs ',"EPSG:32619":'+proj=utm +zone=19 +datum=WGS84 +units=m +no_defs ',"EPSG:32620":'+proj=utm +zone=20 +datum=WGS84 +units=m +no_defs ',"EPSG:32621":'+proj=utm +zone=21 +datum=WGS84 +units=m +no_defs ',"EPSG:32622":'+proj=utm +zone=22 +datum=WGS84 +units=m +no_defs ',"EPSG:32623":'+proj=utm +zone=23 +datum=WGS84 +units=m +no_defs ',"EPSG:32624":'+proj=utm +zone=24 +datum=WGS84 +units=m +no_defs ',"EPSG:32625":'+proj=utm +zone=25 +datum=WGS84 +units=m +no_defs ',"EPSG:32626":'+proj=utm +zone=26 +datum=WGS84 +units=m +no_defs ',"EPSG:32627":'+proj=utm +zone=27 +datum=WGS84 +units=m +no_defs ',"EPSG:32628":'+proj=utm +zone=28 +datum=WGS84 +units=m +no_defs ',"EPSG:32629":'+proj=utm +zone=29 +datum=WGS84 +units=m +no_defs ',"EPSG:32630":'+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs ',"EPSG:32631":'+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs ',"EPSG:32632":'+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs ',"EPSG:32633":'+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs ',"EPSG:32634":'+proj=utm +zone=34 +datum=WGS84 +units=m +no_defs ',"EPSG:32635":'+proj=utm +zone=35 +datum=WGS84 +units=m +no_defs ',"EPSG:32636":'+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs ',"EPSG:32637":'+proj=utm +zone=37 +datum=WGS84 +units=m +no_defs ',"EPSG:32638":'+proj=utm +zone=38 +datum=WGS84 +units=m +no_defs ',"EPSG:32639":'+proj=utm +zone=39 +datum=WGS84 +units=m +no_defs ',"EPSG:32640":'+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs ',"EPSG:32641":'+proj=utm +zone=41 +datum=WGS84 +units=m +no_defs ',"EPSG:32642":'+proj=utm +zone=42 +datum=WGS84 +units=m +no_defs ',"EPSG:32643":'+proj=utm +zone=43 +datum=WGS84 +units=m +no_defs ',"EPSG:32644":'+proj=utm +zone=44 +datum=WGS84 +units=m +no_defs ',"EPSG:32645":'+proj=utm +zone=45 +datum=WGS84 +units=m +no_defs ',"EPSG:32646":'+proj=utm +zone=46 +datum=WGS84 +units=m +no_defs ',"EPSG:32647":'+proj=utm +zone=47 +datum=WGS84 +units=m +no_defs ',"EPSG:32648":'+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs ',"EPSG:32649":'+proj=utm +zone=49 +datum=WGS84 +units=m +no_defs ',"EPSG:32650":'+proj=utm +zone=50 +datum=WGS84 +units=m +no_defs ',"EPSG:32651":'+proj=utm +zone=51 +datum=WGS84 +units=m +no_defs ',"EPSG:32652":'+proj=utm +zone=52 +datum=WGS84 +units=m +no_defs ',"EPSG:32653":'+proj=utm +zone=53 +datum=WGS84 +units=m +no_defs ',"EPSG:32654":'+proj=utm +zone=54 +datum=WGS84 +units=m +no_defs ',"EPSG:32655":'+proj=utm +zone=55 +datum=WGS84 +units=m +no_defs ',"EPSG:32656":'+proj=utm +zone=56 +datum=WGS84 +units=m +no_defs ',"EPSG:32657":'+proj=utm +zone=57 +datum=WGS84 +units=m +no_defs ',"EPSG:32658":'+proj=utm +zone=58 +datum=WGS84 +units=m +no_defs ',"EPSG:32659":'+proj=utm +zone=59 +datum=WGS84 +units=m +no_defs ',"EPSG:32660":'+proj=utm +zone=60 +datum=WGS84 +units=m +no_defs ',"EPSG:32661":'+proj=stere +lat_0=90 +lat_ts=90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:32662":'+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs ',"EPSG:32663":'+proj=eqc +lat_ts=0 +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs ',"EPSG:32664":'+proj=tmerc +lat_0=0 +lon_0=-99 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=WGS84 +units=us-ft +no_defs ',"EPSG:32665":'+proj=tmerc +lat_0=0 +lon_0=-93 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=WGS84 +units=us-ft +no_defs ',"EPSG:32666":'+proj=tmerc +lat_0=0 +lon_0=-87 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=WGS84 +units=us-ft +no_defs ',"EPSG:32667":'+proj=tmerc +lat_0=0 +lon_0=-81 +k=0.9996 +x_0=500000.001016002 +y_0=0 +datum=WGS84 +units=us-ft +no_defs ',"EPSG:32701":'+proj=utm +zone=1 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32702":'+proj=utm +zone=2 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32703":'+proj=utm +zone=3 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32704":'+proj=utm +zone=4 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32705":'+proj=utm +zone=5 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32706":'+proj=utm +zone=6 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32707":'+proj=utm +zone=7 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32708":'+proj=utm +zone=8 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32709":'+proj=utm +zone=9 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32710":'+proj=utm +zone=10 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32711":'+proj=utm +zone=11 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32712":'+proj=utm +zone=12 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32713":'+proj=utm +zone=13 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32714":'+proj=utm +zone=14 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32715":'+proj=utm +zone=15 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32716":'+proj=utm +zone=16 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32717":'+proj=utm +zone=17 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32718":'+proj=utm +zone=18 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32719":'+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32720":'+proj=utm +zone=20 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32721":'+proj=utm +zone=21 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32722":'+proj=utm +zone=22 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32723":'+proj=utm +zone=23 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32724":'+proj=utm +zone=24 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32725":'+proj=utm +zone=25 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32726":'+proj=utm +zone=26 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32727":'+proj=utm +zone=27 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32728":'+proj=utm +zone=28 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32729":'+proj=utm +zone=29 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32730":'+proj=utm +zone=30 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32731":'+proj=utm +zone=31 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32732":'+proj=utm +zone=32 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32733":'+proj=utm +zone=33 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32734":'+proj=utm +zone=34 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32735":'+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32736":'+proj=utm +zone=36 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32737":'+proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32738":'+proj=utm +zone=38 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32739":'+proj=utm +zone=39 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32740":'+proj=utm +zone=40 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32741":'+proj=utm +zone=41 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32742":'+proj=utm +zone=42 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32743":'+proj=utm +zone=43 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32744":'+proj=utm +zone=44 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32745":'+proj=utm +zone=45 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32746":'+proj=utm +zone=46 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32747":'+proj=utm +zone=47 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32748":'+proj=utm +zone=48 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32749":'+proj=utm +zone=49 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32750":'+proj=utm +zone=50 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32751":'+proj=utm +zone=51 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32752":'+proj=utm +zone=52 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32753":'+proj=utm +zone=53 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32754":'+proj=utm +zone=54 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32755":'+proj=utm +zone=55 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32756":'+proj=utm +zone=56 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32757":'+proj=utm +zone=57 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32758":'+proj=utm +zone=58 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32759":'+proj=utm +zone=59 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32760":'+proj=utm +zone=60 +south +datum=WGS84 +units=m +no_defs ',"EPSG:32761":'+proj=stere +lat_0=-90 +lat_ts=-90 +lon_0=0 +k=0.994 +x_0=2000000 +y_0=2000000 +datum=WGS84 +units=m +no_defs ',"EPSG:32766":'+proj=tmerc +lat_0=0 +lon_0=36 +k=0.9996 +x_0=500000 +y_0=10000000 +datum=WGS84 +units=m +no_defs '};

            /**
             * @module geoPackage
             */

            for (var name in proj4Defs) {
              if (proj4Defs[name]) {
                proj4$2.defs(name, proj4Defs[name]);
              }
            }
            /**
             * A `GeoPackage` instance is the interface to a physical GeoPackage SQLite
             * database.
             * @param {string} name
             * @param {string} path
             * @param {module:db/geoPackageConnection~GeoPackageConnection} connection
             * @class
             */


            var GeoPackage = function (name, path, connection) {
              this.name = name;
              this.path = path;
              this.connection = connection;
              this.tableCreator = new TableCreator(this);
            };

            GeoPackage.loadProjections = function (items) {
              if (!(items instanceof Array)) throw new Error('Invalid array of projections');

              for (var i = 0; i < items.length; i++) {
                if (!proj4Defs[items[i]]) throw new Error('Projection not found');
                this.addProjection(items[i], proj4Defs[items[i]]);
              }
            };

            GeoPackage.addProjection = function (name, definition) {
              if (!name || !definition) throw new Error('Invalid projection name/definition');
              proj4$2.defs('' + name, '' + definition);
            };

            GeoPackage.hasProjection = function (name) {
              return proj4$2.defs('' + name);
            };

            GeoPackage.prototype.close = function () {
              this.connection.close();
            };

            GeoPackage.prototype.getDatabase = function () {
              return this.connection;
            };

            GeoPackage.prototype.getPath = function () {
              return this.path;
            };

            GeoPackage.prototype.export = function (callback) {
              this.connection.export(callback);
            };
            /**
             * Get the GeoPackage name
             * @return {String} the GeoPackage name
             */


            GeoPackage.prototype.getName = function () {
              return this.name;
            };
            /**
             * @returns {module:core/srs~SpatialReferenceSystemDao} the DAO to access the [SRS table]{@link module:core/srs~SpatialReferenceSystem} in this `GeoPackage`
             */


            GeoPackage.prototype.getSpatialReferenceSystemDao = function () {
              return this.spatialReferenceSystemDao || (this.spatialReferenceSystemDao = new SpatialReferenceSystemDao(this));
            };
            /**
             * @returns {module:core/contents~ContentsDao} the DAO to access the [contents table]{@link module:core/contents~Contents} in this `GeoPackage`
             */


            GeoPackage.prototype.getContentsDao = function () {
              return this.contentsDao || (this.contentsDao = new ContentsDao(this));
            };
            /**
             * @returns {module:tiles/matrixset~TileMatrixSetDao} the DAO to access the [tile matrix set]{@link module:tiles/matrixset~TileMatrixSet} in this `GeoPackage`
             */


            GeoPackage.prototype.getTileMatrixSetDao = function () {
              return this.tileMatrixSetDao || (this.tileMatrixSetDao = new TileMatrixSetDao(this));
            };
            /**
             * @returns {module:tiles/matrixset~TileMatrixDao} the DAO to access the [tile matrix]{@link module:tiles/matrixset~TileMatrix} in this `GeoPackage`
             */


            GeoPackage.prototype.getTileMatrixDao = function () {
              return this.tileMatrixDao || (this.tileMatrixDao = new TileMatrixDao(this));
            };

            GeoPackage.prototype.getDataColumnsDao = function () {
              return this.dataColumnsDao || (this.dataColumnsDao = new DataColumnsDao(this));
            };

            GeoPackage.prototype.getExtensionDao = function () {
              return this.extensionDao || (this.extensionDao = new ExtensionDao(this));
            };

            GeoPackage.prototype.getTableIndexDao = function () {
              return this.tableIndexDao || (this.tableIndexDao = new TableIndexDao(this));
            };

            GeoPackage.prototype.getGeometryColumnsDao = function () {
              return this.geometryColumnsDao || (this.geometryColumnsDao = new GeometryColumnsDao(this));
            };

            GeoPackage.prototype.getDataColumnConstraintsDao = function () {
              return this.dataColumnConstraintsDao || (this.dataColumnConstraintsDao = new DataColumnConstraintsDao(this));
            };

            GeoPackage.prototype.getMetadataReferenceDao = function () {
              return this.metadataReferenceDao || (this.metadataReferenceDao = new MetadataReferenceDao(this));
            };

            GeoPackage.prototype.getMetadataDao = function () {
              return this.metadataDao || (this.metadataDao = new MetadataDao(this));
            };

            GeoPackage.prototype.getExtendedRelationDao = function () {
              return this.extendedRelationDao || (this.extendedRelationDao = new ExtendedRelationDao(this));
            };

            GeoPackage.prototype.getGeometryIndexDao = function (featureDao) {
              return new GeometryIndexDao(this, featureDao);
            };

            GeoPackage.prototype.getRelatedTablesExtension = function () {
              return this.relatedTablesExtension || (this.relatedTablesExtension = new RelatedTablesExtension(this));
            };
            /**
             * @returns {module:extension/contents~ContentsIdDao} the DAO to access the [contentsId table]{@link extension/contents~ContentsIdDao} in this `GeoPackage`
             */


            GeoPackage.prototype.getContentsIdDao = function () {
              return this.contentsIdDao || (this.contentsIdDao = new ContentsIdDao(this));
            };

            GeoPackage.prototype.getSrs = function (srsId) {
              var dao = this.getSpatialReferenceSystemDao();
              return dao.queryForId(srsId);
            };

            GeoPackage.prototype.createRequiredTables = function () {
              var geopackage = this;
              return this.tableCreator.createRequired().then(function (results) {
                return geopackage;
              });
            };

            GeoPackage.prototype.createSupportedExtensions = function () {
              var crs = new CrsWktExtension(this);
              crs.getOrCreateExtension();
              var schema = new SchemaExtension(this);
              schema.getOrCreateExtension();
              return this;
            };
            /**
             * @returns {module:tiles/user/tileDao~TileDao} the `TileDao` to access [tiles]{@link module:tiles/user/tileTable}
             */


            GeoPackage.prototype.getTileDaoWithTileMatrixSet = function (tileMatrixSet) {
              var tileMatrices = [];
              var tileMatrixDao = this.getTileMatrixDao();
              var results = tileMatrixDao.queryForAllEq(TileMatrixDao.COLUMN_TABLE_NAME, tileMatrixSet.table_name, null, null, TileMatrixDao.COLUMN_ZOOM_LEVEL + ' ASC, ' + TileMatrixDao.COLUMN_PIXEL_X_SIZE + ' DESC, ' + TileMatrixDao.COLUMN_PIXEL_Y_SIZE + ' DESC');
              results.forEach(function (result) {
                var tm = new TileMatrix();
                tileMatrixDao.populateObjectFromResult(tm, result);
                tileMatrices.push(tm);
              });
              var tableReader = new TileTableReader(tileMatrixSet);
              var tileTable = tableReader.readTileTable(this);
              return new TileDao(this, tileTable, tileMatrixSet, tileMatrices);
            };

            GeoPackage.prototype.getTileDaoWithContents = function (contents) {
              var dao = this.getContentsDao();
              var tileMatrixSet = dao.getTileMatrixSet(contents);
              return this.getTileDaoWithTileMatrixSet(tileMatrixSet);
            };

            GeoPackage.prototype.getTileDao = function (tableName) {
              var tms = this.getTileMatrixSetDao();
              var results = tms.queryForAllEq(TileMatrixSetDao.COLUMN_TABLE_NAME, tableName);

              if (results.length > 1) {
                throw new Error('Unexpected state. More than one Tile Matrix Set matched for table name: ' + tableName + ', count: ' + results.length);
              } else if (results.length === 0) {
                throw new Error('No Tile Matrix found for table name: ' + tableName);
              }

              var tileMatrixSet = new TileMatrixSet();
              tms.populateObjectFromResult(tileMatrixSet, results[0]);
              return this.getTileDaoWithTileMatrixSet(tileMatrixSet);
            };
            /**
             * Return a hash containing arrays of table names grouped under keys `features`,
             * `tiles`, and `attributes`.
             * @return {{features: string[], tiles: string[], attributes: string[]}}
             */


            GeoPackage.prototype.getTables = function () {
              var tables = {};
              var featureTables = this.getFeatureTables();
              tables.features = featureTables;
              var tileTables = this.getTileTables();
              tables.tiles = tileTables;
              var attributesTables = this.getAttributesTables();
              tables.attributes = attributesTables;
              return tables;
            };

            GeoPackage.prototype.getAttributesTables = function () {
              return this.getContentsDao().getTables(ContentsDao.GPKG_CDT_ATTRIBUTES_NAME);
            };

            GeoPackage.prototype.hasAttributeTable = function (attributeTableName) {
              var tables = this.getAttributesTables();
              return tables && tables.indexOf(attributeTableName) != -1;
            };
            /**
             * @returns {string[]} table names from {@link module:tiles/matrixset~TileMatrixSetDao#getTileTables}
             */


            GeoPackage.prototype.getTileTables = function () {
              var tms = this.getTileMatrixSetDao();

              if (!tms.isTableExists()) {
                return [];
              }

              return tms.getTileTables();
            };
            /**
             * Check if a table with the given name exists in this GeoPackage, and is a
             * [tile table]{@link module:tiles/user/tileTable~TileTable}.
             *
             * @param {String} tileTableName name of the tile table
             * @returns {boolean} `true` if the table exists and is a tile table, `false` otherwise
             */


            GeoPackage.prototype.hasTileTable = function (tileTableName) {
              var tables = this.getTileTables();
              return tables && tables.indexOf(tileTableName) != -1;
            };
            /**
             * Checks if a table with the given name exists in this GeoPackage, and is a
             * [feature table]{@link module:features/user/featureTable~FeatureTable}.
             *
             * @param {String} featureTableName name of the feature table
             * @returns {boolean} `true` if the table exists and is a feature table, `false` otherwise
             */


            GeoPackage.prototype.hasFeatureTable = function (featureTableName) {
              var tables = this.getFeatureTables();
              return tables && tables.indexOf(featureTableName) != -1;
            };
            /**
             * @returns {string[]} feature table names from {@link module:features/columns~GeometryColumnsDao#getFeatureTables}
             */


            GeoPackage.prototype.getFeatureTables = function () {
              var gcd = this.getGeometryColumnsDao();

              if (!gcd.isTableExists()) {
                return [];
              }

              return gcd.getFeatureTables();
            };

            GeoPackage.prototype.isContentsTable = function (tableName) {
              return !!this.contentsOfTable(tableName);
            };

            GeoPackage.prototype.contentsOfTable = function (tableName) {
              return this.getContentsDao().queryForId(tableName);
            };
            /**
             * @returns {boolean} `true` if this GeoPackage has a table with the given name, `false` otherwise
             */


            GeoPackage.prototype.isTable = function (tableName) {
              return !!this.connection.tableExists(tableName);
            };
            /**
             * @param {string} type a table [data type]{@link module:core/contents~Contents#data_type} name
             * @param {string} tableName [table name]{@link module:core/contents~Contents#table_name}
             * @return {boolean} `true` if the given table name has a row in the [contents]{@link module:core/contents~Contents} table AND is the given {@link #getTableType}, `false` otherwise
             */


            GeoPackage.prototype.isTableType = function (type, tableName) {
              return type === this.getTableType(tableName);
            };
            /**
             * @param {string} tableName [table name]{@link module:core/contents~Contents#table_name}
             * @return {string} the [data type]{@link module:core/contents~Contents#data_type}
             * of the table with the given name
             */


            GeoPackage.prototype.getTableType = function (tableName) {
              var contents = this.getTableContents(tableName);

              if (contents) {
                return contents.data_type;
              }
            };
            /**
             * @param {string} tableName [table name]{@link module:core/contents~Contents#table_name}
             * @return {module:core/contents~Contents} the contents information for the given table name
             */


            GeoPackage.prototype.getTableContents = function (tableName) {
              return this.getContentsDao().queryForId(tableName);
            };
            /**
             * Drop the table with the given name from this GeoPackage.  This simply drops
             * the table and does not take any steps to ensure referential integrity by
             * deleting associated rows in other tables.
             *
             * @param {string} tableName the name of the table to drop
             * @returns {boolean} result from {@link module:db/geoPackageConnection~GeoPackageConnection#dropTable}
             */


            GeoPackage.prototype.deleteTable = function (tableName) {
              return this.connection.dropTable(tableName);
            };

            GeoPackage.prototype.getTableCreator = function () {
              return this.tableCreator;
            };

            GeoPackage.prototype.index = function () {
              var tables = this.getFeatureTables();
              return tables.reduce(function (sequence, table) {
                return sequence.then(function () {
                  return this.indexFeatureTable(table).then(function (indexed) {
                    if (indexed) {
                      return true;
                    } else {
                      throw new Error('Unable to index table ' + table);
                    }
                  });
                }.bind(this));
              }.bind(this), Promise.resolve());
            };

            GeoPackage.prototype.indexFeatureTable = function (table, progress) {
              var featureDao = this.getFeatureDao(table);
              var fti = featureDao.featureTableIndex;
              return new Promise(function (resolve, reject) {
                var tableIndex = fti.getTableIndex();

                if (tableIndex) {
                  return resolve(true);
                }

                resolve(fti.index(progress));
              });
            };
            /**
             *  Get a Feature DAO from Geometry Columns
             *
             *  @param {GeometryColumns} geometryColumns Geometry Columns
             *  @param {callback} callback called with an error if one occurred and the {FeatureDao}
             */


            GeoPackage.prototype.getFeatureDaoWithGeometryColumns = function (geometryColumns) {
              if (!geometryColumns) {
                throw new Error('Non null Geometry Columns is required to create Feature DAO');
              }

              var tableReader = new FeatureTableReader(geometryColumns);
              var featureTable = tableReader.readFeatureTable(this);
              var dao = new FeatureDao(this, featureTable, geometryColumns, this.metadataDb);
              return dao;
            };
            /**
             * Get a Feature DAO from Contents
             * @param  {Contents}   contents Contents
             * @param  {Function} callback callback called with an error if one occurred and the {FeatureDao}
             */


            GeoPackage.prototype.getFeatureDaoWithContents = function (contents) {
              var dao = this.getContentsDao();
              var columns = dao.getGeometryColumns(contents);
              return this.getFeatureDaoWithGeometryColumns(columns);
            };
            /**
             * Get a Feature DAO from Contents
             * @param  {string}   tableName table name
             * @param  {Function} callback callback called with an error if one occurred and the {FeatureDao}
             */


            GeoPackage.prototype.getFeatureDao = function (tableName) {
              var dao = this.getGeometryColumnsDao();
              var geometryColumns = dao.queryForTableName(tableName);

              if (!geometryColumns) {
                throw new Error('No Feature Table exists for table name: ' + tableName);
              }

              return this.getFeatureDaoWithGeometryColumns(geometryColumns);
            };
            /**
             * Queries for GeoJSON features in a feature table
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} callback    Caled with err, featureArray
             */


            GeoPackage.prototype.queryForGeoJSONFeaturesInTable = function (tableName, boundingBox) {
              var featureDao = this.getFeatureDao(tableName);
              var features = [];
              var iterator = featureDao.queryForGeoJSONIndexedFeaturesWithBoundingBox(boundingBox);

              for (var feature of iterator) {
                features.push(feature);
              }

              return features;
            };
            /**
             * iterates GeoJSON features in a feature table within a bounding box
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} rowCallback    Caled with err, geoJSON
             * @param  {Function} doneCallback    Caled with err if one occurred
             */


            GeoPackage.prototype.iterateGeoJSONFeaturesInTableWithinBoundingBox = function (tableName, boundingBox) {
              var featureDao = this.getFeatureDao(tableName);
              return featureDao.queryForGeoJSONIndexedFeaturesWithBoundingBox(boundingBox);
            };
            /**
             * Create the Geometry Columns table if it does not already exist
             * @param  {Function} callback called with an error if one occurred otherwise the table now exists
             */


            GeoPackage.prototype.createGeometryColumnsTable = function () {
              var dao = this.getGeometryColumnsDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createGeometryColumns();
            };
            /**
             * Get a Attribute DAO
             * @param  {string}   tableName table name
             * @param  {Function} callback callback called with an error if one occurred and the {AttributeDao}
             */


            GeoPackage.prototype.getAttributeDaoWithTableName = function (tableName) {
              var dao = this.getContentsDao();
              var contents = dao.queryForId(tableName);
              return this.getAttributeDaoWithContents(contents);
            };
            /**
             * Get a Attribute DAO
             * @param  {Contents}   contents Contents
             * @param  {Function} callback callback called with an error if one occurred and the {AttributeDao}
             */


            GeoPackage.prototype.getAttributeDaoWithContents = function (contents) {
              if (!contents) {
                throw new Error('Non null Contents is required to create an Attributes DAO');
              }

              var reader = new AttributeTableReader(contents.table_name);
              var table = reader.readTable(this.connection);
              table.setContents(contents);
              return new AttributeDao(this, table);
            };

            GeoPackage.prototype.createAttributeTable = function (tableName, columns, dataColumns) {
              return Promise.resolve().then(function () {
                var attributeTable = new AttributeTable(tableName, columns);
                var result = this.tableCreator.createUserTable(attributeTable);
                var contents = new Contents();
                contents.table_name = tableName;
                contents.data_type = ContentsDao.GPKG_CDT_ATTRIBUTES_NAME;
                contents.identifier = tableName;
                contents.last_change = new Date().toISOString();
                return this.getContentsDao().create(contents);
              }.bind(this)).then(function () {
                if (dataColumns) {
                  return this.createDataColumns().then(function () {
                    var dataColumnsDao = this.getDataColumnsDao();
                    dataColumns.forEach(function (dataColumn) {
                      dataColumnsDao.create(dataColumn);
                    });
                  }.bind(this));
                }
              }.bind(this)).then(function () {
                return true;
              });
            };
            /**
             * Create the given {@link module:features/user/featureTable~FeatureTable}
             * @param  {FeatureTable}   featureTable    feature table
             */


            GeoPackage.prototype.createFeatureTable = function (featureTable) {
              return this.tableCreator.createUserTable(featureTable);
            };

            GeoPackage.prototype.createFeatureTableWithGeometryColumns = function (geometryColumns, boundingBox, srsId, columns) {
              return this.createFeatureTableWithGeometryColumnsAndDataColumns(geometryColumns, boundingBox, srsId, columns, undefined);
            };

            GeoPackage.prototype.createFeatureTableWithGeometryColumnsAndDataColumns = function (geometryColumns, boundingBox, srsId, columns, dataColumns) {
              return this.createGeometryColumnsTable().then(function (result) {
                var featureTable = new FeatureTable(geometryColumns.table_name, columns);
                var result = this.createFeatureTable(featureTable);
                var contents = new Contents();
                contents.table_name = geometryColumns.table_name;
                contents.data_type = ContentsDao.GPKG_CDT_FEATURES_NAME;
                contents.identifier = geometryColumns.table_name;
                contents.last_change = new Date().toISOString();
                contents.min_x = boundingBox.minLongitude;
                contents.min_y = boundingBox.minLatitude;
                contents.max_x = boundingBox.maxLongitude;
                contents.max_y = boundingBox.maxLatitude;
                contents.srs_id = srsId;
                this.getContentsDao().create(contents);
                geometryColumns.srs_id = srsId;
                return this.getGeometryColumnsDao().create(geometryColumns);
              }.bind(this)).then(function () {
                if (dataColumns) {
                  return this.createDataColumns().then(function () {
                    var dataColumnsDao = this.getDataColumnsDao();
                    dataColumns.forEach(function (dataColumn) {
                      dataColumnsDao.create(dataColumn);
                    });
                  }.bind(this));
                }
              }.bind(this)).then(function () {
                return true;
              });
            };
            /**
             * Create the Tile Matrix Set table if it does not already exist
             * @param  {Function} callback called with an error if one occurred otherwise the table now exists
             */


            GeoPackage.prototype.createTileMatrixSetTable = function () {
              var dao = this.getTileMatrixSetDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createTileMatrixSet();
            };
            /**
             * Create the Tile Matrix table if it does not already exist
             * @param  {Function} callback called with an error if one occurred otherwise the table now exists
             */


            GeoPackage.prototype.createTileMatrixTable = function () {
              var dao = this.getTileMatrixDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createTileMatrix();
            };
            /**
             * Create the given tile table in this GeoPackage.
             *
             * @param  {module:tiles/user/tileTable~TileTable} tileTable
             * @returns {@link module:db/tableCreator~TableCreator#createUserTable}
             */


            GeoPackage.prototype.createTileTable = function (tileTable) {
              return this.tableCreator.createUserTable(tileTable);
            };
            /**
             * Create a new [tile table]{@link module:tiles/user/tileTable~TileTable} in this GeoPackage.
             *
             * @param {String} tableName tile table name
             * @param {BoundingBox} contentsBoundingBox bounding box of the contents table
             * @param {Number} contentsSrsId srs id of the contents table
             * @param {BoundingBox} tileMatrixSetBoundingBox bounding box of the matrix set
             * @param {Number} tileMatrixSetSrsId srs id of the matrix set
             * @returns {Promise<module:tiles/matrixset~TileMatrixSet>} `Promise` of the created {@link module:tiles/matrixset~TileMatrixSet}
             */


            GeoPackage.prototype.createTileTableWithTableName = function (tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId) {
              const columns = TileTable.createRequiredColumns();
              const tileTable = new TileTable(tableName, columns);
              const contents = new Contents();
              contents.table_name = tableName;
              contents.data_type = ContentsDao.GPKG_CDT_TILES_NAME;
              contents.identifier = tableName;
              contents.last_change = new Date().toISOString();
              contents.min_x = contentsBoundingBox.minLongitude;
              contents.min_y = contentsBoundingBox.minLatitude;
              contents.max_x = contentsBoundingBox.maxLongitude;
              contents.max_y = contentsBoundingBox.maxLatitude;
              contents.srs_id = contentsSrsId;
              const tileMatrixSet = new TileMatrixSet();
              tileMatrixSet.setContents(contents);
              tileMatrixSet.srs_id = tileMatrixSetSrsId;
              tileMatrixSet.min_x = tileMatrixSetBoundingBox.minLongitude;
              tileMatrixSet.min_y = tileMatrixSetBoundingBox.minLatitude;
              tileMatrixSet.max_x = tileMatrixSetBoundingBox.maxLongitude;
              tileMatrixSet.max_y = tileMatrixSetBoundingBox.maxLatitude;
              return this.createTileMatrixSetTable().then(function () {
                return this.createTileMatrixTable();
              }.bind(this)).then(function () {
                return this.createTileTable(tileTable);
              }.bind(this)).then(function () {
                return this.getContentsDao().create(contents);
              }.bind(this)).then(function () {
                return this.getTileMatrixSetDao().create(tileMatrixSet);
              }.bind(this)).then(function () {
                return tileMatrixSet;
              });
            };
            /**
             * Create the tables and rows necessary to store tiles in a {@link module:tiles/matrixset~TileMatrixSet}.
             * This will create a [tile matrix row]{@link module:tiles/matrix~TileMatrix}
             * for every integral zoom level in the range `[minZoom..maxZoom]`.
             *
             * @param {BoundingBox} epsg3857TileBoundingBox
             * @param {module:tiles/matrixset~TileMatrixSet} tileMatrixSet
             * @param {number} minZoom
             * @param {number} maxZoom
             * @param {number} [tileSize=256] optional tile size in pixels
             * @returns {module:geoPackage~GeoPackage} `this` `GeoPackage`
             */


            GeoPackage.prototype.createStandardWebMercatorTileMatrix = function (epsg3857TileBoundingBox, tileMatrixSet, minZoom, maxZoom, tileSize) {
              tileSize = tileSize || 256;
              var tileMatrixDao = this.getTileMatrixDao();

              for (var zoom = minZoom; zoom <= maxZoom; zoom++) {
                var box = TileBoundingBoxUtils.webMercatorTileBox(epsg3857TileBoundingBox, zoom);
                var matrixWidth = box.maxX - box.minX + 1;
                var matrixHeight = box.maxY - box.minY + 1;
                var pixelXSize = (epsg3857TileBoundingBox.maxLongitude - epsg3857TileBoundingBox.minLongitude) / matrixWidth / tileSize;
                var pixelYSize = (epsg3857TileBoundingBox.maxLatitude - epsg3857TileBoundingBox.minLatitude) / matrixHeight / tileSize;
                var tileMatrix = new TileMatrix();
                tileMatrix.table_name = tileMatrixSet.table_name;
                tileMatrix.zoom_level = zoom;
                tileMatrix.matrix_width = matrixWidth;
                tileMatrix.matrix_height = matrixHeight;
                tileMatrix.tile_width = tileSize;
                tileMatrix.tile_height = tileSize;
                tileMatrix.pixel_x_size = pixelXSize;
                tileMatrix.pixel_y_size = pixelYSize;
                tileMatrixDao.create(tileMatrix);
              }

              return this;
            };
            /**
             * Adds a tile to the GeoPackage
             * @param  {object}   tile       Byte array or Buffer containing the tile bytes
             * @param  {String}   tableName  Table name to add the tile to
             * @param  {Number}   zoom       zoom level of this tile
             * @param  {Number}   tileRow    row of this tile
             * @param  {Number}   tileColumn column of this tile
             */


            GeoPackage.prototype.addTile = function (tileStream, tableName, zoom, tileRow, tileColumn) {
              var tileDao = this.getTileDao(tableName);
              var newRow = tileDao.newRow();
              newRow.setZoomLevel(zoom);
              newRow.setTileColumn(tileColumn);
              newRow.setTileRow(tileRow);
              newRow.setTileData(tileStream);
              return tileDao.create(newRow);
            };
            /**
             * Create the Data Columns table if it does not already exist
             * @param  {Function} callback called with an error if one occurred otherwise the table now exists
             */


            GeoPackage.prototype.createDataColumns = function () {
              var dao = this.getDataColumnsDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createDataColumns();
            };
            /**
             * Create the Data Column Constraints table if it does not already exist
             * @param  {Function} callback called with an error if one occurred otherwise the table now exists
             */


            GeoPackage.prototype.createDataColumnConstraintsTable = function () {
              var dao = this.getDataColumnConstraintsDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createDataColumnConstraints();
            };

            GeoPackage.prototype.createMetadataTable = function () {
              var dao = this.getMetadataDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createMetadata();
            };

            GeoPackage.prototype.createMetadataReferenceTable = function () {
              var dao = this.getMetadataReferenceDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createMetadataReference();
            };

            GeoPackage.prototype.createExtensionTable = function () {
              var dao = this.getExtensionDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createExtensions();
            };

            GeoPackage.prototype.createTableIndexTable = function () {
              var dao = this.getTableIndexDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createTableIndex();
            };

            GeoPackage.prototype.createGeometryIndexTable = function () {
              var dao = this.getGeometryIndexDao();

              if (dao.isTableExists()) {
                return Promise.resolve().then(function () {
                  return true;
                });
              }

              return this.tableCreator.createGeometryIndex();
            };
            /**
             * Get the application id of the GeoPackage
             * @param  {Function} callback callback called with the application id
             */


            GeoPackage.prototype.getApplicationId = function () {
              var connection = this.getDatabase();
              return connection.getApplicationId();
            };

            GeoPackage.prototype.getInfoForTable = function (tableDao) {
              var info = {};
              info.tableName = tableDao.table_name;
              info.tableType = tableDao.table.getTableType();
              info.count = tableDao.getCount();

              if (info.tableType === UserTable.FEATURE_TABLE) {
                info.geometryColumns = {};
                info.geometryColumns.tableName = tableDao.geometryColumns.table_name;
                info.geometryColumns.geometryColumn = tableDao.geometryColumns.column_name;
                info.geometryColumns.geometryTypeName = tableDao.geometryColumns.geometry_type_name;
                info.geometryColumns.z = tableDao.geometryColumns.z;
                info.geometryColumns.m = tableDao.geometryColumns.m;
              }

              if (info.tableType === UserTable.TILE_TABLE) {
                info.minZoom = tableDao.minZoom;
                info.maxZoom = tableDao.maxZoom;
                info.minWebMapZoom = tableDao.minWebMapZoom;
                info.maxWebMapZoom = tableDao.maxWebMapZoom;
                info.zoomLevels = tableDao.tileMatrices.length;
              }

              var dao;
              var contentsRetriever;

              if (info.tableType === UserTable.FEATURE_TABLE) {
                dao = this.getGeometryColumnsDao();
                contentsRetriever = tableDao.geometryColumns;
              } else if (info.tableType === UserTable.TILE_TABLE) {
                dao = this.getTileMatrixSetDao();
                contentsRetriever = tableDao.tileMatrixSet;
                info.tileMatrixSet = {};
                info.tileMatrixSet.srsId = tableDao.tileMatrixSet.srs_id;
                info.tileMatrixSet.minX = tableDao.tileMatrixSet.min_x;
                info.tileMatrixSet.maxX = tableDao.tileMatrixSet.max_x;
                info.tileMatrixSet.minY = tableDao.tileMatrixSet.min_y;
                info.tileMatrixSet.maxY = tableDao.tileMatrixSet.max_y;
              }

              var contents = dao.getContents(contentsRetriever);
              info.contents = {};
              info.contents.tableName = contents.table_name;
              info.contents.dataType = contents.data_type;
              info.contents.identifier = contents.identifier;
              info.contents.description = contents.description;
              info.contents.lastChange = contents.last_change;
              info.contents.minX = contents.min_x;
              info.contents.maxX = contents.max_x;
              info.contents.minY = contents.min_y;
              info.contents.maxY = contents.max_y;
              var contentsDao = this.getContentsDao();
              var contentsSrs = contentsDao.getSrs(contents);
              info.contents.srs = {
                name: contentsSrs.srs_name,
                id: contentsSrs.srs_id,
                organization: contentsSrs.organization,
                organization_coordsys_id: contentsSrs.organization_coordsys_id,
                definition: contentsSrs.definition,
                description: contentsSrs.description
              };
              var srs = tableDao.getSrs();
              info.srs = {
                name: srs.srs_name,
                id: srs.srs_id,
                organization: srs.organization,
                organization_coordsys_id: srs.organization_coordsys_id,
                definition: srs.definition,
                description: srs.description
              };
              info.columns = [];
              info.columnMap = {};
              var dcd = this.getDataColumnsDao();
              tableDao.table.columns.forEach(function (column) {
                var dataColumn = dcd.getDataColumns(tableDao.table.table_name, column.name);
                info.columns.push({
                  index: column.index,
                  name: column.name,
                  max: column.max,
                  min: column.min,
                  notNull: column.notNull,
                  primaryKey: column.primaryKey,
                  dataType: column.dataType ? types.name(column.dataType) : '',
                  displayName: dataColumn && dataColumn.name ? dataColumn.name : column.name,
                  dataColumn: dataColumn
                });
                info.columnMap[column.name] = info.columns[info.columns.length - 1];
              }.bind(this));
              return info;
            };

            /**
             * GeoPackageValidate module.
             * @module validate/geoPackageValidate
             *
             */
            /**
             * Check the file extension to see if it is a GeoPackage
             * @param  {string}   filePath Absolute path to the GeoPackage to create
             * @return {boolean} true if GeoPackage extension
             */

            exports.hasGeoPackageExtension = function (filePath) {
              var extension = path.extname(filePath);
              return extension && extension !== '' && (extension.toLowerCase() === '.' + exports.GEOPACKAGE_EXTENSION.toLowerCase() || extension.toLowerCase() === '.' + exports.GEOPACKAGE_EXTENDED_EXTENSION.toLowerCase());
            };
            /**
             * Validate the extension file as a GeoPackage
             * @param  {string}   filePath Absolute path to the GeoPackage to create
             * @return {Error}    error if the extension is not valid
             */


            exports.validateGeoPackageExtension = function (filePath) {
              if (!exports.hasGeoPackageExtension(filePath)) {
                return new Error("GeoPackage database file '" + filePath + "' does not have a valid extension of '" + exports.GEOPACKAGE_EXTENSION + "' or '" + exports.GEOPACKAGE_EXTENDED_EXTENSION + "'");
              }
            };
            /**
             * Check the GeoPackage for the minimum required tables
             * @param  {Object}   geoPackage GeoPackage to check
             * @param {module:validate/geoPackageValidate~validationCallback} callback - The validation callback
             */


            exports.hasMinimumTables = function (geoPackage) {
              var srsExists = geoPackage.getSpatialReferenceSystemDao().isTableExists();
              var contentsExists = geoPackage.getContentsDao().isTableExists();
              return srsExists && contentsExists;
            };

            const toBytes = s => [...s].map(c => c.charCodeAt(0));

            const xpiZipFilename = toBytes('META-INF/mozilla.rsa');
            const oxmlContentTypes = toBytes('[Content_Types].xml');
            const oxmlRels = toBytes('_rels/.rels');

            var fileType = input => {
              const buf = input instanceof Uint8Array ? input : new Uint8Array(input);

              if (!(buf && buf.length > 1)) {
                return null;
              }

              const check = (header, options) => {
                options = Object.assign({
                  offset: 0
                }, options);

                for (let i = 0; i < header.length; i++) {
                  // If a bitmask is set
                  if (options.mask) {
                    // If header doesn't equal `buf` with bits masked off
                    if (header[i] !== (options.mask[i] & buf[i + options.offset])) {
                      return false;
                    }
                  } else if (header[i] !== buf[i + options.offset]) {
                    return false;
                  }
                }

                return true;
              };

              const checkString = (header, options) => check(toBytes(header), options);

              if (check([0xFF, 0xD8, 0xFF])) {
                return {
                  ext: 'jpg',
                  mime: 'image/jpeg'
                };
              }

              if (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {
                return {
                  ext: 'png',
                  mime: 'image/png'
                };
              }

              if (check([0x47, 0x49, 0x46])) {
                return {
                  ext: 'gif',
                  mime: 'image/gif'
                };
              }

              if (check([0x57, 0x45, 0x42, 0x50], {
                offset: 8
              })) {
                return {
                  ext: 'webp',
                  mime: 'image/webp'
                };
              }

              if (check([0x46, 0x4C, 0x49, 0x46])) {
                return {
                  ext: 'flif',
                  mime: 'image/flif'
                };
              } // Needs to be before `tif` check


              if ((check([0x49, 0x49, 0x2A, 0x0]) || check([0x4D, 0x4D, 0x0, 0x2A])) && check([0x43, 0x52], {
                offset: 8
              })) {
                return {
                  ext: 'cr2',
                  mime: 'image/x-canon-cr2'
                };
              }

              if (check([0x49, 0x49, 0x2A, 0x0]) || check([0x4D, 0x4D, 0x0, 0x2A])) {
                return {
                  ext: 'tif',
                  mime: 'image/tiff'
                };
              }

              if (check([0x42, 0x4D])) {
                return {
                  ext: 'bmp',
                  mime: 'image/bmp'
                };
              }

              if (check([0x49, 0x49, 0xBC])) {
                return {
                  ext: 'jxr',
                  mime: 'image/vnd.ms-photo'
                };
              }

              if (check([0x38, 0x42, 0x50, 0x53])) {
                return {
                  ext: 'psd',
                  mime: 'image/vnd.adobe.photoshop'
                };
              } // Zip-based file formats
              // Need to be before the `zip` check


              if (check([0x50, 0x4B, 0x3, 0x4])) {
                if (check([0x6D, 0x69, 0x6D, 0x65, 0x74, 0x79, 0x70, 0x65, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x65, 0x70, 0x75, 0x62, 0x2B, 0x7A, 0x69, 0x70], {
                  offset: 30
                })) {
                  return {
                    ext: 'epub',
                    mime: 'application/epub+zip'
                  };
                } // Assumes signed `.xpi` from addons.mozilla.org


                if (check(xpiZipFilename, {
                  offset: 30
                })) {
                  return {
                    ext: 'xpi',
                    mime: 'application/x-xpinstall'
                  };
                }

                if (checkString('mimetypeapplication/vnd.oasis.opendocument.text', {
                  offset: 30
                })) {
                  return {
                    ext: 'odt',
                    mime: 'application/vnd.oasis.opendocument.text'
                  };
                }

                if (checkString('mimetypeapplication/vnd.oasis.opendocument.spreadsheet', {
                  offset: 30
                })) {
                  return {
                    ext: 'ods',
                    mime: 'application/vnd.oasis.opendocument.spreadsheet'
                  };
                }

                if (checkString('mimetypeapplication/vnd.oasis.opendocument.presentation', {
                  offset: 30
                })) {
                  return {
                    ext: 'odp',
                    mime: 'application/vnd.oasis.opendocument.presentation'
                  };
                } // https://github.com/file/file/blob/master/magic/Magdir/msooxml


                if (check(oxmlContentTypes, {
                  offset: 30
                }) || check(oxmlRels, {
                  offset: 30
                })) {
                  const sliced = buf.subarray(4, 4 + 2000);

                  const nextZipHeaderIndex = arr => arr.findIndex((el, i, arr) => arr[i] === 0x50 && arr[i + 1] === 0x4B && arr[i + 2] === 0x3 && arr[i + 3] === 0x4);

                  const header2Pos = nextZipHeaderIndex(sliced);

                  if (header2Pos !== -1) {
                    const slicedAgain = buf.subarray(header2Pos + 8, header2Pos + 8 + 1000);
                    const header3Pos = nextZipHeaderIndex(slicedAgain);

                    if (header3Pos !== -1) {
                      const offset = 8 + header2Pos + header3Pos + 30;

                      if (checkString('word/', {
                        offset
                      })) {
                        return {
                          ext: 'docx',
                          mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                        };
                      }

                      if (checkString('ppt/', {
                        offset
                      })) {
                        return {
                          ext: 'pptx',
                          mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
                        };
                      }

                      if (checkString('xl/', {
                        offset
                      })) {
                        return {
                          ext: 'xlsx',
                          mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        };
                      }
                    }
                  }
                }
              }

              if (check([0x50, 0x4B]) && (buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) && (buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)) {
                return {
                  ext: 'zip',
                  mime: 'application/zip'
                };
              }

              if (check([0x75, 0x73, 0x74, 0x61, 0x72], {
                offset: 257
              })) {
                return {
                  ext: 'tar',
                  mime: 'application/x-tar'
                };
              }

              if (check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) && (buf[6] === 0x0 || buf[6] === 0x1)) {
                return {
                  ext: 'rar',
                  mime: 'application/x-rar-compressed'
                };
              }

              if (check([0x1F, 0x8B, 0x8])) {
                return {
                  ext: 'gz',
                  mime: 'application/gzip'
                };
              }

              if (check([0x42, 0x5A, 0x68])) {
                return {
                  ext: 'bz2',
                  mime: 'application/x-bzip2'
                };
              }

              if (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {
                return {
                  ext: '7z',
                  mime: 'application/x-7z-compressed'
                };
              }

              if (check([0x78, 0x01])) {
                return {
                  ext: 'dmg',
                  mime: 'application/x-apple-diskimage'
                };
              }

              if (check([0x33, 0x67, 0x70, 0x35]) || // 3gp5
              check([0x0, 0x0, 0x0]) && check([0x66, 0x74, 0x79, 0x70], {
                offset: 4
              }) && (check([0x6D, 0x70, 0x34, 0x31], {
                offset: 8
              }) || // MP41
              check([0x6D, 0x70, 0x34, 0x32], {
                offset: 8
              }) || // MP42
              check([0x69, 0x73, 0x6F, 0x6D], {
                offset: 8
              }) || // ISOM
              check([0x69, 0x73, 0x6F, 0x32], {
                offset: 8
              }) || // ISO2
              check([0x6D, 0x6D, 0x70, 0x34], {
                offset: 8
              }) || // MMP4
              check([0x4D, 0x34, 0x56], {
                offset: 8
              }) || // M4V
              check([0x64, 0x61, 0x73, 0x68], {
                offset: 8
              }) // DASH
              )) {
                return {
                  ext: 'mp4',
                  mime: 'video/mp4'
                };
              }

              if (check([0x4D, 0x54, 0x68, 0x64])) {
                return {
                  ext: 'mid',
                  mime: 'audio/midi'
                };
              } // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska


              if (check([0x1A, 0x45, 0xDF, 0xA3])) {
                const sliced = buf.subarray(4, 4 + 4096);
                const idPos = sliced.findIndex((el, i, arr) => arr[i] === 0x42 && arr[i + 1] === 0x82);

                if (idPos !== -1) {
                  const docTypePos = idPos + 3;

                  const findDocType = type => [...type].every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));

                  if (findDocType('matroska')) {
                    return {
                      ext: 'mkv',
                      mime: 'video/x-matroska'
                    };
                  }

                  if (findDocType('webm')) {
                    return {
                      ext: 'webm',
                      mime: 'video/webm'
                    };
                  }
                }
              }

              if (check([0x0, 0x0, 0x0, 0x14, 0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20]) || check([0x66, 0x72, 0x65, 0x65], {
                offset: 4
              }) || check([0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20], {
                offset: 4
              }) || check([0x6D, 0x64, 0x61, 0x74], {
                offset: 4
              }) || // MJPEG
              check([0x77, 0x69, 0x64, 0x65], {
                offset: 4
              })) {
                return {
                  ext: 'mov',
                  mime: 'video/quicktime'
                };
              } // RIFF file format which might be AVI, WAV, QCP, etc


              if (check([0x52, 0x49, 0x46, 0x46])) {
                if (check([0x41, 0x56, 0x49], {
                  offset: 8
                })) {
                  return {
                    ext: 'avi',
                    mime: 'video/x-msvideo'
                  };
                }

                if (check([0x57, 0x41, 0x56, 0x45], {
                  offset: 8
                })) {
                  return {
                    ext: 'wav',
                    mime: 'audio/x-wav'
                  };
                } // QLCM, QCP file


                if (check([0x51, 0x4C, 0x43, 0x4D], {
                  offset: 8
                })) {
                  return {
                    ext: 'qcp',
                    mime: 'audio/qcelp'
                  };
                }
              }

              if (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {
                return {
                  ext: 'wmv',
                  mime: 'video/x-ms-wmv'
                };
              }

              if (check([0x0, 0x0, 0x1, 0xBA]) || check([0x0, 0x0, 0x1, 0xB3])) {
                return {
                  ext: 'mpg',
                  mime: 'video/mpeg'
                };
              }

              if (check([0x66, 0x74, 0x79, 0x70, 0x33, 0x67], {
                offset: 4
              })) {
                return {
                  ext: '3gp',
                  mime: 'video/3gpp'
                };
              } // Check for MPEG header at different starting offsets


              for (let start = 0; start < 2 && start < buf.length - 16; start++) {
                if (check([0x49, 0x44, 0x33], {
                  offset: start
                }) || // ID3 header
                check([0xFF, 0xE2], {
                  offset: start,
                  mask: [0xFF, 0xE2]
                }) // MPEG 1 or 2 Layer 3 header
                ) {
                    return {
                      ext: 'mp3',
                      mime: 'audio/mpeg'
                    };
                  }

                if (check([0xFF, 0xE4], {
                  offset: start,
                  mask: [0xFF, 0xE4]
                }) // MPEG 1 or 2 Layer 2 header
                ) {
                    return {
                      ext: 'mp2',
                      mime: 'audio/mpeg'
                    };
                  }

                if (check([0xFF, 0xF8], {
                  offset: start,
                  mask: [0xFF, 0xFC]
                }) // MPEG 2 layer 0 using ADTS
                ) {
                    return {
                      ext: 'mp2',
                      mime: 'audio/mpeg'
                    };
                  }

                if (check([0xFF, 0xF0], {
                  offset: start,
                  mask: [0xFF, 0xFC]
                }) // MPEG 4 layer 0 using ADTS
                ) {
                    return {
                      ext: 'mp4',
                      mime: 'audio/mpeg'
                    };
                  }
              }

              if (check([0x66, 0x74, 0x79, 0x70, 0x4D, 0x34, 0x41], {
                offset: 4
              }) || check([0x4D, 0x34, 0x41, 0x20])) {
                return {
                  ext: 'm4a',
                  mime: 'audio/m4a'
                };
              } // Needs to be before `ogg` check


              if (check([0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64], {
                offset: 28
              })) {
                return {
                  ext: 'opus',
                  mime: 'audio/opus'
                };
              } // If 'OggS' in first  bytes, then OGG container


              if (check([0x4F, 0x67, 0x67, 0x53])) {
                // This is a OGG container
                // If ' theora' in header.
                if (check([0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61], {
                  offset: 28
                })) {
                  return {
                    ext: 'ogv',
                    mime: 'video/ogg'
                  };
                } // If '\x01video' in header.


                if (check([0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00], {
                  offset: 28
                })) {
                  return {
                    ext: 'ogm',
                    mime: 'video/ogg'
                  };
                } // If ' FLAC' in header  https://xiph.org/flac/faq.html


                if (check([0x7F, 0x46, 0x4C, 0x41, 0x43], {
                  offset: 28
                })) {
                  return {
                    ext: 'oga',
                    mime: 'audio/ogg'
                  };
                } // 'Speex  ' in header https://en.wikipedia.org/wiki/Speex


                if (check([0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20], {
                  offset: 28
                })) {
                  return {
                    ext: 'spx',
                    mime: 'audio/ogg'
                  };
                } // If '\x01vorbis' in header


                if (check([0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73], {
                  offset: 28
                })) {
                  return {
                    ext: 'ogg',
                    mime: 'audio/ogg'
                  };
                } // Default OGG container https://www.iana.org/assignments/media-types/application/ogg


                return {
                  ext: 'ogx',
                  mime: 'application/ogg'
                };
              }

              if (check([0x66, 0x4C, 0x61, 0x43])) {
                return {
                  ext: 'flac',
                  mime: 'audio/x-flac'
                };
              }

              if (check([0x4D, 0x41, 0x43, 0x20])) {
                return {
                  ext: 'ape',
                  mime: 'audio/ape'
                };
              }

              if (check([0x23, 0x21, 0x41, 0x4D, 0x52, 0x0A])) {
                return {
                  ext: 'amr',
                  mime: 'audio/amr'
                };
              }

              if (check([0x25, 0x50, 0x44, 0x46])) {
                return {
                  ext: 'pdf',
                  mime: 'application/pdf'
                };
              }

              if (check([0x4D, 0x5A])) {
                return {
                  ext: 'exe',
                  mime: 'application/x-msdownload'
                };
              }

              if ((buf[0] === 0x43 || buf[0] === 0x46) && check([0x57, 0x53], {
                offset: 1
              })) {
                return {
                  ext: 'swf',
                  mime: 'application/x-shockwave-flash'
                };
              }

              if (check([0x7B, 0x5C, 0x72, 0x74, 0x66])) {
                return {
                  ext: 'rtf',
                  mime: 'application/rtf'
                };
              }

              if (check([0x00, 0x61, 0x73, 0x6D])) {
                return {
                  ext: 'wasm',
                  mime: 'application/wasm'
                };
              }

              if (check([0x77, 0x4F, 0x46, 0x46]) && (check([0x00, 0x01, 0x00, 0x00], {
                offset: 4
              }) || check([0x4F, 0x54, 0x54, 0x4F], {
                offset: 4
              }))) {
                return {
                  ext: 'woff',
                  mime: 'font/woff'
                };
              }

              if (check([0x77, 0x4F, 0x46, 0x32]) && (check([0x00, 0x01, 0x00, 0x00], {
                offset: 4
              }) || check([0x4F, 0x54, 0x54, 0x4F], {
                offset: 4
              }))) {
                return {
                  ext: 'woff2',
                  mime: 'font/woff2'
                };
              }

              if (check([0x4C, 0x50], {
                offset: 34
              }) && (check([0x00, 0x00, 0x01], {
                offset: 8
              }) || check([0x01, 0x00, 0x02], {
                offset: 8
              }) || check([0x02, 0x00, 0x02], {
                offset: 8
              }))) {
                return {
                  ext: 'eot',
                  mime: 'application/octet-stream'
                };
              }

              if (check([0x00, 0x01, 0x00, 0x00, 0x00])) {
                return {
                  ext: 'ttf',
                  mime: 'font/ttf'
                };
              }

              if (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {
                return {
                  ext: 'otf',
                  mime: 'font/otf'
                };
              }

              if (check([0x00, 0x00, 0x01, 0x00])) {
                return {
                  ext: 'ico',
                  mime: 'image/x-icon'
                };
              }

              if (check([0x00, 0x00, 0x02, 0x00])) {
                return {
                  ext: 'cur',
                  mime: 'image/x-icon'
                };
              }

              if (check([0x46, 0x4C, 0x56, 0x01])) {
                return {
                  ext: 'flv',
                  mime: 'video/x-flv'
                };
              }

              if (check([0x25, 0x21])) {
                return {
                  ext: 'ps',
                  mime: 'application/postscript'
                };
              }

              if (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {
                return {
                  ext: 'xz',
                  mime: 'application/x-xz'
                };
              }

              if (check([0x53, 0x51, 0x4C, 0x69])) {
                return {
                  ext: 'sqlite',
                  mime: 'application/x-sqlite3'
                };
              }

              if (check([0x4E, 0x45, 0x53, 0x1A])) {
                return {
                  ext: 'nes',
                  mime: 'application/x-nintendo-nes-rom'
                };
              }

              if (check([0x43, 0x72, 0x32, 0x34])) {
                return {
                  ext: 'crx',
                  mime: 'application/x-google-chrome-extension'
                };
              }

              if (check([0x4D, 0x53, 0x43, 0x46]) || check([0x49, 0x53, 0x63, 0x28])) {
                return {
                  ext: 'cab',
                  mime: 'application/vnd.ms-cab-compressed'
                };
              } // Needs to be before `ar` check


              if (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6E, 0x2D, 0x62, 0x69, 0x6E, 0x61, 0x72, 0x79])) {
                return {
                  ext: 'deb',
                  mime: 'application/x-deb'
                };
              }

              if (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E])) {
                return {
                  ext: 'ar',
                  mime: 'application/x-unix-archive'
                };
              }

              if (check([0xED, 0xAB, 0xEE, 0xDB])) {
                return {
                  ext: 'rpm',
                  mime: 'application/x-rpm'
                };
              }

              if (check([0x1F, 0xA0]) || check([0x1F, 0x9D])) {
                return {
                  ext: 'Z',
                  mime: 'application/x-compress'
                };
              }

              if (check([0x4C, 0x5A, 0x49, 0x50])) {
                return {
                  ext: 'lz',
                  mime: 'application/x-lzip'
                };
              }

              if (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {
                return {
                  ext: 'msi',
                  mime: 'application/x-msi'
                };
              }

              if (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {
                return {
                  ext: 'mxf',
                  mime: 'application/mxf'
                };
              }

              if (check([0x47], {
                offset: 4
              }) && (check([0x47], {
                offset: 192
              }) || check([0x47], {
                offset: 196
              }))) {
                return {
                  ext: 'mts',
                  mime: 'video/mp2t'
                };
              }

              if (check([0x42, 0x4C, 0x45, 0x4E, 0x44, 0x45, 0x52])) {
                return {
                  ext: 'blend',
                  mime: 'application/x-blender'
                };
              }

              if (check([0x42, 0x50, 0x47, 0xFB])) {
                return {
                  ext: 'bpg',
                  mime: 'image/bpg'
                };
              }

              if (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {
                // JPEG-2000 family
                if (check([0x6A, 0x70, 0x32, 0x20], {
                  offset: 20
                })) {
                  return {
                    ext: 'jp2',
                    mime: 'image/jp2'
                  };
                }

                if (check([0x6A, 0x70, 0x78, 0x20], {
                  offset: 20
                })) {
                  return {
                    ext: 'jpx',
                    mime: 'image/jpx'
                  };
                }

                if (check([0x6A, 0x70, 0x6D, 0x20], {
                  offset: 20
                })) {
                  return {
                    ext: 'jpm',
                    mime: 'image/jpm'
                  };
                }

                if (check([0x6D, 0x6A, 0x70, 0x32], {
                  offset: 20
                })) {
                  return {
                    ext: 'mj2',
                    mime: 'image/mj2'
                  };
                }
              }

              if (check([0x46, 0x4F, 0x52, 0x4D, 0x00])) {
                return {
                  ext: 'aif',
                  mime: 'audio/aiff'
                };
              }

              if (checkString('<?xml ')) {
                return {
                  ext: 'xml',
                  mime: 'application/xml'
                };
              }

              if (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {
                offset: 60
              })) {
                return {
                  ext: 'mobi',
                  mime: 'application/x-mobipocket-ebook'
                };
              } // File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)


              if (check([0x66, 0x74, 0x79, 0x70], {
                offset: 4
              })) {
                if (check([0x6D, 0x69, 0x66, 0x31], {
                  offset: 8
                })) {
                  return {
                    ext: 'heic',
                    mime: 'image/heif'
                  };
                }

                if (check([0x6D, 0x73, 0x66, 0x31], {
                  offset: 8
                })) {
                  return {
                    ext: 'heic',
                    mime: 'image/heif-sequence'
                  };
                }

                if (check([0x68, 0x65, 0x69, 0x63], {
                  offset: 8
                }) || check([0x68, 0x65, 0x69, 0x78], {
                  offset: 8
                })) {
                  return {
                    ext: 'heic',
                    mime: 'image/heic'
                  };
                }

                if (check([0x68, 0x65, 0x76, 0x63], {
                  offset: 8
                }) || check([0x68, 0x65, 0x76, 0x78], {
                  offset: 8
                })) {
                  return {
                    ext: 'heic',
                    mime: 'image/heic-sequence'
                  };
                }
              }

              if (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {
                return {
                  ext: 'ktx',
                  mime: 'image/ktx'
                };
              }

              return null;
            };

            class TileCreator {
              constructor(width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo) {
                this.width = width;
                this.height = height;
                this.tileMatrix = tileMatrix;
                this.projectionFrom = srs.organization.toUpperCase() + ':' + srs.organization_coordsys_id;
                this.projectionFromDefinition = srs.definition;
                this.projectionTo = projectionTo.toUpperCase();
                this.tileBoundingBox = tileBoundingBox;
                this.tileMatrixSet = tileMatrixSet;
                this.chunks = [];
                this.tileHeightUnitsPerPixel = (tileBoundingBox.maxLatitude - tileBoundingBox.minLatitude) / height;
                this.tileWidthUnitsPerPixel = (tileBoundingBox.maxLongitude - tileBoundingBox.minLongitude) / width; // use this as a quick check if the projections are equal.  If they are we can shortcut some math
                // special cases 'EPSG:900913' =='EPSG:3857' == 'EPSG:102113'

                this.sameProjection = this.projectionFrom === this.projectionTo || this.projectionTo === 'EPSG:3857' && (this.projectionFrom === 'EPSG:900913' || this.projectionFrom === 'EPSG:102113');
              }

              projectTile(tileData, gridColumn, gridRow) {
                var bb = TileBoundingBoxUtils.getTileBoundingBox(this.tileMatrixSet.getBoundingBox(), this.tileMatrix, gridColumn, gridRow);

                if (!this.sameProjection) {
                  return this.reproject(tileData, bb);
                } else {
                  return Promise.resolve(this.cutAndScale(tileData, bb));
                }
              }

              cutAndScale(tileData, tilePieceBoundingBox) {
                var position = TileBoundingBoxUtils.determinePositionAndScale(tilePieceBoundingBox, this.tileMatrix.tile_height, this.tileMatrix.tile_width, this.tileBoundingBox, this.height, this.width);

                if (position.xPositionInFinalTileStart >= this.width || position.xPositionInFinalTileEnd <= 0 || position.yPositionInFinalTileStart >= this.height || position.yPositionInFinalTileEnd <= 0) ; else {
                  this.addChunk(tileData, position);
                }
              }

              addChunk(chunk, position) {
                this.chunks.push({
                  chunk: chunk,
                  position: position
                });
              }

              reproject(tileData, tilePieceBoundingBox) {
                var height = this.height;
                var width = this.width;
                var proj4To = proj4$2(this.projectionTo);
                var proj4From;

                if (this.projectionFrom) {
                  try {
                    proj4From = proj4$2(this.projectionFrom);
                  } catch (e) {}
                }

                if (!proj4From && this.projectionFromDefinition) {
                  proj4From = proj4$2(this.projectionFromDefinition);
                }

                var conversion;

                try {
                  conversion = proj4$2(this.projectionTo, this.projectionFrom);
                } catch (e) {}

                if (!conversion) {
                  conversion = proj4$2(this.projectionTo, this.projectionFromDefinition);
                }

                var latitude;
                var rows = [];

                for (var i = 0; i < height; i++) {
                  rows.push(i);
                }

                var columns = [];

                for (var i = 0; i < width; i++) {
                  columns.push(i);
                }

                return rows.reduce(function (rowSequence, row) {
                  return rowSequence.then(function () {
                    latitude = this.tileBoundingBox.maxLatitude - row * this.tileHeightUnitsPerPixel;
                    var currentColumns = columns.slice();
                    return currentColumns.reduce(function (columnSequence, column) {
                      return columnSequence.then(function () {
                        // loop over all pixels in the target tile
                        // determine the position of the current pixel in the target tile
                        var longitude = this.tileBoundingBox.minLongitude + column * this.tileWidthUnitsPerPixel; // project that lat/lng to the source coordinate system

                        var projected = conversion.forward([longitude, latitude]);
                        var projectedLongitude = projected[0];
                        var projectedLatitude = projected[1]; // now find the source pixel

                        var xPixel = this.tileMatrix.tile_width - Math.round((tilePieceBoundingBox.maxLongitude - projectedLongitude) / this.tileMatrix.pixel_x_size);
                        var yPixel = Math.round((tilePieceBoundingBox.maxLatitude - projectedLatitude) / this.tileMatrix.pixel_y_size);

                        if (xPixel >= 0 && xPixel < this.tileMatrix.tile_width && yPixel >= 0 && yPixel < this.tileMatrix.tile_height) {
                          this.addPixel(column, row, xPixel, yPixel);
                        }
                      }.bind(this));
                    }.bind(this), Promise.resolve());
                  }.bind(this));
                }.bind(this), Promise.resolve());
              }

            }

            var getPiecePosition = function (tilePieceBoundingBox, tileBoundingBox, height, width, projectionTo, projectionFrom, projectionFromDefinition, tileHeightUnitsPerPixel, tileWidthUnitsPerPixel, pixelXSize, pixelYSize) {
              var conversion;

              try {
                conversion = proj4$2(projectionTo, projectionFrom);
              } catch (e) {}

              if (!conversion) {
                conversion = proj4$2(projectionTo, projectionFromDefinition);
              }

              var maxLatitude = tilePieceBoundingBox.maxLatitude;
              var minLatitude = tilePieceBoundingBox.minLatitude;
              var minLongitude = tilePieceBoundingBox.minLongitude - pixelXSize;
              var maxLongitude = tilePieceBoundingBox.maxLongitude + pixelXSize;

              if (projectionTo.toUpperCase() === 'EPSG:3857' && projectionFrom.toUpperCase() === 'EPSG:4326') {
                maxLatitude = maxLatitude > 85.0511 ? 85.0511 : maxLatitude;
                minLatitude = minLatitude < -85.0511 ? -85.0511 : minLatitude;
                minLongitude = minLongitude < -180.0 ? -180.0 : minLongitude;
                maxLongitude = maxLongitude > 180.0 ? 180.0 : maxLongitude;
              } // ensure the projeced longitude wont wrap around the world


              var negative180 = proj4$2('EPSG:4326', projectionTo, [-180, 0]);
              var positive180 = proj4$2('EPSG:4326', projectionTo, [180, 0]);
              minLongitude = minLongitude < negative180[0] ? negative180[0] : minLongitude;
              maxLongitude = maxLongitude > positive180[0] ? positive180[0] : maxLongitude;
              var pieceBoundingBoxInTileProjectionSW = conversion.inverse([minLongitude, minLatitude]);
              var pieceBoundingBoxInTileProjectionNE = conversion.inverse([maxLongitude, maxLatitude]);
              var pieceBBProjected = {
                minLatitude: isNaN(pieceBoundingBoxInTileProjectionSW[1]) ? tileBoundingBox.minLatitude : pieceBoundingBoxInTileProjectionSW[1],
                maxLatitude: isNaN(pieceBoundingBoxInTileProjectionNE[1]) ? tileBoundingBox.maxLatitude : pieceBoundingBoxInTileProjectionNE[1],
                minLongitude: pieceBoundingBoxInTileProjectionSW[0],
                maxLongitude: pieceBoundingBoxInTileProjectionNE[0]
              };
              var startY = Math.max(0, Math.floor((tileBoundingBox.maxLatitude - pieceBBProjected.maxLatitude) / tileHeightUnitsPerPixel));
              var startX = Math.max(0, Math.floor((pieceBBProjected.minLongitude - tileBoundingBox.minLongitude) / tileWidthUnitsPerPixel));
              var endY = Math.min(height, height - Math.floor((pieceBBProjected.minLatitude - tileBoundingBox.minLatitude) / tileHeightUnitsPerPixel));
              var endX = Math.min(width, width - Math.floor((tileBoundingBox.maxLongitude - pieceBBProjected.maxLongitude) / tileWidthUnitsPerPixel));
              return {
                startY: startY,
                startX: startX,
                endY: endY,
                endX: endX
              };
            };

            var TileUtilities = {
              getPiecePosition
            };

            function ProjectTile (job, callback) {
              console.log('Tile Worker - working');
              console.time('Tile Worker - time');
              var self = this;

              if (proj4Defs[job.projectionTo]) {
                proj4$2.defs(job.projectionTo, proj4Defs[job.projectionTo]);
              }

              if (proj4Defs[job.projectionFrom]) {
                proj4$2.defs(job.projectionFrom, proj4Defs[job.projectionFrom]);
              }

              var proj4To = proj4$2(job.projectionTo);
              var proj4From = proj4$2(job.projectionFrom);
              var conversion;

              try {
                conversion = proj4$2(job.projectionTo, job.projectionFrom);
              } catch (e) {}

              if (!conversion) {
                conversion = proj4$2(job.projectionTo, job.projectionFromDefinition);
              }

              var tileBoundingBox = JSON.parse(job.tileBoundingBox);
              var tilePieceBoundingBox = JSON.parse(job.tilePieceBoundingBox);
              var piecePosition = TileUtilities.getPiecePosition(tilePieceBoundingBox, tileBoundingBox, job.height, job.width, job.projectionTo, job.projectionFrom, job.projectionFromDefinition, job.tileHeightUnitsPerPixel, job.tileWidthUnitsPerPixel, job.pixelXSize, job.pixelYSize);
              var x = piecePosition.startX;
              var y = piecePosition.startY;
              var finalWidth = Math.ceil(piecePosition.endX - piecePosition.startX);
              var finalHeight = Math.ceil(piecePosition.endY - piecePosition.startY);

              if (finalWidth <= 0 || finalHeight <= 0) {
                console.timeEnd('Tile Worker - time');

                if (callback) {
                  return callback(null, {
                    message: 'donenodata'
                  });
                } else {
                  postMessage({
                    message: 'donenodata'
                  });
                  return self.close();
                }
              }

              var imageData = new Uint8ClampedArray(job.imageData);
              var finalImageData = new Uint8ClampedArray(finalWidth * finalHeight * 4);
              var latitude;
              var yArray = [];

              for (var i = y; i < piecePosition.endY; i++) {
                yArray.push(i);
              }

              var xArray = [];

              for (var i = x; i < piecePosition.endX; i++) {
                xArray.push(i);
              }

              return yArray.reduce(function (ySequence, y) {
                return ySequence.then(function () {
                  latitude = tileBoundingBox.maxLatitude - y * job.tileHeightUnitsPerPixel;
                  var currentXArray = xArray.slice();
                  return currentXArray.reduce(function (xSequence, x) {
                    return xSequence.then(function () {
                      longitude = tileBoundingBox.minLongitude + x * job.tileWidthUnitsPerPixel;
                      var projected = conversion.forward([longitude, latitude]);
                      var projectedLongitude = projected[0];
                      var projectedLatitude = projected[1];
                      var xPixel = job.tileWidth - Math.round((tilePieceBoundingBox.maxLongitude - projectedLongitude) / job.pixelXSize);
                      var yPixel = Math.round((tilePieceBoundingBox.maxLatitude - projectedLatitude) / job.pixelYSize);

                      if (xPixel >= 0 && xPixel < job.tileWidth && yPixel >= 0 && yPixel < job.tileHeight) {
                        var sliceStart = yPixel * job.tileWidth * 4 + xPixel * 4;

                        if (sliceStart >= 0) {
                          finalImageData.set(imageData.slice(sliceStart, sliceStart + 4), (y - piecePosition.startY) * finalWidth * 4 + (x - piecePosition.startX) * 4);
                        }
                      }
                    });
                  }, Promise.resolve());
                });
              }, Promise.resolve()).then(function () {
                console.timeEnd('Tile Worker - time');

                if (callback) {
                  callback(null, {
                    message: 'done',
                    imageData: finalImageData.buffer,
                    finalWidth: finalWidth,
                    finalHeight: finalHeight
                  }, [finalImageData.buffer]);
                } else {
                  postMessage({
                    message: 'done',
                    imageData: finalImageData.buffer,
                    finalWidth: finalWidth,
                    finalHeight: finalHeight
                  }, [finalImageData.buffer]);
                  self.close();
                }
              });
            }

            class CanvasTileCreator extends TileCreator {
              constructor(width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo, canvas) {
                super(width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo, canvas);
                this.canvas = canvas || document.createElement('canvas');
                this.canvas.width = width;
                this.canvas.height = height;
                this.ctx = this.canvas.getContext('2d');
                this.image = document.createElement('img');
                this.tileCanvas = document.createElement('canvas');
                this.tileContext = this.tileCanvas.getContext('2d');
                this.tileCanvas.width = tileMatrix.tile_width;
                this.tileCanvas.height = tileMatrix.tile_height;
                this.imageData = new Uint8ClampedArray(width * height * 4);
              }

              addPixel(targetX, targetY, sourceX, sourceY) {
                var color = this.tileContext.getImageData(sourceX, sourceY, 1, 1);
                this.imageData.set(color.data, targetY * this.width * 4 + targetX * 4);
              }

              addTile(tileData, gridColumn, gridRow) {
                var bb = TileBoundingBoxUtils.getTileBoundingBox(this.tileMatrixSet.getBoundingBox(), this.tileMatrix, gridColumn, gridRow);
                var type = fileType(tileData);
                var binary = '';
                var bytes = tileData;
                var len = bytes.byteLength;

                for (var i = 0; i < len; i++) {
                  binary += String.fromCharCode(bytes[i]);
                }

                var base64Data = btoa(binary);
                return new Promise(function (resolve, reject) {
                  this.image.onload = function () {
                    resolve(this.tileContext.drawImage(this.image, 0, 0));
                  }.bind(this);

                  this.image.src = 'data:' + type.mime + ';base64,' + base64Data;
                }.bind(this)).then(function () {
                  return this.projectTile(tileData, gridColumn, gridRow);
                }.bind(this)).then(function () {
                  if (this.chunks && this.chunks.length) {
                    return this.chunks.reduce(function (sequence, chunk) {
                      var type = fileType(tileData);
                      var binary = '';
                      var bytes = chunk.chunk;
                      var len = bytes.byteLength;

                      for (var i = 0; i < len; i++) {
                        binary += String.fromCharCode(bytes[i]);
                      }

                      var base64DataChunk = btoa(binary);
                      var image = document.createElement('img');
                      return sequence.then(function () {
                        return new Promise(function (resolve, reject) {
                          image.onload = function () {
                            var p = chunk.position;
                            this.ctx.drawImage(image, p.sx, p.sy, p.sWidth, p.sHeight, p.dx, p.dy, p.dWidth, p.dHeight);
                            resolve();
                          }.bind(this);

                          image.src = 'data:' + type.mime + ';base64,' + base64DataChunk;
                        }.bind(this));
                      }.bind(this));
                    }.bind(this), Promise.resolve());
                  }
                }.bind(this));
              }

              getCompleteTile(format, callback) {
                return this.canvas.toDataURL();
              }

              reproject(tileData, tilePieceBoundingBox) {
                var ctx = this.ctx;
                var width = this.width;
                var height = this.height;
                var piecePosition = TileUtilities.getPiecePosition(tilePieceBoundingBox, this.tileBoundingBox, this.height, this.width, this.projectionTo, this.projectionFrom, this.projectionFromDefinition, this.tileHeightUnitsPerPixel, this.tileWidthUnitsPerPixel, this.tileMatrix.pixel_x_size, this.tileMatrix.pixel_y_size);
                var job = {
                  tileBoundingBox: JSON.stringify(this.tileBoundingBox),
                  tileWidthUnitsPerPixel: this.tileWidthUnitsPerPixel,
                  tileHeightUnitsPerPixel: this.tileHeightUnitsPerPixel,
                  projectionTo: this.projectionTo,
                  projectionFrom: this.projectionFrom,
                  projectionFromDefinition: this.projectionFromDefinition,
                  tileWidth: this.tileMatrix.tile_width,
                  tileHeight: this.tileMatrix.tile_height,
                  pixelYSize: this.tileMatrix.pixel_y_size,
                  pixelXSize: this.tileMatrix.pixel_x_size,
                  height: this.height,
                  width: this.width,
                  tilePieceBoundingBox: JSON.stringify(tilePieceBoundingBox),
                  imageData: this.tileContext.getImageData(0, 0, this.tileMatrix.tile_width, this.tileMatrix.tile_height).data.buffer
                };
                return new Promise(function (resolve, reject) {
                  try {
                    var work = require('webworkify');

                    var worker = work(require('./tileWorker.js'));

                    worker.onmessage = function (e) {
                      resolve(workerDone(e.data, piecePosition, ctx));
                    };

                    worker.postMessage(job, [this.tileContext.getImageData(0, 0, this.tileMatrix.tile_width, this.tileMatrix.tile_height).data.buffer]);
                  } catch (e) {
                    worker = ProjectTile;
                    worker(job, function (err, data) {
                      resolve(workerDone(data, piecePosition, ctx));
                    });
                  }
                }.bind(this));
              }

            }

            function workerDone(data, piecePosition, ctx) {
              if (data.message === 'done') {
                var imageData = new Uint8ClampedArray(data.imageData);
                var offsetX = piecePosition.startX;
                var offsetY = piecePosition.startY;
                var finalWidth = data.finalWidth;
                var finalHeight = data.finalHeight;
                var tmpCanvas = document.createElement('canvas');
                tmpCanvas.width = finalWidth;
                tmpCanvas.height = finalHeight;
                tmpCanvas.getContext('2d').putImageData(new ImageData(imageData, finalWidth, finalHeight), 0, 0);
                ctx.drawImage(tmpCanvas, offsetX, offsetY);
              }
            }

            var initialize = function (width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo, canvas) {
              var isElectron = !!(typeof navigator != 'undefined' && navigator.userAgent.toLowerCase().indexOf(' electron/') > -1);
              var isPhantom = !!(typeof window != 'undefined' && window.callPhantom && window._phantom);
              var isNode = typeof process !== 'undefined' && process.version;

              if (isNode && !isElectron && !isPhantom) {
                // var NodeTileCreator = require('./node').default;
                return new NodeTileCreator(width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo, canvas);
              } else {
                // var CanvasTileCreator = require('./canvas').default;
                return new CanvasTileCreator(width, height, tileMatrix, tileMatrixSet, tileBoundingBox, srs, projectionTo, canvas);
              }
            };

            var GeoPackageTileRetriever = function (tileDao, width, height) {
              this.tileDao = tileDao;
              this.tileDao.adjustTileMatrixLengths();
              this.width = width;
              this.height = height;
            };

            GeoPackageTileRetriever.prototype.getWebMercatorBoundingBox = function () {
              if (this.setWebMercatorBoundingBox) {
                return this.setWebMercatorBoundingBox;
              } else {
                var tileMatrixSetDao = this.tileDao.geoPackage.getTileMatrixSetDao();
                var tileMatrixSet = this.tileDao.tileMatrixSet;
                var srs = tileMatrixSetDao.getSrs(tileMatrixSet);
                this.setProjectionBoundingBox = tileMatrixSet.getBoundingBox();

                if (srs.organization_coordsys_id === 4326 && srs.organization === 'EPSG') {
                  this.setProjectionBoundingBox.minLatitude = Math.max(this.setProjectionBoundingBox.minLatitude, -85.05);
                  this.setProjectionBoundingBox.maxLatitude = Math.min(this.setProjectionBoundingBox.maxLatitude, 85.05);
                }

                this.setWebMercatorBoundingBox = this.setProjectionBoundingBox.projectBoundingBox(this.tileDao.projection, 'EPSG:3857');
                return this.setWebMercatorBoundingBox;
              }
            };

            GeoPackageTileRetriever.prototype.hasTile = function (x, y, zoom) {
              var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, zoom);
              var tileMatrix = this.tileDao.getTileMatrixWithZoomLevel(zoom);
              var iterator = this.retrieveTileResults(webMercatorBoundingBox, tileMatrix);
              var exists = false;

              for (var row of iterator) {
                exists = true;
              }

              return exists;
            };

            GeoPackageTileRetriever.prototype.getTile = function (x, y, zoom) {
              var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, zoom);
              var gpZoom = this.determineGeoPackageZoomLevel(webMercatorBoundingBox, zoom);
              return this.getTileWithBounds(webMercatorBoundingBox, gpZoom, 'EPSG:3857');
            };

            GeoPackageTileRetriever.prototype.drawTileIn = function (x, y, zoom, canvas) {
              var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, zoom);
              var gpZoom = this.determineGeoPackageZoomLevel(webMercatorBoundingBox, zoom);
              return this.getTileWithBounds(webMercatorBoundingBox, gpZoom, 'EPSG:3857', canvas);
            };

            GeoPackageTileRetriever.prototype.getTileWithWgs84Bounds = function (wgs84BoundingBox, zoom) {
              var webMercatorBoundingBox = wgs84BoundingBox.projectBoundingBox('EPSG:4326', 'EPSG:3857');
              var gpZoom = this.determineGeoPackageZoomLevel(webMercatorBoundingBox, zoom);
              return this.getTileWithBounds(webMercatorBoundingBox, gpZoom, 'EPSG:3857');
            };

            GeoPackageTileRetriever.prototype.getTileWithWgs84BoundsInProjection = function (wgs84BoundingBox, zoom, targetProjection, canvas) {
              var targetBoundingBox = wgs84BoundingBox.projectBoundingBox('EPSG:4326', targetProjection);
              return this.getTileWithBounds(targetBoundingBox, zoom, targetProjection, canvas);
            };

            GeoPackageTileRetriever.prototype.getWebMercatorTile = function (x, y, zoom) {
              // need to determine the geoPackage zoom level from the web mercator zoom level
              var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, zoom);
              var gpZoom = this.determineGeoPackageZoomLevel(webMercatorBoundingBox, zoom);
              return this.getTileWithBounds(webMercatorBoundingBox, gpZoom, 'EPSG:3857');
            };

            GeoPackageTileRetriever.prototype.determineGeoPackageZoomLevel = function (webMercatorBoundingBox, zoom) {
              // find width and height of this tile in geopackage projection
              var proj4Projection = proj4$2(this.tileDao.projection, 'EPSG:3857');
              var ne = proj4Projection.inverse([webMercatorBoundingBox.maxLongitude, webMercatorBoundingBox.maxLatitude]);
              var sw = proj4Projection.inverse([webMercatorBoundingBox.minLongitude, webMercatorBoundingBox.minLatitude]);
              var width = ne[0] - sw[0];
              var height = ne[1] - sw[1];
              var gpZoom = undefined; // find the closest zoom for width

              for (var i = 0; i < this.tileDao.widths.length; i++) {
                var tileWidth = this.tileDao.widths[i];
                var difference = Math.abs(width - tileWidth);
                var tolerance = .001 * tileWidth;

                if (tileWidth <= width || difference <= tolerance) {
                  gpZoom = this.tileDao.maxZoom - i;
                }
              }

              return gpZoom;
            };

            GeoPackageTileRetriever.prototype.getTileWithBounds = function (targetBoundingBox, zoom, targetProjection, canvas) {
              var tiles = [];
              var tileMatrix = this.tileDao.getTileMatrixWithZoomLevel(zoom);
              if (!tileMatrix) return Promise.resolve();
              var tileWidth = tileMatrix.tile_width;
              var tileHeight = tileMatrix.tile_height;
              var matrixSetBoundsInTargetProjection = this.tileDao.tileMatrixSet.getBoundingBox().projectBoundingBox(this.tileDao.projection, targetProjection);
              var matrixTotalBoundingBox = this.tileDao.tileMatrixSet.getBoundingBox();
              var targetBoundingBoxInMatrixSetProjection = targetBoundingBox.projectBoundingBox(targetProjection, this.tileDao.projection);
              var tileGrid = TileBoundingBoxUtils.getTileGridWithTotalBoundingBox(matrixTotalBoundingBox, tileMatrix.matrix_width, tileMatrix.matrix_height, targetBoundingBoxInMatrixSetProjection);
              var creator = initialize(this.width || tileWidth, this.height || tileHeight, tileMatrix, this.tileDao.tileMatrixSet, targetBoundingBox, this.tileDao.srs, targetProjection, canvas);
              var iterator = this.retrieveTileResults(targetBoundingBox.projectBoundingBox(targetProjection, this.tileDao.projection), tileMatrix);

              for (var tile of iterator) {
                tiles.push({
                  data: tile.getTileData(),
                  gridColumn: tile.getTileColumn(),
                  gridRow: tile.getRow()
                });
              }

              return tiles.reduce(function (sequence, tile) {
                return sequence.then(function () {
                  return creator.addTile(tile.data, tile.gridColumn, tile.gridRow);
                });
              }, Promise.resolve()).then(function () {
                if (!canvas) {
                  return creator.getCompleteTile('png');
                }
              });
            };

            GeoPackageTileRetriever.prototype.retrieveTileResults = function (tileMatrixProjectionBoundingBox, tileMatrix) {
              if (tileMatrix) {
                var tileGrid = TileBoundingBoxUtils.getTileGridWithTotalBoundingBox(this.tileDao.tileMatrixSet.getBoundingBox(), tileMatrix.matrix_width, tileMatrix.matrix_height, tileMatrixProjectionBoundingBox);
                return this.tileDao.queryByTileGrid(tileGrid, tileMatrix.zoom_level);
              } else {
                return Promise.resolve();
              }
            };

            /**
             * This adapter uses [sql.js](http://kripken.github.io/sql.js/documentation/)
             * to interact with a SQLite database in a web browser.  The module exports an
             * implementation of [`DBAdapterFactory`]{@link module:db/adapter~DBAdapterFactory}.
             *
             * @module db/sqljsAdapter
             * @implements {module:db/adapter~DBAdapterFactory}
             */

            var SqljsAdapter = {};
            /**
             * Returns a Promise which, when resolved, returns a {module:db/sqljsAdapter~Adapter} which has connected to the GeoPackage database file
             * @param  {string|Buffer} [filePath] string path to an existing file or a path to where a new file will be created or a url from which to download a GeoPackage or a Uint8Array containing the contents of the file, if undefined, an in memory database is created
             * @return {Promise<module:db/sqjsAdapter~Adapter>}
             */

            SqljsAdapter.createAdapter = function (filePath) {
              return new Promise(function (resolve, reject) {
                if (!filePath || typeof filePath !== 'string') {
                  const db = new SQL.Database(filePath);
                  const adapter = new Adapter(db);
                  return resolve(adapter);
                } else if (filePath.indexOf('http') === 0) {
                  var xhr = new XMLHttpRequest();
                  xhr.open('GET', filePath, true);
                  xhr.responseType = 'arraybuffer';

                  xhr.onload = function (e) {
                    if (xhr.status !== 200) {
                      return reject(new Error('Unable to reach url: ' + filePath));
                    }

                    var uInt8Array = new Uint8Array(this.response);
                    var db = new SQL.Database(uInt8Array);
                    var adapter = new Adapter(db);
                    return resolve(adapter);
                  };

                  xhr.onerror = function (e) {
                    return reject(new Error('Error reaching url: ' + filePath));
                  };

                  xhr.send();
                } else {
                  try {
                    var stats = fs.statSync(filePath);
                  } catch (e) {
                    var db = new SQL.Database();
                    var adapter = new Adapter(db);
                    return resolve(adapter);
                  }

                  var filebuffer = fs.readFileSync(filePath);
                  var t = new Uint8Array(filebuffer);
                  var db = new SQL.Database(t); // console.log('setting wal mode');
                  // var walMode = db.exec('PRAGMA journal_mode=DELETE');
                  // console.log('walMode', walMode);

                  var adapter = new Adapter(db);
                  return resolve(adapter);
                }
              });
            };
            /**
             * Creates an adapter from an already established better-sqlite3 database connection
             * @param  {sqljs.Database} db sqljs database connection
             * @return {module:db/sqljsAdapter~Adapter}
             */


            SqljsAdapter.createAdapterFromDb = function (db) {
              return new Adapter(db);
            };
            /**
             * Class which adapts generic GeoPackage queries to sqljs queries
             * @class Adapter
             * @param {sqljs.Database} db sqljs database connection
             */

            function Adapter(db) {
              this.db = db;
            }
            /**
             * Closes the connection to the GeoPackage
             */


            Adapter.prototype.close = function () {
              this.db.close();
            };
            /**
             * Get the connection to the database file
             * @return {sqljs.Database}
             */


            Adapter.prototype.getDBConnection = function () {
              return this.db;
            };
            /**
             * Returns a Uint8Array containing the contents of the database as a file
             * @param  {Function} callback called when export is complete
             */


            Adapter.prototype.export = function (callback) {
              callback(null, this.db.export());
            };
            /**
             * Registers the given function so that it can be used by SQL statements
             * @see {@link http://kripken.github.io/sql.js/documentation/#http://kripken.github.io/sql.js/documentation/class/Database.html#create_function-dynamic|sqljs create_function}
             * @param  {string} name               name of function to register
             * @param  {Function} functionDefinition function to register
             * @return {module:db/sqljsAdapter~Adapter} this
             */


            Adapter.prototype.registerFunction = function (name, functionDefinition) {
              this.db.create_function(name, functionDefinition);
              return this;
            };
            /**
             * Return one row from the results of the given statement.
             * @see {@link http://kripken.github.io/sql.js/documentation/#http://kripken.github.io/sql.js/documentation/class/Statement.html#get-dynamic|sqljs get}
             * @see {@link http://kripken.github.io/sql.js/documentation/#http://kripken.github.io/sql.js/documentation/class/Statement.html#getAsObject-dynamic|sqljs getAsObject}
             * @param  {string} sql    statement to run
             * @param  {Array|Object} [params] substitution parameters
             * @return {Object}
             */


            Adapter.prototype.get = function (sql, params) {
              params = params || [];
              var statement = this.db.prepare(sql);
              statement.bind(params);
              var hasResult = statement.step();
              var row;

              if (hasResult) {
                row = statement.getAsObject();
              }

              statement.free();
              return row;
            };
            /**
             * Gets all results from the statement in an array
             * @param  {string} sql    statement to run
             * @param  {Array|Object} [params] bind parameters
             * @return {Object[]}
             */


            Adapter.prototype.all = function (sql, params) {
              var rows = [];
              var iterator = this.each(sql, params);

              for (var row of iterator) {
                rows.push(row);
              }

              return rows;
            };
            /**
             * Returns an Iterable with results from the query
             * @param  {string} sql    statement to run
             * @param  {Object|Array} params bind parameters
             * @return {Iterable<Object>}
             */


            Adapter.prototype.each = function (sql, params) {
              var statement = this.db.prepare(sql);
              statement.bind(params);
              return {
                [Symbol.iterator]() {
                  return this;
                },

                next: function () {
                  if (statement.step()) {
                    return {
                      value: statement.getAsObject(),
                      done: false
                    };
                  } else {
                    statement.free();
                    return {
                      done: true
                    };
                  }
                }
              };
            };
            /**
             * Runs the statement specified, returning information about what changed
             * @see {@link http://kripken.github.io/sql.js/documentation/#http://kripken.github.io/sql.js/documentation/class/Statement.html#run-dynamic|sqljs run}
             * @param  {string} sql    statement to run
             * @param  {Object|Array} [params] bind parameters
             * @return {module:db/adapter~DBWriteResult}
             */


            Adapter.prototype.run = function (sql, params) {
              if (params) {
                for (var key in params) {
                  params['$' + key] = params[key];
                }
              }

              this.db.run(sql, params);
              var lastId = this.db.exec('select last_insert_rowid();');
              var lastInsertedId;

              if (lastId) {
                lastInsertedId = lastId[0].values[0][0];
              }

              return {
                lastInsertROWID: lastInsertedId,
                changes: this.db.getRowsModified()
              };
            };
            /**
             * Runs the specified insert statement and returns the last inserted id or undefined if no insert happened
             * @param  {string} sql    statement to run
             * @param  {Object|Array} [params] bind parameters
             * @return {module:db/adapter~ROWID} last inserted `ROWID`
             */


            Adapter.prototype.insert = function (sql, params) {
              if (params) {
                for (var key in params) {
                  params['$' + key] = params[key];
                }
              }

              var statement = this.db.prepare(sql, params);
              statement.step();
              statement.free();
              var lastId = this.db.exec('select last_insert_rowid();');

              if (lastId) {
                return lastId[0].values[0][0];
              } else {
                return;
              }
            };
            /**
             * Runs the specified delete statement and returns the number of deleted rows
             * @param  {string} sql statement to run
             * @param  {Object|Array} [params] bind parameters
             * @return {number} count of deleted rows
             */


            Adapter.prototype.delete = function (sql, params) {
              var rowsModified = 0;
              var statement = this.db.prepare(sql, params);
              statement.step();
              rowsModified = this.db.getRowsModified();
              statement.free();
              return rowsModified;
            };
            /**
             * Drops the table
             * @param  {string} table table name
             * @return {Boolean} indicates if the table was dropped
             */


            Adapter.prototype.dropTable = function (table) {
              var response = this.db.exec('DROP TABLE IF EXISTS "' + table + '"');
              var vacuum = this.db.exec('VACUUM');
              return !!response;
            };
            /**
             * Counts rows that match the query
             * @param  {string} tableName table name from which to count
             * @param  {string} [where]     where clause
             * @param  {Object|Array} [whereArgs] where args
             * @return {Number} count
             */


            Adapter.prototype.count = function (tableName, where, whereArgs) {
              var sql = 'SELECT COUNT(*) as count FROM "' + tableName + '"';

              if (where) {
                sql += ' where ' + where;
              }

              return this.get(sql, whereArgs).count;
            };

            if (typeof process !== 'undefined' && process.platform !== 'browser' && process.version && !process.env.FORCE_SQLJS) {
              console.log('Better SQLite');
            } else {
              console.log('SQL.js');
            }
            /**
             * Creates a connection to the SQLite file and when connected, returns a promise that resolves the connection.
             * This will create a {module:db/sqliteAdapter~Adapter} if running in node and the FORCE_SQLJS environment variable is not set.
             * This will create a {module:db/sqljsAdapter~Adapter} if running in the browser or the FORCE_SQLJS environment variable is set
             * @see {module:db/sqliteAdapter~Adapter}
             * @see {module:db/sqljsAdapter~Adapter}
             * @class
             * @param  {string} filePath path to the sqlite file
             * @return {Promise<module:db/geoPackageConnection~GeoPackageConnection>}
             * @todo change this constructor to return an actual `GeoPackageConnection` instance instead of a `Promise`
             */


            var GeoPackageConnection = function (filePath) {
              if (typeof process !== 'undefined' && process.platform !== 'browser' && process.version && !process.env.FORCE_SQLJS) {
                this.adapterCreator = SqliteAdapter;
              } else {
                this.adapterCreator = SqljsAdapter;
                console.log('adapter creator', this.adapterCreator);
              }

              var promise = new Promise(function (resolve, reject) {
                this.adapterCreator.createAdapter(filePath).then(function (adapter) {
                  this.adapter = adapter;
                  resolve(this);
                }.bind(this)).catch(function (error) {
                  reject(error);
                });
              }.bind(this));
              return promise;
            };
            /**
             * Close the database.
             */


            GeoPackageConnection.prototype.close = function () {
              this.adapter.close();
            };
            /**
             * exports the GeoPackage as a file
             * @param  {Function} callback called with an err and the buffer containing the contents of the file
             */


            GeoPackageConnection.prototype.export = function (callback) {
              this.adapter.export(callback);
            };
            /**
             * Gets the raw connection to the database
             * @return {Object}
             */


            GeoPackageConnection.prototype.getDBConnection = function () {
              return this.adapter.db;
            };
            /**
             * Connects to a GeoPackage database
             * @param  {Object} db database to connect to
             * @return {(module:db/sqliteAdapter~Adapter|module:db/sqljsAdapter~Adapter)}
             */


            GeoPackageConnection.prototype.setDBConnection = function (db) {
              return this.adapter = this.adapterCreator.createAdapterFromDb(db);
            };
            /**
            * Registers the given function so that it can be used by SQL statements
            * @param  {string} name               name of function to register
            * @param  {Function} functionDefinition function to register
            * @return {(module:db/sqliteAdapter~Adapter|module:db/sqljsAdapter~Adapter)} the adapter in use
            */


            GeoPackageConnection.prototype.registerFunction = function (name, functionDefinition) {
              this.adapter.registerFunction(name, functionDefinition);
              return this.adapter;
            };
            /**
             * Gets the first result from the query
             * @param  {string} sql    sql query to run
             * @param  {Array|Object} [params] array of substitution parameters
             * @return {object}
             */


            GeoPackageConnection.prototype.get = function (sql, params) {
              return this.adapter.get(sql, params);
            };
            /**
             * Run the given SQL and return the results.
             * @param  {string} sql    sql to run
             * @param  {Array|Object} [params] array of substitution parameters
             * @return {@module:db/adapter~DBWriteResult}
             */


            GeoPackageConnection.prototype.run = function (sql, params) {
              return this.adapter.run(sql, params);
            };
            /**
             * Executes the query and returns all results in an array
             * @param  {string} sql sql to run
             * @param  {Array|Object} [params] substitution parameters
             * @return {Object[]}
             */


            GeoPackageConnection.prototype.all = function (sql, params) {
              return this.adapter.all(sql, params);
            };
            /**
             * Executes the query and returns an Iterable object of results
             * @param  {string} sql    sql to run
             * @param  {Array|Object} [params] substitution parameters
             * @return {Iterable<Object>}
             */


            GeoPackageConnection.prototype.each = function (sql, params) {
              return this.adapter.each(sql, params);
            };
            /**
             * Gets the minimum value from the column
             * @param  {string} table     table to query
             * @param  {string} column    column to get the min value from
             * @param  {string} [where]     where clause
             * @param  {Array|Object} [whereArgs] substitution parameters
             * @return {Object}
             */


            GeoPackageConnection.prototype.minOfColumn = function (table, column, where, whereArgs) {
              var minStatement = 'select min(' + column + ') as min from ' + table;

              if (where) {
                minStatement += ' ';

                if (where.indexOf('where')) {
                  where = 'where ' + where;
                }

                minStatement += where;
              }

              return this.adapter.get(minStatement, whereArgs).min;
            };
            /**
             * Gets the maximum value from the column
             * @param  {string} table     table to query
             * @param  {string} column    column to get the max value from
             * @param  {string} [where]     where clause
             * @param  {Array|Object} [whereArgs] substitution parameters
             * @return {Object}
             */


            GeoPackageConnection.prototype.maxOfColumn = function (table, column, where, whereArgs, callback) {
              var maxStatement = 'select max(' + column + ') as max from ' + table;

              if (where) {
                maxStatement += ' ';

                if (where.indexOf('where')) {
                  where = 'where ' + where;
                }

                maxStatement += where;
              }

              return this.adapter.get(maxStatement, whereArgs).max;
            };
            /**
             * Return the count of objects in the table
             * @param  {string} table table name
             * @param  {string} [where] where clause
             * @param  {Array|Object} [whereArgs] substitution parameters
             * @return {Number}
             */


            GeoPackageConnection.prototype.count = function (table, where, whereArgs) {
              return this.adapter.count(table, where, whereArgs);
            };
            /**
             * Execute the given `INSERT` statement and return the ID of the last row
             * inserted.
             * @param  {string} sql SQL insert statement
             * @param  {Array|Object} params substitution parameters
             * @return {module:db/adapter~ROWID} ID of the last row inserted
             */


            GeoPackageConnection.prototype.insert = function (sql, params) {
              return this.adapter.insert(sql, params);
            };
            /**
             * Delete rows from the table of the given name.
             * @param  {string} tableName table name to delete from
             * @param  {string} [where] where clause
             * @param  {Array|Object} [whereArgs] substitution parameters
             * @return {Number} number of rows deleted
             */


            GeoPackageConnection.prototype.delete = function (tableName, where, whereArgs) {
              var deleteStatement = 'DELETE FROM ' + tableName + '';

              if (where) {
                deleteStatement += ' WHERE ' + where;
              }

              return this.adapter.delete(deleteStatement, whereArgs);
            };
            /**
             * Drop the table with the given name.
             * @param  {string} tableName table to drop
             * @return {Boolean} results of table drop
             */


            GeoPackageConnection.prototype.dropTable = function (tableName) {
              return this.adapter.dropTable(tableName);
            };
            /**
             * Gets information about the table specified.  If data is returned, the table exists
             * @param  {string} tableName table to check
             * @return {Object}
             */


            GeoPackageConnection.prototype.tableExists = function (tableName) {
              return this.adapter.get('SELECT name FROM sqlite_master WHERE type="table" AND name=?', [tableName]);
            };
            /**
             * Checks if a table and column exist
             * @param  {string} tableName  table to check
             * @param  {string} columnName column to check
             * @return {Boolean}
             */


            GeoPackageConnection.prototype.columnAndTableExists = function (tableName, columnName) {
              var columns = this.adapter.all('PRAGMA table_info(\'' + tableName + '\')');

              for (var i = 0; i < columns.length; i++) {
                if (columns[i].name === columnName) {
                  return true;
                }
              }

              return false;
            };
            /**
             * Sets the APPLICATION_ID and user_version for GeoPackage
             */


            GeoPackageConnection.prototype.setApplicationId = function () {
              var buff = new Buffer(exports.APPLICATION_ID);
              var applicationId = buff.readUInt32BE(0);
              this.adapter.run('PRAGMA application_id = ' + applicationId);
              this.adapter.run('PRAGMA user_version = ' + exports.USER_VERSION);
            };
            /**
             * gets the application_id from the sqlite file
             * @return {Object}
             */


            GeoPackageConnection.prototype.getApplicationId = function () {
              return this.adapter.get('PRAGMA application_id').application_id;
            };
            /**
             * Convenience method
             * @see {module:db/geoPackageConnection~GeoPackageConnection}
             * @see {module:db/sqliteAdapter~Adapter}
             * @see {module:db/sqljsAdapter~Adapter}
             * @param  {string|Buffer} filePath string path to an existing file or a path to where a new file will be created or a Buffer containing the contents of the file, if undefined, an in memory database is created
             * @return {Promise} that resolves
             */


            function connect(filePath) {
              return new GeoPackageConnection(filePath);
            }

            var domain; // This constructor is used to store event handlers. Instantiating this is
            // faster than explicitly calling `Object.create(null)` to get a "clean" empty
            // object (tested with v8 v4.9).

            function EventHandlers() {}

            EventHandlers.prototype = Object.create(null);

            function EventEmitter() {
              EventEmitter.init.call(this);
            }
            // require('events') === require('events').EventEmitter

            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.usingDomains = false;
            EventEmitter.prototype.domain = undefined;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.

            EventEmitter.defaultMaxListeners = 10;

            EventEmitter.init = function () {
              this.domain = null;

              if (EventEmitter.usingDomains) {
                // if there is an active domain, then attach to it.
                if (domain.active && !(this instanceof domain.Domain)) ;
              }

              if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
                this._events = new EventHandlers();
                this._eventsCount = 0;
              }

              this._maxListeners = this._maxListeners || undefined;
            }; // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.


            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
              if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
              this._maxListeners = n;
              return this;
            };

            function $getMaxListeners(that) {
              if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
              return that._maxListeners;
            }

            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
              return $getMaxListeners(this);
            }; // These standalone emit* functions are used to optimize calling of event
            // handlers for fast cases because emit() itself often has a variable number of
            // arguments and can be deoptimized because of that. These functions always have
            // the same number of arguments and thus do not get deoptimized, so the code
            // inside them can execute faster.


            function emitNone(handler, isFn, self) {
              if (isFn) handler.call(self);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) listeners[i].call(self);
              }
            }

            function emitOne(handler, isFn, self, arg1) {
              if (isFn) handler.call(self, arg1);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
              }
            }

            function emitTwo(handler, isFn, self, arg1, arg2) {
              if (isFn) handler.call(self, arg1, arg2);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
              }
            }

            function emitThree(handler, isFn, self, arg1, arg2, arg3) {
              if (isFn) handler.call(self, arg1, arg2, arg3);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
              }
            }

            function emitMany(handler, isFn, self, args) {
              if (isFn) handler.apply(self, args);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
              }
            }

            EventEmitter.prototype.emit = function emit(type) {
              var er, handler, len, args, i, events, domain;
              var doError = type === 'error';
              events = this._events;
              if (events) doError = doError && events.error == null;else if (!doError) return false;
              domain = this.domain; // If there is no 'error' event listener then throw.

              if (doError) {
                er = arguments[1];

                if (domain) {
                  if (!er) er = new Error('Uncaught, unspecified "error" event');
                  er.domainEmitter = this;
                  er.domain = domain;
                  er.domainThrown = false;
                  domain.emit('error', er);
                } else if (er instanceof Error) {
                  throw er; // Unhandled 'error' event
                } else {
                  // At least give some kind of context to the user
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                  err.context = er;
                  throw err;
                }

                return false;
              }

              handler = events[type];
              if (!handler) return false;
              var isFn = typeof handler === 'function';
              len = arguments.length;

              switch (len) {
                // fast cases
                case 1:
                  emitNone(handler, isFn, this);
                  break;

                case 2:
                  emitOne(handler, isFn, this, arguments[1]);
                  break;

                case 3:
                  emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                  break;

                case 4:
                  emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                  break;
                // slower

                default:
                  args = new Array(len - 1);

                  for (i = 1; i < len; i++) args[i - 1] = arguments[i];

                  emitMany(handler, isFn, this, args);
              }
              return true;
            };

            function _addListener(target, type, listener, prepend) {
              var m;
              var events;
              var existing;
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              events = target._events;

              if (!events) {
                events = target._events = new EventHandlers();
                target._eventsCount = 0;
              } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                  target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
                  // this._events to be assigned to a new object

                  events = target._events;
                }

                existing = events[type];
              }

              if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
              } else {
                if (typeof existing === 'function') {
                  // Adding the second element, need to change to array.
                  existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                } else {
                  // If we've already got an array, just append.
                  if (prepend) {
                    existing.unshift(listener);
                  } else {
                    existing.push(listener);
                  }
                } // Check for listener leak


                if (!existing.warned) {
                  m = $getMaxListeners(target);

                  if (m && m > 0 && existing.length > m) {
                    existing.warned = true;
                    var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
                    w.name = 'MaxListenersExceededWarning';
                    w.emitter = target;
                    w.type = type;
                    w.count = existing.length;
                    emitWarning(w);
                  }
                }
              }

              return target;
            }

            function emitWarning(e) {
              typeof console.warn === 'function' ? console.warn(e) : console.log(e);
            }

            EventEmitter.prototype.addListener = function addListener(type, listener) {
              return _addListener(this, type, listener, false);
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.prependListener = function prependListener(type, listener) {
              return _addListener(this, type, listener, true);
            };

            function _onceWrap(target, type, listener) {
              var fired = false;

              function g() {
                target.removeListener(type, g);

                if (!fired) {
                  fired = true;
                  listener.apply(target, arguments);
                }
              }

              g.listener = listener;
              return g;
            }

            EventEmitter.prototype.once = function once(type, listener) {
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              this.on(type, _onceWrap(this, type, listener));
              return this;
            };

            EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              this.prependListener(type, _onceWrap(this, type, listener));
              return this;
            }; // emits a 'removeListener' event iff the listener was removed


            EventEmitter.prototype.removeListener = function removeListener(type, listener) {
              var list, events, position, i, originalListener;
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              events = this._events;
              if (!events) return this;
              list = events[type];
              if (!list) return this;

              if (list === listener || list.listener && list.listener === listener) {
                if (--this._eventsCount === 0) this._events = new EventHandlers();else {
                  delete events[type];
                  if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
                }
              } else if (typeof list !== 'function') {
                position = -1;

                for (i = list.length; i-- > 0;) {
                  if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                    originalListener = list[i].listener;
                    position = i;
                    break;
                  }
                }

                if (position < 0) return this;

                if (list.length === 1) {
                  list[0] = undefined;

                  if (--this._eventsCount === 0) {
                    this._events = new EventHandlers();
                    return this;
                  } else {
                    delete events[type];
                  }
                } else {
                  spliceOne(list, position);
                }

                if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
              }

              return this;
            };

            EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
              var listeners, events;
              events = this._events;
              if (!events) return this; // not listening for removeListener, no need to emit

              if (!events.removeListener) {
                if (arguments.length === 0) {
                  this._events = new EventHandlers();
                  this._eventsCount = 0;
                } else if (events[type]) {
                  if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
                }

                return this;
              } // emit removeListener for all listeners on all events


              if (arguments.length === 0) {
                var keys = Object.keys(events);

                for (var i = 0, key; i < keys.length; ++i) {
                  key = keys[i];
                  if (key === 'removeListener') continue;
                  this.removeAllListeners(key);
                }

                this.removeAllListeners('removeListener');
                this._events = new EventHandlers();
                this._eventsCount = 0;
                return this;
              }

              listeners = events[type];

              if (typeof listeners === 'function') {
                this.removeListener(type, listeners);
              } else if (listeners) {
                // LIFO order
                do {
                  this.removeListener(type, listeners[listeners.length - 1]);
                } while (listeners[0]);
              }

              return this;
            };

            EventEmitter.prototype.listeners = function listeners(type) {
              var evlistener;
              var ret;
              var events = this._events;
              if (!events) ret = [];else {
                evlistener = events[type];
                if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
              }
              return ret;
            };

            EventEmitter.listenerCount = function (emitter, type) {
              if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
              } else {
                return listenerCount.call(emitter, type);
              }
            };

            EventEmitter.prototype.listenerCount = listenerCount;

            function listenerCount(type) {
              var events = this._events;

              if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                  return 1;
                } else if (evlistener) {
                  return evlistener.length;
                }
              }

              return 0;
            }

            EventEmitter.prototype.eventNames = function eventNames() {
              return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
            }; // About 1.5x faster than the two-arg version of Array#splice().


            function spliceOne(list, index) {
              for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];

              list.pop();
            }

            function arrayClone(arr, i) {
              var copy = new Array(i);

              while (i--) copy[i] = arr[i];

              return copy;
            }

            function unwrapListeners(arr) {
              var ret = new Array(arr.length);

              for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
              }

              return ret;
            }

            function BufferList() {
              this.head = null;
              this.tail = null;
              this.length = 0;
            }

            BufferList.prototype.push = function (v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0) this.tail.next = entry;else this.head = entry;
              this.tail = entry;
              ++this.length;
            };

            BufferList.prototype.unshift = function (v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            };

            BufferList.prototype.shift = function () {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
              --this.length;
              return ret;
            };

            BufferList.prototype.clear = function () {
              this.head = this.tail = null;
              this.length = 0;
            };

            BufferList.prototype.join = function (s) {
              if (this.length === 0) return '';
              var p = this.head;
              var ret = '' + p.data;

              while (p = p.next) {
                ret += s + p.data;
              }

              return ret;
            };

            BufferList.prototype.concat = function (n) {
              if (this.length === 0) return Buffer.alloc(0);
              if (this.length === 1) return this.head.data;
              var ret = Buffer.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;

              while (p) {
                p.data.copy(ret, i);
                i += p.data.length;
                p = p.next;
              }

              return ret;
            };

            // Copyright Joyent, Inc. and other Node contributors.

            var isBufferEncoding = Buffer.isEncoding || function (encoding) {
              switch (encoding && encoding.toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                case 'raw':
                  return true;

                default:
                  return false;
              }
            };

            function assertEncoding(encoding) {
              if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
              }
            } // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters. CESU-8 is handled as part of the UTF-8 encoding.
            //
            // @TODO Handling all encodings inside a single object makes it very difficult
            // to reason about this code, so it should be split up in the future.
            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
            // points as used by CESU-8.


            function StringDecoder(encoding) {
              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
              assertEncoding(encoding);

              switch (this.encoding) {
                case 'utf8':
                  // CESU-8 represents each of Surrogate Pair by 3-bytes
                  this.surrogateSize = 3;
                  break;

                case 'ucs2':
                case 'utf16le':
                  // UTF-16 represents each of Surrogate Pair by 2-bytes
                  this.surrogateSize = 2;
                  this.detectIncompleteChar = utf16DetectIncompleteChar;
                  break;

                case 'base64':
                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                  this.surrogateSize = 3;
                  this.detectIncompleteChar = base64DetectIncompleteChar;
                  break;

                default:
                  this.write = passThroughWrite;
                  return;
              } // Enough space to store all bytes of a single character. UTF-8 needs 4
              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


              this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.

              this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

              this.charLength = 0;
            }
            // guaranteed to not contain any partial multi-byte characters. Any partial
            // character found at the end of the buffer is buffered up, and will be
            // returned when calling write again with the remaining bytes.
            //
            // Note: Converting a Buffer containing an orphan surrogate to a String
            // currently works, but converting a String to a Buffer (via `new Buffer`, or
            // Buffer#write) will replace incomplete surrogates with the unicode
            // replacement character. See https://codereview.chromium.org/121173009/ .

            StringDecoder.prototype.write = function (buffer) {
              var charStr = ''; // if our last write ended with an incomplete multibyte character

              while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                  // still not enough chars in this buffer? wait for more ...
                  return '';
                } // remove bytes belonging to the current character from the buffer


                buffer = buffer.slice(available, buffer.length); // get the character that was split

                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

                var charCode = charStr.charCodeAt(charStr.length - 1);

                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  this.charLength += this.surrogateSize;
                  charStr = '';
                  continue;
                }

                this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

                if (buffer.length === 0) {
                  return charStr;
                }

                break;
              } // determine and set charLength / charReceived


              this.detectIncompleteChar(buffer);
              var end = buffer.length;

              if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
              }

              charStr += buffer.toString(this.encoding, 0, end);
              var end = charStr.length - 1;
              var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

              if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
              } // or just emit the charStr


              return charStr;
            }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
            // the end of the given buffer. If so, it sets this.charLength to the byte
            // length that character, and sets this.charReceived to the number of bytes
            // that are available for this character.


            StringDecoder.prototype.detectIncompleteChar = function (buffer) {
              // determine how many bytes we have to check at the end of this buffer
              var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
              // incomplete char.

              for (; i > 0; i--) {
                var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
                // 110XXXXX

                if (i == 1 && c >> 5 == 0x06) {
                  this.charLength = 2;
                  break;
                } // 1110XXXX


                if (i <= 2 && c >> 4 == 0x0E) {
                  this.charLength = 3;
                  break;
                } // 11110XXX


                if (i <= 3 && c >> 3 == 0x1E) {
                  this.charLength = 4;
                  break;
                }
              }

              this.charReceived = i;
            };

            StringDecoder.prototype.end = function (buffer) {
              var res = '';
              if (buffer && buffer.length) res = this.write(buffer);

              if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
              }

              return res;
            };

            function passThroughWrite(buffer) {
              return buffer.toString(this.encoding);
            }

            function utf16DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 2;
              this.charLength = this.charReceived ? 2 : 0;
            }

            function base64DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 3;
              this.charLength = this.charReceived ? 3 : 0;
            }

            Readable.ReadableState = ReadableState;
            var debug = debuglog('stream');
            inherits$2(Readable, EventEmitter);

            function prependListener(emitter, event, fn) {
              // Sadly this is not cacheable as some libraries bundle their own
              // event emitter implementation with them.
              if (typeof emitter.prependListener === 'function') {
                return emitter.prependListener(event, fn);
              } else {
                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
              }
            }

            function listenerCount$1(emitter, type) {
              return emitter.listeners(type).length;
            }

            function ReadableState(options, stream) {
              options = options || {}; // object stream flag. Used to make read(n) ignore n and to
              // make all the buffer merging and length checks go away

              this.objectMode = !!options.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
              // Note: 0 is a valid value, means "don't call _read preemptively ever"

              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

              this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
              // linked list can remove elements from the beginning faster than
              // array.shift()

              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.

              this.sync = true; // whenever we return null, then we set a flag to say
              // that we're awaiting a 'readable' event emission.

              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.

              this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
              // after read()ing all the bytes and not getting any pushback.

              this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

              this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;

              if (options.encoding) {
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              if (!(this instanceof Readable)) return new Readable(options);
              this._readableState = new ReadableState(options, this); // legacy

              this.readable = true;
              if (options && typeof options.read === 'function') this._read = options.read;
              EventEmitter.call(this);
            } // Manually shove something into the read() buffer.
            // This returns true if the highWaterMark has not been hit yet,
            // similar to how Writable.write() returns true if you should
            // write() some more.

            Readable.prototype.push = function (chunk, encoding) {
              var state = this._readableState;

              if (!state.objectMode && typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;

                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = '';
                }
              }

              return readableAddChunk(this, state, chunk, encoding, false);
            }; // Unshift should *always* be something directly out of read()


            Readable.prototype.unshift = function (chunk) {
              var state = this._readableState;
              return readableAddChunk(this, state, chunk, '', true);
            };

            Readable.prototype.isPaused = function () {
              return this._readableState.flowing === false;
            };

            function readableAddChunk(stream, state, chunk, encoding, addToFront) {
              var er = chunkInvalid(state, chunk);

              if (er) {
                stream.emit('error', er);
              } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                  var e = new Error('stream.push() after EOF');
                  stream.emit('error', e);
                } else if (state.endEmitted && addToFront) {
                  var _e = new Error('stream.unshift() after end event');

                  stream.emit('error', _e);
                } else {
                  var skipAdd;

                  if (state.decoder && !addToFront && !encoding) {
                    chunk = state.decoder.write(chunk);
                    skipAdd = !state.objectMode && chunk.length === 0;
                  }

                  if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
                  // we're not in object mode

                  if (!skipAdd) {
                    // if we want the data now, just emit it.
                    if (state.flowing && state.length === 0 && !state.sync) {
                      stream.emit('data', chunk);
                      stream.read(0);
                    } else {
                      // update the buffer info.
                      state.length += state.objectMode ? 1 : chunk.length;
                      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                      if (state.needReadable) emitReadable(stream);
                    }
                  }

                  maybeReadMore(stream, state);
                }
              } else if (!addToFront) {
                state.reading = false;
              }

              return needMoreData(state);
            } // if it's past the high water mark, we can push in some more.
            // Also, if we have no data yet, we can stand some
            // more bytes.  This is to work around cases where hwm=0,
            // such as the repl.  Also, if the push() triggered a
            // readable event, and the user called read(largeNumber) such that
            // needReadable was set, then we ought to push more, so that another
            // 'readable' event will be triggered.


            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            } // backwards compatibility.


            Readable.prototype.setEncoding = function (enc) {
              this._readableState.decoder = new StringDecoder(enc);
              this._readableState.encoding = enc;
              return this;
            }; // Don't raise the hwm > 8MB


            var MAX_HWM = 0x800000;

            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }

              return n;
            } // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;

              if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
              } // If we're asking for more than the current hwm, then raise the hwm.


              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n; // Don't have enough

              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }

              return state.length;
            } // you can override either this method, or the async _read(n) below.


            Readable.prototype.read = function (n) {
              debug('read', n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
              // already have a bunch of data in the buffer, then just trigger
              // the 'readable' event and move on.

              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
              }

              n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              } // All the actual chunk generation logic needs to be
              // *below* the call to _read.  The reason is that in certain
              // synthetic stream cases, such as passthrough streams, _read
              // may be a completely synchronous operation which may change
              // the state of the read buffer, providing enough data when
              // before there was *not* enough.
              //
              // So, the steps are:
              // 1. Figure out what the state of things will be after we do
              // a read from the buffer.
              //
              // 2. If that resulting state will trigger a _read, then call _read.
              // Note that this may be asynchronous, or synchronous.  Yes, it is
              // deeply ugly to write APIs this way, but that still doesn't mean
              // that the Readable class should behave improperly, as streams are
              // designed to be sync/async agnostic.
              // Take note if the _read call is sync or async (ie, if the read call
              // has returned yet), so that we know whether or not it's safe to emit
              // 'readable' etc.
              //
              // 3. Actually pull the requested chunks out of the buffer and return.
              // if we need a readable event, then we need to do some reading.


              var doRead = state.needReadable;
              debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
              } // however, if we've ended, then there's no point, and if we're already
              // reading, then it's unnecessary.


              if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
              } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true; // if the length is currently zero, then we *need* a readable event.

                if (state.length === 0) state.needReadable = true; // call internal read method

                this._read(state.highWaterMark);

                state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.

                if (!state.reading) n = howMuchToRead(nOrig, state);
              }

              var ret;
              if (n > 0) ret = fromList(n, state);else ret = null;

              if (ret === null) {
                state.needReadable = true;
                n = 0;
              } else {
                state.length -= n;
              }

              if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

                if (nOrig !== n && state.ended) endReadable(this);
              }

              if (ret !== null) this.emit('data', ret);
              return ret;
            };

            function chunkInvalid(state, chunk) {
              var er = null;

              if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }

              return er;
            }

            function onEofChunk(stream, state) {
              if (state.ended) return;

              if (state.decoder) {
                var chunk = state.decoder.end();

                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }

              state.ended = true; // emit 'readable' now to make sure it gets picked up.

              emitReadable(stream);
            } // Don't emit readable right away in sync mode, because this can trigger
            // another read() call => stack overflow.  This way, it might trigger
            // a nextTick recursion warning, but that's not so bad.


            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;

              if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
              }
            }

            function emitReadable_(stream) {
              debug('emit readable');
              stream.emit('readable');
              flow(stream);
            } // at this point, the user has presumably seen the 'readable' event,
            // and called read() to consume some data.  that may have triggered
            // in turn another _read(n) call, in which case reading = true if
            // it's in progress.
            // However, if we're not ended, or reading, and the length < hwm,
            // then go ahead and try to read some more preemptively.


            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                nextTick(maybeReadMore_, stream, state);
              }
            }

            function maybeReadMore_(stream, state) {
              var len = state.length;

              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length) // didn't get any data, stop spinning.
                  break;else len = state.length;
              }

              state.readingMore = false;
            } // abstract method.  to be overridden in specific implementation classes.
            // call cb(er, data) where data is <= n in length.
            // for virtual (non-string, non-buffer) streams, "length" is somewhat
            // arbitrary, and perhaps not very meaningful.


            Readable.prototype._read = function (n) {
              this.emit('error', new Error('not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
              var src = this;
              var state = this._readableState;

              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;

                case 1:
                  state.pipes = [state.pipes, dest];
                  break;

                default:
                  state.pipes.push(dest);
                  break;
              }

              state.pipesCount += 1;
              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
              var doEnd = !pipeOpts || pipeOpts.end !== false;
              var endFn = doEnd ? onend : cleanup;
              if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
              dest.on('unpipe', onunpipe);

              function onunpipe(readable) {
                debug('onunpipe');

                if (readable === src) {
                  cleanup();
                }
              }

              function onend() {
                debug('onend');
                dest.end();
              } // when the dest drains, it reduces the awaitDrain counter
              // on the source.  This would be more elegant with a .once()
              // handler in flow(), but adding and removing repeatedly is
              // too slow.


              var ondrain = pipeOnDrain(src);
              dest.on('drain', ondrain);
              var cleanedUp = false;

              function cleanup() {
                debug('cleanup'); // cleanup event handlers once the pipe is broken

                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', cleanup);
                src.removeListener('data', ondata);
                cleanedUp = true; // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.

                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              } // If the user pushes more data while we're writing to dest then we'll end up
              // in ondata again. However, we only want to increase awaitDrain once because
              // dest will only emit one 'drain' event for the multiple writes.
              // => Introduce a guard on increasing awaitDrain.


              var increasedAwaitDrain = false;
              src.on('data', ondata);

              function ondata(chunk) {
                debug('ondata');
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);

                if (false === ret && !increasedAwaitDrain) {
                  // If the user unpiped during `dest.write()`, it is possible
                  // to get stuck in a permanently paused state if that write
                  // also returned false.
                  // => Check whether `dest` is still a piping destination.
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug('false write response, pause', src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }

                  src.pause();
                }
              } // if the dest has an error, then stop piping into it.
              // however, don't suppress the throwing behavior for this.


              function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
              } // Make sure our error handler is attached before userland ones.


              prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

              function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
              }

              dest.once('close', onclose);

              function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
              }

              dest.once('finish', onfinish);

              function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
              } // tell the dest that it's being piped to


              dest.emit('pipe', src); // start the flow if it hasn't been started already.

              if (!state.flowing) {
                debug('pipe resume');
                src.resume();
              }

              return dest;
            };

            function pipeOnDrain(src) {
              return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;

                if (state.awaitDrain === 0 && src.listeners('data').length) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }

            Readable.prototype.unpipe = function (dest) {
              var state = this._readableState; // if we're not piping anywhere, then do nothing.

              if (state.pipesCount === 0) return this; // just one destination.  most common case.

              if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;
                if (!dest) dest = state.pipes; // got a match.

                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this);
                return this;
              } // slow case. multiple pipe destinations.


              if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var _i = 0; _i < len; _i++) {
                  dests[_i].emit('unpipe', this);
                }

                return this;
              } // try to find the right one.


              var i = indexOf(state.pipes, dest);
              if (i === -1) return this;
              state.pipes.splice(i, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];
              dest.emit('unpipe', this);
              return this;
            }; // set up data events if they are asked for
            // Ensure readable listeners eventually get something


            Readable.prototype.on = function (ev, fn) {
              var res = EventEmitter.prototype.on.call(this, ev, fn);

              if (ev === 'data') {
                // Start flowing on next tick if stream isn't explicitly paused
                if (this._readableState.flowing !== false) this.resume();
              } else if (ev === 'readable') {
                var state = this._readableState;

                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;

                  if (!state.reading) {
                    nextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this, state);
                  }
                }
              }

              return res;
            };

            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
              debug('readable nexttick read 0');
              self.read(0);
            } // pause() and resume() are remnants of the legacy readable stream API
            // If the user uses them, then switch into old mode.


            Readable.prototype.resume = function () {
              var state = this._readableState;

              if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
              }

              return this;
            };

            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                nextTick(resume_, stream, state);
              }
            }

            function resume_(stream, state) {
              if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
              }

              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit('resume');
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
              debug('call pause flowing=%j', this._readableState.flowing);

              if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
              }

              return this;
            };

            function flow(stream) {
              var state = stream._readableState;
              debug('flow', state.flowing);

              while (state.flowing && stream.read() !== null) {}
            } // wrap an old-style stream as the async data source.
            // This is *not* part of the readable stream interface.
            // It is an ugly unfortunate mess of history.


            Readable.prototype.wrap = function (stream) {
              var state = this._readableState;
              var paused = false;
              var self = this;
              stream.on('end', function () {
                debug('wrapped end');

                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
              });
              stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
                var ret = self.push(chunk);

                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              }); // proxy all the other methods.
              // important when wrapping filters and duplexes.

              for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                  this[i] = function (method) {
                    return function () {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              } // proxy certain important events.


              var events = ['error', 'close', 'destroy', 'pause', 'resume'];
              forEach(events, function (ev) {
                stream.on(ev, self.emit.bind(self, ev));
              }); // when we try to consume some more bytes, simply unpause the
              // underlying stream.

              self._read = function (n) {
                debug('wrapped _read', n);

                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };

              return self;
            }; // exposed for testing purposes only.


            Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
            // Length is the combined lengths of all the buffers in the list.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.

            function fromList(n, state) {
              // nothing buffered
              if (state.length === 0) return null;
              var ret;
              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                // read part of list
                ret = fromListPartial(n, state.buffer, state.decoder);
              }
              return ret;
            } // Extracts only enough buffered data to satisfy the amount requested.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function fromListPartial(n, list, hasStrings) {
              var ret;

              if (n < list.head.data.length) {
                // slice is the same for buffers and strings
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                // first chunk is a perfect match
                ret = list.shift();
              } else {
                // result spans more than one buffer
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }

              return ret;
            } // Copies a specified amount of characters from the list of buffered data
            // chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;

              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;

                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str.slice(nb);
                  }

                  break;
                }

                ++c;
              }

              list.length -= c;
              return ret;
            } // Copies a specified amount of bytes from the list of buffered data chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function copyFromBuffer(n, list) {
              var ret = Buffer.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;

              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;

                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }

                  break;
                }

                ++c;
              }

              list.length -= c;
              return ret;
            }

            function endReadable(stream) {
              var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
              // bug in node.  Should never happen.

              if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

              if (!state.endEmitted) {
                state.ended = true;
                nextTick(endReadableNT, state, stream);
              }
            }

            function endReadableNT(state, stream) {
              // Check that we didn't get one last unshift.
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
              }
            }

            function forEach(xs, f) {
              for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
              }
            }

            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
              }

              return -1;
            }

            // A bit simpler than readable streams.
            Writable.WritableState = WritableState;
            inherits$2(Writable, EventEmitter);

            function nop() {}

            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }

            function WritableState(options, stream) {
              Object.defineProperty(this, 'buffer', {
                get: deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
              });
              options = options || {}; // object stream flag to indicate whether or not this stream
              // contains buffers or objects.

              this.objectMode = !!options.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
              // Note: 0 is a valid value, means that we always return false if
              // the entire buffer is not flushed immediately on write()

              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

              this.highWaterMark = ~~this.highWaterMark;
              this.needDrain = false; // at the start of calling end()

              this.ending = false; // when end() has been called, and returned

              this.ended = false; // when 'finish' is emitted

              this.finished = false; // should we decode strings into buffers before passing to _write?
              // this is here so that some node-core streams can optimize string
              // handling at a lower level.

              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.

              this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
              // of how much we're waiting to get pushed to some underlying
              // socket or file.

              this.length = 0; // a flag to see when we're in the middle of a write.

              this.writing = false; // when true all writes will be buffered until .uncork() call

              this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.

              this.sync = true; // a flag to know if we're processing previously buffered items, which
              // may call the _write() callback in the same tick, so that we don't
              // end up in an overlapped onwrite situation.

              this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

              this.onwrite = function (er) {
                onwrite(stream, er);
              }; // the callback that the user supplies to write(chunk,encoding,cb)


              this.writecb = null; // the amount that is being written when _write is called.

              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
              // this must be 0 before 'finish' can be emitted

              this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
              // This is relevant for synchronous Transform streams

              this.prefinished = false; // True if the error was already emitted and should not be thrown again

              this.errorEmitted = false; // count buffered requests

              this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
              // one allocated and free to use, and we maintain at most two

              this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function writableStateGetBuffer() {
              var current = this.bufferedRequest;
              var out = [];

              while (current) {
                out.push(current);
                current = current.next;
              }

              return out;
            };
            function Writable(options) {
              // Writable ctor is applied to Duplexes, though they're not
              // instanceof Writable, they're instanceof Readable.
              if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
              this._writableState = new WritableState(options, this); // legacy.

              this.writable = true;

              if (options) {
                if (typeof options.write === 'function') this._write = options.write;
                if (typeof options.writev === 'function') this._writev = options.writev;
              }

              EventEmitter.call(this);
            } // Otherwise people can pipe Writable streams, which is just wrong.

            Writable.prototype.pipe = function () {
              this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
              var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

              stream.emit('error', er);
              nextTick(cb, er);
            } // If we get something that is not a buffer, string, null, or undefined,
            // and we're not in objectMode, then that's an error.
            // Otherwise stream chunks are all considered to be of length=1, and the
            // watermarks determine how many objects to keep in the buffer, rather than
            // how many bytes or characters.


            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false; // Always throw error if a null is written
              // if we are not in object mode then throw
              // if it is not a buffer, string, or undefined.

              if (chunk === null) {
                er = new TypeError('May not write null values to stream');
              } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }

              if (er) {
                stream.emit('error', er);
                nextTick(cb, er);
                valid = false;
              }

              return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;

              if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
              if (typeof cb !== 'function') cb = nop;
              if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, chunk, encoding, cb);
              }
              return ret;
            };

            Writable.prototype.cork = function () {
              var state = this._writableState;
              state.corked++;
            };

            Writable.prototype.uncork = function () {
              var state = this._writableState;

              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              // node::ParseEncoding() requires lower case.
              if (typeof encoding === 'string') encoding = encoding.toLowerCase();
              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };

            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer.from(chunk, encoding);
              }

              return chunk;
            } // if we're already writing something, then just put this
            // in the queue, and wait our turn.  Otherwise, call _write
            // If we return false, then we need a drain event, so set that flag.


            function writeOrBuffer(stream, state, chunk, encoding, cb) {
              chunk = decodeChunk(state, chunk, encoding);
              if (Buffer.isBuffer(chunk)) encoding = 'buffer';
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

              if (!ret) state.needDrain = true;

              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }

                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }

              return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) nextTick(cb, er);else cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
            }

            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }

            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              onwriteStateUpdate(state);
              if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }

                if (sync) {
                  /*<replacement>*/
                  nextTick(afterWrite, stream, state, finished, cb);
                  /*</replacement>*/
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }

            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            } // Must force callback to be called on nextTick, so that we don't
            // emit 'drain' before the write() consumer gets the 'false' return
            // value, and has a chance to attach a 'drain' listener.


            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
              }
            } // if there's something in the buffer waiting, then process it


            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;

              if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;

                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }

                doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite

                state.pendingcb++;
                state.lastBufferedRequest = null;

                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
              } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next; // if we didn't call the onwrite immediately, then
                  // it means that we need to wait until it does.
                  // also, that means that the chunk and cb are currently
                  // being processed, so move the buffer counter past them.

                  if (state.writing) {
                    break;
                  }
                }

                if (entry === null) state.lastBufferedRequest = null;
              }

              state.bufferedRequestCount = 0;
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
              cb(new Error('not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
              var state = this._writableState;

              if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

              if (state.corked) {
                state.corked = 1;
                this.uncork();
              } // ignore unnecessary end() calls.


              if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function prefinish(stream, state) {
              if (!state.prefinished) {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }

            function finishMaybe(stream, state) {
              var need = needFinish(state);

              if (need) {
                if (state.pendingcb === 0) {
                  prefinish(stream, state);
                  state.finished = true;
                  stream.emit('finish');
                } else {
                  prefinish(stream, state);
                }
              }

              return need;
            }

            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);

              if (cb) {
                if (state.finished) nextTick(cb);else stream.once('finish', cb);
              }

              state.ended = true;
              stream.writable = false;
            } // It seems a linked list but it is not
            // there will be only 2 of these for each stream


            function CorkedRequest(state) {
              var _this = this;

              this.next = null;
              this.entry = null;

              this.finish = function (err) {
                var entry = _this.entry;
                _this.entry = null;

                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }

                if (state.corkedRequestsFree) {
                  state.corkedRequestsFree.next = _this;
                } else {
                  state.corkedRequestsFree = _this;
                }
              };
            }

            inherits$2(Duplex, Readable);
            var keys = Object.keys(Writable.prototype);

            for (var v = 0; v < keys.length; v++) {
              var method = keys[v];
              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
            function Duplex(options) {
              if (!(this instanceof Duplex)) return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              if (options && options.readable === false) this.readable = false;
              if (options && options.writable === false) this.writable = false;
              this.allowHalfOpen = true;
              if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
              this.once('end', onend);
            } // the no-half-open enforcer

            function onend() {
              // if we allow half-open state, or if the writable side ended,
              // then we're ok.
              if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
              // But allow more writes to happen in this tick.

              nextTick(onEndNT, this);
            }

            function onEndNT(self) {
              self.end();
            }

            // a transform stream is a readable/writable stream where you do
            inherits$2(Transform, Duplex);

            function TransformState(stream) {
              this.afterTransform = function (er, data) {
                return afterTransform(stream, er, data);
              };

              this.needTransform = false;
              this.transforming = false;
              this.writecb = null;
              this.writechunk = null;
              this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
              var ts = stream._transformState;
              ts.transforming = false;
              var cb = ts.writecb;
              if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
              ts.writechunk = null;
              ts.writecb = null;
              if (data !== null && data !== undefined) stream.push(data);
              cb(er);
              var rs = stream._readableState;
              rs.reading = false;

              if (rs.needReadable || rs.length < rs.highWaterMark) {
                stream._read(rs.highWaterMark);
              }
            }
            function Transform(options) {
              if (!(this instanceof Transform)) return new Transform(options);
              Duplex.call(this, options);
              this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

              var stream = this; // start out asking for a readable event once data is transformed.

              this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
              // that Readable wants before the first _read call, so unset the
              // sync guard flag.

              this._readableState.sync = false;

              if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;
                if (typeof options.flush === 'function') this._flush = options.flush;
              }

              this.once('prefinish', function () {
                if (typeof this._flush === 'function') this._flush(function (er) {
                  done(stream, er);
                });else done(stream);
              });
            }

            Transform.prototype.push = function (chunk, encoding) {
              this._transformState.needTransform = false;
              return Duplex.prototype.push.call(this, chunk, encoding);
            }; // This is the part where you do stuff!
            // override this function in implementation classes.
            // 'chunk' is an input chunk.
            //
            // Call `push(newChunk)` to pass along transformed output
            // to the readable side.  You may call 'push' zero or more times.
            //
            // Call `cb(err)` when you are done with this chunk.  If you pass
            // an error, then that'll put the hurt on the whole operation.  If you
            // never call cb(), then you'll never get another chunk.


            Transform.prototype._transform = function (chunk, encoding, cb) {
              throw new Error('Not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
              var ts = this._transformState;
              ts.writecb = cb;
              ts.writechunk = chunk;
              ts.writeencoding = encoding;

              if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
              }
            }; // Doesn't matter what the args are here.
            // _transform does all the work.
            // That we got here means that the readable side wants more data.


            Transform.prototype._read = function (n) {
              var ts = this._transformState;

              if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;

                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
              } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
              }
            };

            function done(stream, er) {
              if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
              // that nothing more will ever be provided

              var ws = stream._writableState;
              var ts = stream._transformState;
              if (ws.length) throw new Error('Calling transform done when ws.length != 0');
              if (ts.transforming) throw new Error('Calling transform done when still transforming');
              return stream.push(null);
            }

            inherits$2(PassThrough, Transform);
            function PassThrough(options) {
              if (!(this instanceof PassThrough)) return new PassThrough(options);
              Transform.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
              cb(null, chunk);
            };

            inherits$2(Stream, EventEmitter);
            Stream.Readable = Readable;
            Stream.Writable = Writable;
            Stream.Duplex = Duplex;
            Stream.Transform = Transform;
            Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

            Stream.Stream = Stream;
            // part of this class) is overridden in the Readable class.

            function Stream() {
              EventEmitter.call(this);
            }

            Stream.prototype.pipe = function (dest, options) {
              var source = this;

              function ondata(chunk) {
                if (dest.writable) {
                  if (false === dest.write(chunk) && source.pause) {
                    source.pause();
                  }
                }
              }

              source.on('data', ondata);

              function ondrain() {
                if (source.readable && source.resume) {
                  source.resume();
                }
              }

              dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
              // source gets the 'end' or 'close' events.  Only dest.end() once.

              if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
              }

              var didOnEnd = false;

              function onend() {
                if (didOnEnd) return;
                didOnEnd = true;
                dest.end();
              }

              function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;
                if (typeof dest.destroy === 'function') dest.destroy();
              } // don't leave dangling pipes when there are errors.


              function onerror(er) {
                cleanup();

                if (EventEmitter.listenerCount(this, 'error') === 0) {
                  throw er; // Unhandled stream error in pipe.
                }
              }

              source.on('error', onerror);
              dest.on('error', onerror); // remove all the event listeners that were added.

              function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);
                source.removeListener('end', onend);
                source.removeListener('close', onclose);
                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);
                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);
                dest.removeListener('close', cleanup);
              }

              source.on('end', cleanup);
              source.on('close', cleanup);
              dest.on('close', cleanup);
              dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

              return dest;
            };

            // Adds floating point numbers with twice the normal precision.
            // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
            // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
            // 305–363 (1997).
            // Code adapted from GeographicLib by Charles F. F. Karney,
            // http://geographiclib.sourceforge.net/
            function adder () {
              return new Adder();
            }

            function Adder() {
              this.reset();
            }

            Adder.prototype = {
              constructor: Adder,
              reset: function () {
                this.s = // rounded value
                this.t = 0; // exact error
              },
              add: function (y) {
                add$2(temp, y, this.t);
                add$2(this, temp.s, this.s);
                if (this.s) this.t += temp.t;else this.s = temp.t;
              },
              valueOf: function () {
                return this.s;
              }
            };
            var temp = new Adder();

            function add$2(adder, a, b) {
              var x = adder.s = a + b,
                  bv = x - a,
                  av = x - bv;
              adder.t = a - av + (b - bv);
            }

            var epsilon = 1e-6;
            var pi = Math.PI;
            var halfPi = pi / 2;
            var quarterPi = pi / 4;
            var tau = pi * 2;
            var degrees = 180 / pi;
            var radians = pi / 180;
            var abs = Math.abs;
            var atan = Math.atan;
            var atan2 = Math.atan2;
            var cos = Math.cos;
            var exp = Math.exp;
            var log$1 = Math.log;
            var sin = Math.sin;
            var sqrt = Math.sqrt;
            var tan = Math.tan;
            function acos(x) {
              return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
            }
            function asin(x) {
              return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
            }

            function noop$1() {}

            function streamGeometry(geometry, stream) {
              if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
                streamGeometryType[geometry.type](geometry, stream);
              }
            }

            var streamObjectType = {
              Feature: function (object, stream) {
                streamGeometry(object.geometry, stream);
              },
              FeatureCollection: function (object, stream) {
                var features = object.features,
                    i = -1,
                    n = features.length;

                while (++i < n) streamGeometry(features[i].geometry, stream);
              }
            };
            var streamGeometryType = {
              Sphere: function (object, stream) {
                stream.sphere();
              },
              Point: function (object, stream) {
                object = object.coordinates;
                stream.point(object[0], object[1], object[2]);
              },
              MultiPoint: function (object, stream) {
                var coordinates = object.coordinates,
                    i = -1,
                    n = coordinates.length;

                while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
              },
              LineString: function (object, stream) {
                streamLine(object.coordinates, stream, 0);
              },
              MultiLineString: function (object, stream) {
                var coordinates = object.coordinates,
                    i = -1,
                    n = coordinates.length;

                while (++i < n) streamLine(coordinates[i], stream, 0);
              },
              Polygon: function (object, stream) {
                streamPolygon(object.coordinates, stream);
              },
              MultiPolygon: function (object, stream) {
                var coordinates = object.coordinates,
                    i = -1,
                    n = coordinates.length;

                while (++i < n) streamPolygon(coordinates[i], stream);
              },
              GeometryCollection: function (object, stream) {
                var geometries = object.geometries,
                    i = -1,
                    n = geometries.length;

                while (++i < n) streamGeometry(geometries[i], stream);
              }
            };

            function streamLine(coordinates, stream, closed) {
              var i = -1,
                  n = coordinates.length - closed,
                  coordinate;
              stream.lineStart();

              while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

              stream.lineEnd();
            }

            function streamPolygon(coordinates, stream) {
              var i = -1,
                  n = coordinates.length;
              stream.polygonStart();

              while (++i < n) streamLine(coordinates[i], stream, 1);

              stream.polygonEnd();
            }

            function geoStream (object, stream) {
              if (object && streamObjectType.hasOwnProperty(object.type)) {
                streamObjectType[object.type](object, stream);
              } else {
                streamGeometry(object, stream);
              }
            }

            var areaRingSum = adder();
            var areaSum = adder();

            function spherical(cartesian) {
              return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
            }
            function cartesian(spherical) {
              var lambda = spherical[0],
                  phi = spherical[1],
                  cosPhi = cos(phi);
              return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
            }
            function cartesianDot(a, b) {
              return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
            }
            function cartesianCross(a, b) {
              return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
            } // TODO return a

            function cartesianAddInPlace(a, b) {
              a[0] += b[0], a[1] += b[1], a[2] += b[2];
            }
            function cartesianScale(vector, k) {
              return [vector[0] * k, vector[1] * k, vector[2] * k];
            } // TODO return d

            function cartesianNormalizeInPlace(d) {
              var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
              d[0] /= l, d[1] /= l, d[2] /= l;
            }

            var // previous 3D point
            deltaSum = adder();

            function compose (a, b) {
              function compose(x, y) {
                return x = a(x, y), b(x[0], x[1]);
              }

              if (a.invert && b.invert) compose.invert = function (x, y) {
                return x = b.invert(x, y), x && a.invert(x[0], x[1]);
              };
              return compose;
            }

            function rotationIdentity(lambda, phi) {
              return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
            }

            rotationIdentity.invert = rotationIdentity;
            function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
              return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
            }

            function forwardRotationLambda(deltaLambda) {
              return function (lambda, phi) {
                return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
              };
            }

            function rotationLambda(deltaLambda) {
              var rotation = forwardRotationLambda(deltaLambda);
              rotation.invert = forwardRotationLambda(-deltaLambda);
              return rotation;
            }

            function rotationPhiGamma(deltaPhi, deltaGamma) {
              var cosDeltaPhi = cos(deltaPhi),
                  sinDeltaPhi = sin(deltaPhi),
                  cosDeltaGamma = cos(deltaGamma),
                  sinDeltaGamma = sin(deltaGamma);

              function rotation(lambda, phi) {
                var cosPhi = cos(phi),
                    x = cos(lambda) * cosPhi,
                    y = sin(lambda) * cosPhi,
                    z = sin(phi),
                    k = z * cosDeltaPhi + x * sinDeltaPhi;
                return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
              }

              rotation.invert = function (lambda, phi) {
                var cosPhi = cos(phi),
                    x = cos(lambda) * cosPhi,
                    y = sin(lambda) * cosPhi,
                    z = sin(phi),
                    k = z * cosDeltaGamma - y * sinDeltaGamma;
                return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];
              };

              return rotation;
            }

            function rotation (rotate) {
              rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

              function forward(coordinates) {
                coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
                return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
              }

              forward.invert = function (coordinates) {
                coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
                return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
              };

              return forward;
            }

            function circleStream(stream, radius, delta, direction, t0, t1) {
              if (!delta) return;
              var cosRadius = cos(radius),
                  sinRadius = sin(radius),
                  step = direction * delta;

              if (t0 == null) {
                t0 = radius + direction * tau;
                t1 = radius - step / 2;
              } else {
                t0 = circleRadius(cosRadius, t0);
                t1 = circleRadius(cosRadius, t1);
                if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
              }

              for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
                point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
                stream.point(point[0], point[1]);
              }
            } // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

            function circleRadius(cosRadius, point) {
              point = cartesian(point), point[0] -= cosRadius;
              cartesianNormalizeInPlace(point);
              var radius = acos(-point[1]);
              return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
            }

            function clipBuffer () {
              var lines = [],
                  line;
              return {
                point: function (x, y) {
                  line.push([x, y]);
                },
                lineStart: function () {
                  lines.push(line = []);
                },
                lineEnd: noop$1,
                rejoin: function () {
                  if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
                },
                result: function () {
                  var result = lines;
                  lines = [];
                  line = null;
                  return result;
                }
              };
            }

            function pointEqual (a, b) {
              return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
            }

            function Intersection(point, points, other, entry) {
              this.x = point;
              this.z = points;
              this.o = other; // another intersection

              this.e = entry; // is an entry?

              this.v = false; // visited

              this.n = this.p = null; // next & previous
            } // A generalized polygon clipping algorithm: given a polygon that has been cut
            // into its visible line segments, and rejoins the segments by interpolating
            // along the clip edge.


            function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
              var subject = [],
                  clip = [],
                  i,
                  n;
              segments.forEach(function (segment) {
                if ((n = segment.length - 1) <= 0) return;
                var n,
                    p0 = segment[0],
                    p1 = segment[n],
                    x; // If the first and last points of a segment are coincident, then treat as a
                // closed ring. TODO if all rings are closed, then the winding order of the
                // exterior ring should be checked.

                if (pointEqual(p0, p1)) {
                  stream.lineStart();

                  for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

                  stream.lineEnd();
                  return;
                }

                subject.push(x = new Intersection(p0, segment, null, true));
                clip.push(x.o = new Intersection(p0, null, x, false));
                subject.push(x = new Intersection(p1, segment, null, false));
                clip.push(x.o = new Intersection(p1, null, x, true));
              });
              if (!subject.length) return;
              clip.sort(compareIntersection);
              link(subject);
              link(clip);

              for (i = 0, n = clip.length; i < n; ++i) {
                clip[i].e = startInside = !startInside;
              }

              var start = subject[0],
                  points,
                  point;

              while (1) {
                // Find first unvisited intersection.
                var current = start,
                    isSubject = true;

                while (current.v) if ((current = current.n) === start) return;

                points = current.z;
                stream.lineStart();

                do {
                  current.v = current.o.v = true;

                  if (current.e) {
                    if (isSubject) {
                      for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
                    } else {
                      interpolate(current.x, current.n.x, 1, stream);
                    }

                    current = current.n;
                  } else {
                    if (isSubject) {
                      points = current.p.z;

                      for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
                    } else {
                      interpolate(current.x, current.p.x, -1, stream);
                    }

                    current = current.p;
                  }

                  current = current.o;
                  points = current.z;
                  isSubject = !isSubject;
                } while (!current.v);

                stream.lineEnd();
              }
            }

            function link(array) {
              if (!(n = array.length)) return;
              var n,
                  i = 0,
                  a = array[0],
                  b;

              while (++i < n) {
                a.n = b = array[i];
                b.p = a;
                a = b;
              }

              a.n = b = array[0];
              b.p = a;
            }

            var sum = adder();
            function polygonContains (polygon, point) {
              var lambda = point[0],
                  phi = point[1],
                  sinPhi = sin(phi),
                  normal = [sin(lambda), -cos(lambda), 0],
                  angle = 0,
                  winding = 0;
              sum.reset();
              if (sinPhi === 1) phi = halfPi + epsilon;else if (sinPhi === -1) phi = -halfPi - epsilon;

              for (var i = 0, n = polygon.length; i < n; ++i) {
                if (!(m = (ring = polygon[i]).length)) continue;
                var ring,
                    m,
                    point0 = ring[m - 1],
                    lambda0 = point0[0],
                    phi0 = point0[1] / 2 + quarterPi,
                    sinPhi0 = sin(phi0),
                    cosPhi0 = cos(phi0);

                for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
                  var point1 = ring[j],
                      lambda1 = point1[0],
                      phi1 = point1[1] / 2 + quarterPi,
                      sinPhi1 = sin(phi1),
                      cosPhi1 = cos(phi1),
                      delta = lambda1 - lambda0,
                      sign = delta >= 0 ? 1 : -1,
                      absDelta = sign * delta,
                      antimeridian = absDelta > pi,
                      k = sinPhi0 * sinPhi1;
                  sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
                  angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
                  // and are the latitudes smaller than the parallel (phi)?

                  if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                    var arc = cartesianCross(cartesian(point0), cartesian(point1));
                    cartesianNormalizeInPlace(arc);
                    var intersection = cartesianCross(normal, arc);
                    cartesianNormalizeInPlace(intersection);
                    var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);

                    if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                      winding += antimeridian ^ delta >= 0 ? 1 : -1;
                    }
                  }
                }
              } // First, determine whether the South pole is inside or outside:
              //
              // It is inside if:
              // * the polygon winds around it in a clockwise direction.
              // * the polygon does not (cumulatively) wind around it, but has a negative
              //   (counter-clockwise) area.
              //
              // Second, count the (signed) number of times a segment crosses a lambda
              // from the point to the South pole.  If it is zero, then the point is the
              // same side as the South pole.


              return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;
            }

            function ascending (a, b) {
              return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
            }

            function bisector (compare) {
              if (compare.length === 1) compare = ascendingComparator(compare);
              return {
                left: function (a, x, lo, hi) {
                  if (lo == null) lo = 0;
                  if (hi == null) hi = a.length;

                  while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
                  }

                  return lo;
                },
                right: function (a, x, lo, hi) {
                  if (lo == null) lo = 0;
                  if (hi == null) hi = a.length;

                  while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
                  }

                  return lo;
                }
              };
            }

            function ascendingComparator(f) {
              return function (d, x) {
                return ascending(f(d), x);
              };
            }

            var ascendingBisect = bisector(ascending);

            function merge (arrays) {
              var n = arrays.length,
                  m,
                  i = -1,
                  j = 0,
                  merged,
                  array;

              while (++i < n) j += arrays[i].length;

              merged = new Array(j);

              while (--n >= 0) {
                array = arrays[n];
                m = array.length;

                while (--m >= 0) {
                  merged[--j] = array[m];
                }
              }

              return merged;
            }

            function clip$1 (pointVisible, clipLine, interpolate, start) {
              return function (sink) {
                var line = clipLine(sink),
                    ringBuffer = clipBuffer(),
                    ringSink = clipLine(ringBuffer),
                    polygonStarted = false,
                    polygon,
                    segments,
                    ring;
                var clip = {
                  point: point,
                  lineStart: lineStart,
                  lineEnd: lineEnd,
                  polygonStart: function () {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                  },
                  polygonEnd: function () {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = merge(segments);
                    var startInside = polygonContains(polygon, start);

                    if (segments.length) {
                      if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                      clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
                    } else if (startInside) {
                      if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                      sink.lineStart();
                      interpolate(null, null, 1, sink);
                      sink.lineEnd();
                    }

                    if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                    segments = polygon = null;
                  },
                  sphere: function () {
                    sink.polygonStart();
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                    sink.polygonEnd();
                  }
                };

                function point(lambda, phi) {
                  if (pointVisible(lambda, phi)) sink.point(lambda, phi);
                }

                function pointLine(lambda, phi) {
                  line.point(lambda, phi);
                }

                function lineStart() {
                  clip.point = pointLine;
                  line.lineStart();
                }

                function lineEnd() {
                  clip.point = point;
                  line.lineEnd();
                }

                function pointRing(lambda, phi) {
                  ring.push([lambda, phi]);
                  ringSink.point(lambda, phi);
                }

                function ringStart() {
                  ringSink.lineStart();
                  ring = [];
                }

                function ringEnd() {
                  pointRing(ring[0][0], ring[0][1]);
                  ringSink.lineEnd();
                  var clean = ringSink.clean(),
                      ringSegments = ringBuffer.result(),
                      i,
                      n = ringSegments.length,
                      m,
                      segment,
                      point;
                  ring.pop();
                  polygon.push(ring);
                  ring = null;
                  if (!n) return; // No intersections.

                  if (clean & 1) {
                    segment = ringSegments[0];

                    if ((m = segment.length - 1) > 0) {
                      if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                      sink.lineStart();

                      for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

                      sink.lineEnd();
                    }

                    return;
                  } // Rejoin connected segments.
                  // TODO reuse ringBuffer.rejoin()?


                  if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                  segments.push(ringSegments.filter(validSegment));
                }

                return clip;
              };
            }

            function validSegment(segment) {
              return segment.length > 1;
            } // Intersections are sorted along the clip edge. For both antimeridian cutting
            // and circle clipping, the same comparison is used.


            function compareIntersection(a, b) {
              return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
            }

            var clipAntimeridian = clip$1(function () {
              return true;
            }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
            // intersections or the line was empty; 1 - no intersections; 2 - there were
            // intersections, and the first and last segments should be rejoined.

            function clipAntimeridianLine(stream) {
              var lambda0 = NaN,
                  phi0 = NaN,
                  sign0 = NaN,
                  clean; // no intersections

              return {
                lineStart: function () {
                  stream.lineStart();
                  clean = 1;
                },
                point: function (lambda1, phi1) {
                  var sign1 = lambda1 > 0 ? pi : -pi,
                      delta = abs(lambda1 - lambda0);

                  if (abs(delta - pi) < epsilon) {
                    // line crosses a pole
                    stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    stream.point(lambda1, phi0);
                    clean = 0;
                  } else if (sign0 !== sign1 && delta >= pi) {
                    // line crosses antimeridian
                    if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies

                    if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
                    phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    clean = 0;
                  }

                  stream.point(lambda0 = lambda1, phi0 = phi1);
                  sign0 = sign1;
                },
                lineEnd: function () {
                  stream.lineEnd();
                  lambda0 = phi0 = NaN;
                },
                clean: function () {
                  return 2 - clean; // if intersections, rejoin first and last segments
                }
              };
            }

            function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
              var cosPhi0,
                  cosPhi1,
                  sinLambda0Lambda1 = sin(lambda0 - lambda1);
              return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
            }

            function clipAntimeridianInterpolate(from, to, direction, stream) {
              var phi;

              if (from == null) {
                phi = direction * halfPi;
                stream.point(-pi, phi);
                stream.point(0, phi);
                stream.point(pi, phi);
                stream.point(pi, 0);
                stream.point(pi, -phi);
                stream.point(0, -phi);
                stream.point(-pi, -phi);
                stream.point(-pi, 0);
                stream.point(-pi, phi);
              } else if (abs(from[0] - to[0]) > epsilon) {
                var lambda = from[0] < to[0] ? pi : -pi;
                phi = direction * lambda / 2;
                stream.point(-lambda, phi);
                stream.point(0, phi);
                stream.point(lambda, phi);
              } else {
                stream.point(to[0], to[1]);
              }
            }

            function clipCircle (radius) {
              var cr = cos(radius),
                  delta = 6 * radians,
                  smallRadius = cr > 0,
                  notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

              function interpolate(from, to, direction, stream) {
                circleStream(stream, radius, delta, direction, from, to);
              }

              function visible(lambda, phi) {
                return cos(lambda) * cos(phi) > cr;
              } // Takes a line and cuts into visible segments. Return values used for polygon
              // clipping: 0 - there were intersections or the line was empty; 1 - no
              // intersections 2 - there were intersections, and the first and last segments
              // should be rejoined.


              function clipLine(stream) {
                var point0, // previous point
                c0, // code for previous point
                v0, // visibility of previous point
                v00, // visibility of first point
                clean; // no intersections

                return {
                  lineStart: function () {
                    v00 = v0 = false;
                    clean = 1;
                  },
                  point: function (lambda, phi) {
                    var point1 = [lambda, phi],
                        point2,
                        v = visible(lambda, phi),
                        c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
                    if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
                    // TODO ignore if not clipping polygons.

                    if (v !== v0) {
                      point2 = intersect(point0, point1);

                      if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
                        point1[0] += epsilon;
                        point1[1] += epsilon;
                        v = visible(point1[0], point1[1]);
                      }
                    }

                    if (v !== v0) {
                      clean = 0;

                      if (v) {
                        // outside going in
                        stream.lineStart();
                        point2 = intersect(point1, point0);
                        stream.point(point2[0], point2[1]);
                      } else {
                        // inside going out
                        point2 = intersect(point0, point1);
                        stream.point(point2[0], point2[1]);
                        stream.lineEnd();
                      }

                      point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                      var t; // If the codes for two points are different, or are both zero,
                      // and there this segment intersects with the small circle.

                      if (!(c & c0) && (t = intersect(point1, point0, true))) {
                        clean = 0;

                        if (smallRadius) {
                          stream.lineStart();
                          stream.point(t[0][0], t[0][1]);
                          stream.point(t[1][0], t[1][1]);
                          stream.lineEnd();
                        } else {
                          stream.point(t[1][0], t[1][1]);
                          stream.lineEnd();
                          stream.lineStart();
                          stream.point(t[0][0], t[0][1]);
                        }
                      }
                    }

                    if (v && (!point0 || !pointEqual(point0, point1))) {
                      stream.point(point1[0], point1[1]);
                    }

                    point0 = point1, v0 = v, c0 = c;
                  },
                  lineEnd: function () {
                    if (v0) stream.lineEnd();
                    point0 = null;
                  },
                  // Rejoin first and last segments if there were intersections and the first
                  // and last points were visible.
                  clean: function () {
                    return clean | (v00 && v0) << 1;
                  }
                };
              } // Intersects the great circle between a and b with the clip circle.


              function intersect(a, b, two) {
                var pa = cartesian(a),
                    pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
                // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

                var n1 = [1, 0, 0],
                    // normal
                n2 = cartesianCross(pa, pb),
                    n2n2 = cartesianDot(n2, n2),
                    n1n2 = n2[0],
                    // cartesianDot(n1, n2),
                determinant = n2n2 - n1n2 * n1n2; // Two polar points.

                if (!determinant) return !two && a;
                var c1 = cr * n2n2 / determinant,
                    c2 = -cr * n1n2 / determinant,
                    n1xn2 = cartesianCross(n1, n2),
                    A = cartesianScale(n1, c1),
                    B = cartesianScale(n2, c2);
                cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

                var u = n1xn2,
                    w = cartesianDot(A, u),
                    uu = cartesianDot(u, u),
                    t2 = w * w - uu * (cartesianDot(A, A) - 1);
                if (t2 < 0) return;
                var t = sqrt(t2),
                    q = cartesianScale(u, (-w - t) / uu);
                cartesianAddInPlace(q, A);
                q = spherical(q);
                if (!two) return q; // Two intersection points.

                var lambda0 = a[0],
                    lambda1 = b[0],
                    phi0 = a[1],
                    phi1 = b[1],
                    z;
                if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
                var delta = lambda1 - lambda0,
                    polar = abs(delta - pi) < epsilon,
                    meridian = polar || delta < epsilon;
                if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

                if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
                  var q1 = cartesianScale(u, (-w + t) / uu);
                  cartesianAddInPlace(q1, A);
                  return [q, spherical(q1)];
                }
              } // Generates a 4-bit vector representing the location of a point relative to
              // the small circle's bounding box.


              function code(lambda, phi) {
                var r = smallRadius ? radius : pi - radius,
                    code = 0;
                if (lambda < -r) code |= 1; // left
                else if (lambda > r) code |= 2; // right

                if (phi < -r) code |= 4; // below
                else if (phi > r) code |= 8; // above

                return code;
              }

              return clip$1(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
            }

            function clipLine$1 (a, b, x0, y0, x1, y1) {
              var ax = a[0],
                  ay = a[1],
                  bx = b[0],
                  by = b[1],
                  t0 = 0,
                  t1 = 1,
                  dx = bx - ax,
                  dy = by - ay,
                  r;
              r = x0 - ax;
              if (!dx && r > 0) return;
              r /= dx;

              if (dx < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
              } else if (dx > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
              }

              r = x1 - ax;
              if (!dx && r < 0) return;
              r /= dx;

              if (dx < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
              } else if (dx > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
              }

              r = y0 - ay;
              if (!dy && r > 0) return;
              r /= dy;

              if (dy < 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
              } else if (dy > 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
              }

              r = y1 - ay;
              if (!dy && r < 0) return;
              r /= dy;

              if (dy < 0) {
                if (r > t1) return;
                if (r > t0) t0 = r;
              } else if (dy > 0) {
                if (r < t0) return;
                if (r < t1) t1 = r;
              }

              if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
              if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
              return true;
            }

            var clipMax = 1e9,
                clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
            // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

            function clipRectangle(x0, y0, x1, y1) {
              function visible(x, y) {
                return x0 <= x && x <= x1 && y0 <= y && y <= y1;
              }

              function interpolate(from, to, direction, stream) {
                var a = 0,
                    a1 = 0;

                if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
                  do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
                } else {
                  stream.point(to[0], to[1]);
                }
              }

              function corner(p, direction) {
                return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
              }

              function compareIntersection(a, b) {
                return comparePoint(a.x, b.x);
              }

              function comparePoint(a, b) {
                var ca = corner(a, 1),
                    cb = corner(b, 1);
                return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
              }

              return function (stream) {
                var activeStream = stream,
                    bufferStream = clipBuffer(),
                    segments,
                    polygon,
                    ring,
                    x__,
                    y__,
                    v__,
                    // first point
                x_,
                    y_,
                    v_,
                    // previous point
                first,
                    clean;
                var clipStream = {
                  point: point,
                  lineStart: lineStart,
                  lineEnd: lineEnd,
                  polygonStart: polygonStart,
                  polygonEnd: polygonEnd
                };

                function point(x, y) {
                  if (visible(x, y)) activeStream.point(x, y);
                }

                function polygonInside() {
                  var winding = 0;

                  for (var i = 0, n = polygon.length; i < n; ++i) {
                    for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                      a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

                      if (a1 <= y1) {
                        if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                      } else {
                        if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
                      }
                    }
                  }

                  return winding;
                } // Buffer geometry within a polygon and then clip it en masse.


                function polygonStart() {
                  activeStream = bufferStream, segments = [], polygon = [], clean = true;
                }

                function polygonEnd() {
                  var startInside = polygonInside(),
                      cleanInside = clean && startInside,
                      visible = (segments = merge(segments)).length;

                  if (cleanInside || visible) {
                    stream.polygonStart();

                    if (cleanInside) {
                      stream.lineStart();
                      interpolate(null, null, 1, stream);
                      stream.lineEnd();
                    }

                    if (visible) {
                      clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
                    }

                    stream.polygonEnd();
                  }

                  activeStream = stream, segments = polygon = ring = null;
                }

                function lineStart() {
                  clipStream.point = linePoint;
                  if (polygon) polygon.push(ring = []);
                  first = true;
                  v_ = false;
                  x_ = y_ = NaN;
                } // TODO rather than special-case polygons, simply handle them separately.
                // Ideally, coincident intersection points should be jittered to avoid
                // clipping issues.


                function lineEnd() {
                  if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_) bufferStream.rejoin();
                    segments.push(bufferStream.result());
                  }

                  clipStream.point = point;
                  if (v_) activeStream.lineEnd();
                }

                function linePoint(x, y) {
                  var v = visible(x, y);
                  if (polygon) ring.push([x, y]);

                  if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;

                    if (v) {
                      activeStream.lineStart();
                      activeStream.point(x, y);
                    }
                  } else {
                    if (v && v_) activeStream.point(x, y);else {
                      var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                          b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

                      if (clipLine$1(a, b, x0, y0, x1, y1)) {
                        if (!v_) {
                          activeStream.lineStart();
                          activeStream.point(a[0], a[1]);
                        }

                        activeStream.point(b[0], b[1]);
                        if (!v) activeStream.lineEnd();
                        clean = false;
                      } else if (v) {
                        activeStream.lineStart();
                        activeStream.point(x, y);
                        clean = false;
                      }
                    }
                  }

                  x_ = x, y_ = y, v_ = v;
                }

                return clipStream;
              };
            }

            var lengthSum = adder();

            function identity$2 (x) {
              return x;
            }

            var areaSum$1 = adder(),
                areaRingSum$1 = adder(),
                x00,
                y00,
                x0,
                y0;
            var areaStream = {
              point: noop$1,
              lineStart: noop$1,
              lineEnd: noop$1,
              polygonStart: function () {
                areaStream.lineStart = areaRingStart;
                areaStream.lineEnd = areaRingEnd;
              },
              polygonEnd: function () {
                areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
                areaSum$1.add(abs(areaRingSum$1));
                areaRingSum$1.reset();
              },
              result: function () {
                var area = areaSum$1 / 2;
                areaSum$1.reset();
                return area;
              }
            };

            function areaRingStart() {
              areaStream.point = areaPointFirst;
            }

            function areaPointFirst(x, y) {
              areaStream.point = areaPoint;
              x00 = x0 = x, y00 = y0 = y;
            }

            function areaPoint(x, y) {
              areaRingSum$1.add(y0 * x - x0 * y);
              x0 = x, y0 = y;
            }

            function areaRingEnd() {
              areaPoint(x00, y00);
            }

            var x0$1 = Infinity,
                y0$1 = x0$1,
                x1 = -x0$1,
                y1 = x1;
            var boundsStream = {
              point: boundsPoint,
              lineStart: noop$1,
              lineEnd: noop$1,
              polygonStart: noop$1,
              polygonEnd: noop$1,
              result: function () {
                var bounds = [[x0$1, y0$1], [x1, y1]];
                x1 = y1 = -(y0$1 = x0$1 = Infinity);
                return bounds;
              }
            };

            function boundsPoint(x, y) {
              if (x < x0$1) x0$1 = x;
              if (x > x1) x1 = x;
              if (y < y0$1) y0$1 = y;
              if (y > y1) y1 = y;
            }

            var X0 = 0,
                Y0 = 0,
                Z0 = 0,
                X1 = 0,
                Y1 = 0,
                Z1 = 0,
                X2 = 0,
                Y2 = 0,
                Z2 = 0,
                x00$1,
                y00$1,
                x0$2,
                y0$2;
            var centroidStream = {
              point: centroidPoint,
              lineStart: centroidLineStart,
              lineEnd: centroidLineEnd,
              polygonStart: function () {
                centroidStream.lineStart = centroidRingStart;
                centroidStream.lineEnd = centroidRingEnd;
              },
              polygonEnd: function () {
                centroidStream.point = centroidPoint;
                centroidStream.lineStart = centroidLineStart;
                centroidStream.lineEnd = centroidLineEnd;
              },
              result: function () {
                var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
                X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
                return centroid;
              }
            };

            function centroidPoint(x, y) {
              X0 += x;
              Y0 += y;
              ++Z0;
            }

            function centroidLineStart() {
              centroidStream.point = centroidPointFirstLine;
            }

            function centroidPointFirstLine(x, y) {
              centroidStream.point = centroidPointLine;
              centroidPoint(x0$2 = x, y0$2 = y);
            }

            function centroidPointLine(x, y) {
              var dx = x - x0$2,
                  dy = y - y0$2,
                  z = sqrt(dx * dx + dy * dy);
              X1 += z * (x0$2 + x) / 2;
              Y1 += z * (y0$2 + y) / 2;
              Z1 += z;
              centroidPoint(x0$2 = x, y0$2 = y);
            }

            function centroidLineEnd() {
              centroidStream.point = centroidPoint;
            }

            function centroidRingStart() {
              centroidStream.point = centroidPointFirstRing;
            }

            function centroidRingEnd() {
              centroidPointRing(x00$1, y00$1);
            }

            function centroidPointFirstRing(x, y) {
              centroidStream.point = centroidPointRing;
              centroidPoint(x00$1 = x0$2 = x, y00$1 = y0$2 = y);
            }

            function centroidPointRing(x, y) {
              var dx = x - x0$2,
                  dy = y - y0$2,
                  z = sqrt(dx * dx + dy * dy);
              X1 += z * (x0$2 + x) / 2;
              Y1 += z * (y0$2 + y) / 2;
              Z1 += z;
              z = y0$2 * x - x0$2 * y;
              X2 += z * (x0$2 + x);
              Y2 += z * (y0$2 + y);
              Z2 += z * 3;
              centroidPoint(x0$2 = x, y0$2 = y);
            }

            function PathContext(context) {
              this._context = context;
            }
            PathContext.prototype = {
              _radius: 4.5,
              pointRadius: function (_) {
                return this._radius = _, this;
              },
              polygonStart: function () {
                this._line = 0;
              },
              polygonEnd: function () {
                this._line = NaN;
              },
              lineStart: function () {
                this._point = 0;
              },
              lineEnd: function () {
                if (this._line === 0) this._context.closePath();
                this._point = NaN;
              },
              point: function (x, y) {
                switch (this._point) {
                  case 0:
                    {
                      this._context.moveTo(x, y);

                      this._point = 1;
                      break;
                    }

                  case 1:
                    {
                      this._context.lineTo(x, y);

                      break;
                    }

                  default:
                    {
                      this._context.moveTo(x + this._radius, y);

                      this._context.arc(x, y, this._radius, 0, tau);

                      break;
                    }
                }
              },
              result: noop$1
            };

            var lengthSum$1 = adder(),
                lengthRing,
                x00$2,
                y00$2,
                x0$3,
                y0$3;
            var lengthStream = {
              point: noop$1,
              lineStart: function () {
                lengthStream.point = lengthPointFirst;
              },
              lineEnd: function () {
                if (lengthRing) lengthPoint(x00$2, y00$2);
                lengthStream.point = noop$1;
              },
              polygonStart: function () {
                lengthRing = true;
              },
              polygonEnd: function () {
                lengthRing = null;
              },
              result: function () {
                var length = +lengthSum$1;
                lengthSum$1.reset();
                return length;
              }
            };

            function lengthPointFirst(x, y) {
              lengthStream.point = lengthPoint;
              x00$2 = x0$3 = x, y00$2 = y0$3 = y;
            }

            function lengthPoint(x, y) {
              x0$3 -= x, y0$3 -= y;
              lengthSum$1.add(sqrt(x0$3 * x0$3 + y0$3 * y0$3));
              x0$3 = x, y0$3 = y;
            }

            function PathString() {
              this._string = [];
            }
            PathString.prototype = {
              _radius: 4.5,
              _circle: circle(4.5),
              pointRadius: function (_) {
                if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
                return this;
              },
              polygonStart: function () {
                this._line = 0;
              },
              polygonEnd: function () {
                this._line = NaN;
              },
              lineStart: function () {
                this._point = 0;
              },
              lineEnd: function () {
                if (this._line === 0) this._string.push("Z");
                this._point = NaN;
              },
              point: function (x, y) {
                switch (this._point) {
                  case 0:
                    {
                      this._string.push("M", x, ",", y);

                      this._point = 1;
                      break;
                    }

                  case 1:
                    {
                      this._string.push("L", x, ",", y);

                      break;
                    }

                  default:
                    {
                      if (this._circle == null) this._circle = circle(this._radius);

                      this._string.push("M", x, ",", y, this._circle);

                      break;
                    }
                }
              },
              result: function () {
                if (this._string.length) {
                  var result = this._string.join("");

                  this._string = [];
                  return result;
                } else {
                  return null;
                }
              }
            };

            function circle(radius) {
              return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
            }

            function index (projection, context) {
              var pointRadius = 4.5,
                  projectionStream,
                  contextStream;

              function path(object) {
                if (object) {
                  if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                  geoStream(object, projectionStream(contextStream));
                }

                return contextStream.result();
              }

              path.area = function (object) {
                geoStream(object, projectionStream(areaStream));
                return areaStream.result();
              };

              path.measure = function (object) {
                geoStream(object, projectionStream(lengthStream));
                return lengthStream.result();
              };

              path.bounds = function (object) {
                geoStream(object, projectionStream(boundsStream));
                return boundsStream.result();
              };

              path.centroid = function (object) {
                geoStream(object, projectionStream(centroidStream));
                return centroidStream.result();
              };

              path.projection = function (_) {
                return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$2) : (projection = _).stream, path) : projection;
              };

              path.context = function (_) {
                if (!arguments.length) return context;
                contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
                if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
                return path;
              };

              path.pointRadius = function (_) {
                if (!arguments.length) return pointRadius;
                pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
                return path;
              };

              return path.projection(projection).context(context);
            }

            function transformer$2(methods) {
              return function (stream) {
                var s = new TransformStream();

                for (var key in methods) s[key] = methods[key];

                s.stream = stream;
                return s;
              };
            }

            function TransformStream() {}

            TransformStream.prototype = {
              constructor: TransformStream,
              point: function (x, y) {
                this.stream.point(x, y);
              },
              sphere: function () {
                this.stream.sphere();
              },
              lineStart: function () {
                this.stream.lineStart();
              },
              lineEnd: function () {
                this.stream.lineEnd();
              },
              polygonStart: function () {
                this.stream.polygonStart();
              },
              polygonEnd: function () {
                this.stream.polygonEnd();
              }
            };

            function fit(projection, fitBounds, object) {
              var clip = projection.clipExtent && projection.clipExtent();
              projection.scale(150).translate([0, 0]);
              if (clip != null) projection.clipExtent(null);
              geoStream(object, projection.stream(boundsStream));
              fitBounds(boundsStream.result());
              if (clip != null) projection.clipExtent(clip);
              return projection;
            }

            function fitExtent(projection, extent, object) {
              return fit(projection, function (b) {
                var w = extent[1][0] - extent[0][0],
                    h = extent[1][1] - extent[0][1],
                    k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
                    x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
                    y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
                projection.scale(150 * k).translate([x, y]);
              }, object);
            }
            function fitSize(projection, size, object) {
              return fitExtent(projection, [[0, 0], size], object);
            }
            function fitWidth(projection, width, object) {
              return fit(projection, function (b) {
                var w = +width,
                    k = w / (b[1][0] - b[0][0]),
                    x = (w - k * (b[1][0] + b[0][0])) / 2,
                    y = -k * b[0][1];
                projection.scale(150 * k).translate([x, y]);
              }, object);
            }
            function fitHeight(projection, height, object) {
              return fit(projection, function (b) {
                var h = +height,
                    k = h / (b[1][1] - b[0][1]),
                    x = -k * b[0][0],
                    y = (h - k * (b[1][1] + b[0][1])) / 2;
                projection.scale(150 * k).translate([x, y]);
              }, object);
            }

            var maxDepth = 16,
                // maximum depth of subdivision
            cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

            function resample (project, delta2) {
              return +delta2 ? resample$1(project, delta2) : resampleNone(project);
            }

            function resampleNone(project) {
              return transformer$2({
                point: function (x, y) {
                  x = project(x, y);
                  this.stream.point(x[0], x[1]);
                }
              });
            }

            function resample$1(project, delta2) {
              function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
                var dx = x1 - x0,
                    dy = y1 - y0,
                    d2 = dx * dx + dy * dy;

                if (d2 > 4 * delta2 && depth--) {
                  var a = a0 + a1,
                      b = b0 + b1,
                      c = c0 + c1,
                      m = sqrt(a * a + b * b + c * c),
                      phi2 = asin(c /= m),
                      lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
                      p = project(lambda2, phi2),
                      x2 = p[0],
                      y2 = p[1],
                      dx2 = x2 - x0,
                      dy2 = y2 - y0,
                      dz = dy * dx2 - dx * dy2;

                  if (dz * dz / d2 > delta2 // perpendicular projected distance
                  || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
                  || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    // angular distance
                    resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
                  }
                }
              }

              return function (stream) {
                var lambda00, x00, y00, a00, b00, c00, // first point
                lambda0, x0, y0, a0, b0, c0; // previous point

                var resampleStream = {
                  point: point,
                  lineStart: lineStart,
                  lineEnd: lineEnd,
                  polygonStart: function () {
                    stream.polygonStart();
                    resampleStream.lineStart = ringStart;
                  },
                  polygonEnd: function () {
                    stream.polygonEnd();
                    resampleStream.lineStart = lineStart;
                  }
                };

                function point(x, y) {
                  x = project(x, y);
                  stream.point(x[0], x[1]);
                }

                function lineStart() {
                  x0 = NaN;
                  resampleStream.point = linePoint;
                  stream.lineStart();
                }

                function linePoint(lambda, phi) {
                  var c = cartesian([lambda, phi]),
                      p = project(lambda, phi);
                  resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                  stream.point(x0, y0);
                }

                function lineEnd() {
                  resampleStream.point = point;
                  stream.lineEnd();
                }

                function ringStart() {
                  lineStart();
                  resampleStream.point = ringPoint;
                  resampleStream.lineEnd = ringEnd;
                }

                function ringPoint(lambda, phi) {
                  linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                  resampleStream.point = linePoint;
                }

                function ringEnd() {
                  resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
                  resampleStream.lineEnd = lineEnd;
                  lineEnd();
                }

                return resampleStream;
              };
            }

            var transformRadians = transformer$2({
              point: function (x, y) {
                this.stream.point(x * radians, y * radians);
              }
            });

            function transformRotate(rotate) {
              return transformer$2({
                point: function (x, y) {
                  var r = rotate(x, y);
                  return this.stream.point(r[0], r[1]);
                }
              });
            }

            function scaleTranslate(k, dx, dy) {
              function transform(x, y) {
                return [dx + k * x, dy - k * y];
              }

              transform.invert = function (x, y) {
                return [(x - dx) / k, (dy - y) / k];
              };

              return transform;
            }

            function scaleTranslateRotate(k, dx, dy, alpha) {
              var cosAlpha = cos(alpha),
                  sinAlpha = sin(alpha),
                  a = cosAlpha * k,
                  b = sinAlpha * k,
                  ai = cosAlpha / k,
                  bi = sinAlpha / k,
                  ci = (sinAlpha * dy - cosAlpha * dx) / k,
                  fi = (sinAlpha * dx + cosAlpha * dy) / k;

              function transform(x, y) {
                return [a * x - b * y + dx, dy - b * x - a * y];
              }

              transform.invert = function (x, y) {
                return [ai * x - bi * y + ci, fi - bi * x - ai * y];
              };

              return transform;
            }

            function projection(project) {
              return projectionMutator(function () {
                return project;
              })();
            }
            function projectionMutator(projectAt) {
              var project,
                  k = 150,
                  // scale
              x = 480,
                  y = 250,
                  // translate
              lambda = 0,
                  phi = 0,
                  // center
              deltaLambda = 0,
                  deltaPhi = 0,
                  deltaGamma = 0,
                  rotate,
                  // pre-rotate
              alpha = 0,
                  // post-rotate
              theta = null,
                  preclip = clipAntimeridian,
                  // pre-clip angle
              x0 = null,
                  y0,
                  x1,
                  y1,
                  postclip = identity$2,
                  // post-clip extent
              delta2 = 0.5,
                  // precision
              projectResample,
                  projectTransform,
                  projectRotateTransform,
                  cache,
                  cacheStream;

              function projection(point) {
                return projectRotateTransform(point[0] * radians, point[1] * radians);
              }

              function invert(point) {
                point = projectRotateTransform.invert(point[0], point[1]);
                return point && [point[0] * degrees, point[1] * degrees];
              }

              projection.stream = function (stream) {
                return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
              };

              projection.preclip = function (_) {
                return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
              };

              projection.postclip = function (_) {
                return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
              };

              projection.clipAngle = function (_) {
                return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
              };

              projection.clipExtent = function (_) {
                return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$2) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
              };

              projection.scale = function (_) {
                return arguments.length ? (k = +_, recenter()) : k;
              };

              projection.translate = function (_) {
                return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
              };

              projection.center = function (_) {
                return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
              };

              projection.rotate = function (_) {
                return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
              };

              projection.angle = function (_) {
                return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
              };

              projection.precision = function (_) {
                return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
              };

              projection.fitExtent = function (extent, object) {
                return fitExtent(projection, extent, object);
              };

              projection.fitSize = function (size, object) {
                return fitSize(projection, size, object);
              };

              projection.fitWidth = function (width, object) {
                return fitWidth(projection, width, object);
              };

              projection.fitHeight = function (height, object) {
                return fitHeight(projection, height, object);
              };

              function recenter() {
                var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
                    transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
                rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
                projectTransform = compose(project, transform);
                projectRotateTransform = compose(rotate, projectTransform);
                projectResample = resample(projectTransform, delta2);
                return reset();
              }

              function reset() {
                cache = cacheStream = null;
                return projection;
              }

              return function () {
                project = projectAt.apply(this, arguments);
                projection.invert = project.invert && invert;
                return recenter();
              };
            }

            function mercatorRaw(lambda, phi) {
              return [lambda, log$1(tan((halfPi + phi) / 2))];
            }

            mercatorRaw.invert = function (x, y) {
              return [x, 2 * atan(exp(y)) - halfPi];
            };

            function mercator () {
              return mercatorProjection(mercatorRaw).scale(961 / tau);
            }
            function mercatorProjection(project) {
              var m = projection(project),
                  center = m.center,
                  scale = m.scale,
                  translate = m.translate,
                  clipExtent = m.clipExtent,
                  x0 = null,
                  y0,
                  x1,
                  y1; // clip extent

              m.scale = function (_) {
                return arguments.length ? (scale(_), reclip()) : scale();
              };

              m.translate = function (_) {
                return arguments.length ? (translate(_), reclip()) : translate();
              };

              m.center = function (_) {
                return arguments.length ? (center(_), reclip()) : center();
              };

              m.clipExtent = function (_) {
                return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
              };

              function reclip() {
                var k = pi * scale(),
                    t = m(rotation(m.rotate()).invert([0, 0]));
                return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
              }

              return reclip();
            }

            /**
             * Represents a set of co-ordinates on a 2D plane
             *
             * @class Point
             */
            class Point$4 {
              /**
               * Creates an instance of Point.
               * @param {number} x X position
               * @param {number} y Y position
               *
               * @memberof Point
               */
              constructor(x, y) {
                /**
                 * @type {number}
                 */
                this.x = x;
                /**
                 * @type {number}
                 */

                this.y = y;
              }

            }

            var Point_1 = Point$4;

            /**
             * Create a line object represnting a set of two points in 2D space.
             *
             * Line objects can be constructed by passing in either 4 numbers (startX, startY, endX, endY) - or
             * two {@link Point} objects representing `start` and `end` respectively
             *
             * @class Line
             */

            class Line {
              /**
               * Construct a Line using two {@link Point} objects
               * .
               * @param {Point} start An instance of {@link Point} containing X and Y co-ordinates
               * @param {Point} end   An instance of {@link Point} containing X and Y co-ordinates
               * @memberof Line
               */

              /**
               * Construct a Line using 4 {@link number}s
               *
               * @param {number} startX Starting position on the X axis
               * @param {number} startY Starting position on the Y axis
               * @param {number} endX   Ending position on the X axis
               * @param {number} endY   Ending position on the Y acis
               * @memberof Line
               */
              constructor() {
                if (arguments.length === 4) {
                  /**
                   * @type {Point}
                  */
                  this.start = {};
                  /**
                   * @type {Point}
                  */

                  this.end = {};
                  [this.start.x, this.start.y, this.end.x, this.end.y] = arguments;

                  for (let argument_index in arguments) {
                    if (arguments.hasOwnProperty(argument_index)) {
                      let argument = arguments[argument_index];

                      if (typeof argument !== 'number') {
                        throw TypeError('When passing 4 arguments, only numbers may be passed');
                      }
                    }
                  }
                } else if (arguments.length === 2) {
                  [this.start, this.end] = arguments;
                } else {
                  throw Error('Please pass either two Point objects, or 4 integers to the constructor');
                }
              }
              /**
               * Get the line length
               *
               * @returns {number}
               *
               * @memberof Line
               */


              getLength() {
                return Math.sqrt(Math.pow(this.start.x - this.end.x, 2) + Math.pow(this.start.y - this.end.y, 2));
              }

            }
            /** @ignore */


            var Line_1 = Line;

            /**
             * Enumeration containing popular colors
             * @enum {string}
             */
            var NAMED_COLORS = {
              'white': 0xFFFFFFff,
              'black': 0x000000ff,
              'red': 0xFF0000ff,
              'green': 0x00FF00ff,
              'blue': 0x0000FFff,
              'transparent': 0x00000000
            };
            var named_colors = NAMED_COLORS;

            var encoding = createCommonjsModule(function (module, exports) {

              var cffStandardStrings = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000', '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];
              var cffStandardEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];
              var cffExpertEncoding = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
              var standardNames = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat']; // This is the encoding used for fonts created from scratch.
              // It loops through all glyphs and finds the appropriate unicode value.
              // Since it's linear time, other encodings will be faster.

              function DefaultEncoding(font) {
                this.font = font;
              }

              DefaultEncoding.prototype.charToGlyphIndex = function (c) {
                var code = c.charCodeAt(0);
                var glyphs = this.font.glyphs;

                if (glyphs) {
                  for (var i = 0; i < glyphs.length; i += 1) {
                    var glyph = glyphs.get(i);

                    for (var j = 0; j < glyph.unicodes.length; j += 1) {
                      if (glyph.unicodes[j] === code) {
                        return i;
                      }
                    }
                  }
                } else {
                  return null;
                }
              };

              function CmapEncoding(cmap) {
                this.cmap = cmap;
              }

              CmapEncoding.prototype.charToGlyphIndex = function (c) {
                return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;
              };

              function CffEncoding(encoding, charset) {
                this.encoding = encoding;
                this.charset = charset;
              }

              CffEncoding.prototype.charToGlyphIndex = function (s) {
                var code = s.charCodeAt(0);
                var charName = this.encoding[code];
                return this.charset.indexOf(charName);
              };

              function GlyphNames(post) {
                var i;

                switch (post.version) {
                  case 1:
                    this.names = exports.standardNames.slice();
                    break;

                  case 2:
                    this.names = new Array(post.numberOfGlyphs);

                    for (i = 0; i < post.numberOfGlyphs; i++) {
                      if (post.glyphNameIndex[i] < exports.standardNames.length) {
                        this.names[i] = exports.standardNames[post.glyphNameIndex[i]];
                      } else {
                        this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];
                      }
                    }

                    break;

                  case 2.5:
                    this.names = new Array(post.numberOfGlyphs);

                    for (i = 0; i < post.numberOfGlyphs; i++) {
                      this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];
                    }

                    break;

                  case 3:
                    this.names = [];
                    break;
                }
              }

              GlyphNames.prototype.nameToGlyphIndex = function (name) {
                return this.names.indexOf(name);
              };

              GlyphNames.prototype.glyphIndexToName = function (gid) {
                return this.names[gid];
              };

              function addGlyphNames(font) {
                var glyph;
                var glyphIndexMap = font.tables.cmap.glyphIndexMap;
                var charCodes = Object.keys(glyphIndexMap);

                for (var i = 0; i < charCodes.length; i += 1) {
                  var c = charCodes[i];
                  var glyphIndex = glyphIndexMap[c];
                  glyph = font.glyphs.get(glyphIndex);
                  glyph.addUnicode(parseInt(c));
                }

                for (i = 0; i < font.glyphs.length; i += 1) {
                  glyph = font.glyphs.get(i);

                  if (font.cffEncoding) {
                    glyph.name = font.cffEncoding.charset[i];
                  } else {
                    glyph.name = font.glyphNames.glyphIndexToName(i);
                  }
                }
              }

              exports.cffStandardStrings = cffStandardStrings;
              exports.cffStandardEncoding = cffStandardEncoding;
              exports.cffExpertEncoding = cffExpertEncoding;
              exports.standardNames = standardNames;
              exports.DefaultEncoding = DefaultEncoding;
              exports.CmapEncoding = CmapEncoding;
              exports.CffEncoding = CffEncoding;
              exports.GlyphNames = GlyphNames;
              exports.addGlyphNames = addGlyphNames;
            });
            var encoding_1 = encoding.cffStandardStrings;
            var encoding_2 = encoding.cffStandardEncoding;
            var encoding_3 = encoding.cffExpertEncoding;
            var encoding_4 = encoding.standardNames;
            var encoding_5 = encoding.DefaultEncoding;
            var encoding_6 = encoding.CmapEncoding;
            var encoding_7 = encoding.CffEncoding;
            var encoding_8 = encoding.GlyphNames;
            var encoding_9 = encoding.addGlyphNames;

            // Geometric objects
            // Paths can be drawn on a context using `draw`.

            function Path() {
              this.commands = [];
              this.fill = 'black';
              this.stroke = null;
              this.strokeWidth = 1;
            }

            Path.prototype.moveTo = function (x, y) {
              this.commands.push({
                type: 'M',
                x: x,
                y: y
              });
            };

            Path.prototype.lineTo = function (x, y) {
              this.commands.push({
                type: 'L',
                x: x,
                y: y
              });
            };

            Path.prototype.curveTo = Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
              this.commands.push({
                type: 'C',
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                x: x,
                y: y
              });
            };

            Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {
              this.commands.push({
                type: 'Q',
                x1: x1,
                y1: y1,
                x: x,
                y: y
              });
            };

            Path.prototype.close = Path.prototype.closePath = function () {
              this.commands.push({
                type: 'Z'
              });
            }; // Add the given path or list of commands to the commands of this path.


            Path.prototype.extend = function (pathOrCommands) {
              if (pathOrCommands.commands) {
                pathOrCommands = pathOrCommands.commands;
              }

              Array.prototype.push.apply(this.commands, pathOrCommands);
            }; // Draw the path to a 2D context.


            Path.prototype.draw = function (ctx) {
              ctx.beginPath();

              for (var i = 0; i < this.commands.length; i += 1) {
                var cmd = this.commands[i];

                if (cmd.type === 'M') {
                  ctx.moveTo(cmd.x, cmd.y);
                } else if (cmd.type === 'L') {
                  ctx.lineTo(cmd.x, cmd.y);
                } else if (cmd.type === 'C') {
                  ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                } else if (cmd.type === 'Q') {
                  ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                } else if (cmd.type === 'Z') {
                  ctx.closePath();
                }
              }

              if (this.fill) {
                ctx.fillStyle = this.fill;
                ctx.fill();
              }

              if (this.stroke) {
                ctx.strokeStyle = this.stroke;
                ctx.lineWidth = this.strokeWidth;
                ctx.stroke();
              }
            }; // Convert the Path to a string of path data instructions
            // See http://www.w3.org/TR/SVG/paths.html#PathData
            // Parameters:
            // - decimalPlaces: The amount of decimal places for floating-point values (default: 2)


            Path.prototype.toPathData = function (decimalPlaces) {
              decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

              function floatToString(v) {
                if (Math.round(v) === v) {
                  return '' + Math.round(v);
                } else {
                  return v.toFixed(decimalPlaces);
                }
              }

              function packValues() {
                var s = '';

                for (var i = 0; i < arguments.length; i += 1) {
                  var v = arguments[i];

                  if (v >= 0 && i > 0) {
                    s += ' ';
                  }

                  s += floatToString(v);
                }

                return s;
              }

              var d = '';

              for (var i = 0; i < this.commands.length; i += 1) {
                var cmd = this.commands[i];

                if (cmd.type === 'M') {
                  d += 'M' + packValues(cmd.x, cmd.y);
                } else if (cmd.type === 'L') {
                  d += 'L' + packValues(cmd.x, cmd.y);
                } else if (cmd.type === 'C') {
                  d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                } else if (cmd.type === 'Q') {
                  d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
                } else if (cmd.type === 'Z') {
                  d += 'Z';
                }
              }

              return d;
            }; // Convert the path to a SVG <path> element, as a string.
            // Parameters:
            // - decimalPlaces: The amount of decimal places for floating-point values (default: 2)


            Path.prototype.toSVG = function (decimalPlaces) {
              var svg = '<path d="';
              svg += this.toPathData(decimalPlaces);
              svg += '"';

              if (this.fill & this.fill !== 'black') {
                if (this.fill === null) {
                  svg += ' fill="none"';
                } else {
                  svg += ' fill="' + this.fill + '"';
                }
              }

              if (this.stroke) {
                svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
              }

              svg += '/>';
              return svg;
            };

            var Path_1 = Path;
            var path$1 = {
              Path: Path_1
            };

            var check = createCommonjsModule(function (module, exports) {
              // If not, it will throw an error.

              exports.argument = function (predicate, message) {
                if (!predicate) {
                  throw new Error(message);
                }
              }; // Precondition function that checks if the given assertion is true.
              // If not, it will throw an error.


              exports.assert = exports.argument;
            });
            var check_1 = check.argument;
            var check_2 = check.assert;

            var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15

            var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

            var decode$2 = {};
            var encode$2 = {};
            var sizeOf = {}; // Return a function that always returns the same value.

            function constant(v) {
              return function () {
                return v;
              };
            } // OpenType data types //////////////////////////////////////////////////////
            // Convert an 8-bit unsigned integer to a list of 1 byte.


            encode$2.BYTE = function (v) {
              check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
              return [v];
            };

            sizeOf.BYTE = constant(1); // Convert a 8-bit signed integer to a list of 1 byte.

            encode$2.CHAR = function (v) {
              return [v.charCodeAt(0)];
            };

            sizeOf.CHAR = constant(1); // Convert an ASCII string to a list of bytes.

            encode$2.CHARARRAY = function (v) {
              var b = [];

              for (var i = 0; i < v.length; i += 1) {
                b.push(v.charCodeAt(i));
              }

              return b;
            };

            sizeOf.CHARARRAY = function (v) {
              return v.length;
            }; // Convert a 16-bit unsigned integer to a list of 2 bytes.


            encode$2.USHORT = function (v) {
              return [v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.USHORT = constant(2); // Convert a 16-bit signed integer to a list of 2 bytes.

            encode$2.SHORT = function (v) {
              // Two's complement
              if (v >= LIMIT16) {
                v = -(2 * LIMIT16 - v);
              }

              return [v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.SHORT = constant(2); // Convert a 24-bit unsigned integer to a list of 3 bytes.

            encode$2.UINT24 = function (v) {
              return [v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.UINT24 = constant(3); // Convert a 32-bit unsigned integer to a list of 4 bytes.

            encode$2.ULONG = function (v) {
              return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.ULONG = constant(4); // Convert a 32-bit unsigned integer to a list of 4 bytes.

            encode$2.LONG = function (v) {
              // Two's complement
              if (v >= LIMIT32) {
                v = -(2 * LIMIT32 - v);
              }

              return [v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.LONG = constant(4);
            encode$2.FIXED = encode$2.ULONG;
            sizeOf.FIXED = sizeOf.ULONG;
            encode$2.FWORD = encode$2.SHORT;
            sizeOf.FWORD = sizeOf.SHORT;
            encode$2.UFWORD = encode$2.USHORT;
            sizeOf.UFWORD = sizeOf.USHORT; // FIXME Implement LONGDATETIME

            encode$2.LONGDATETIME = function () {
              return [0, 0, 0, 0, 0, 0, 0, 0];
            };

            sizeOf.LONGDATETIME = constant(8); // Convert a 4-char tag to a list of 4 bytes.

            encode$2.TAG = function (v) {
              check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
              return [v.charCodeAt(0), v.charCodeAt(1), v.charCodeAt(2), v.charCodeAt(3)];
            };

            sizeOf.TAG = constant(4); // CFF data types ///////////////////////////////////////////////////////////

            encode$2.Card8 = encode$2.BYTE;
            sizeOf.Card8 = sizeOf.BYTE;
            encode$2.Card16 = encode$2.USHORT;
            sizeOf.Card16 = sizeOf.USHORT;
            encode$2.OffSize = encode$2.BYTE;
            sizeOf.OffSize = sizeOf.BYTE;
            encode$2.SID = encode$2.USHORT;
            sizeOf.SID = sizeOf.USHORT; // Convert a numeric operand or charstring number to a variable-size list of bytes.

            encode$2.NUMBER = function (v) {
              if (v >= -107 && v <= 107) {
                return [v + 139];
              } else if (v >= 108 && v <= 1131) {
                v = v - 108;
                return [(v >> 8) + 247, v & 0xFF];
              } else if (v >= -1131 && v <= -108) {
                v = -v - 108;
                return [(v >> 8) + 251, v & 0xFF];
              } else if (v >= -32768 && v <= 32767) {
                return encode$2.NUMBER16(v);
              } else {
                return encode$2.NUMBER32(v);
              }
            };

            sizeOf.NUMBER = function (v) {
              return encode$2.NUMBER(v).length;
            }; // Convert a signed number between -32768 and +32767 to a three-byte value.
            // This ensures we always use three bytes, but is not the most compact format.


            encode$2.NUMBER16 = function (v) {
              return [28, v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.NUMBER16 = constant(3); // Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
            // This is useful if you want to be sure you always use four bytes,
            // at the expense of wasting a few bytes for smaller numbers.

            encode$2.NUMBER32 = function (v) {
              return [29, v >> 24 & 0xFF, v >> 16 & 0xFF, v >> 8 & 0xFF, v & 0xFF];
            };

            sizeOf.NUMBER32 = constant(5);

            encode$2.REAL = function (v) {
              var value = v.toString(); // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
              // This code converts it back to a number without the epsilon.

              var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);

              if (m) {
                var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
                value = (Math.round(v * epsilon) / epsilon).toString();
              }

              var nibbles = '';
              var i;
              var ii;

              for (i = 0, ii = value.length; i < ii; i += 1) {
                var c = value[i];

                if (c === 'e') {
                  nibbles += value[++i] === '-' ? 'c' : 'b';
                } else if (c === '.') {
                  nibbles += 'a';
                } else if (c === '-') {
                  nibbles += 'e';
                } else {
                  nibbles += c;
                }
              }

              nibbles += nibbles.length & 1 ? 'f' : 'ff';
              var out = [30];

              for (i = 0, ii = nibbles.length; i < ii; i += 2) {
                out.push(parseInt(nibbles.substr(i, 2), 16));
              }

              return out;
            };

            sizeOf.REAL = function (v) {
              return encode$2.REAL(v).length;
            };

            encode$2.NAME = encode$2.CHARARRAY;
            sizeOf.NAME = sizeOf.CHARARRAY;
            encode$2.STRING = encode$2.CHARARRAY;
            sizeOf.STRING = sizeOf.CHARARRAY;

            decode$2.UTF16 = function (data, offset, numBytes) {
              var codePoints = [];
              var numChars = numBytes / 2;

              for (var j = 0; j < numChars; j++, offset += 2) {
                codePoints[j] = data.getUint16(offset);
              }

              return String.fromCharCode.apply(null, codePoints);
            }; // Convert a JavaScript string to UTF16-BE.


            encode$2.UTF16 = function (v) {
              var b = [];

              for (var i = 0; i < v.length; i += 1) {
                var codepoint = v.charCodeAt(i);
                b.push(codepoint >> 8 & 0xFF);
                b.push(codepoint & 0xFF);
              }

              return b;
            };

            sizeOf.UTF16 = function (v) {
              return v.length * 2;
            }; // Data for converting old eight-bit Macintosh encodings to Unicode.
            // This representation is optimized for decoding; encoding is slower
            // and needs more memory. The assumption is that all opentype.js users
            // want to open fonts, but saving a font will be comperatively rare
            // so it can be more expensive. Keyed by IANA character set name.
            //
            // Python script for generating these strings:
            //
            //     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
            //     print(s.encode('utf-8'))


            var eightBitMacEncodings = {
              'x-mac-croatian': // Python: 'mac_croatian'
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' + '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
              'x-mac-cyrillic': // Python: 'mac_cyrillic'
              'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' + 'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
              'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' + 'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
              'x-mac-greek': // Python: 'mac_greek'
              'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' + 'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
              'x-mac-icelandic': // Python: 'mac_iceland'
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
              'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
              'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' + 'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
              'x-mac-ce': // Python: 'mac_latin2'
              'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' + 'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
              macintosh: // Python: 'mac_roman'
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
              'x-mac-romanian': // Python: 'mac_romanian'
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
              'x-mac-turkish': // Python: 'mac_turkish'
              'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' + '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
            }; // Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
            // string, or 'undefined' if the encoding is unsupported. For example, we do
            // not support Chinese, Japanese or Korean because these would need large
            // mapping tables.

            decode$2.MACSTRING = function (dataView, offset, dataLength, encoding) {
              var table = eightBitMacEncodings[encoding];

              if (table === undefined) {
                return undefined;
              }

              var result = '';

              for (var i = 0; i < dataLength; i++) {
                var c = dataView.getUint8(offset + i); // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                // mapped to U+0000..U+007F; we only need to look up the others.

                if (c <= 0x7F) {
                  result += String.fromCharCode(c);
                } else {
                  result += table[c & 0x7F];
                }
              }

              return result;
            }; // Helper function for encode.MACSTRING. Returns a dictionary for mapping
            // Unicode character codes to their 8-bit MacOS equivalent. This table
            // is not exactly a super cheap data structure, but we do not care because
            // encoding Macintosh strings is only rarely needed in typical applications.


            var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
            var macEncodingCacheKeys;

            var getMacEncodingTable = function (encoding) {
              // Since we use encoding as a cache key for WeakMap, it has to be
              // a String object and not a literal. And at least on NodeJS 2.10.1,
              // WeakMap requires that the same String instance is passed for cache hits.
              if (!macEncodingCacheKeys) {
                macEncodingCacheKeys = {};

                for (var e in eightBitMacEncodings) {
                  /*jshint -W053 */
                  // Suppress "Do not use String as a constructor."
                  macEncodingCacheKeys[e] = new String(e);
                }
              }

              var cacheKey = macEncodingCacheKeys[encoding];

              if (cacheKey === undefined) {
                return undefined;
              } // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
              // since garbage collection may run at any time, it could also kick in
              // between the calls to cache.has() and cache.get(). In that case,
              // we would return 'undefined' even though we do support the encoding.


              if (macEncodingTableCache) {
                var cachedTable = macEncodingTableCache.get(cacheKey);

                if (cachedTable !== undefined) {
                  return cachedTable;
                }
              }

              var decodingTable = eightBitMacEncodings[encoding];

              if (decodingTable === undefined) {
                return undefined;
              }

              var encodingTable = {};

              for (var i = 0; i < decodingTable.length; i++) {
                encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
              }

              if (macEncodingTableCache) {
                macEncodingTableCache.set(cacheKey, encodingTable);
              }

              return encodingTable;
            }; // Encodes an old-style Macintosh string. Returns a byte array upon success.
            // If the requested encoding is unsupported, or if the input string contains
            // a character that cannot be expressed in the encoding, the function returns
            // 'undefined'.


            encode$2.MACSTRING = function (str, encoding) {
              var table = getMacEncodingTable(encoding);

              if (table === undefined) {
                return undefined;
              }

              var result = [];

              for (var i = 0; i < str.length; i++) {
                var c = str.charCodeAt(i); // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                // mapped to U+0000..U+007F; we only need to look up the others.

                if (c >= 0x80) {
                  c = table[c];

                  if (c === undefined) {
                    // str contains a Unicode character that cannot be encoded
                    // in the requested encoding.
                    return undefined;
                  }
                }

                result.push(c);
              }

              return result;
            };

            sizeOf.MACSTRING = function (str, encoding) {
              var b = encode$2.MACSTRING(str, encoding);

              if (b !== undefined) {
                return b.length;
              } else {
                return 0;
              }
            }; // Convert a list of values to a CFF INDEX structure.
            // The values should be objects containing name / type / value.


            encode$2.INDEX = function (l) {
              var i; //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
              //    dataSize, i, v;
              // Because we have to know which data type to use to encode the offsets,
              // we have to go through the values twice: once to encode the data and
              // calculate the offets, then again to encode the offsets using the fitting data type.

              var offset = 1; // First offset is always 1.

              var offsets = [offset];
              var data = [];
              var dataSize = 0;

              for (i = 0; i < l.length; i += 1) {
                var v = encode$2.OBJECT(l[i]);
                Array.prototype.push.apply(data, v);
                dataSize += v.length;
                offset += v.length;
                offsets.push(offset);
              }

              if (data.length === 0) {
                return [0, 0];
              }

              var encodedOffsets = [];
              var offSize = 1 + Math.floor(Math.log(dataSize) / Math.log(2)) / 8 | 0;
              var offsetEncoder = [undefined, encode$2.BYTE, encode$2.USHORT, encode$2.UINT24, encode$2.ULONG][offSize];

              for (i = 0; i < offsets.length; i += 1) {
                var encodedOffset = offsetEncoder(offsets[i]);
                Array.prototype.push.apply(encodedOffsets, encodedOffset);
              }

              return Array.prototype.concat(encode$2.Card16(l.length), encode$2.OffSize(offSize), encodedOffsets, data);
            };

            sizeOf.INDEX = function (v) {
              return encode$2.INDEX(v).length;
            }; // Convert an object to a CFF DICT structure.
            // The keys should be numeric.
            // The values should be objects containing name / type / value.


            encode$2.DICT = function (m) {
              var d = [];
              var keys = Object.keys(m);
              var length = keys.length;

              for (var i = 0; i < length; i += 1) {
                // Object.keys() return string keys, but our keys are always numeric.
                var k = parseInt(keys[i], 0);
                var v = m[k]; // Value comes before the key.

                d = d.concat(encode$2.OPERAND(v.value, v.type));
                d = d.concat(encode$2.OPERATOR(k));
              }

              return d;
            };

            sizeOf.DICT = function (m) {
              return encode$2.DICT(m).length;
            };

            encode$2.OPERATOR = function (v) {
              if (v < 1200) {
                return [v];
              } else {
                return [12, v - 1200];
              }
            };

            encode$2.OPERAND = function (v, type) {
              var d = [];

              if (Array.isArray(type)) {
                for (var i = 0; i < type.length; i += 1) {
                  check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
                  d = d.concat(encode$2.OPERAND(v[i], type[i]));
                }
              } else {
                if (type === 'SID') {
                  d = d.concat(encode$2.NUMBER(v));
                } else if (type === 'offset') {
                  // We make it easy for ourselves and always encode offsets as
                  // 4 bytes. This makes offset calculation for the top dict easier.
                  d = d.concat(encode$2.NUMBER32(v));
                } else if (type === 'number') {
                  d = d.concat(encode$2.NUMBER(v));
                } else if (type === 'real') {
                  d = d.concat(encode$2.REAL(v));
                } else {
                  throw new Error('Unknown operand type ' + type); // FIXME Add support for booleans
                }
              }

              return d;
            };

            encode$2.OP = encode$2.BYTE;
            sizeOf.OP = sizeOf.BYTE; // memoize charstring encoding using WeakMap if available

            var wmm = typeof WeakMap === 'function' && new WeakMap(); // Convert a list of CharString operations to bytes.

            encode$2.CHARSTRING = function (ops) {
              // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
              if (wmm) {
                var cachedValue = wmm.get(ops);

                if (cachedValue !== undefined) {
                  return cachedValue;
                }
              }

              var d = [];
              var length = ops.length;

              for (var i = 0; i < length; i += 1) {
                var op = ops[i];
                d = d.concat(encode$2[op.type](op.value));
              }

              if (wmm) {
                wmm.set(ops, d);
              }

              return d;
            };

            sizeOf.CHARSTRING = function (ops) {
              return encode$2.CHARSTRING(ops).length;
            }; // Utility functions ////////////////////////////////////////////////////////
            // Convert an object containing name / type / value to bytes.


            encode$2.OBJECT = function (v) {
              var encodingFunction = encode$2[v.type];
              check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
              return encodingFunction(v.value);
            };

            sizeOf.OBJECT = function (v) {
              var sizeOfFunction = sizeOf[v.type];
              check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
              return sizeOfFunction(v.value);
            }; // Convert a table object to bytes.
            // A table contains a list of fields containing the metadata (name, type and default value).
            // The table itself has the field values set as attributes.


            encode$2.TABLE = function (table) {
              var d = [];
              var length = table.fields.length;

              for (var i = 0; i < length; i += 1) {
                var field = table.fields[i];
                var encodingFunction = encode$2[field.type];
                check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type);
                var value = table[field.name];

                if (value === undefined) {
                  value = field.value;
                }

                var bytes = encodingFunction(value);
                d = d.concat(bytes);
              }

              return d;
            };

            sizeOf.TABLE = function (table) {
              var numBytes = 0;
              var length = table.fields.length;

              for (var i = 0; i < length; i += 1) {
                var field = table.fields[i];
                var sizeOfFunction = sizeOf[field.type];
                check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type);
                var value = table[field.name];

                if (value === undefined) {
                  value = field.value;
                }

                numBytes += sizeOfFunction(value);
              }

              return numBytes;
            }; // Merge in a list of bytes.


            encode$2.LITERAL = function (v) {
              return v;
            };

            sizeOf.LITERAL = function (v) {
              return v.length;
            };

            var decode_1 = decode$2;
            var encode_1 = encode$2;
            var sizeOf_1 = sizeOf;
            var types$1 = {
              decode: decode_1,
              encode: encode_1,
              sizeOf: sizeOf_1
            };

            var encode$3 = types$1.encode;
            var sizeOf$1 = types$1.sizeOf;

            function Table(tableName, fields, options) {
              var i;

              for (i = 0; i < fields.length; i += 1) {
                var field = fields[i];
                this[field.name] = field.value;
              }

              this.tableName = tableName;
              this.fields = fields;

              if (options) {
                var optionKeys = Object.keys(options);

                for (i = 0; i < optionKeys.length; i += 1) {
                  var k = optionKeys[i];
                  var v = options[k];

                  if (this[k] !== undefined) {
                    this[k] = v;
                  }
                }
              }
            }

            Table.prototype.sizeOf = function () {
              var v = 0;

              for (var i = 0; i < this.fields.length; i += 1) {
                var field = this.fields[i];
                var value = this[field.name];

                if (value === undefined) {
                  value = field.value;
                }

                if (typeof value.sizeOf === 'function') {
                  v += value.sizeOf();
                } else {
                  var sizeOfFunction = sizeOf$1[field.type];
                  check.assert(typeof sizeOfFunction === 'function', 'Could not find sizeOf function for field' + field.name);
                  v += sizeOfFunction(value);
                }
              }

              return v;
            };

            Table.prototype.encode = function () {
              return encode$3.TABLE(this);
            };

            var Table_1 = Table;
            var table = {
              Table: Table_1
            };

            var parse$2 = createCommonjsModule(function (module, exports) {

              exports.getByte = function getByte(dataView, offset) {
                return dataView.getUint8(offset);
              };

              exports.getCard8 = exports.getByte; // Retrieve an unsigned 16-bit short from the DataView.
              // The value is stored in big endian.

              exports.getUShort = function (dataView, offset) {
                return dataView.getUint16(offset, false);
              };

              exports.getCard16 = exports.getUShort; // Retrieve a signed 16-bit short from the DataView.
              // The value is stored in big endian.

              exports.getShort = function (dataView, offset) {
                return dataView.getInt16(offset, false);
              }; // Retrieve an unsigned 32-bit long from the DataView.
              // The value is stored in big endian.


              exports.getULong = function (dataView, offset) {
                return dataView.getUint32(offset, false);
              }; // Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
              // The value is stored in big endian.


              exports.getFixed = function (dataView, offset) {
                var decimal = dataView.getInt16(offset, false);
                var fraction = dataView.getUint16(offset + 2, false);
                return decimal + fraction / 65535;
              }; // Retrieve a 4-character tag from the DataView.
              // Tags are used to identify tables.


              exports.getTag = function (dataView, offset) {
                var tag = '';

                for (var i = offset; i < offset + 4; i += 1) {
                  tag += String.fromCharCode(dataView.getInt8(i));
                }

                return tag;
              }; // Retrieve an offset from the DataView.
              // Offsets are 1 to 4 bytes in length, depending on the offSize argument.


              exports.getOffset = function (dataView, offset, offSize) {
                var v = 0;

                for (var i = 0; i < offSize; i += 1) {
                  v <<= 8;
                  v += dataView.getUint8(offset + i);
                }

                return v;
              }; // Retrieve a number of bytes from start offset to the end offset from the DataView.


              exports.getBytes = function (dataView, startOffset, endOffset) {
                var bytes = [];

                for (var i = startOffset; i < endOffset; i += 1) {
                  bytes.push(dataView.getUint8(i));
                }

                return bytes;
              }; // Convert the list of bytes to a string.


              exports.bytesToString = function (bytes) {
                var s = '';

                for (var i = 0; i < bytes.length; i += 1) {
                  s += String.fromCharCode(bytes[i]);
                }

                return s;
              };

              var typeOffsets = {
                byte: 1,
                uShort: 2,
                short: 2,
                uLong: 4,
                fixed: 4,
                longDateTime: 8,
                tag: 4
              }; // A stateful parser that changes the offset whenever a value is retrieved.
              // The data is a DataView.

              function Parser(data, offset) {
                this.data = data;
                this.offset = offset;
                this.relativeOffset = 0;
              }

              Parser.prototype.parseByte = function () {
                var v = this.data.getUint8(this.offset + this.relativeOffset);
                this.relativeOffset += 1;
                return v;
              };

              Parser.prototype.parseChar = function () {
                var v = this.data.getInt8(this.offset + this.relativeOffset);
                this.relativeOffset += 1;
                return v;
              };

              Parser.prototype.parseCard8 = Parser.prototype.parseByte;

              Parser.prototype.parseUShort = function () {
                var v = this.data.getUint16(this.offset + this.relativeOffset);
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
              Parser.prototype.parseSID = Parser.prototype.parseUShort;
              Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

              Parser.prototype.parseShort = function () {
                var v = this.data.getInt16(this.offset + this.relativeOffset);
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseF2Dot14 = function () {
                var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                this.relativeOffset += 2;
                return v;
              };

              Parser.prototype.parseULong = function () {
                var v = exports.getULong(this.data, this.offset + this.relativeOffset);
                this.relativeOffset += 4;
                return v;
              };

              Parser.prototype.parseFixed = function () {
                var v = exports.getFixed(this.data, this.offset + this.relativeOffset);
                this.relativeOffset += 4;
                return v;
              };

              Parser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function (count) {
                var offsets = new Array(count);
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;

                for (var i = 0; i < count; i++) {
                  offsets[i] = exports.getUShort(dataView, offset);
                  offset += 2;
                }

                this.relativeOffset += count * 2;
                return offsets;
              };

              Parser.prototype.parseString = function (length) {
                var dataView = this.data;
                var offset = this.offset + this.relativeOffset;
                var string = '';
                this.relativeOffset += length;

                for (var i = 0; i < length; i++) {
                  string += String.fromCharCode(dataView.getUint8(offset + i));
                }

                return string;
              };

              Parser.prototype.parseTag = function () {
                return this.parseString(4);
              }; // LONGDATETIME is a 64-bit integer.
              // JavaScript and unix timestamps traditionally use 32 bits, so we
              // only take the last 32 bits.


              Parser.prototype.parseLongDateTime = function () {
                var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);
                this.relativeOffset += 8;
                return v;
              };

              Parser.prototype.parseFixed = function () {
                var v = exports.getULong(this.data, this.offset + this.relativeOffset);
                this.relativeOffset += 4;
                return v / 65536;
              };

              Parser.prototype.parseVersion = function () {
                var major = exports.getUShort(this.data, this.offset + this.relativeOffset); // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
                // This returns the correct number if minor = 0xN000 where N is 0-9

                var minor = exports.getUShort(this.data, this.offset + this.relativeOffset + 2);
                this.relativeOffset += 4;
                return major + minor / 0x1000 / 10;
              };

              Parser.prototype.skip = function (type, amount) {
                if (amount === undefined) {
                  amount = 1;
                }

                this.relativeOffset += typeOffsets[type] * amount;
              };

              exports.Parser = Parser;
            });
            var parse_1 = parse$2.getByte;
            var parse_2 = parse$2.getCard8;
            var parse_3 = parse$2.getUShort;
            var parse_4 = parse$2.getCard16;
            var parse_5 = parse$2.getShort;
            var parse_6 = parse$2.getULong;
            var parse_7 = parse$2.getFixed;
            var parse_8 = parse$2.getTag;
            var parse_9 = parse$2.getOffset;
            var parse_10 = parse$2.getBytes;
            var parse_11 = parse$2.bytesToString;
            var parse_12 = parse$2.Parser;

            // There are many available formats, but we only support the Windows format 4.
            // This function returns a `CmapEncoding` object or null if no supported format could be found.


            function parseCmapTable(data, start) {
              var i;
              var cmap = {};
              cmap.version = parse$2.getUShort(data, start);
              check.argument(cmap.version === 0, 'cmap table version should be 0.'); // The cmap table can contain many sub-tables, each with their own format.
              // We're only interested in a "platform 3" table. This is a Windows format.

              cmap.numTables = parse$2.getUShort(data, start + 2);
              var offset = -1;

              for (i = 0; i < cmap.numTables; i += 1) {
                var platformId = parse$2.getUShort(data, start + 4 + i * 8);
                var encodingId = parse$2.getUShort(data, start + 4 + i * 8 + 2);

                if (platformId === 3 && (encodingId === 1 || encodingId === 0)) {
                  offset = parse$2.getULong(data, start + 4 + i * 8 + 4);
                  break;
                }
              }

              if (offset === -1) {
                // There is no cmap table in the font that we support, so return null.
                // This font will be marked as unsupported.
                return null;
              }

              var p = new parse$2.Parser(data, start + offset);
              cmap.format = p.parseUShort();
              check.argument(cmap.format === 4, 'Only format 4 cmap tables are supported.'); // Length in bytes of the sub-tables.

              cmap.length = p.parseUShort();
              cmap.language = p.parseUShort(); // segCount is stored x 2.

              var segCount;
              cmap.segCount = segCount = p.parseUShort() >> 1; // Skip searchRange, entrySelector, rangeShift.

              p.skip('uShort', 3); // The "unrolled" mapping from character codes to glyph indices.

              cmap.glyphIndexMap = {};
              var endCountParser = new parse$2.Parser(data, start + offset + 14);
              var startCountParser = new parse$2.Parser(data, start + offset + 16 + segCount * 2);
              var idDeltaParser = new parse$2.Parser(data, start + offset + 16 + segCount * 4);
              var idRangeOffsetParser = new parse$2.Parser(data, start + offset + 16 + segCount * 6);
              var glyphIndexOffset = start + offset + 16 + segCount * 8;

              for (i = 0; i < segCount - 1; i += 1) {
                var glyphIndex;
                var endCount = endCountParser.parseUShort();
                var startCount = startCountParser.parseUShort();
                var idDelta = idDeltaParser.parseShort();
                var idRangeOffset = idRangeOffsetParser.parseUShort();

                for (var c = startCount; c <= endCount; c += 1) {
                  if (idRangeOffset !== 0) {
                    // The idRangeOffset is relative to the current position in the idRangeOffset array.
                    // Take the current offset in the idRangeOffset array.
                    glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2; // Add the value of the idRangeOffset, which will move us into the glyphIndex array.

                    glyphIndexOffset += idRangeOffset; // Then add the character index of the current segment, multiplied by 2 for USHORTs.

                    glyphIndexOffset += (c - startCount) * 2;
                    glyphIndex = parse$2.getUShort(data, glyphIndexOffset);

                    if (glyphIndex !== 0) {
                      glyphIndex = glyphIndex + idDelta & 0xFFFF;
                    }
                  } else {
                    glyphIndex = c + idDelta & 0xFFFF;
                  }

                  cmap.glyphIndexMap[c] = glyphIndex;
                }
              }

              return cmap;
            }

            function addSegment(t, code, glyphIndex) {
              t.segments.push({
                end: code,
                start: code,
                delta: -(code - glyphIndex),
                offset: 0
              });
            }

            function addTerminatorSegment(t) {
              t.segments.push({
                end: 0xFFFF,
                start: 0xFFFF,
                delta: 1,
                offset: 0
              });
            }

            function makeCmapTable(glyphs) {
              var i;
              var t = new table.Table('cmap', [{
                name: 'version',
                type: 'USHORT',
                value: 0
              }, {
                name: 'numTables',
                type: 'USHORT',
                value: 1
              }, {
                name: 'platformID',
                type: 'USHORT',
                value: 3
              }, {
                name: 'encodingID',
                type: 'USHORT',
                value: 1
              }, {
                name: 'offset',
                type: 'ULONG',
                value: 12
              }, {
                name: 'format',
                type: 'USHORT',
                value: 4
              }, {
                name: 'length',
                type: 'USHORT',
                value: 0
              }, {
                name: 'language',
                type: 'USHORT',
                value: 0
              }, {
                name: 'segCountX2',
                type: 'USHORT',
                value: 0
              }, {
                name: 'searchRange',
                type: 'USHORT',
                value: 0
              }, {
                name: 'entrySelector',
                type: 'USHORT',
                value: 0
              }, {
                name: 'rangeShift',
                type: 'USHORT',
                value: 0
              }]);
              t.segments = [];

              for (i = 0; i < glyphs.length; i += 1) {
                var glyph = glyphs.get(i);

                for (var j = 0; j < glyph.unicodes.length; j += 1) {
                  addSegment(t, glyph.unicodes[j], i);
                }

                t.segments = t.segments.sort(function (a, b) {
                  return a.start - b.start;
                });
              }

              addTerminatorSegment(t);
              var segCount;
              segCount = t.segments.length;
              t.segCountX2 = segCount * 2;
              t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;
              t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
              t.rangeShift = t.segCountX2 - t.searchRange; // Set up parallel segment arrays.

              var endCounts = [];
              var startCounts = [];
              var idDeltas = [];
              var idRangeOffsets = [];
              var glyphIds = [];

              for (i = 0; i < segCount; i += 1) {
                var segment = t.segments[i];
                endCounts = endCounts.concat({
                  name: 'end_' + i,
                  type: 'USHORT',
                  value: segment.end
                });
                startCounts = startCounts.concat({
                  name: 'start_' + i,
                  type: 'USHORT',
                  value: segment.start
                });
                idDeltas = idDeltas.concat({
                  name: 'idDelta_' + i,
                  type: 'SHORT',
                  value: segment.delta
                });
                idRangeOffsets = idRangeOffsets.concat({
                  name: 'idRangeOffset_' + i,
                  type: 'USHORT',
                  value: segment.offset
                });

                if (segment.glyphId !== undefined) {
                  glyphIds = glyphIds.concat({
                    name: 'glyph_' + i,
                    type: 'USHORT',
                    value: segment.glyphId
                  });
                }
              }

              t.fields = t.fields.concat(endCounts);
              t.fields.push({
                name: 'reservedPad',
                type: 'USHORT',
                value: 0
              });
              t.fields = t.fields.concat(startCounts);
              t.fields = t.fields.concat(idDeltas);
              t.fields = t.fields.concat(idRangeOffsets);
              t.fields = t.fields.concat(glyphIds);
              t.length = 14 + // Subtable header
              endCounts.length * 2 + 2 + // reservedPad
              startCounts.length * 2 + idDeltas.length * 2 + idRangeOffsets.length * 2 + glyphIds.length * 2;
              return t;
            }

            var parse_1$1 = parseCmapTable;
            var make = makeCmapTable;
            var cmap = {
              parse: parse_1$1,
              make: make
            };

            // Drawing utility functions.

            function line(ctx, x1, y1, x2, y2) {
              ctx.beginPath();
              ctx.moveTo(x1, y1);
              ctx.lineTo(x2, y2);
              ctx.stroke();
            }

            var line_1 = line;
            var draw = {
              line: line_1
            };

            function getPathDefinition(glyph, path) {
              var _path = path || {
                commands: []
              };

              return {
                configurable: true,
                get: function () {
                  if (typeof _path === 'function') {
                    _path = _path();
                  }

                  return _path;
                },
                set: function (p) {
                  _path = p;
                }
              };
            } // A Glyph is an individual mark that often corresponds to a character.
            // Some glyphs, such as ligatures, are a combination of many characters.
            // Glyphs are the basic building blocks of a font.
            //
            // The `Glyph` class contains utility methods for drawing the path and its points.


            function Glyph(options) {
              // By putting all the code on a prototype function (which is only declared once)
              // we reduce the memory requirements for larger fonts by some 2%
              this.bindConstructorValues(options);
            }

            Glyph.prototype.bindConstructorValues = function (options) {
              this.index = options.index || 0; // These three values cannnot be deferred for memory optimization:

              this.name = options.name || null;
              this.unicode = options.unicode || undefined;
              this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : []; // But by binding these values only when necessary, we reduce can
              // the memory requirements by almost 3% for larger fonts.

              if (options.xMin) {
                this.xMin = options.xMin;
              }

              if (options.yMin) {
                this.yMin = options.yMin;
              }

              if (options.xMax) {
                this.xMax = options.xMax;
              }

              if (options.yMax) {
                this.yMax = options.yMax;
              }

              if (options.advanceWidth) {
                this.advanceWidth = options.advanceWidth;
              } // The path for a glyph is the most memory intensive, and is bound as a value
              // with a getter/setter to ensure we actually do path parsing only once the
              // path is actually needed by anything.


              Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
            };

            Glyph.prototype.addUnicode = function (unicode) {
              if (this.unicodes.length === 0) {
                this.unicode = unicode;
              }

              this.unicodes.push(unicode);
            }; // Convert the glyph to a Path we can draw on a drawing context.
            //
            // x - Horizontal position of the glyph. (default: 0)
            // y - Vertical position of the *baseline* of the glyph. (default: 0)
            // fontSize - Font size, in pixels (default: 72).


            Glyph.prototype.getPath = function (x, y, fontSize) {
              x = x !== undefined ? x : 0;
              y = y !== undefined ? y : 0;
              fontSize = fontSize !== undefined ? fontSize : 72;
              var scale = 1 / this.path.unitsPerEm * fontSize;
              var p = new path$1.Path();
              var commands = this.path.commands;

              for (var i = 0; i < commands.length; i += 1) {
                var cmd = commands[i];

                if (cmd.type === 'M') {
                  p.moveTo(x + cmd.x * scale, y + -cmd.y * scale);
                } else if (cmd.type === 'L') {
                  p.lineTo(x + cmd.x * scale, y + -cmd.y * scale);
                } else if (cmd.type === 'Q') {
                  p.quadraticCurveTo(x + cmd.x1 * scale, y + -cmd.y1 * scale, x + cmd.x * scale, y + -cmd.y * scale);
                } else if (cmd.type === 'C') {
                  p.curveTo(x + cmd.x1 * scale, y + -cmd.y1 * scale, x + cmd.x2 * scale, y + -cmd.y2 * scale, x + cmd.x * scale, y + -cmd.y * scale);
                } else if (cmd.type === 'Z') {
                  p.closePath();
                }
              }

              return p;
            }; // Split the glyph into contours.
            // This function is here for backwards compatibility, and to
            // provide raw access to the TrueType glyph outlines.


            Glyph.prototype.getContours = function () {
              if (this.points === undefined) {
                return [];
              }

              var contours = [];
              var currentContour = [];

              for (var i = 0; i < this.points.length; i += 1) {
                var pt = this.points[i];
                currentContour.push(pt);

                if (pt.lastPointOfContour) {
                  contours.push(currentContour);
                  currentContour = [];
                }
              }

              check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
              return contours;
            }; // Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.


            Glyph.prototype.getMetrics = function () {
              var commands = this.path.commands;
              var xCoords = [];
              var yCoords = [];

              for (var i = 0; i < commands.length; i += 1) {
                var cmd = commands[i];

                if (cmd.type !== 'Z') {
                  xCoords.push(cmd.x);
                  yCoords.push(cmd.y);
                }

                if (cmd.type === 'Q' || cmd.type === 'C') {
                  xCoords.push(cmd.x1);
                  yCoords.push(cmd.y1);
                }

                if (cmd.type === 'C') {
                  xCoords.push(cmd.x2);
                  yCoords.push(cmd.y2);
                }
              }

              var metrics = {
                xMin: Math.min.apply(null, xCoords),
                yMin: Math.min.apply(null, yCoords),
                xMax: Math.max.apply(null, xCoords),
                yMax: Math.max.apply(null, yCoords),
                leftSideBearing: 0
              };

              if (!isFinite(metrics.xMin)) {
                metrics.xMin = 0;
              }

              if (!isFinite(metrics.xMax)) {
                metrics.xMax = this.advanceWidth;
              }

              if (!isFinite(metrics.yMin)) {
                metrics.yMin = 0;
              }

              if (!isFinite(metrics.yMax)) {
                metrics.yMax = 0;
              }

              metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
              return metrics;
            }; // Draw the glyph on the given context.
            //
            // ctx - The drawing context.
            // x - Horizontal position of the glyph. (default: 0)
            // y - Vertical position of the *baseline* of the glyph. (default: 0)
            // fontSize - Font size, in pixels (default: 72).


            Glyph.prototype.draw = function (ctx, x, y, fontSize) {
              this.getPath(x, y, fontSize).draw(ctx);
            }; // Draw the points of the glyph.
            // On-curve points will be drawn in blue, off-curve points will be drawn in red.
            //
            // ctx - The drawing context.
            // x - Horizontal position of the glyph. (default: 0)
            // y - Vertical position of the *baseline* of the glyph. (default: 0)
            // fontSize - Font size, in pixels (default: 72).


            Glyph.prototype.drawPoints = function (ctx, x, y, fontSize) {
              function drawCircles(l, x, y, scale) {
                var PI_SQ = Math.PI * 2;
                ctx.beginPath();

                for (var j = 0; j < l.length; j += 1) {
                  ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);
                  ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);
                }

                ctx.closePath();
                ctx.fill();
              }

              x = x !== undefined ? x : 0;
              y = y !== undefined ? y : 0;
              fontSize = fontSize !== undefined ? fontSize : 24;
              var scale = 1 / this.path.unitsPerEm * fontSize;
              var blueCircles = [];
              var redCircles = [];
              var path = this.path;

              for (var i = 0; i < path.commands.length; i += 1) {
                var cmd = path.commands[i];

                if (cmd.x !== undefined) {
                  blueCircles.push({
                    x: cmd.x,
                    y: -cmd.y
                  });
                }

                if (cmd.x1 !== undefined) {
                  redCircles.push({
                    x: cmd.x1,
                    y: -cmd.y1
                  });
                }

                if (cmd.x2 !== undefined) {
                  redCircles.push({
                    x: cmd.x2,
                    y: -cmd.y2
                  });
                }
              }

              ctx.fillStyle = 'blue';
              drawCircles(blueCircles, x, y, scale);
              ctx.fillStyle = 'red';
              drawCircles(redCircles, x, y, scale);
            }; // Draw lines indicating important font measurements.
            // Black lines indicate the origin of the coordinate system (point 0,0).
            // Blue lines indicate the glyph bounding box.
            // Green line indicates the advance width of the glyph.
            //
            // ctx - The drawing context.
            // x - Horizontal position of the glyph. (default: 0)
            // y - Vertical position of the *baseline* of the glyph. (default: 0)
            // fontSize - Font size, in pixels (default: 72).


            Glyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {
              var scale;
              x = x !== undefined ? x : 0;
              y = y !== undefined ? y : 0;
              fontSize = fontSize !== undefined ? fontSize : 24;
              scale = 1 / this.path.unitsPerEm * fontSize;
              ctx.lineWidth = 1; // Draw the origin

              ctx.strokeStyle = 'black';
              draw.line(ctx, x, -10000, x, 10000);
              draw.line(ctx, -10000, y, 10000, y); // This code is here due to memory optimization: by not using
              // defaults in the constructor, we save a notable amount of memory.

              var xMin = this.xMin || 0;
              var yMin = this.yMin || 0;
              var xMax = this.xMax || 0;
              var yMax = this.yMax || 0;
              var advanceWidth = this.advanceWidth || 0; // Draw the glyph box

              ctx.strokeStyle = 'blue';
              draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);
              draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);
              draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);
              draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale); // Draw the advance width

              ctx.strokeStyle = 'green';
              draw.line(ctx, x + advanceWidth * scale, -10000, x + advanceWidth * scale, 10000);
            };

            var Glyph_1 = Glyph;
            var glyph = {
              Glyph: Glyph_1
            };

            // a deferred glyph loader, for retrieving glyphs only once they are absolutely
            // necessary, to keep the memory footprint down.


            function GlyphSet(font, glyphs) {
              this.font = font;
              this.glyphs = {};

              if (Array.isArray(glyphs)) {
                for (var i = 0; i < glyphs.length; i++) {
                  this.glyphs[i] = glyphs[i];
                }
              }

              this.length = glyphs && glyphs.length || 0;
            }

            GlyphSet.prototype.get = function (index) {
              if (typeof this.glyphs[index] === 'function') {
                this.glyphs[index] = this.glyphs[index]();
              }

              return this.glyphs[index];
            };

            GlyphSet.prototype.push = function (index, loader) {
              this.glyphs[index] = loader;
              this.length++;
            };

            function glyphLoader(font, index) {
              return new glyph.Glyph({
                index: index,
                font: font
              });
            }
            /**
             * Generate a stub glyph that can be filled with all metadata *except*
             * the "points" and "path" properties, which must be loaded only once
             * the glyph's path is actually requested for text shaping.
             */


            function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
              return function () {
                var glyph$1 = new glyph.Glyph({
                  index: index,
                  font: font
                });

                glyph$1.path = function () {
                  parseGlyph(glyph$1, data, position);
                  var path = buildPath(font.glyphs, glyph$1);
                  path.unitsPerEm = font.unitsPerEm;
                  return path;
                };

                return glyph$1;
              };
            }

            function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
              return function () {
                var glyph$1 = new glyph.Glyph({
                  index: index,
                  font: font
                });

                glyph$1.path = function () {
                  var path = parseCFFCharstring(font, glyph$1, charstring);
                  path.unitsPerEm = font.unitsPerEm;
                  return path;
                };

                return glyph$1;
              };
            }

            var GlyphSet_1 = GlyphSet;
            var glyphLoader_1 = glyphLoader;
            var ttfGlyphLoader_1 = ttfGlyphLoader;
            var cffGlyphLoader_1 = cffGlyphLoader;
            var glyphset = {
              GlyphSet: GlyphSet_1,
              glyphLoader: glyphLoader_1,
              ttfGlyphLoader: ttfGlyphLoader_1,
              cffGlyphLoader: cffGlyphLoader_1
            };

            function equals(a, b) {
              if (a === b) {
                return true;
              } else if (Array.isArray(a) && Array.isArray(b)) {
                if (a.length !== b.length) {
                  return false;
                }

                for (var i = 0; i < a.length; i += 1) {
                  if (!equals(a[i], b[i])) {
                    return false;
                  }
                }

                return true;
              } else {
                return false;
              }
            } // Parse a `CFF` INDEX array.
            // An index array consists of a list of offsets, then a list of objects at those offsets.


            function parseCFFIndex(data, start, conversionFn) {
              //var i, objectOffset, endOffset;
              var offsets = [];
              var objects = [];
              var count = parse$2.getCard16(data, start);
              var i;
              var objectOffset;
              var endOffset;

              if (count !== 0) {
                var offsetSize = parse$2.getByte(data, start + 2);
                objectOffset = start + (count + 1) * offsetSize + 2;
                var pos = start + 3;

                for (i = 0; i < count + 1; i += 1) {
                  offsets.push(parse$2.getOffset(data, pos, offsetSize));
                  pos += offsetSize;
                } // The total size of the index array is 4 header bytes + the value of the last offset.


                endOffset = objectOffset + offsets[count];
              } else {
                endOffset = start + 2;
              }

              for (i = 0; i < offsets.length - 1; i += 1) {
                var value = parse$2.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);

                if (conversionFn) {
                  value = conversionFn(value);
                }

                objects.push(value);
              }

              return {
                objects: objects,
                startOffset: start,
                endOffset: endOffset
              };
            } // Parse a `CFF` DICT real value.


            function parseFloatOperand(parser) {
              var s = '';
              var eof = 15;
              var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];

              while (true) {
                var b = parser.parseByte();
                var n1 = b >> 4;
                var n2 = b & 15;

                if (n1 === eof) {
                  break;
                }

                s += lookup[n1];

                if (n2 === eof) {
                  break;
                }

                s += lookup[n2];
              }

              return parseFloat(s);
            } // Parse a `CFF` DICT operand.


            function parseOperand(parser, b0) {
              var b1;
              var b2;
              var b3;
              var b4;

              if (b0 === 28) {
                b1 = parser.parseByte();
                b2 = parser.parseByte();
                return b1 << 8 | b2;
              }

              if (b0 === 29) {
                b1 = parser.parseByte();
                b2 = parser.parseByte();
                b3 = parser.parseByte();
                b4 = parser.parseByte();
                return b1 << 24 | b2 << 16 | b3 << 8 | b4;
              }

              if (b0 === 30) {
                return parseFloatOperand(parser);
              }

              if (b0 >= 32 && b0 <= 246) {
                return b0 - 139;
              }

              if (b0 >= 247 && b0 <= 250) {
                b1 = parser.parseByte();
                return (b0 - 247) * 256 + b1 + 108;
              }

              if (b0 >= 251 && b0 <= 254) {
                b1 = parser.parseByte();
                return -(b0 - 251) * 256 - b1 - 108;
              }

              throw new Error('Invalid b0 ' + b0);
            } // Convert the entries returned by `parseDict` to a proper dictionary.
            // If a value is a list of one, it is unpacked.


            function entriesToObject(entries) {
              var o = {};

              for (var i = 0; i < entries.length; i += 1) {
                var key = entries[i][0];
                var values = entries[i][1];
                var value;

                if (values.length === 1) {
                  value = values[0];
                } else {
                  value = values;
                }

                if (o.hasOwnProperty(key)) {
                  throw new Error('Object ' + o + ' already has key ' + key);
                }

                o[key] = value;
              }

              return o;
            } // Parse a `CFF` DICT object.
            // A dictionary contains key-value pairs in a compact tokenized format.


            function parseCFFDict(data, start, size) {
              start = start !== undefined ? start : 0;
              var parser = new parse$2.Parser(data, start);
              var entries = [];
              var operands = [];
              size = size !== undefined ? size : data.length;

              while (parser.relativeOffset < size) {
                var op = parser.parseByte(); // The first byte for each dict item distinguishes between operator (key) and operand (value).
                // Values <= 21 are operators.

                if (op <= 21) {
                  // Two-byte operators have an initial escape byte of 12.
                  if (op === 12) {
                    op = 1200 + parser.parseByte();
                  }

                  entries.push([op, operands]);
                  operands = [];
                } else {
                  // Since the operands (values) come before the operators (keys), we store all operands in a list
                  // until we encounter an operator.
                  operands.push(parseOperand(parser, op));
                }
              }

              return entriesToObject(entries);
            } // Given a String Index (SID), return the value of the string.
            // Strings below index 392 are standard CFF strings and are not encoded in the font.


            function getCFFString(strings, index) {
              if (index <= 390) {
                index = encoding.cffStandardStrings[index];
              } else {
                index = strings[index - 391];
              }

              return index;
            } // Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
            // This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.


            function interpretDict(dict, meta, strings) {
              var newDict = {}; // Because we also want to include missing values, we start out from the meta list
              // and lookup values in the dict.

              for (var i = 0; i < meta.length; i += 1) {
                var m = meta[i];
                var value = dict[m.op];

                if (value === undefined) {
                  value = m.value !== undefined ? m.value : null;
                }

                if (m.type === 'SID') {
                  value = getCFFString(strings, value);
                }

                newDict[m.name] = value;
              }

              return newDict;
            } // Parse the CFF header.


            function parseCFFHeader(data, start) {
              var header = {};
              header.formatMajor = parse$2.getCard8(data, start);
              header.formatMinor = parse$2.getCard8(data, start + 1);
              header.size = parse$2.getCard8(data, start + 2);
              header.offsetSize = parse$2.getCard8(data, start + 3);
              header.startOffset = start;
              header.endOffset = start + 4;
              return header;
            }

            var TOP_DICT_META = [{
              name: 'version',
              op: 0,
              type: 'SID'
            }, {
              name: 'notice',
              op: 1,
              type: 'SID'
            }, {
              name: 'copyright',
              op: 1200,
              type: 'SID'
            }, {
              name: 'fullName',
              op: 2,
              type: 'SID'
            }, {
              name: 'familyName',
              op: 3,
              type: 'SID'
            }, {
              name: 'weight',
              op: 4,
              type: 'SID'
            }, {
              name: 'isFixedPitch',
              op: 1201,
              type: 'number',
              value: 0
            }, {
              name: 'italicAngle',
              op: 1202,
              type: 'number',
              value: 0
            }, {
              name: 'underlinePosition',
              op: 1203,
              type: 'number',
              value: -100
            }, {
              name: 'underlineThickness',
              op: 1204,
              type: 'number',
              value: 50
            }, {
              name: 'paintType',
              op: 1205,
              type: 'number',
              value: 0
            }, {
              name: 'charstringType',
              op: 1206,
              type: 'number',
              value: 2
            }, {
              name: 'fontMatrix',
              op: 1207,
              type: ['real', 'real', 'real', 'real', 'real', 'real'],
              value: [0.001, 0, 0, 0.001, 0, 0]
            }, {
              name: 'uniqueId',
              op: 13,
              type: 'number'
            }, {
              name: 'fontBBox',
              op: 5,
              type: ['number', 'number', 'number', 'number'],
              value: [0, 0, 0, 0]
            }, {
              name: 'strokeWidth',
              op: 1208,
              type: 'number',
              value: 0
            }, {
              name: 'xuid',
              op: 14,
              type: [],
              value: null
            }, {
              name: 'charset',
              op: 15,
              type: 'offset',
              value: 0
            }, {
              name: 'encoding',
              op: 16,
              type: 'offset',
              value: 0
            }, {
              name: 'charStrings',
              op: 17,
              type: 'offset',
              value: 0
            }, {
              name: 'private',
              op: 18,
              type: ['number', 'offset'],
              value: [0, 0]
            }];
            var PRIVATE_DICT_META = [{
              name: 'subrs',
              op: 19,
              type: 'offset',
              value: 0
            }, {
              name: 'defaultWidthX',
              op: 20,
              type: 'number',
              value: 0
            }, {
              name: 'nominalWidthX',
              op: 21,
              type: 'number',
              value: 0
            }]; // Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
            // The top dictionary contains the essential metadata for the font, together with the private dictionary.

            function parseCFFTopDict(data, strings) {
              var dict = parseCFFDict(data, 0, data.byteLength);
              return interpretDict(dict, TOP_DICT_META, strings);
            } // Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.


            function parseCFFPrivateDict(data, start, size, strings) {
              var dict = parseCFFDict(data, start, size);
              return interpretDict(dict, PRIVATE_DICT_META, strings);
            } // Parse the CFF charset table, which contains internal names for all the glyphs.
            // This function will return a list of glyph names.
            // See Adobe TN #5176 chapter 13, "Charsets".


            function parseCFFCharset(data, start, nGlyphs, strings) {
              var i;
              var sid;
              var count;
              var parser = new parse$2.Parser(data, start); // The .notdef glyph is not included, so subtract 1.

              nGlyphs -= 1;
              var charset = ['.notdef'];
              var format = parser.parseCard8();

              if (format === 0) {
                for (i = 0; i < nGlyphs; i += 1) {
                  sid = parser.parseSID();
                  charset.push(getCFFString(strings, sid));
                }
              } else if (format === 1) {
                while (charset.length <= nGlyphs) {
                  sid = parser.parseSID();
                  count = parser.parseCard8();

                  for (i = 0; i <= count; i += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                  }
                }
              } else if (format === 2) {
                while (charset.length <= nGlyphs) {
                  sid = parser.parseSID();
                  count = parser.parseCard16();

                  for (i = 0; i <= count; i += 1) {
                    charset.push(getCFFString(strings, sid));
                    sid += 1;
                  }
                }
              } else {
                throw new Error('Unknown charset format ' + format);
              }

              return charset;
            } // Parse the CFF encoding data. Only one encoding can be specified per font.
            // See Adobe TN #5176 chapter 12, "Encodings".


            function parseCFFEncoding(data, start, charset) {
              var i;
              var code;
              var enc = {};
              var parser = new parse$2.Parser(data, start);
              var format = parser.parseCard8();

              if (format === 0) {
                var nCodes = parser.parseCard8();

                for (i = 0; i < nCodes; i += 1) {
                  code = parser.parseCard8();
                  enc[code] = i;
                }
              } else if (format === 1) {
                var nRanges = parser.parseCard8();
                code = 1;

                for (i = 0; i < nRanges; i += 1) {
                  var first = parser.parseCard8();
                  var nLeft = parser.parseCard8();

                  for (var j = first; j <= first + nLeft; j += 1) {
                    enc[j] = code;
                    code += 1;
                  }
                }
              } else {
                throw new Error('Unknown encoding format ' + format);
              }

              return new encoding.CffEncoding(enc, charset);
            } // Take in charstring code and return a Glyph object.
            // The encoding is described in the Type 2 Charstring Format
            // https://www.microsoft.com/typography/OTSPEC/charstr2.htm


            function parseCFFCharstring(font, glyph, code) {
              var c1x;
              var c1y;
              var c2x;
              var c2y;
              var p = new path$1.Path();
              var stack = [];
              var nStems = 0;
              var haveWidth = false;
              var width = font.defaultWidthX;
              var open = false;
              var x = 0;
              var y = 0;

              function newContour(x, y) {
                if (open) {
                  p.closePath();
                }

                p.moveTo(x, y);
                open = true;
              }

              function parseStems() {
                var hasWidthArg; // The number of stem operators on the stack is always even.
                // If the value is uneven, that means a width is specified.

                hasWidthArg = stack.length % 2 !== 0;

                if (hasWidthArg && !haveWidth) {
                  width = stack.shift() + font.nominalWidthX;
                }

                nStems += stack.length >> 1;
                stack.length = 0;
                haveWidth = true;
              }

              function parse(code) {
                var b1;
                var b2;
                var b3;
                var b4;
                var codeIndex;
                var subrCode;
                var jpx;
                var jpy;
                var c3x;
                var c3y;
                var c4x;
                var c4y;
                var i = 0;

                while (i < code.length) {
                  var v = code[i];
                  i += 1;

                  switch (v) {
                    case 1:
                      // hstem
                      parseStems();
                      break;

                    case 3:
                      // vstem
                      parseStems();
                      break;

                    case 4:
                      // vmoveto
                      if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + font.nominalWidthX;
                        haveWidth = true;
                      }

                      y += stack.pop();
                      newContour(x, y);
                      break;

                    case 5:
                      // rlineto
                      while (stack.length > 0) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                      }

                      break;

                    case 6:
                      // hlineto
                      while (stack.length > 0) {
                        x += stack.shift();
                        p.lineTo(x, y);

                        if (stack.length === 0) {
                          break;
                        }

                        y += stack.shift();
                        p.lineTo(x, y);
                      }

                      break;

                    case 7:
                      // vlineto
                      while (stack.length > 0) {
                        y += stack.shift();
                        p.lineTo(x, y);

                        if (stack.length === 0) {
                          break;
                        }

                        x += stack.shift();
                        p.lineTo(x, y);
                      }

                      break;

                    case 8:
                      // rrcurveto
                      while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 10:
                      // callsubr
                      codeIndex = stack.pop() + font.subrsBias;
                      subrCode = font.subrs[codeIndex];

                      if (subrCode) {
                        parse(subrCode);
                      }

                      break;

                    case 11:
                      // return
                      return;

                    case 12:
                      // flex operators
                      v = code[i];
                      i += 1;

                      switch (v) {
                        case 35:
                          // flex
                          // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                          c1x = x + stack.shift(); // dx1

                          c1y = y + stack.shift(); // dy1

                          c2x = c1x + stack.shift(); // dx2

                          c2y = c1y + stack.shift(); // dy2

                          jpx = c2x + stack.shift(); // dx3

                          jpy = c2y + stack.shift(); // dy3

                          c3x = jpx + stack.shift(); // dx4

                          c3y = jpy + stack.shift(); // dy4

                          c4x = c3x + stack.shift(); // dx5

                          c4y = c3y + stack.shift(); // dy5

                          x = c4x + stack.shift(); // dx6

                          y = c4y + stack.shift(); // dy6

                          stack.shift(); // flex depth

                          p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                          p.curveTo(c3x, c3y, c4x, c4y, x, y);
                          break;

                        case 34:
                          // hflex
                          // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                          c1x = x + stack.shift(); // dx1

                          c1y = y; // dy1

                          c2x = c1x + stack.shift(); // dx2

                          c2y = c1y + stack.shift(); // dy2

                          jpx = c2x + stack.shift(); // dx3

                          jpy = c2y; // dy3

                          c3x = jpx + stack.shift(); // dx4

                          c3y = c2y; // dy4

                          c4x = c3x + stack.shift(); // dx5

                          c4y = y; // dy5

                          x = c4x + stack.shift(); // dx6

                          p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                          p.curveTo(c3x, c3y, c4x, c4y, x, y);
                          break;

                        case 36:
                          // hflex1
                          // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                          c1x = x + stack.shift(); // dx1

                          c1y = y + stack.shift(); // dy1

                          c2x = c1x + stack.shift(); // dx2

                          c2y = c1y + stack.shift(); // dy2

                          jpx = c2x + stack.shift(); // dx3

                          jpy = c2y; // dy3

                          c3x = jpx + stack.shift(); // dx4

                          c3y = c2y; // dy4

                          c4x = c3x + stack.shift(); // dx5

                          c4y = c3y + stack.shift(); // dy5

                          x = c4x + stack.shift(); // dx6

                          p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                          p.curveTo(c3x, c3y, c4x, c4y, x, y);
                          break;

                        case 37:
                          // flex1
                          // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                          c1x = x + stack.shift(); // dx1

                          c1y = y + stack.shift(); // dy1

                          c2x = c1x + stack.shift(); // dx2

                          c2y = c1y + stack.shift(); // dy2

                          jpx = c2x + stack.shift(); // dx3

                          jpy = c2y + stack.shift(); // dy3

                          c3x = jpx + stack.shift(); // dx4

                          c3y = jpy + stack.shift(); // dy4

                          c4x = c3x + stack.shift(); // dx5

                          c4y = c3y + stack.shift(); // dy5

                          if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                            x = c4x + stack.shift();
                          } else {
                            y = c4y + stack.shift();
                          }

                          p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                          p.curveTo(c3x, c3y, c4x, c4y, x, y);
                          break;

                        default:
                          console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                          stack.length = 0;
                      }

                      break;

                    case 14:
                      // endchar
                      if (stack.length > 0 && !haveWidth) {
                        width = stack.shift() + font.nominalWidthX;
                        haveWidth = true;
                      }

                      if (open) {
                        p.closePath();
                        open = false;
                      }

                      break;

                    case 18:
                      // hstemhm
                      parseStems();
                      break;

                    case 19: // hintmask

                    case 20:
                      // cntrmask
                      parseStems();
                      i += nStems + 7 >> 3;
                      break;

                    case 21:
                      // rmoveto
                      if (stack.length > 2 && !haveWidth) {
                        width = stack.shift() + font.nominalWidthX;
                        haveWidth = true;
                      }

                      y += stack.pop();
                      x += stack.pop();
                      newContour(x, y);
                      break;

                    case 22:
                      // hmoveto
                      if (stack.length > 1 && !haveWidth) {
                        width = stack.shift() + font.nominalWidthX;
                        haveWidth = true;
                      }

                      x += stack.pop();
                      newContour(x, y);
                      break;

                    case 23:
                      // vstemhm
                      parseStems();
                      break;

                    case 24:
                      // rcurveline
                      while (stack.length > 2) {
                        c1x = x + stack.shift();
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      x += stack.shift();
                      y += stack.shift();
                      p.lineTo(x, y);
                      break;

                    case 25:
                      // rlinecurve
                      while (stack.length > 6) {
                        x += stack.shift();
                        y += stack.shift();
                        p.lineTo(x, y);
                      }

                      c1x = x + stack.shift();
                      c1y = y + stack.shift();
                      c2x = c1x + stack.shift();
                      c2y = c1y + stack.shift();
                      x = c2x + stack.shift();
                      y = c2y + stack.shift();
                      p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      break;

                    case 26:
                      // vvcurveto
                      if (stack.length % 2) {
                        x += stack.shift();
                      }

                      while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x;
                        y = c2y + stack.shift();
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 27:
                      // hhcurveto
                      if (stack.length % 2) {
                        y += stack.shift();
                      }

                      while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y;
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 28:
                      // shortint
                      b1 = code[i];
                      b2 = code[i + 1];
                      stack.push((b1 << 24 | b2 << 16) >> 16);
                      i += 2;
                      break;

                    case 29:
                      // callgsubr
                      codeIndex = stack.pop() + font.gsubrsBias;
                      subrCode = font.gsubrs[codeIndex];

                      if (subrCode) {
                        parse(subrCode);
                      }

                      break;

                    case 30:
                      // vhcurveto
                      while (stack.length > 0) {
                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);

                        if (stack.length === 0) {
                          break;
                        }

                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    case 31:
                      // hvcurveto
                      while (stack.length > 0) {
                        c1x = x + stack.shift();
                        c1y = y;
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        y = c2y + stack.shift();
                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);

                        if (stack.length === 0) {
                          break;
                        }

                        c1x = x;
                        c1y = y + stack.shift();
                        c2x = c1x + stack.shift();
                        c2y = c1y + stack.shift();
                        x = c2x + stack.shift();
                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                      }

                      break;

                    default:
                      if (v < 32) {
                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                      } else if (v < 247) {
                        stack.push(v - 139);
                      } else if (v < 251) {
                        b1 = code[i];
                        i += 1;
                        stack.push((v - 247) * 256 + b1 + 108);
                      } else if (v < 255) {
                        b1 = code[i];
                        i += 1;
                        stack.push(-(v - 251) * 256 - b1 - 108);
                      } else {
                        b1 = code[i];
                        b2 = code[i + 1];
                        b3 = code[i + 2];
                        b4 = code[i + 3];
                        i += 4;
                        stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);
                      }

                  }
                }
              }

              parse(code);
              glyph.advanceWidth = width;
              return p;
            } // Subroutines are encoded using the negative half of the number space.
            // See type 2 chapter 4.7 "Subroutine operators".


            function calcCFFSubroutineBias(subrs) {
              var bias;

              if (subrs.length < 1240) {
                bias = 107;
              } else if (subrs.length < 33900) {
                bias = 1131;
              } else {
                bias = 32768;
              }

              return bias;
            } // Parse the `CFF` table, which contains the glyph outlines in PostScript format.


            function parseCFFTable(data, start, font) {
              font.tables.cff = {};
              var header = parseCFFHeader(data, start);
              var nameIndex = parseCFFIndex(data, header.endOffset, parse$2.bytesToString);
              var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
              var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse$2.bytesToString);
              var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
              font.gsubrs = globalSubrIndex.objects;
              font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);
              var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);
              var topDict = parseCFFTopDict(topDictData, stringIndex.objects);
              font.tables.cff.topDict = topDict;
              var privateDictOffset = start + topDict['private'][1];
              var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);
              font.defaultWidthX = privateDict.defaultWidthX;
              font.nominalWidthX = privateDict.nominalWidthX;

              if (privateDict.subrs !== 0) {
                var subrOffset = privateDictOffset + privateDict.subrs;
                var subrIndex = parseCFFIndex(data, subrOffset);
                font.subrs = subrIndex.objects;
                font.subrsBias = calcCFFSubroutineBias(font.subrs);
              } else {
                font.subrs = [];
                font.subrsBias = 0;
              } // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.


              var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
              font.nGlyphs = charStringsIndex.objects.length;
              var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);

              if (topDict.encoding === 0) {
                // Standard encoding
                font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);
              } else if (topDict.encoding === 1) {
                // Expert encoding
                font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);
              } else {
                font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
              } // Prefer the CMAP encoding to the CFF encoding.


              font.encoding = font.encoding || font.cffEncoding;
              font.glyphs = new glyphset.GlyphSet(font);

              for (var i = 0; i < font.nGlyphs; i += 1) {
                var charString = charStringsIndex.objects[i];
                font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
              }
            } // Convert a string to a String ID (SID).
            // The list of strings is modified in place.


            function encodeString(s, strings) {
              var sid; // Is the string in the CFF standard strings?

              var i = encoding.cffStandardStrings.indexOf(s);

              if (i >= 0) {
                sid = i;
              } // Is the string already in the string index?


              i = strings.indexOf(s);

              if (i >= 0) {
                sid = i + encoding.cffStandardStrings.length;
              } else {
                sid = encoding.cffStandardStrings.length + strings.length;
                strings.push(s);
              }

              return sid;
            }

            function makeHeader() {
              return new table.Table('Header', [{
                name: 'major',
                type: 'Card8',
                value: 1
              }, {
                name: 'minor',
                type: 'Card8',
                value: 0
              }, {
                name: 'hdrSize',
                type: 'Card8',
                value: 4
              }, {
                name: 'major',
                type: 'Card8',
                value: 1
              }]);
            }

            function makeNameIndex(fontNames) {
              var t = new table.Table('Name INDEX', [{
                name: 'names',
                type: 'INDEX',
                value: []
              }]);
              t.names = [];

              for (var i = 0; i < fontNames.length; i += 1) {
                t.names.push({
                  name: 'name_' + i,
                  type: 'NAME',
                  value: fontNames[i]
                });
              }

              return t;
            } // Given a dictionary's metadata, create a DICT structure.


            function makeDict(meta, attrs, strings) {
              var m = {};

              for (var i = 0; i < meta.length; i += 1) {
                var entry = meta[i];
                var value = attrs[entry.name];

                if (value !== undefined && !equals(value, entry.value)) {
                  if (entry.type === 'SID') {
                    value = encodeString(value, strings);
                  }

                  m[entry.op] = {
                    name: entry.name,
                    type: entry.type,
                    value: value
                  };
                }
              }

              return m;
            } // The Top DICT houses the global font attributes.


            function makeTopDict(attrs, strings) {
              var t = new table.Table('Top DICT', [{
                name: 'dict',
                type: 'DICT',
                value: {}
              }]);
              t.dict = makeDict(TOP_DICT_META, attrs, strings);
              return t;
            }

            function makeTopDictIndex(topDict) {
              var t = new table.Table('Top DICT INDEX', [{
                name: 'topDicts',
                type: 'INDEX',
                value: []
              }]);
              t.topDicts = [{
                name: 'topDict_0',
                type: 'TABLE',
                value: topDict
              }];
              return t;
            }

            function makeStringIndex(strings) {
              var t = new table.Table('String INDEX', [{
                name: 'strings',
                type: 'INDEX',
                value: []
              }]);
              t.strings = [];

              for (var i = 0; i < strings.length; i += 1) {
                t.strings.push({
                  name: 'string_' + i,
                  type: 'STRING',
                  value: strings[i]
                });
              }

              return t;
            }

            function makeGlobalSubrIndex() {
              // Currently we don't use subroutines.
              return new table.Table('Global Subr INDEX', [{
                name: 'subrs',
                type: 'INDEX',
                value: []
              }]);
            }

            function makeCharsets(glyphNames, strings) {
              var t = new table.Table('Charsets', [{
                name: 'format',
                type: 'Card8',
                value: 0
              }]);

              for (var i = 0; i < glyphNames.length; i += 1) {
                var glyphName = glyphNames[i];
                var glyphSID = encodeString(glyphName, strings);
                t.fields.push({
                  name: 'glyph_' + i,
                  type: 'SID',
                  value: glyphSID
                });
              }

              return t;
            }

            function glyphToOps(glyph) {
              var ops = [];
              var path = glyph.path;
              ops.push({
                name: 'width',
                type: 'NUMBER',
                value: glyph.advanceWidth
              });
              var x = 0;
              var y = 0;

              for (var i = 0; i < path.commands.length; i += 1) {
                var dx;
                var dy;
                var cmd = path.commands[i];

                if (cmd.type === 'Q') {
                  // CFF only supports bézier curves, so convert the quad to a bézier.
                  var _13 = 1 / 3;

                  var _23 = 2 / 3; // We're going to create a new command so we don't change the original path.


                  cmd = {
                    type: 'C',
                    x: cmd.x,
                    y: cmd.y,
                    x1: _13 * x + _23 * cmd.x1,
                    y1: _13 * y + _23 * cmd.y1,
                    x2: _13 * cmd.x + _23 * cmd.x1,
                    y2: _13 * cmd.y + _23 * cmd.y1
                  };
                }

                if (cmd.type === 'M') {
                  dx = Math.round(cmd.x - x);
                  dy = Math.round(cmd.y - y);
                  ops.push({
                    name: 'dx',
                    type: 'NUMBER',
                    value: dx
                  });
                  ops.push({
                    name: 'dy',
                    type: 'NUMBER',
                    value: dy
                  });
                  ops.push({
                    name: 'rmoveto',
                    type: 'OP',
                    value: 21
                  });
                  x = Math.round(cmd.x);
                  y = Math.round(cmd.y);
                } else if (cmd.type === 'L') {
                  dx = Math.round(cmd.x - x);
                  dy = Math.round(cmd.y - y);
                  ops.push({
                    name: 'dx',
                    type: 'NUMBER',
                    value: dx
                  });
                  ops.push({
                    name: 'dy',
                    type: 'NUMBER',
                    value: dy
                  });
                  ops.push({
                    name: 'rlineto',
                    type: 'OP',
                    value: 5
                  });
                  x = Math.round(cmd.x);
                  y = Math.round(cmd.y);
                } else if (cmd.type === 'C') {
                  var dx1 = Math.round(cmd.x1 - x);
                  var dy1 = Math.round(cmd.y1 - y);
                  var dx2 = Math.round(cmd.x2 - cmd.x1);
                  var dy2 = Math.round(cmd.y2 - cmd.y1);
                  dx = Math.round(cmd.x - cmd.x2);
                  dy = Math.round(cmd.y - cmd.y2);
                  ops.push({
                    name: 'dx1',
                    type: 'NUMBER',
                    value: dx1
                  });
                  ops.push({
                    name: 'dy1',
                    type: 'NUMBER',
                    value: dy1
                  });
                  ops.push({
                    name: 'dx2',
                    type: 'NUMBER',
                    value: dx2
                  });
                  ops.push({
                    name: 'dy2',
                    type: 'NUMBER',
                    value: dy2
                  });
                  ops.push({
                    name: 'dx',
                    type: 'NUMBER',
                    value: dx
                  });
                  ops.push({
                    name: 'dy',
                    type: 'NUMBER',
                    value: dy
                  });
                  ops.push({
                    name: 'rrcurveto',
                    type: 'OP',
                    value: 8
                  });
                  x = Math.round(cmd.x);
                  y = Math.round(cmd.y);
                } // Contours are closed automatically.

              }

              ops.push({
                name: 'endchar',
                type: 'OP',
                value: 14
              });
              return ops;
            }

            function makeCharStringsIndex(glyphs) {
              var t = new table.Table('CharStrings INDEX', [{
                name: 'charStrings',
                type: 'INDEX',
                value: []
              }]);

              for (var i = 0; i < glyphs.length; i += 1) {
                var glyph = glyphs.get(i);
                var ops = glyphToOps(glyph);
                t.charStrings.push({
                  name: glyph.name,
                  type: 'CHARSTRING',
                  value: ops
                });
              }

              return t;
            }

            function makePrivateDict(attrs, strings) {
              var t = new table.Table('Private DICT', [{
                name: 'dict',
                type: 'DICT',
                value: {}
              }]);
              t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
              return t;
            }

            function makePrivateDictIndex(privateDict) {
              var t = new table.Table('Private DICT INDEX', [{
                name: 'privateDicts',
                type: 'INDEX',
                value: []
              }]);
              t.privateDicts = [{
                name: 'privateDict_0',
                type: 'TABLE',
                value: privateDict
              }];
              return t;
            }

            function makeCFFTable(glyphs, options) {
              var t = new table.Table('CFF ', [{
                name: 'header',
                type: 'TABLE'
              }, {
                name: 'nameIndex',
                type: 'TABLE'
              }, {
                name: 'topDictIndex',
                type: 'TABLE'
              }, {
                name: 'stringIndex',
                type: 'TABLE'
              }, {
                name: 'globalSubrIndex',
                type: 'TABLE'
              }, {
                name: 'charsets',
                type: 'TABLE'
              }, {
                name: 'charStringsIndex',
                type: 'TABLE'
              }, {
                name: 'privateDictIndex',
                type: 'TABLE'
              }]);
              var fontScale = 1 / options.unitsPerEm; // We use non-zero values for the offsets so that the DICT encodes them.
              // This is important because the size of the Top DICT plays a role in offset calculation,
              // and the size shouldn't change after we've written correct offsets.

              var attrs = {
                version: options.version,
                fullName: options.fullName,
                familyName: options.familyName,
                weight: options.weightName,
                fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
                charset: 999,
                encoding: 0,
                charStrings: 999,
                private: [0, 999]
              };
              var privateAttrs = {};
              var glyphNames = [];
              var glyph; // Skip first glyph (.notdef)

              for (var i = 1; i < glyphs.length; i += 1) {
                glyph = glyphs.get(i);
                glyphNames.push(glyph.name);
              }

              var strings = [];
              t.header = makeHeader();
              t.nameIndex = makeNameIndex([options.postScriptName]);
              var topDict = makeTopDict(attrs, strings);
              t.topDictIndex = makeTopDictIndex(topDict);
              t.globalSubrIndex = makeGlobalSubrIndex();
              t.charsets = makeCharsets(glyphNames, strings);
              t.charStringsIndex = makeCharStringsIndex(glyphs);
              var privateDict = makePrivateDict(privateAttrs, strings);
              t.privateDictIndex = makePrivateDictIndex(privateDict); // Needs to come at the end, to encode all custom strings used in the font.

              t.stringIndex = makeStringIndex(strings);
              var startOffset = t.header.sizeOf() + t.nameIndex.sizeOf() + t.topDictIndex.sizeOf() + t.stringIndex.sizeOf() + t.globalSubrIndex.sizeOf();
              attrs.charset = startOffset; // We use the CFF standard encoding; proper encoding will be handled in cmap.

              attrs.encoding = 0;
              attrs.charStrings = attrs.charset + t.charsets.sizeOf();
              attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf(); // Recreate the Top DICT INDEX with the correct offsets.

              topDict = makeTopDict(attrs, strings);
              t.topDictIndex = makeTopDictIndex(topDict);
              return t;
            }

            var parse_1$2 = parseCFFTable;
            var make$1 = makeCFFTable;
            var cff = {
              parse: parse_1$2,
              make: make$1
            };

            function parseHeadTable(data, start) {
              var head = {};
              var p = new parse$2.Parser(data, start);
              head.version = p.parseVersion();
              head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
              head.checkSumAdjustment = p.parseULong();
              head.magicNumber = p.parseULong();
              check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
              head.flags = p.parseUShort();
              head.unitsPerEm = p.parseUShort();
              head.created = p.parseLongDateTime();
              head.modified = p.parseLongDateTime();
              head.xMin = p.parseShort();
              head.yMin = p.parseShort();
              head.xMax = p.parseShort();
              head.yMax = p.parseShort();
              head.macStyle = p.parseUShort();
              head.lowestRecPPEM = p.parseUShort();
              head.fontDirectionHint = p.parseShort();
              head.indexToLocFormat = p.parseShort(); // 50

              head.glyphDataFormat = p.parseShort();
              return head;
            }

            function makeHeadTable(options) {
              return new table.Table('head', [{
                name: 'version',
                type: 'FIXED',
                value: 0x00010000
              }, {
                name: 'fontRevision',
                type: 'FIXED',
                value: 0x00010000
              }, {
                name: 'checkSumAdjustment',
                type: 'ULONG',
                value: 0
              }, {
                name: 'magicNumber',
                type: 'ULONG',
                value: 0x5F0F3CF5
              }, {
                name: 'flags',
                type: 'USHORT',
                value: 0
              }, {
                name: 'unitsPerEm',
                type: 'USHORT',
                value: 1000
              }, {
                name: 'created',
                type: 'LONGDATETIME',
                value: 0
              }, {
                name: 'modified',
                type: 'LONGDATETIME',
                value: 0
              }, {
                name: 'xMin',
                type: 'SHORT',
                value: 0
              }, {
                name: 'yMin',
                type: 'SHORT',
                value: 0
              }, {
                name: 'xMax',
                type: 'SHORT',
                value: 0
              }, {
                name: 'yMax',
                type: 'SHORT',
                value: 0
              }, {
                name: 'macStyle',
                type: 'USHORT',
                value: 0
              }, {
                name: 'lowestRecPPEM',
                type: 'USHORT',
                value: 0
              }, {
                name: 'fontDirectionHint',
                type: 'SHORT',
                value: 2
              }, {
                name: 'indexToLocFormat',
                type: 'SHORT',
                value: 0
              }, {
                name: 'glyphDataFormat',
                type: 'SHORT',
                value: 0
              }], options);
            }

            var parse_1$3 = parseHeadTable;
            var make$2 = makeHeadTable;
            var head = {
              parse: parse_1$3,
              make: make$2
            };

            function parseHheaTable(data, start) {
              var hhea = {};
              var p = new parse$2.Parser(data, start);
              hhea.version = p.parseVersion();
              hhea.ascender = p.parseShort();
              hhea.descender = p.parseShort();
              hhea.lineGap = p.parseShort();
              hhea.advanceWidthMax = p.parseUShort();
              hhea.minLeftSideBearing = p.parseShort();
              hhea.minRightSideBearing = p.parseShort();
              hhea.xMaxExtent = p.parseShort();
              hhea.caretSlopeRise = p.parseShort();
              hhea.caretSlopeRun = p.parseShort();
              hhea.caretOffset = p.parseShort();
              p.relativeOffset += 8;
              hhea.metricDataFormat = p.parseShort();
              hhea.numberOfHMetrics = p.parseUShort();
              return hhea;
            }

            function makeHheaTable(options) {
              return new table.Table('hhea', [{
                name: 'version',
                type: 'FIXED',
                value: 0x00010000
              }, {
                name: 'ascender',
                type: 'FWORD',
                value: 0
              }, {
                name: 'descender',
                type: 'FWORD',
                value: 0
              }, {
                name: 'lineGap',
                type: 'FWORD',
                value: 0
              }, {
                name: 'advanceWidthMax',
                type: 'UFWORD',
                value: 0
              }, {
                name: 'minLeftSideBearing',
                type: 'FWORD',
                value: 0
              }, {
                name: 'minRightSideBearing',
                type: 'FWORD',
                value: 0
              }, {
                name: 'xMaxExtent',
                type: 'FWORD',
                value: 0
              }, {
                name: 'caretSlopeRise',
                type: 'SHORT',
                value: 1
              }, {
                name: 'caretSlopeRun',
                type: 'SHORT',
                value: 0
              }, {
                name: 'caretOffset',
                type: 'SHORT',
                value: 0
              }, {
                name: 'reserved1',
                type: 'SHORT',
                value: 0
              }, {
                name: 'reserved2',
                type: 'SHORT',
                value: 0
              }, {
                name: 'reserved3',
                type: 'SHORT',
                value: 0
              }, {
                name: 'reserved4',
                type: 'SHORT',
                value: 0
              }, {
                name: 'metricDataFormat',
                type: 'SHORT',
                value: 0
              }, {
                name: 'numberOfHMetrics',
                type: 'USHORT',
                value: 0
              }], options);
            }

            var parse_1$4 = parseHheaTable;
            var make$3 = makeHheaTable;
            var hhea = {
              parse: parse_1$4,
              make: make$3
            };

            // This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.


            function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
              var advanceWidth;
              var leftSideBearing;
              var p = new parse$2.Parser(data, start);

              for (var i = 0; i < numGlyphs; i += 1) {
                // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
                if (i < numMetrics) {
                  advanceWidth = p.parseUShort();
                  leftSideBearing = p.parseShort();
                }

                var glyph = glyphs.get(i);
                glyph.advanceWidth = advanceWidth;
                glyph.leftSideBearing = leftSideBearing;
              }
            }

            function makeHmtxTable(glyphs) {
              var t = new table.Table('hmtx', []);

              for (var i = 0; i < glyphs.length; i += 1) {
                var glyph = glyphs.get(i);
                var advanceWidth = glyph.advanceWidth || 0;
                var leftSideBearing = glyph.leftSideBearing || 0;
                t.fields.push({
                  name: 'advanceWidth_' + i,
                  type: 'USHORT',
                  value: advanceWidth
                });
                t.fields.push({
                  name: 'leftSideBearing_' + i,
                  type: 'SHORT',
                  value: leftSideBearing
                });
              }

              return t;
            }

            var parse_1$5 = parseHmtxTable;
            var make$4 = makeHmtxTable;
            var hmtx = {
              parse: parse_1$5,
              make: make$4
            };

            function makeLtagTable(tags) {
              var result = new table.Table('ltag', [{
                name: 'version',
                type: 'ULONG',
                value: 1
              }, {
                name: 'flags',
                type: 'ULONG',
                value: 0
              }, {
                name: 'numTags',
                type: 'ULONG',
                value: tags.length
              }]);
              var stringPool = '';
              var stringPoolOffset = 12 + tags.length * 4;

              for (var i = 0; i < tags.length; ++i) {
                var pos = stringPool.indexOf(tags[i]);

                if (pos < 0) {
                  pos = stringPool.length;
                  stringPool += tags[i];
                }

                result.fields.push({
                  name: 'offset ' + i,
                  type: 'USHORT',
                  value: stringPoolOffset + pos
                });
                result.fields.push({
                  name: 'length ' + i,
                  type: 'USHORT',
                  value: tags[i].length
                });
              }

              result.fields.push({
                name: 'stringPool',
                type: 'CHARARRAY',
                value: stringPool
              });
              return result;
            }

            function parseLtagTable(data, start) {
              var p = new parse$2.Parser(data, start);
              var tableVersion = p.parseULong();
              check.argument(tableVersion === 1, 'Unsupported ltag table version.'); // The 'ltag' specification does not define any flags; skip the field.

              p.skip('uLong', 1);
              var numTags = p.parseULong();
              var tags = [];

              for (var i = 0; i < numTags; i++) {
                var tag = '';
                var offset = start + p.parseUShort();
                var length = p.parseUShort();

                for (var j = offset; j < offset + length; ++j) {
                  tag += String.fromCharCode(data.getInt8(j));
                }

                tags.push(tag);
              }

              return tags;
            }

            var make$5 = makeLtagTable;
            var parse_1$6 = parseLtagTable;
            var ltag = {
              make: make$5,
              parse: parse_1$6
            };

            function parseMaxpTable(data, start) {
              var maxp = {};
              var p = new parse$2.Parser(data, start);
              maxp.version = p.parseVersion();
              maxp.numGlyphs = p.parseUShort();

              if (maxp.version === 1.0) {
                maxp.maxPoints = p.parseUShort();
                maxp.maxContours = p.parseUShort();
                maxp.maxCompositePoints = p.parseUShort();
                maxp.maxCompositeContours = p.parseUShort();
                maxp.maxZones = p.parseUShort();
                maxp.maxTwilightPoints = p.parseUShort();
                maxp.maxStorage = p.parseUShort();
                maxp.maxFunctionDefs = p.parseUShort();
                maxp.maxInstructionDefs = p.parseUShort();
                maxp.maxStackElements = p.parseUShort();
                maxp.maxSizeOfInstructions = p.parseUShort();
                maxp.maxComponentElements = p.parseUShort();
                maxp.maxComponentDepth = p.parseUShort();
              }

              return maxp;
            }

            function makeMaxpTable(numGlyphs) {
              return new table.Table('maxp', [{
                name: 'version',
                type: 'FIXED',
                value: 0x00005000
              }, {
                name: 'numGlyphs',
                type: 'USHORT',
                value: numGlyphs
              }]);
            }

            var parse_1$7 = parseMaxpTable;
            var make$6 = makeMaxpTable;
            var maxp = {
              parse: parse_1$7,
              make: make$6
            };

            var decode$3 = types$1.decode;
            var encode$4 = types$1.encode; // NameIDs for the name table.

            var nameTableNames = ['copyright', // 0
            'fontFamily', // 1
            'fontSubfamily', // 2
            'uniqueID', // 3
            'fullName', // 4
            'version', // 5
            'postScriptName', // 6
            'trademark', // 7
            'manufacturer', // 8
            'designer', // 9
            'description', // 10
            'manufacturerURL', // 11
            'designerURL', // 12
            'licence', // 13
            'licenceURL', // 14
            'reserved', // 15
            'preferredFamily', // 16
            'preferredSubfamily', // 17
            'compatibleFullName', // 18
            'sampleText', // 19
            'postScriptFindFontName', // 20
            'wwsFamily', // 21
            'wwsSubfamily' // 22
            ];
            var macLanguages = {
              0: 'en',
              1: 'fr',
              2: 'de',
              3: 'it',
              4: 'nl',
              5: 'sv',
              6: 'es',
              7: 'da',
              8: 'pt',
              9: 'no',
              10: 'he',
              11: 'ja',
              12: 'ar',
              13: 'fi',
              14: 'el',
              15: 'is',
              16: 'mt',
              17: 'tr',
              18: 'hr',
              19: 'zh-Hant',
              20: 'ur',
              21: 'hi',
              22: 'th',
              23: 'ko',
              24: 'lt',
              25: 'pl',
              26: 'hu',
              27: 'es',
              28: 'lv',
              29: 'se',
              30: 'fo',
              31: 'fa',
              32: 'ru',
              33: 'zh',
              34: 'nl-BE',
              35: 'ga',
              36: 'sq',
              37: 'ro',
              38: 'cz',
              39: 'sk',
              40: 'si',
              41: 'yi',
              42: 'sr',
              43: 'mk',
              44: 'bg',
              45: 'uk',
              46: 'be',
              47: 'uz',
              48: 'kk',
              49: 'az-Cyrl',
              50: 'az-Arab',
              51: 'hy',
              52: 'ka',
              53: 'mo',
              54: 'ky',
              55: 'tg',
              56: 'tk',
              57: 'mn-CN',
              58: 'mn',
              59: 'ps',
              60: 'ks',
              61: 'ku',
              62: 'sd',
              63: 'bo',
              64: 'ne',
              65: 'sa',
              66: 'mr',
              67: 'bn',
              68: 'as',
              69: 'gu',
              70: 'pa',
              71: 'or',
              72: 'ml',
              73: 'kn',
              74: 'ta',
              75: 'te',
              76: 'si',
              77: 'my',
              78: 'km',
              79: 'lo',
              80: 'vi',
              81: 'id',
              82: 'tl',
              83: 'ms',
              84: 'ms-Arab',
              85: 'am',
              86: 'ti',
              87: 'om',
              88: 'so',
              89: 'sw',
              90: 'rw',
              91: 'rn',
              92: 'ny',
              93: 'mg',
              94: 'eo',
              128: 'cy',
              129: 'eu',
              130: 'ca',
              131: 'la',
              132: 'qu',
              133: 'gn',
              134: 'ay',
              135: 'tt',
              136: 'ug',
              137: 'dz',
              138: 'jv',
              139: 'su',
              140: 'gl',
              141: 'af',
              142: 'br',
              143: 'iu',
              144: 'gd',
              145: 'gv',
              146: 'ga',
              147: 'to',
              148: 'el-polyton',
              149: 'kl',
              150: 'az',
              151: 'nn'
            }; // MacOS language ID → MacOS script ID
            //
            // Note that the script ID is not sufficient to determine what encoding
            // to use in TrueType files. For some languages, MacOS used a modification
            // of a mainstream script. For example, an Icelandic name would be stored
            // with smRoman in the TrueType naming table, but the actual encoding
            // is a special Icelandic version of the normal Macintosh Roman encoding.
            // As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
            // Syllables but MacOS had run out of available script codes, so this was
            // done as a (pretty radical) "modification" of Ethiopic.
            //
            // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

            var macLanguageToScript = {
              0: 0,
              // langEnglish → smRoman
              1: 0,
              // langFrench → smRoman
              2: 0,
              // langGerman → smRoman
              3: 0,
              // langItalian → smRoman
              4: 0,
              // langDutch → smRoman
              5: 0,
              // langSwedish → smRoman
              6: 0,
              // langSpanish → smRoman
              7: 0,
              // langDanish → smRoman
              8: 0,
              // langPortuguese → smRoman
              9: 0,
              // langNorwegian → smRoman
              10: 5,
              // langHebrew → smHebrew
              11: 1,
              // langJapanese → smJapanese
              12: 4,
              // langArabic → smArabic
              13: 0,
              // langFinnish → smRoman
              14: 6,
              // langGreek → smGreek
              15: 0,
              // langIcelandic → smRoman (modified)
              16: 0,
              // langMaltese → smRoman
              17: 0,
              // langTurkish → smRoman (modified)
              18: 0,
              // langCroatian → smRoman (modified)
              19: 2,
              // langTradChinese → smTradChinese
              20: 4,
              // langUrdu → smArabic
              21: 9,
              // langHindi → smDevanagari
              22: 21,
              // langThai → smThai
              23: 3,
              // langKorean → smKorean
              24: 29,
              // langLithuanian → smCentralEuroRoman
              25: 29,
              // langPolish → smCentralEuroRoman
              26: 29,
              // langHungarian → smCentralEuroRoman
              27: 29,
              // langEstonian → smCentralEuroRoman
              28: 29,
              // langLatvian → smCentralEuroRoman
              29: 0,
              // langSami → smRoman
              30: 0,
              // langFaroese → smRoman (modified)
              31: 4,
              // langFarsi → smArabic (modified)
              32: 7,
              // langRussian → smCyrillic
              33: 25,
              // langSimpChinese → smSimpChinese
              34: 0,
              // langFlemish → smRoman
              35: 0,
              // langIrishGaelic → smRoman (modified)
              36: 0,
              // langAlbanian → smRoman
              37: 0,
              // langRomanian → smRoman (modified)
              38: 29,
              // langCzech → smCentralEuroRoman
              39: 29,
              // langSlovak → smCentralEuroRoman
              40: 0,
              // langSlovenian → smRoman (modified)
              41: 5,
              // langYiddish → smHebrew
              42: 7,
              // langSerbian → smCyrillic
              43: 7,
              // langMacedonian → smCyrillic
              44: 7,
              // langBulgarian → smCyrillic
              45: 7,
              // langUkrainian → smCyrillic (modified)
              46: 7,
              // langByelorussian → smCyrillic
              47: 7,
              // langUzbek → smCyrillic
              48: 7,
              // langKazakh → smCyrillic
              49: 7,
              // langAzerbaijani → smCyrillic
              50: 4,
              // langAzerbaijanAr → smArabic
              51: 24,
              // langArmenian → smArmenian
              52: 23,
              // langGeorgian → smGeorgian
              53: 7,
              // langMoldavian → smCyrillic
              54: 7,
              // langKirghiz → smCyrillic
              55: 7,
              // langTajiki → smCyrillic
              56: 7,
              // langTurkmen → smCyrillic
              57: 27,
              // langMongolian → smMongolian
              58: 7,
              // langMongolianCyr → smCyrillic
              59: 4,
              // langPashto → smArabic
              60: 4,
              // langKurdish → smArabic
              61: 4,
              // langKashmiri → smArabic
              62: 4,
              // langSindhi → smArabic
              63: 26,
              // langTibetan → smTibetan
              64: 9,
              // langNepali → smDevanagari
              65: 9,
              // langSanskrit → smDevanagari
              66: 9,
              // langMarathi → smDevanagari
              67: 13,
              // langBengali → smBengali
              68: 13,
              // langAssamese → smBengali
              69: 11,
              // langGujarati → smGujarati
              70: 10,
              // langPunjabi → smGurmukhi
              71: 12,
              // langOriya → smOriya
              72: 17,
              // langMalayalam → smMalayalam
              73: 16,
              // langKannada → smKannada
              74: 14,
              // langTamil → smTamil
              75: 15,
              // langTelugu → smTelugu
              76: 18,
              // langSinhalese → smSinhalese
              77: 19,
              // langBurmese → smBurmese
              78: 20,
              // langKhmer → smKhmer
              79: 22,
              // langLao → smLao
              80: 30,
              // langVietnamese → smVietnamese
              81: 0,
              // langIndonesian → smRoman
              82: 0,
              // langTagalog → smRoman
              83: 0,
              // langMalayRoman → smRoman
              84: 4,
              // langMalayArabic → smArabic
              85: 28,
              // langAmharic → smEthiopic
              86: 28,
              // langTigrinya → smEthiopic
              87: 28,
              // langOromo → smEthiopic
              88: 0,
              // langSomali → smRoman
              89: 0,
              // langSwahili → smRoman
              90: 0,
              // langKinyarwanda → smRoman
              91: 0,
              // langRundi → smRoman
              92: 0,
              // langNyanja → smRoman
              93: 0,
              // langMalagasy → smRoman
              94: 0,
              // langEsperanto → smRoman
              128: 0,
              // langWelsh → smRoman (modified)
              129: 0,
              // langBasque → smRoman
              130: 0,
              // langCatalan → smRoman
              131: 0,
              // langLatin → smRoman
              132: 0,
              // langQuechua → smRoman
              133: 0,
              // langGuarani → smRoman
              134: 0,
              // langAymara → smRoman
              135: 7,
              // langTatar → smCyrillic
              136: 4,
              // langUighur → smArabic
              137: 26,
              // langDzongkha → smTibetan
              138: 0,
              // langJavaneseRom → smRoman
              139: 0,
              // langSundaneseRom → smRoman
              140: 0,
              // langGalician → smRoman
              141: 0,
              // langAfrikaans → smRoman
              142: 0,
              // langBreton → smRoman (modified)
              143: 28,
              // langInuktitut → smEthiopic (modified)
              144: 0,
              // langScottishGaelic → smRoman (modified)
              145: 0,
              // langManxGaelic → smRoman (modified)
              146: 0,
              // langIrishGaelicScript → smRoman (modified)
              147: 0,
              // langTongan → smRoman
              148: 6,
              // langGreekAncient → smRoman
              149: 0,
              // langGreenlandic → smRoman
              150: 0,
              // langAzerbaijanRoman → smRoman
              151: 0 // langNynorsk → smRoman

            }; // While Microsoft indicates a region/country for all its language
            // IDs, we omit the region code if it's equal to the "most likely
            // region subtag" according to Unicode CLDR. For scripts, we omit
            // the subtag if it is equal to the Suppress-Script entry in the
            // IANA language subtag registry for IETF BCP 47.
            //
            // For example, Microsoft states that its language code 0x041A is
            // Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
            // and not 'hr-HR' because Croatia is the default country for Croatian,
            // according to Unicode CLDR. As another example, Microsoft states
            // that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
            // this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
            // for the Croatian language, according to IANA.
            //
            // http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
            // http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry

            var windowsLanguages = {
              0x0436: 'af',
              0x041C: 'sq',
              0x0484: 'gsw',
              0x045E: 'am',
              0x1401: 'ar-DZ',
              0x3C01: 'ar-BH',
              0x0C01: 'ar',
              0x0801: 'ar-IQ',
              0x2C01: 'ar-JO',
              0x3401: 'ar-KW',
              0x3001: 'ar-LB',
              0x1001: 'ar-LY',
              0x1801: 'ary',
              0x2001: 'ar-OM',
              0x4001: 'ar-QA',
              0x0401: 'ar-SA',
              0x2801: 'ar-SY',
              0x1C01: 'aeb',
              0x3801: 'ar-AE',
              0x2401: 'ar-YE',
              0x042B: 'hy',
              0x044D: 'as',
              0x082C: 'az-Cyrl',
              0x042C: 'az',
              0x046D: 'ba',
              0x042D: 'eu',
              0x0423: 'be',
              0x0845: 'bn',
              0x0445: 'bn-IN',
              0x201A: 'bs-Cyrl',
              0x141A: 'bs',
              0x047E: 'br',
              0x0402: 'bg',
              0x0403: 'ca',
              0x0C04: 'zh-HK',
              0x1404: 'zh-MO',
              0x0804: 'zh',
              0x1004: 'zh-SG',
              0x0404: 'zh-TW',
              0x0483: 'co',
              0x041A: 'hr',
              0x101A: 'hr-BA',
              0x0405: 'cs',
              0x0406: 'da',
              0x048C: 'prs',
              0x0465: 'dv',
              0x0813: 'nl-BE',
              0x0413: 'nl',
              0x0C09: 'en-AU',
              0x2809: 'en-BZ',
              0x1009: 'en-CA',
              0x2409: 'en-029',
              0x4009: 'en-IN',
              0x1809: 'en-IE',
              0x2009: 'en-JM',
              0x4409: 'en-MY',
              0x1409: 'en-NZ',
              0x3409: 'en-PH',
              0x4809: 'en-SG',
              0x1C09: 'en-ZA',
              0x2C09: 'en-TT',
              0x0809: 'en-GB',
              0x0409: 'en',
              0x3009: 'en-ZW',
              0x0425: 'et',
              0x0438: 'fo',
              0x0464: 'fil',
              0x040B: 'fi',
              0x080C: 'fr-BE',
              0x0C0C: 'fr-CA',
              0x040C: 'fr',
              0x140C: 'fr-LU',
              0x180C: 'fr-MC',
              0x100C: 'fr-CH',
              0x0462: 'fy',
              0x0456: 'gl',
              0x0437: 'ka',
              0x0C07: 'de-AT',
              0x0407: 'de',
              0x1407: 'de-LI',
              0x1007: 'de-LU',
              0x0807: 'de-CH',
              0x0408: 'el',
              0x046F: 'kl',
              0x0447: 'gu',
              0x0468: 'ha',
              0x040D: 'he',
              0x0439: 'hi',
              0x040E: 'hu',
              0x040F: 'is',
              0x0470: 'ig',
              0x0421: 'id',
              0x045D: 'iu',
              0x085D: 'iu-Latn',
              0x083C: 'ga',
              0x0434: 'xh',
              0x0435: 'zu',
              0x0410: 'it',
              0x0810: 'it-CH',
              0x0411: 'ja',
              0x044B: 'kn',
              0x043F: 'kk',
              0x0453: 'km',
              0x0486: 'quc',
              0x0487: 'rw',
              0x0441: 'sw',
              0x0457: 'kok',
              0x0412: 'ko',
              0x0440: 'ky',
              0x0454: 'lo',
              0x0426: 'lv',
              0x0427: 'lt',
              0x082E: 'dsb',
              0x046E: 'lb',
              0x042F: 'mk',
              0x083E: 'ms-BN',
              0x043E: 'ms',
              0x044C: 'ml',
              0x043A: 'mt',
              0x0481: 'mi',
              0x047A: 'arn',
              0x044E: 'mr',
              0x047C: 'moh',
              0x0450: 'mn',
              0x0850: 'mn-CN',
              0x0461: 'ne',
              0x0414: 'nb',
              0x0814: 'nn',
              0x0482: 'oc',
              0x0448: 'or',
              0x0463: 'ps',
              0x0415: 'pl',
              0x0416: 'pt',
              0x0816: 'pt-PT',
              0x0446: 'pa',
              0x046B: 'qu-BO',
              0x086B: 'qu-EC',
              0x0C6B: 'qu',
              0x0418: 'ro',
              0x0417: 'rm',
              0x0419: 'ru',
              0x243B: 'smn',
              0x103B: 'smj-NO',
              0x143B: 'smj',
              0x0C3B: 'se-FI',
              0x043B: 'se',
              0x083B: 'se-SE',
              0x203B: 'sms',
              0x183B: 'sma-NO',
              0x1C3B: 'sms',
              0x044F: 'sa',
              0x1C1A: 'sr-Cyrl-BA',
              0x0C1A: 'sr',
              0x181A: 'sr-Latn-BA',
              0x081A: 'sr-Latn',
              0x046C: 'nso',
              0x0432: 'tn',
              0x045B: 'si',
              0x041B: 'sk',
              0x0424: 'sl',
              0x2C0A: 'es-AR',
              0x400A: 'es-BO',
              0x340A: 'es-CL',
              0x240A: 'es-CO',
              0x140A: 'es-CR',
              0x1C0A: 'es-DO',
              0x300A: 'es-EC',
              0x440A: 'es-SV',
              0x100A: 'es-GT',
              0x480A: 'es-HN',
              0x080A: 'es-MX',
              0x4C0A: 'es-NI',
              0x180A: 'es-PA',
              0x3C0A: 'es-PY',
              0x280A: 'es-PE',
              0x500A: 'es-PR',
              // Microsoft has defined two different language codes for
              // “Spanish with modern sorting” and “Spanish with traditional
              // sorting”. This makes sense for collation APIs, and it would be
              // possible to express this in BCP 47 language tags via Unicode
              // extensions (eg., es-u-co-trad is Spanish with traditional
              // sorting). However, for storing names in fonts, the distinction
              // does not make sense, so we give “es” in both cases.
              0x0C0A: 'es',
              0x040A: 'es',
              0x540A: 'es-US',
              0x380A: 'es-UY',
              0x200A: 'es-VE',
              0x081D: 'sv-FI',
              0x041D: 'sv',
              0x045A: 'syr',
              0x0428: 'tg',
              0x085F: 'tzm',
              0x0449: 'ta',
              0x0444: 'tt',
              0x044A: 'te',
              0x041E: 'th',
              0x0451: 'bo',
              0x041F: 'tr',
              0x0442: 'tk',
              0x0480: 'ug',
              0x0422: 'uk',
              0x042E: 'hsb',
              0x0420: 'ur',
              0x0843: 'uz-Cyrl',
              0x0443: 'uz',
              0x042A: 'vi',
              0x0452: 'cy',
              0x0488: 'wo',
              0x0485: 'sah',
              0x0478: 'ii',
              0x046A: 'yo'
            }; // Returns a IETF BCP 47 language code, for example 'zh-Hant'
            // for 'Chinese in the traditional script'.

            function getLanguageCode(platformID, languageID, ltag) {
              switch (platformID) {
                case 0:
                  // Unicode
                  if (languageID === 0xFFFF) {
                    return 'und';
                  } else if (ltag) {
                    return ltag[languageID];
                  }

                  break;

                case 1:
                  // Macintosh
                  return macLanguages[languageID];

                case 3:
                  // Windows
                  return windowsLanguages[languageID];
              }

              return undefined;
            }

            var utf16 = 'utf-16'; // MacOS script ID → encoding. This table stores the default case,
            // which can be overridden by macLanguageEncodings.

            var macScriptEncodings = {
              0: 'macintosh',
              // smRoman
              1: 'x-mac-japanese',
              // smJapanese
              2: 'x-mac-chinesetrad',
              // smTradChinese
              3: 'x-mac-korean',
              // smKorean
              6: 'x-mac-greek',
              // smGreek
              7: 'x-mac-cyrillic',
              // smCyrillic
              9: 'x-mac-devanagai',
              // smDevanagari
              10: 'x-mac-gurmukhi',
              // smGurmukhi
              11: 'x-mac-gujarati',
              // smGujarati
              12: 'x-mac-oriya',
              // smOriya
              13: 'x-mac-bengali',
              // smBengali
              14: 'x-mac-tamil',
              // smTamil
              15: 'x-mac-telugu',
              // smTelugu
              16: 'x-mac-kannada',
              // smKannada
              17: 'x-mac-malayalam',
              // smMalayalam
              18: 'x-mac-sinhalese',
              // smSinhalese
              19: 'x-mac-burmese',
              // smBurmese
              20: 'x-mac-khmer',
              // smKhmer
              21: 'x-mac-thai',
              // smThai
              22: 'x-mac-lao',
              // smLao
              23: 'x-mac-georgian',
              // smGeorgian
              24: 'x-mac-armenian',
              // smArmenian
              25: 'x-mac-chinesesimp',
              // smSimpChinese
              26: 'x-mac-tibetan',
              // smTibetan
              27: 'x-mac-mongolian',
              // smMongolian
              28: 'x-mac-ethiopic',
              // smEthiopic
              29: 'x-mac-ce',
              // smCentralEuroRoman
              30: 'x-mac-vietnamese',
              // smVietnamese
              31: 'x-mac-extarabic' // smExtArabic

            }; // MacOS language ID → encoding. This table stores the exceptional
            // cases, which override macScriptEncodings. For writing MacOS naming
            // tables, we need to emit a MacOS script ID. Therefore, we cannot
            // merge macScriptEncodings into macLanguageEncodings.
            //
            // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt

            var macLanguageEncodings = {
              15: 'x-mac-icelandic',
              // langIcelandic
              17: 'x-mac-turkish',
              // langTurkish
              18: 'x-mac-croatian',
              // langCroatian
              24: 'x-mac-ce',
              // langLithuanian
              25: 'x-mac-ce',
              // langPolish
              26: 'x-mac-ce',
              // langHungarian
              27: 'x-mac-ce',
              // langEstonian
              28: 'x-mac-ce',
              // langLatvian
              30: 'x-mac-icelandic',
              // langFaroese
              37: 'x-mac-romanian',
              // langRomanian
              38: 'x-mac-ce',
              // langCzech
              39: 'x-mac-ce',
              // langSlovak
              40: 'x-mac-ce',
              // langSlovenian
              143: 'x-mac-inuit',
              // langInuktitut
              146: 'x-mac-gaelic' // langIrishGaelicScript

            };

            function getEncoding(platformID, encodingID, languageID) {
              switch (platformID) {
                case 0:
                  // Unicode
                  return utf16;

                case 1:
                  // Apple Macintosh
                  return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];

                case 3:
                  // Microsoft Windows
                  if (encodingID === 1 || encodingID === 10) {
                    return utf16;
                  }

                  break;
              }

              return undefined;
            } // Parse the naming `name` table.
            // FIXME: Format 1 additional fields are not supported yet.
            // ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].


            function parseNameTable(data, start, ltag) {
              var name = {};
              var p = new parse$2.Parser(data, start);
              var format = p.parseUShort();
              var count = p.parseUShort();
              var stringOffset = p.offset + p.parseUShort();

              for (var i = 0; i < count; i++) {
                var platformID = p.parseUShort();
                var encodingID = p.parseUShort();
                var languageID = p.parseUShort();
                var nameID = p.parseUShort();
                var property = nameTableNames[nameID] || nameID;
                var byteLength = p.parseUShort();
                var offset = p.parseUShort();
                var language = getLanguageCode(platformID, languageID, ltag);
                var encoding = getEncoding(platformID, encodingID, languageID);

                if (encoding !== undefined && language !== undefined) {
                  var text;

                  if (encoding === utf16) {
                    text = decode$3.UTF16(data, stringOffset + offset, byteLength);
                  } else {
                    text = decode$3.MACSTRING(data, stringOffset + offset, byteLength, encoding);
                  }

                  if (text) {
                    var translations = name[property];

                    if (translations === undefined) {
                      translations = name[property] = {};
                    }

                    translations[language] = text;
                  }
                }
              }

              var langTagCount = 0;

              if (format === 1) {
                // FIXME: Also handle Microsoft's 'name' table 1.
                langTagCount = p.parseUShort();
              }

              return name;
            } // {23: 'foo'} → {'foo': 23}
            // ['bar', 'baz'] → {'bar': 0, 'baz': 1}


            function reverseDict(dict) {
              var result = {};

              for (var key in dict) {
                result[dict[key]] = parseInt(key);
              }

              return result;
            }

            function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
              return new table.Table('NameRecord', [{
                name: 'platformID',
                type: 'USHORT',
                value: platformID
              }, {
                name: 'encodingID',
                type: 'USHORT',
                value: encodingID
              }, {
                name: 'languageID',
                type: 'USHORT',
                value: languageID
              }, {
                name: 'nameID',
                type: 'USHORT',
                value: nameID
              }, {
                name: 'length',
                type: 'USHORT',
                value: length
              }, {
                name: 'offset',
                type: 'USHORT',
                value: offset
              }]);
            } // Finds the position of needle in haystack, or -1 if not there.
            // Like String.indexOf(), but for arrays.


            function findSubArray(needle, haystack) {
              var needleLength = needle.length;
              var limit = haystack.length - needleLength + 1;

              loop: for (var pos = 0; pos < limit; pos++) {
                for (; pos < limit; pos++) {
                  for (var k = 0; k < needleLength; k++) {
                    if (haystack[pos + k] !== needle[k]) {
                      continue loop;
                    }
                  }

                  return pos;
                }
              }

              return -1;
            }

            function addStringToPool(s, pool) {
              var offset = findSubArray(s, pool);

              if (offset < 0) {
                offset = pool.length;

                for (var i = 0, len = s.length; i < len; ++i) {
                  pool.push(s[i]);
                }
              }

              return offset;
            }

            function makeNameTable(names, ltag) {
              var nameID;
              var nameIDs = [];
              var namesWithNumericKeys = {};
              var nameTableIds = reverseDict(nameTableNames);

              for (var key in names) {
                var id = nameTableIds[key];

                if (id === undefined) {
                  id = key;
                }

                nameID = parseInt(id);
                namesWithNumericKeys[nameID] = names[key];
                nameIDs.push(nameID);
              }

              var macLanguageIds = reverseDict(macLanguages);
              var windowsLanguageIds = reverseDict(windowsLanguages);
              var nameRecords = [];
              var stringPool = [];

              for (var i = 0; i < nameIDs.length; i++) {
                nameID = nameIDs[i];
                var translations = namesWithNumericKeys[nameID];

                for (var lang in translations) {
                  var text = translations[lang]; // For MacOS, we try to emit the name in the form that was introduced
                  // in the initial version of the TrueType spec (in the late 1980s).
                  // However, this can fail for various reasons: the requested BCP 47
                  // language code might not have an old-style Mac equivalent;
                  // we might not have a codec for the needed character encoding;
                  // or the name might contain characters that cannot be expressed
                  // in the old-style Macintosh encoding. In case of failure, we emit
                  // the name in a more modern fashion (Unicode encoding with BCP 47
                  // language tags) that is recognized by MacOS 10.5, released in 2009.
                  // If fonts were only read by operating systems, we could simply
                  // emit all names in the modern form; this would be much easier.
                  // However, there are many applications and libraries that read
                  // 'name' tables directly, and these will usually only recognize
                  // the ancient form (silently skipping the unrecognized names).

                  var macPlatform = 1; // Macintosh

                  var macLanguage = macLanguageIds[lang];
                  var macScript = macLanguageToScript[macLanguage];
                  var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                  var macName = encode$4.MACSTRING(text, macEncoding);

                  if (macName === undefined) {
                    macPlatform = 0; // Unicode

                    macLanguage = ltag.indexOf(lang);

                    if (macLanguage < 0) {
                      macLanguage = ltag.length;
                      ltag.push(lang);
                    }

                    macScript = 4; // Unicode 2.0 and later

                    macName = encode$4.UTF16(text);
                  }

                  var macNameOffset = addStringToPool(macName, stringPool);
                  nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage, nameID, macName.length, macNameOffset));
                  var winLanguage = windowsLanguageIds[lang];

                  if (winLanguage !== undefined) {
                    var winName = encode$4.UTF16(text);
                    var winNameOffset = addStringToPool(winName, stringPool);
                    nameRecords.push(makeNameRecord(3, 1, winLanguage, nameID, winName.length, winNameOffset));
                  }
                }
              }

              nameRecords.sort(function (a, b) {
                return a.platformID - b.platformID || a.encodingID - b.encodingID || a.languageID - b.languageID || a.nameID - b.nameID;
              });
              var t = new table.Table('name', [{
                name: 'format',
                type: 'USHORT',
                value: 0
              }, {
                name: 'count',
                type: 'USHORT',
                value: nameRecords.length
              }, {
                name: 'stringOffset',
                type: 'USHORT',
                value: 6 + nameRecords.length * 12
              }]);

              for (var r = 0; r < nameRecords.length; r++) {
                t.fields.push({
                  name: 'record_' + r,
                  type: 'TABLE',
                  value: nameRecords[r]
                });
              }

              t.fields.push({
                name: 'strings',
                type: 'LITERAL',
                value: stringPool
              });
              return t;
            }

            var parse_1$8 = parseNameTable;
            var make$7 = makeNameTable;
            var name$1 = {
              parse: parse_1$8,
              make: make$7
            };

            var unicodeRanges = [{
              begin: 0x0000,
              end: 0x007F
            }, // Basic Latin
            {
              begin: 0x0080,
              end: 0x00FF
            }, // Latin-1 Supplement
            {
              begin: 0x0100,
              end: 0x017F
            }, // Latin Extended-A
            {
              begin: 0x0180,
              end: 0x024F
            }, // Latin Extended-B
            {
              begin: 0x0250,
              end: 0x02AF
            }, // IPA Extensions
            {
              begin: 0x02B0,
              end: 0x02FF
            }, // Spacing Modifier Letters
            {
              begin: 0x0300,
              end: 0x036F
            }, // Combining Diacritical Marks
            {
              begin: 0x0370,
              end: 0x03FF
            }, // Greek and Coptic
            {
              begin: 0x2C80,
              end: 0x2CFF
            }, // Coptic
            {
              begin: 0x0400,
              end: 0x04FF
            }, // Cyrillic
            {
              begin: 0x0530,
              end: 0x058F
            }, // Armenian
            {
              begin: 0x0590,
              end: 0x05FF
            }, // Hebrew
            {
              begin: 0xA500,
              end: 0xA63F
            }, // Vai
            {
              begin: 0x0600,
              end: 0x06FF
            }, // Arabic
            {
              begin: 0x07C0,
              end: 0x07FF
            }, // NKo
            {
              begin: 0x0900,
              end: 0x097F
            }, // Devanagari
            {
              begin: 0x0980,
              end: 0x09FF
            }, // Bengali
            {
              begin: 0x0A00,
              end: 0x0A7F
            }, // Gurmukhi
            {
              begin: 0x0A80,
              end: 0x0AFF
            }, // Gujarati
            {
              begin: 0x0B00,
              end: 0x0B7F
            }, // Oriya
            {
              begin: 0x0B80,
              end: 0x0BFF
            }, // Tamil
            {
              begin: 0x0C00,
              end: 0x0C7F
            }, // Telugu
            {
              begin: 0x0C80,
              end: 0x0CFF
            }, // Kannada
            {
              begin: 0x0D00,
              end: 0x0D7F
            }, // Malayalam
            {
              begin: 0x0E00,
              end: 0x0E7F
            }, // Thai
            {
              begin: 0x0E80,
              end: 0x0EFF
            }, // Lao
            {
              begin: 0x10A0,
              end: 0x10FF
            }, // Georgian
            {
              begin: 0x1B00,
              end: 0x1B7F
            }, // Balinese
            {
              begin: 0x1100,
              end: 0x11FF
            }, // Hangul Jamo
            {
              begin: 0x1E00,
              end: 0x1EFF
            }, // Latin Extended Additional
            {
              begin: 0x1F00,
              end: 0x1FFF
            }, // Greek Extended
            {
              begin: 0x2000,
              end: 0x206F
            }, // General Punctuation
            {
              begin: 0x2070,
              end: 0x209F
            }, // Superscripts And Subscripts
            {
              begin: 0x20A0,
              end: 0x20CF
            }, // Currency Symbol
            {
              begin: 0x20D0,
              end: 0x20FF
            }, // Combining Diacritical Marks For Symbols
            {
              begin: 0x2100,
              end: 0x214F
            }, // Letterlike Symbols
            {
              begin: 0x2150,
              end: 0x218F
            }, // Number Forms
            {
              begin: 0x2190,
              end: 0x21FF
            }, // Arrows
            {
              begin: 0x2200,
              end: 0x22FF
            }, // Mathematical Operators
            {
              begin: 0x2300,
              end: 0x23FF
            }, // Miscellaneous Technical
            {
              begin: 0x2400,
              end: 0x243F
            }, // Control Pictures
            {
              begin: 0x2440,
              end: 0x245F
            }, // Optical Character Recognition
            {
              begin: 0x2460,
              end: 0x24FF
            }, // Enclosed Alphanumerics
            {
              begin: 0x2500,
              end: 0x257F
            }, // Box Drawing
            {
              begin: 0x2580,
              end: 0x259F
            }, // Block Elements
            {
              begin: 0x25A0,
              end: 0x25FF
            }, // Geometric Shapes
            {
              begin: 0x2600,
              end: 0x26FF
            }, // Miscellaneous Symbols
            {
              begin: 0x2700,
              end: 0x27BF
            }, // Dingbats
            {
              begin: 0x3000,
              end: 0x303F
            }, // CJK Symbols And Punctuation
            {
              begin: 0x3040,
              end: 0x309F
            }, // Hiragana
            {
              begin: 0x30A0,
              end: 0x30FF
            }, // Katakana
            {
              begin: 0x3100,
              end: 0x312F
            }, // Bopomofo
            {
              begin: 0x3130,
              end: 0x318F
            }, // Hangul Compatibility Jamo
            {
              begin: 0xA840,
              end: 0xA87F
            }, // Phags-pa
            {
              begin: 0x3200,
              end: 0x32FF
            }, // Enclosed CJK Letters And Months
            {
              begin: 0x3300,
              end: 0x33FF
            }, // CJK Compatibility
            {
              begin: 0xAC00,
              end: 0xD7AF
            }, // Hangul Syllables
            {
              begin: 0xD800,
              end: 0xDFFF
            }, // Non-Plane 0 *
            {
              begin: 0x10900,
              end: 0x1091F
            }, // Phoenicia
            {
              begin: 0x4E00,
              end: 0x9FFF
            }, // CJK Unified Ideographs
            {
              begin: 0xE000,
              end: 0xF8FF
            }, // Private Use Area (plane 0)
            {
              begin: 0x31C0,
              end: 0x31EF
            }, // CJK Strokes
            {
              begin: 0xFB00,
              end: 0xFB4F
            }, // Alphabetic Presentation Forms
            {
              begin: 0xFB50,
              end: 0xFDFF
            }, // Arabic Presentation Forms-A
            {
              begin: 0xFE20,
              end: 0xFE2F
            }, // Combining Half Marks
            {
              begin: 0xFE10,
              end: 0xFE1F
            }, // Vertical Forms
            {
              begin: 0xFE50,
              end: 0xFE6F
            }, // Small Form Variants
            {
              begin: 0xFE70,
              end: 0xFEFF
            }, // Arabic Presentation Forms-B
            {
              begin: 0xFF00,
              end: 0xFFEF
            }, // Halfwidth And Fullwidth Forms
            {
              begin: 0xFFF0,
              end: 0xFFFF
            }, // Specials
            {
              begin: 0x0F00,
              end: 0x0FFF
            }, // Tibetan
            {
              begin: 0x0700,
              end: 0x074F
            }, // Syriac
            {
              begin: 0x0780,
              end: 0x07BF
            }, // Thaana
            {
              begin: 0x0D80,
              end: 0x0DFF
            }, // Sinhala
            {
              begin: 0x1000,
              end: 0x109F
            }, // Myanmar
            {
              begin: 0x1200,
              end: 0x137F
            }, // Ethiopic
            {
              begin: 0x13A0,
              end: 0x13FF
            }, // Cherokee
            {
              begin: 0x1400,
              end: 0x167F
            }, // Unified Canadian Aboriginal Syllabics
            {
              begin: 0x1680,
              end: 0x169F
            }, // Ogham
            {
              begin: 0x16A0,
              end: 0x16FF
            }, // Runic
            {
              begin: 0x1780,
              end: 0x17FF
            }, // Khmer
            {
              begin: 0x1800,
              end: 0x18AF
            }, // Mongolian
            {
              begin: 0x2800,
              end: 0x28FF
            }, // Braille Patterns
            {
              begin: 0xA000,
              end: 0xA48F
            }, // Yi Syllables
            {
              begin: 0x1700,
              end: 0x171F
            }, // Tagalog
            {
              begin: 0x10300,
              end: 0x1032F
            }, // Old Italic
            {
              begin: 0x10330,
              end: 0x1034F
            }, // Gothic
            {
              begin: 0x10400,
              end: 0x1044F
            }, // Deseret
            {
              begin: 0x1D000,
              end: 0x1D0FF
            }, // Byzantine Musical Symbols
            {
              begin: 0x1D400,
              end: 0x1D7FF
            }, // Mathematical Alphanumeric Symbols
            {
              begin: 0xFF000,
              end: 0xFFFFD
            }, // Private Use (plane 15)
            {
              begin: 0xFE00,
              end: 0xFE0F
            }, // Variation Selectors
            {
              begin: 0xE0000,
              end: 0xE007F
            }, // Tags
            {
              begin: 0x1900,
              end: 0x194F
            }, // Limbu
            {
              begin: 0x1950,
              end: 0x197F
            }, // Tai Le
            {
              begin: 0x1980,
              end: 0x19DF
            }, // New Tai Lue
            {
              begin: 0x1A00,
              end: 0x1A1F
            }, // Buginese
            {
              begin: 0x2C00,
              end: 0x2C5F
            }, // Glagolitic
            {
              begin: 0x2D30,
              end: 0x2D7F
            }, // Tifinagh
            {
              begin: 0x4DC0,
              end: 0x4DFF
            }, // Yijing Hexagram Symbols
            {
              begin: 0xA800,
              end: 0xA82F
            }, // Syloti Nagri
            {
              begin: 0x10000,
              end: 0x1007F
            }, // Linear B Syllabary
            {
              begin: 0x10140,
              end: 0x1018F
            }, // Ancient Greek Numbers
            {
              begin: 0x10380,
              end: 0x1039F
            }, // Ugaritic
            {
              begin: 0x103A0,
              end: 0x103DF
            }, // Old Persian
            {
              begin: 0x10450,
              end: 0x1047F
            }, // Shavian
            {
              begin: 0x10480,
              end: 0x104AF
            }, // Osmanya
            {
              begin: 0x10800,
              end: 0x1083F
            }, // Cypriot Syllabary
            {
              begin: 0x10A00,
              end: 0x10A5F
            }, // Kharoshthi
            {
              begin: 0x1D300,
              end: 0x1D35F
            }, // Tai Xuan Jing Symbols
            {
              begin: 0x12000,
              end: 0x123FF
            }, // Cuneiform
            {
              begin: 0x1D360,
              end: 0x1D37F
            }, // Counting Rod Numerals
            {
              begin: 0x1B80,
              end: 0x1BBF
            }, // Sundanese
            {
              begin: 0x1C00,
              end: 0x1C4F
            }, // Lepcha
            {
              begin: 0x1C50,
              end: 0x1C7F
            }, // Ol Chiki
            {
              begin: 0xA880,
              end: 0xA8DF
            }, // Saurashtra
            {
              begin: 0xA900,
              end: 0xA92F
            }, // Kayah Li
            {
              begin: 0xA930,
              end: 0xA95F
            }, // Rejang
            {
              begin: 0xAA00,
              end: 0xAA5F
            }, // Cham
            {
              begin: 0x10190,
              end: 0x101CF
            }, // Ancient Symbols
            {
              begin: 0x101D0,
              end: 0x101FF
            }, // Phaistos Disc
            {
              begin: 0x102A0,
              end: 0x102DF
            }, // Carian
            {
              begin: 0x1F030,
              end: 0x1F09F // Domino Tiles

            }];

            function getUnicodeRange(unicode) {
              for (var i = 0; i < unicodeRanges.length; i += 1) {
                var range = unicodeRanges[i];

                if (unicode >= range.begin && unicode < range.end) {
                  return i;
                }
              }

              return -1;
            } // Parse the OS/2 and Windows metrics `OS/2` table


            function parseOS2Table(data, start) {
              var os2 = {};
              var p = new parse$2.Parser(data, start);
              os2.version = p.parseUShort();
              os2.xAvgCharWidth = p.parseShort();
              os2.usWeightClass = p.parseUShort();
              os2.usWidthClass = p.parseUShort();
              os2.fsType = p.parseUShort();
              os2.ySubscriptXSize = p.parseShort();
              os2.ySubscriptYSize = p.parseShort();
              os2.ySubscriptXOffset = p.parseShort();
              os2.ySubscriptYOffset = p.parseShort();
              os2.ySuperscriptXSize = p.parseShort();
              os2.ySuperscriptYSize = p.parseShort();
              os2.ySuperscriptXOffset = p.parseShort();
              os2.ySuperscriptYOffset = p.parseShort();
              os2.yStrikeoutSize = p.parseShort();
              os2.yStrikeoutPosition = p.parseShort();
              os2.sFamilyClass = p.parseShort();
              os2.panose = [];

              for (var i = 0; i < 10; i++) {
                os2.panose[i] = p.parseByte();
              }

              os2.ulUnicodeRange1 = p.parseULong();
              os2.ulUnicodeRange2 = p.parseULong();
              os2.ulUnicodeRange3 = p.parseULong();
              os2.ulUnicodeRange4 = p.parseULong();
              os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
              os2.fsSelection = p.parseUShort();
              os2.usFirstCharIndex = p.parseUShort();
              os2.usLastCharIndex = p.parseUShort();
              os2.sTypoAscender = p.parseShort();
              os2.sTypoDescender = p.parseShort();
              os2.sTypoLineGap = p.parseShort();
              os2.usWinAscent = p.parseUShort();
              os2.usWinDescent = p.parseUShort();

              if (os2.version >= 1) {
                os2.ulCodePageRange1 = p.parseULong();
                os2.ulCodePageRange2 = p.parseULong();
              }

              if (os2.version >= 2) {
                os2.sxHeight = p.parseShort();
                os2.sCapHeight = p.parseShort();
                os2.usDefaultChar = p.parseUShort();
                os2.usBreakChar = p.parseUShort();
                os2.usMaxContent = p.parseUShort();
              }

              return os2;
            }

            function makeOS2Table(options) {
              return new table.Table('OS/2', [{
                name: 'version',
                type: 'USHORT',
                value: 0x0003
              }, {
                name: 'xAvgCharWidth',
                type: 'SHORT',
                value: 0
              }, {
                name: 'usWeightClass',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usWidthClass',
                type: 'USHORT',
                value: 0
              }, {
                name: 'fsType',
                type: 'USHORT',
                value: 0
              }, {
                name: 'ySubscriptXSize',
                type: 'SHORT',
                value: 650
              }, {
                name: 'ySubscriptYSize',
                type: 'SHORT',
                value: 699
              }, {
                name: 'ySubscriptXOffset',
                type: 'SHORT',
                value: 0
              }, {
                name: 'ySubscriptYOffset',
                type: 'SHORT',
                value: 140
              }, {
                name: 'ySuperscriptXSize',
                type: 'SHORT',
                value: 650
              }, {
                name: 'ySuperscriptYSize',
                type: 'SHORT',
                value: 699
              }, {
                name: 'ySuperscriptXOffset',
                type: 'SHORT',
                value: 0
              }, {
                name: 'ySuperscriptYOffset',
                type: 'SHORT',
                value: 479
              }, {
                name: 'yStrikeoutSize',
                type: 'SHORT',
                value: 49
              }, {
                name: 'yStrikeoutPosition',
                type: 'SHORT',
                value: 258
              }, {
                name: 'sFamilyClass',
                type: 'SHORT',
                value: 0
              }, {
                name: 'bFamilyType',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bSerifStyle',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bWeight',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bProportion',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bContrast',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bStrokeVariation',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bArmStyle',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bLetterform',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bMidline',
                type: 'BYTE',
                value: 0
              }, {
                name: 'bXHeight',
                type: 'BYTE',
                value: 0
              }, {
                name: 'ulUnicodeRange1',
                type: 'ULONG',
                value: 0
              }, {
                name: 'ulUnicodeRange2',
                type: 'ULONG',
                value: 0
              }, {
                name: 'ulUnicodeRange3',
                type: 'ULONG',
                value: 0
              }, {
                name: 'ulUnicodeRange4',
                type: 'ULONG',
                value: 0
              }, {
                name: 'achVendID',
                type: 'CHARARRAY',
                value: 'XXXX'
              }, {
                name: 'fsSelection',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usFirstCharIndex',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usLastCharIndex',
                type: 'USHORT',
                value: 0
              }, {
                name: 'sTypoAscender',
                type: 'SHORT',
                value: 0
              }, {
                name: 'sTypoDescender',
                type: 'SHORT',
                value: 0
              }, {
                name: 'sTypoLineGap',
                type: 'SHORT',
                value: 0
              }, {
                name: 'usWinAscent',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usWinDescent',
                type: 'USHORT',
                value: 0
              }, {
                name: 'ulCodePageRange1',
                type: 'ULONG',
                value: 0
              }, {
                name: 'ulCodePageRange2',
                type: 'ULONG',
                value: 0
              }, {
                name: 'sxHeight',
                type: 'SHORT',
                value: 0
              }, {
                name: 'sCapHeight',
                type: 'SHORT',
                value: 0
              }, {
                name: 'usDefaultChar',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usBreakChar',
                type: 'USHORT',
                value: 0
              }, {
                name: 'usMaxContext',
                type: 'USHORT',
                value: 0
              }], options);
            }

            var unicodeRanges_1 = unicodeRanges;
            var getUnicodeRange_1 = getUnicodeRange;
            var parse_1$9 = parseOS2Table;
            var make$8 = makeOS2Table;
            var os2 = {
              unicodeRanges: unicodeRanges_1,
              getUnicodeRange: getUnicodeRange_1,
              parse: parse_1$9,
              make: make$8
            };

            function parsePostTable(data, start) {
              var post = {};
              var p = new parse$2.Parser(data, start);
              var i;
              post.version = p.parseVersion();
              post.italicAngle = p.parseFixed();
              post.underlinePosition = p.parseShort();
              post.underlineThickness = p.parseShort();
              post.isFixedPitch = p.parseULong();
              post.minMemType42 = p.parseULong();
              post.maxMemType42 = p.parseULong();
              post.minMemType1 = p.parseULong();
              post.maxMemType1 = p.parseULong();

              switch (post.version) {
                case 1:
                  post.names = encoding.standardNames.slice();
                  break;

                case 2:
                  post.numberOfGlyphs = p.parseUShort();
                  post.glyphNameIndex = new Array(post.numberOfGlyphs);

                  for (i = 0; i < post.numberOfGlyphs; i++) {
                    post.glyphNameIndex[i] = p.parseUShort();
                  }

                  post.names = [];

                  for (i = 0; i < post.numberOfGlyphs; i++) {
                    if (post.glyphNameIndex[i] >= encoding.standardNames.length) {
                      var nameLength = p.parseChar();
                      post.names.push(p.parseString(nameLength));
                    }
                  }

                  break;

                case 2.5:
                  post.numberOfGlyphs = p.parseUShort();
                  post.offset = new Array(post.numberOfGlyphs);

                  for (i = 0; i < post.numberOfGlyphs; i++) {
                    post.offset[i] = p.parseChar();
                  }

                  break;
              }

              return post;
            }

            function makePostTable() {
              return new table.Table('post', [{
                name: 'version',
                type: 'FIXED',
                value: 0x00030000
              }, {
                name: 'italicAngle',
                type: 'FIXED',
                value: 0
              }, {
                name: 'underlinePosition',
                type: 'FWORD',
                value: 0
              }, {
                name: 'underlineThickness',
                type: 'FWORD',
                value: 0
              }, {
                name: 'isFixedPitch',
                type: 'ULONG',
                value: 0
              }, {
                name: 'minMemType42',
                type: 'ULONG',
                value: 0
              }, {
                name: 'maxMemType42',
                type: 'ULONG',
                value: 0
              }, {
                name: 'minMemType1',
                type: 'ULONG',
                value: 0
              }, {
                name: 'maxMemType1',
                type: 'ULONG',
                value: 0
              }]);
            }

            var parse_1$a = parsePostTable;
            var make$9 = makePostTable;
            var post = {
              parse: parse_1$a,
              make: make$9
            };

            function log2(v) {
              return Math.log(v) / Math.log(2) | 0;
            }

            function computeCheckSum(bytes) {
              while (bytes.length % 4 !== 0) {
                bytes.push(0);
              }

              var sum = 0;

              for (var i = 0; i < bytes.length; i += 4) {
                sum += (bytes[i] << 24) + (bytes[i + 1] << 16) + (bytes[i + 2] << 8) + bytes[i + 3];
              }

              sum %= Math.pow(2, 32);
              return sum;
            }

            function makeTableRecord(tag, checkSum, offset, length) {
              return new table.Table('Table Record', [{
                name: 'tag',
                type: 'TAG',
                value: tag !== undefined ? tag : ''
              }, {
                name: 'checkSum',
                type: 'ULONG',
                value: checkSum !== undefined ? checkSum : 0
              }, {
                name: 'offset',
                type: 'ULONG',
                value: offset !== undefined ? offset : 0
              }, {
                name: 'length',
                type: 'ULONG',
                value: length !== undefined ? length : 0
              }]);
            }

            function makeSfntTable(tables) {
              var sfnt = new table.Table('sfnt', [{
                name: 'version',
                type: 'TAG',
                value: 'OTTO'
              }, {
                name: 'numTables',
                type: 'USHORT',
                value: 0
              }, {
                name: 'searchRange',
                type: 'USHORT',
                value: 0
              }, {
                name: 'entrySelector',
                type: 'USHORT',
                value: 0
              }, {
                name: 'rangeShift',
                type: 'USHORT',
                value: 0
              }]);
              sfnt.tables = tables;
              sfnt.numTables = tables.length;
              var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
              sfnt.searchRange = 16 * highestPowerOf2;
              sfnt.entrySelector = log2(highestPowerOf2);
              sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;
              var recordFields = [];
              var tableFields = [];
              var offset = sfnt.sizeOf() + makeTableRecord().sizeOf() * sfnt.numTables;

              while (offset % 4 !== 0) {
                offset += 1;
                tableFields.push({
                  name: 'padding',
                  type: 'BYTE',
                  value: 0
                });
              }

              for (var i = 0; i < tables.length; i += 1) {
                var t = tables[i];
                check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
                var tableLength = t.sizeOf();
                var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
                recordFields.push({
                  name: tableRecord.tag + ' Table Record',
                  type: 'TABLE',
                  value: tableRecord
                });
                tableFields.push({
                  name: t.tableName + ' table',
                  type: 'TABLE',
                  value: t
                });
                offset += tableLength;
                check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');

                while (offset % 4 !== 0) {
                  offset += 1;
                  tableFields.push({
                    name: 'padding',
                    type: 'BYTE',
                    value: 0
                  });
                }
              } // Table records need to be sorted alphabetically.


              recordFields.sort(function (r1, r2) {
                if (r1.value.tag > r2.value.tag) {
                  return 1;
                } else {
                  return -1;
                }
              });
              sfnt.fields = sfnt.fields.concat(recordFields);
              sfnt.fields = sfnt.fields.concat(tableFields);
              return sfnt;
            } // Get the metrics for a character. If the string has more than one character
            // this function returns metrics for the first available character.
            // You can provide optional fallback metrics if no characters are available.


            function metricsForChar(font, chars, notFoundMetrics) {
              for (var i = 0; i < chars.length; i += 1) {
                var glyphIndex = font.charToGlyphIndex(chars[i]);

                if (glyphIndex > 0) {
                  var glyph = font.glyphs.get(glyphIndex);
                  return glyph.getMetrics();
                }
              }

              return notFoundMetrics;
            }

            function average(vs) {
              var sum = 0;

              for (var i = 0; i < vs.length; i += 1) {
                sum += vs[i];
              }

              return sum / vs.length;
            } // Convert the font object to a SFNT data structure.
            // This structure contains all the necessary tables and metadata to create a binary OTF file.


            function fontToSfntTable(font) {
              var xMins = [];
              var yMins = [];
              var xMaxs = [];
              var yMaxs = [];
              var advanceWidths = [];
              var leftSideBearings = [];
              var rightSideBearings = [];
              var firstCharIndex;
              var lastCharIndex = 0;
              var ulUnicodeRange1 = 0;
              var ulUnicodeRange2 = 0;
              var ulUnicodeRange3 = 0;
              var ulUnicodeRange4 = 0;

              for (var i = 0; i < font.glyphs.length; i += 1) {
                var glyph = font.glyphs.get(i);
                var unicode = glyph.unicode | 0;

                if (firstCharIndex > unicode || firstCharIndex === null) {
                  firstCharIndex = unicode;
                }

                if (lastCharIndex < unicode) {
                  lastCharIndex = unicode;
                }

                var position = os2.getUnicodeRange(unicode);

                if (position < 32) {
                  ulUnicodeRange1 |= 1 << position;
                } else if (position < 64) {
                  ulUnicodeRange2 |= 1 << position - 32;
                } else if (position < 96) {
                  ulUnicodeRange3 |= 1 << position - 64;
                } else if (position < 123) {
                  ulUnicodeRange4 |= 1 << position - 96;
                } else {
                  throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
                } // Skip non-important characters.


                if (glyph.name === '.notdef') continue;
                var metrics = glyph.getMetrics();
                xMins.push(metrics.xMin);
                yMins.push(metrics.yMin);
                xMaxs.push(metrics.xMax);
                yMaxs.push(metrics.yMax);
                leftSideBearings.push(metrics.leftSideBearing);
                rightSideBearings.push(metrics.rightSideBearing);
                advanceWidths.push(glyph.advanceWidth);
              }

              var globals = {
                xMin: Math.min.apply(null, xMins),
                yMin: Math.min.apply(null, yMins),
                xMax: Math.max.apply(null, xMaxs),
                yMax: Math.max.apply(null, yMaxs),
                advanceWidthMax: Math.max.apply(null, advanceWidths),
                advanceWidthAvg: average(advanceWidths),
                minLeftSideBearing: Math.min.apply(null, leftSideBearings),
                maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
                minRightSideBearing: Math.min.apply(null, rightSideBearings)
              };
              globals.ascender = font.ascender !== undefined ? font.ascender : globals.yMax;
              globals.descender = font.descender !== undefined ? font.descender : globals.yMin;
              var headTable = head.make({
                unitsPerEm: font.unitsPerEm,
                xMin: globals.xMin,
                yMin: globals.yMin,
                xMax: globals.xMax,
                yMax: globals.yMax
              });
              var hheaTable = hhea.make({
                ascender: globals.ascender,
                descender: globals.descender,
                advanceWidthMax: globals.advanceWidthMax,
                minLeftSideBearing: globals.minLeftSideBearing,
                minRightSideBearing: globals.minRightSideBearing,
                xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
                numberOfHMetrics: font.glyphs.length
              });
              var maxpTable = maxp.make(font.glyphs.length);
              var os2Table = os2.make({
                xAvgCharWidth: Math.round(globals.advanceWidthAvg),
                usWeightClass: 500,
                // Medium FIXME Make this configurable
                usWidthClass: 5,
                // Medium (normal) FIXME Make this configurable
                usFirstCharIndex: firstCharIndex,
                usLastCharIndex: lastCharIndex,
                ulUnicodeRange1: ulUnicodeRange1,
                ulUnicodeRange2: ulUnicodeRange2,
                ulUnicodeRange3: ulUnicodeRange3,
                ulUnicodeRange4: ulUnicodeRange4,
                // See http://typophile.com/node/13081 for more info on vertical metrics.
                // We get metrics for typical characters (such as "x" for xHeight).
                // We provide some fallback characters if characters are unavailable: their
                // ordering was chosen experimentally.
                sTypoAscender: globals.ascender,
                sTypoDescender: globals.descender,
                sTypoLineGap: 0,
                usWinAscent: globals.ascender,
                usWinDescent: -globals.descender,
                sxHeight: metricsForChar(font, 'xyvw', {
                  yMax: 0
                }).yMax,
                sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
                usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.

              });
              var hmtxTable = hmtx.make(font.glyphs);
              var cmapTable = cmap.make(font.glyphs);
              var englishFamilyName = font.getEnglishName('fontFamily');
              var englishStyleName = font.getEnglishName('fontSubfamily');
              var englishFullName = englishFamilyName + ' ' + englishStyleName;
              var postScriptName = font.getEnglishName('postScriptName');

              if (!postScriptName) {
                postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
              }

              var names = {};

              for (var n in font.names) {
                names[n] = font.names[n];
              }

              if (!names.uniqueID) {
                names.uniqueID = {
                  en: font.getEnglishName('manufacturer') + ':' + englishFullName
                };
              }

              if (!names.postScriptName) {
                names.postScriptName = {
                  en: postScriptName
                };
              }

              if (!names.preferredFamily) {
                names.preferredFamily = font.names.fontFamily;
              }

              if (!names.preferredSubfamily) {
                names.preferredSubfamily = font.names.fontSubfamily;
              }

              var languageTags = [];

              var nameTable = name$1.make(names, languageTags);

              var ltagTable = languageTags.length > 0 ? ltag.make(languageTags) : undefined;
              var postTable = post.make();
              var cffTable = cff.make(font.glyphs, {
                version: font.getEnglishName('version'),
                fullName: englishFullName,
                familyName: englishFamilyName,
                weightName: englishStyleName,
                postScriptName: postScriptName,
                unitsPerEm: font.unitsPerEm
              }); // The order does not matter because makeSfntTable() will sort them.

              var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];

              if (ltagTable) {
                tables.push(ltagTable);
              }

              var sfntTable = makeSfntTable(tables); // Compute the font's checkSum and store it in head.checkSumAdjustment.

              var bytes = sfntTable.encode();
              var checkSum = computeCheckSum(bytes);
              var tableFields = sfntTable.fields;
              var checkSumAdjusted = false;

              for (i = 0; i < tableFields.length; i += 1) {
                if (tableFields[i].name === 'head table') {
                  tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
                  checkSumAdjusted = true;
                  break;
                }
              }

              if (!checkSumAdjusted) {
                throw new Error('Could not find head table with checkSum to adjust.');
              }

              return sfntTable;
            }

            var computeCheckSum_1 = computeCheckSum;
            var make$a = makeSfntTable;
            var fontToTable = fontToSfntTable;
            var sfnt = {
              computeCheckSum: computeCheckSum_1,
              make: make$a,
              fontToTable: fontToTable
            };

            // It contains a set of glyphs and methods to draw text on a drawing context,
            // or to get a path representing the text.


            function Font(options) {
              options = options || {}; // OS X will complain if the names are empty, so we put a single space everywhere by default.

              this.names = {
                fontFamily: {
                  en: options.familyName || ' '
                },
                fontSubfamily: {
                  en: options.styleName || ' '
                },
                designer: {
                  en: options.designer || ' '
                },
                designerURL: {
                  en: options.designerURL || ' '
                },
                manufacturer: {
                  en: options.manufacturer || ' '
                },
                manufacturerURL: {
                  en: options.manufacturerURL || ' '
                },
                license: {
                  en: options.license || ' '
                },
                licenseURL: {
                  en: options.licenseURL || ' '
                },
                version: {
                  en: options.version || 'Version 0.1'
                },
                description: {
                  en: options.description || ' '
                },
                copyright: {
                  en: options.copyright || ' '
                },
                trademark: {
                  en: options.trademark || ' '
                }
              };
              this.unitsPerEm = options.unitsPerEm || 1000;
              this.ascender = options.ascender;
              this.descender = options.descender;
              this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.

              this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
              this.encoding = new encoding.DefaultEncoding(this);
              this.tables = {};
            } // Check if the font has a glyph for the given character.


            Font.prototype.hasChar = function (c) {
              return this.encoding.charToGlyphIndex(c) !== null;
            }; // Convert the given character to a single glyph index.
            // Note that this function assumes that there is a one-to-one mapping between
            // the given character and a glyph; for complex scripts this might not be the case.


            Font.prototype.charToGlyphIndex = function (s) {
              return this.encoding.charToGlyphIndex(s);
            }; // Convert the given character to a single Glyph object.
            // Note that this function assumes that there is a one-to-one mapping between
            // the given character and a glyph; for complex scripts this might not be the case.


            Font.prototype.charToGlyph = function (c) {
              var glyphIndex = this.charToGlyphIndex(c);
              var glyph = this.glyphs.get(glyphIndex);

              if (!glyph) {
                // .notdef
                glyph = this.glyphs.get(0);
              }

              return glyph;
            }; // Convert the given text to a list of Glyph objects.
            // Note that there is no strict one-to-one mapping between characters and
            // glyphs, so the list of returned glyphs can be larger or smaller than the
            // length of the given string.


            Font.prototype.stringToGlyphs = function (s) {
              var glyphs = [];

              for (var i = 0; i < s.length; i += 1) {
                var c = s[i];
                glyphs.push(this.charToGlyph(c));
              }

              return glyphs;
            };

            Font.prototype.nameToGlyphIndex = function (name) {
              return this.glyphNames.nameToGlyphIndex(name);
            };

            Font.prototype.nameToGlyph = function (name) {
              var glyphIndex = this.nametoGlyphIndex(name);
              var glyph = this.glyphs.get(glyphIndex);

              if (!glyph) {
                // .notdef
                glyph = this.glyphs.get(0);
              }

              return glyph;
            };

            Font.prototype.glyphIndexToName = function (gid) {
              if (!this.glyphNames.glyphIndexToName) {
                return '';
              }

              return this.glyphNames.glyphIndexToName(gid);
            }; // Retrieve the value of the kerning pair between the left glyph (or its index)
            // and the right glyph (or its index). If no kerning pair is found, return 0.
            // The kerning value gets added to the advance width when calculating the spacing
            // between glyphs.


            Font.prototype.getKerningValue = function (leftGlyph, rightGlyph) {
              leftGlyph = leftGlyph.index || leftGlyph;
              rightGlyph = rightGlyph.index || rightGlyph;
              var gposKerning = this.getGposKerningValue;
              return gposKerning ? gposKerning(leftGlyph, rightGlyph) : this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
            }; // Helper function that invokes the given callback for each glyph in the given text.
            // The callback gets `(glyph, x, y, fontSize, options)`.


            Font.prototype.forEachGlyph = function (text, x, y, fontSize, options, callback) {
              x = x !== undefined ? x : 0;
              y = y !== undefined ? y : 0;
              fontSize = fontSize !== undefined ? fontSize : 72;
              options = options || {};
              var kerning = options.kerning === undefined ? true : options.kerning;
              var fontScale = 1 / this.unitsPerEm * fontSize;
              var glyphs = this.stringToGlyphs(text);

              for (var i = 0; i < glyphs.length; i += 1) {
                var glyph = glyphs[i];
                callback(glyph, x, y, fontSize, options);

                if (glyph.advanceWidth) {
                  x += glyph.advanceWidth * fontScale;
                }

                if (kerning && i < glyphs.length - 1) {
                  var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);
                  x += kerningValue * fontScale;
                }
              }
            }; // Create a Path object that represents the given text.
            //
            // text - The text to create.
            // x - Horizontal position of the beginning of the text. (default: 0)
            // y - Vertical position of the *baseline* of the text. (default: 0)
            // fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
            // Options is an optional object that contains:
            // - kerning - Whether to take kerning information into account. (default: true)
            //
            // Returns a Path object.


            Font.prototype.getPath = function (text, x, y, fontSize, options) {
              var fullPath = new path$1.Path();
              this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
                var glyphPath = glyph.getPath(gX, gY, gFontSize);
                fullPath.extend(glyphPath);
              });
              return fullPath;
            }; // Draw the text on the given drawing context.
            //
            // ctx - A 2D drawing context, like Canvas.
            // text - The text to create.
            // x - Horizontal position of the beginning of the text. (default: 0)
            // y - Vertical position of the *baseline* of the text. (default: 0)
            // fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
            // Options is an optional object that contains:
            // - kerning - Whether to take kerning information into account. (default: true)


            Font.prototype.draw = function (ctx, text, x, y, fontSize, options) {
              this.getPath(text, x, y, fontSize, options).draw(ctx);
            }; // Draw the points of all glyphs in the text.
            // On-curve points will be drawn in blue, off-curve points will be drawn in red.
            //
            // ctx - A 2D drawing context, like Canvas.
            // text - The text to create.
            // x - Horizontal position of the beginning of the text. (default: 0)
            // y - Vertical position of the *baseline* of the text. (default: 0)
            // fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
            // Options is an optional object that contains:
            // - kerning - Whether to take kerning information into account. (default: true)


            Font.prototype.drawPoints = function (ctx, text, x, y, fontSize, options) {
              this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
                glyph.drawPoints(ctx, gX, gY, gFontSize);
              });
            }; // Draw lines indicating important font measurements for all glyphs in the text.
            // Black lines indicate the origin of the coordinate system (point 0,0).
            // Blue lines indicate the glyph bounding box.
            // Green line indicates the advance width of the glyph.
            //
            // ctx - A 2D drawing context, like Canvas.
            // text - The text to create.
            // x - Horizontal position of the beginning of the text. (default: 0)
            // y - Vertical position of the *baseline* of the text. (default: 0)
            // fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
            // Options is an optional object that contains:
            // - kerning - Whether to take kerning information into account. (default: true)


            Font.prototype.drawMetrics = function (ctx, text, x, y, fontSize, options) {
              this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {
                glyph.drawMetrics(ctx, gX, gY, gFontSize);
              });
            };

            Font.prototype.getEnglishName = function (name) {
              var translations = this.names[name];

              if (translations) {
                return translations.en;
              }
            }; // Validate


            Font.prototype.validate = function () {

              var _this = this;

              function assert(predicate, message) {
              }

              function assertNamePresent(name) {
                var englishName = _this.getEnglishName(name);

                assert(englishName && englishName.trim().length > 0, 'No English ' + name + ' specified.');
              } // Identification information


              assertNamePresent('fontFamily');
              assertNamePresent('weightName');
              assertNamePresent('manufacturer');
              assertNamePresent('copyright');
              assertNamePresent('version'); // Dimension information

              assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
            }; // Convert the font object to a SFNT data structure.
            // This structure contains all the necessary tables and metadata to create a binary OTF file.


            Font.prototype.toTables = function () {
              return sfnt.fontToTable(this);
            };

            Font.prototype.toBuffer = function () {
              var sfntTable = this.toTables();
              var bytes = sfntTable.encode();
              var buffer = new ArrayBuffer(bytes.length);
              var intArray = new Uint8Array(buffer);

              for (var i = 0; i < bytes.length; i++) {
                intArray[i] = bytes[i];
              }

              return buffer;
            }; // Initiate a download of the OpenType font.


            Font.prototype.download = function () {
              var familyName = this.getEnglishName('fontFamily');
              var styleName = this.getEnglishName('fontSubfamily');
              var fileName = familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
              var buffer = this.toBuffer();
              window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
              window.requestFileSystem(window.TEMPORARY, buffer.byteLength, function (fs) {
                fs.root.getFile(fileName, {
                  create: true
                }, function (fileEntry) {
                  fileEntry.createWriter(function (writer) {
                    var dataView = new DataView(buffer);
                    var blob = new Blob([dataView], {
                      type: 'font/opentype'
                    });
                    writer.write(blob);
                    writer.addEventListener('writeend', function () {
                      // Navigating to the file will download it.
                      location.href = fileEntry.toURL();
                    }, false);
                  });
                });
              }, function (err) {
                throw err;
              });
            };

            var Font_1 = Font;
            var font = {
              Font: Font_1
            };

            function addName(name, names) {
              var nameString = JSON.stringify(name);
              var nameID = 256;

              for (var nameKey in names) {
                var n = parseInt(nameKey);

                if (!n || n < 256) {
                  continue;
                }

                if (JSON.stringify(names[nameKey]) === nameString) {
                  return n;
                }

                if (nameID <= n) {
                  nameID = n + 1;
                }
              }

              names[nameID] = name;
              return nameID;
            }

            function makeFvarAxis(axis, names) {
              var nameID = addName(axis.name, names);
              return new table.Table('fvarAxis', [{
                name: 'tag',
                type: 'TAG',
                value: axis.tag
              }, {
                name: 'minValue',
                type: 'FIXED',
                value: axis.minValue << 16
              }, {
                name: 'defaultValue',
                type: 'FIXED',
                value: axis.defaultValue << 16
              }, {
                name: 'maxValue',
                type: 'FIXED',
                value: axis.maxValue << 16
              }, {
                name: 'flags',
                type: 'USHORT',
                value: 0
              }, {
                name: 'nameID',
                type: 'USHORT',
                value: nameID
              }]);
            }

            function parseFvarAxis(data, start, names) {
              var axis = {};
              var p = new parse$2.Parser(data, start);
              axis.tag = p.parseTag();
              axis.minValue = p.parseFixed();
              axis.defaultValue = p.parseFixed();
              axis.maxValue = p.parseFixed();
              p.skip('uShort', 1); // reserved for flags; no values defined

              axis.name = names[p.parseUShort()] || {};
              return axis;
            }

            function makeFvarInstance(inst, axes, names) {
              var nameID = addName(inst.name, names);
              var fields = [{
                name: 'nameID',
                type: 'USHORT',
                value: nameID
              }, {
                name: 'flags',
                type: 'USHORT',
                value: 0
              }];

              for (var i = 0; i < axes.length; ++i) {
                var axisTag = axes[i].tag;
                fields.push({
                  name: 'axis ' + axisTag,
                  type: 'FIXED',
                  value: inst.coordinates[axisTag] << 16
                });
              }

              return new table.Table('fvarInstance', fields);
            }

            function parseFvarInstance(data, start, axes, names) {
              var inst = {};
              var p = new parse$2.Parser(data, start);
              inst.name = names[p.parseUShort()] || {};
              p.skip('uShort', 1); // reserved for flags; no values defined

              inst.coordinates = {};

              for (var i = 0; i < axes.length; ++i) {
                inst.coordinates[axes[i].tag] = p.parseFixed();
              }

              return inst;
            }

            function makeFvarTable(fvar, names) {
              var result = new table.Table('fvar', [{
                name: 'version',
                type: 'ULONG',
                value: 0x10000
              }, {
                name: 'offsetToData',
                type: 'USHORT',
                value: 0
              }, {
                name: 'countSizePairs',
                type: 'USHORT',
                value: 2
              }, {
                name: 'axisCount',
                type: 'USHORT',
                value: fvar.axes.length
              }, {
                name: 'axisSize',
                type: 'USHORT',
                value: 20
              }, {
                name: 'instanceCount',
                type: 'USHORT',
                value: fvar.instances.length
              }, {
                name: 'instanceSize',
                type: 'USHORT',
                value: 4 + fvar.axes.length * 4
              }]);
              result.offsetToData = result.sizeOf();

              for (var i = 0; i < fvar.axes.length; i++) {
                result.fields.push({
                  name: 'axis ' + i,
                  type: 'TABLE',
                  value: makeFvarAxis(fvar.axes[i], names)
                });
              }

              for (var j = 0; j < fvar.instances.length; j++) {
                result.fields.push({
                  name: 'instance ' + j,
                  type: 'TABLE',
                  value: makeFvarInstance(fvar.instances[j], fvar.axes, names)
                });
              }

              return result;
            }

            function parseFvarTable(data, start, names) {
              var p = new parse$2.Parser(data, start);
              var tableVersion = p.parseULong();
              check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
              var offsetToData = p.parseOffset16(); // Skip countSizePairs.

              p.skip('uShort', 1);
              var axisCount = p.parseUShort();
              var axisSize = p.parseUShort();
              var instanceCount = p.parseUShort();
              var instanceSize = p.parseUShort();
              var axes = [];

              for (var i = 0; i < axisCount; i++) {
                axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
              }

              var instances = [];
              var instanceStart = start + offsetToData + axisCount * axisSize;

              for (var j = 0; j < instanceCount; j++) {
                instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
              }

              return {
                axes: axes,
                instances: instances
              };
            }

            var make$b = makeFvarTable;
            var parse_1$b = parseFvarTable;
            var fvar = {
              make: make$b,
              parse: parse_1$b
            };

            function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
              var v;

              if ((flag & shortVectorBitMask) > 0) {
                // The coordinate is 1 byte long.
                v = p.parseByte(); // The `same` bit is re-used for short values to signify the sign of the value.

                if ((flag & sameBitMask) === 0) {
                  v = -v;
                }

                v = previousValue + v;
              } else {
                //  The coordinate is 2 bytes long.
                // If the `same` bit is set, the coordinate is the same as the previous coordinate.
                if ((flag & sameBitMask) > 0) {
                  v = previousValue;
                } else {
                  // Parse the coordinate as a signed 16-bit delta value.
                  v = previousValue + p.parseShort();
                }
              }

              return v;
            } // Parse a TrueType glyph.


            function parseGlyph(glyph, data, start) {
              var p = new parse$2.Parser(data, start);
              glyph.numberOfContours = p.parseShort();
              glyph.xMin = p.parseShort();
              glyph.yMin = p.parseShort();
              glyph.xMax = p.parseShort();
              glyph.yMax = p.parseShort();
              var flags;
              var flag;

              if (glyph.numberOfContours > 0) {
                var i; // This glyph is not a composite.

                var endPointIndices = glyph.endPointIndices = [];

                for (i = 0; i < glyph.numberOfContours; i += 1) {
                  endPointIndices.push(p.parseUShort());
                }

                glyph.instructionLength = p.parseUShort();
                glyph.instructions = [];

                for (i = 0; i < glyph.instructionLength; i += 1) {
                  glyph.instructions.push(p.parseByte());
                }

                var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
                flags = [];

                for (i = 0; i < numberOfCoordinates; i += 1) {
                  flag = p.parseByte();
                  flags.push(flag); // If bit 3 is set, we repeat this flag n times, where n is the next byte.

                  if ((flag & 8) > 0) {
                    var repeatCount = p.parseByte();

                    for (var j = 0; j < repeatCount; j += 1) {
                      flags.push(flag);
                      i += 1;
                    }
                  }
                }

                check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

                if (endPointIndices.length > 0) {
                  var points = [];
                  var point; // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.

                  if (numberOfCoordinates > 0) {
                    for (i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = {};
                      point.onCurve = !!(flag & 1);
                      point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
                      points.push(point);
                    }

                    var px = 0;

                    for (i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = points[i];
                      point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                      px = point.x;
                    }

                    var py = 0;

                    for (i = 0; i < numberOfCoordinates; i += 1) {
                      flag = flags[i];
                      point = points[i];
                      point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                      py = point.y;
                    }
                  }

                  glyph.points = points;
                } else {
                  glyph.points = [];
                }
              } else if (glyph.numberOfContours === 0) {
                glyph.points = [];
              } else {
                glyph.isComposite = true;
                glyph.points = [];
                glyph.components = [];
                var moreComponents = true;

                while (moreComponents) {
                  flags = p.parseUShort();
                  var component = {
                    glyphIndex: p.parseUShort(),
                    xScale: 1,
                    scale01: 0,
                    scale10: 0,
                    yScale: 1,
                    dx: 0,
                    dy: 0
                  };

                  if ((flags & 1) > 0) {
                    // The arguments are words
                    component.dx = p.parseShort();
                    component.dy = p.parseShort();
                  } else {
                    // The arguments are bytes
                    component.dx = p.parseChar();
                    component.dy = p.parseChar();
                  }

                  if ((flags & 8) > 0) {
                    // We have a scale
                    component.xScale = component.yScale = p.parseF2Dot14();
                  } else if ((flags & 64) > 0) {
                    // We have an X / Y scale
                    component.xScale = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                  } else if ((flags & 128) > 0) {
                    // We have a 2x2 transformation
                    component.xScale = p.parseF2Dot14();
                    component.scale01 = p.parseF2Dot14();
                    component.scale10 = p.parseF2Dot14();
                    component.yScale = p.parseF2Dot14();
                  }

                  glyph.components.push(component);
                  moreComponents = !!(flags & 32);
                }
              }
            } // Transform an array of points and return a new array.


            function transformPoints(points, transform) {
              var newPoints = [];

              for (var i = 0; i < points.length; i += 1) {
                var pt = points[i];
                var newPt = {
                  x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                  y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                  onCurve: pt.onCurve,
                  lastPointOfContour: pt.lastPointOfContour
                };
                newPoints.push(newPt);
              }

              return newPoints;
            }

            function getContours(points) {
              var contours = [];
              var currentContour = [];

              for (var i = 0; i < points.length; i += 1) {
                var pt = points[i];
                currentContour.push(pt);

                if (pt.lastPointOfContour) {
                  contours.push(currentContour);
                  currentContour = [];
                }
              }

              check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
              return contours;
            } // Convert the TrueType glyph outline to a Path.


            function getPath(points) {
              var p = new path$1.Path();

              if (!points) {
                return p;
              }

              var contours = getContours(points);

              for (var i = 0; i < contours.length; i += 1) {
                var contour = contours[i];
                var firstPt = contour[0];
                var lastPt = contour[contour.length - 1];
                var curvePt;
                var realFirstPoint;

                if (firstPt.onCurve) {
                  curvePt = null; // The first point will be consumed by the moveTo command,
                  // so skip it in the loop.

                  realFirstPoint = true;
                } else {
                  if (lastPt.onCurve) {
                    // If the first point is off-curve and the last point is on-curve,
                    // start at the last point.
                    firstPt = lastPt;
                  } else {
                    // If both first and last points are off-curve, start at their middle.
                    firstPt = {
                      x: (firstPt.x + lastPt.x) / 2,
                      y: (firstPt.y + lastPt.y) / 2
                    };
                  }

                  curvePt = firstPt; // The first point is synthesized, so don't skip the real first point.

                  realFirstPoint = false;
                }

                p.moveTo(firstPt.x, firstPt.y);

                for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {
                  var pt = contour[j];
                  var prevPt = j === 0 ? firstPt : contour[j - 1];

                  if (prevPt.onCurve && pt.onCurve) {
                    // This is a straight line.
                    p.lineTo(pt.x, pt.y);
                  } else if (prevPt.onCurve && !pt.onCurve) {
                    curvePt = pt;
                  } else if (!prevPt.onCurve && !pt.onCurve) {
                    var midPt = {
                      x: (prevPt.x + pt.x) / 2,
                      y: (prevPt.y + pt.y) / 2
                    };
                    p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);
                    curvePt = pt;
                  } else if (!prevPt.onCurve && pt.onCurve) {
                    // Previous point off-curve, this point on-curve.
                    p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                    curvePt = null;
                  } else {
                    throw new Error('Invalid state.');
                  }
                }

                if (firstPt !== lastPt) {
                  // Connect the last and first points
                  if (curvePt) {
                    p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
                  } else {
                    p.lineTo(firstPt.x, firstPt.y);
                  }
                }
              }

              p.closePath();
              return p;
            }

            function buildPath(glyphs, glyph) {
              if (glyph.isComposite) {
                for (var j = 0; j < glyph.components.length; j += 1) {
                  var component = glyph.components[j];
                  var componentGlyph = glyphs.get(component.glyphIndex); // Force the ttfGlyphLoader to parse the glyph.

                  componentGlyph.getPath();

                  if (componentGlyph.points) {
                    var transformedPoints = transformPoints(componentGlyph.points, component);
                    glyph.points = glyph.points.concat(transformedPoints);
                  }
                }
              }

              return getPath(glyph.points);
            } // Parse all the glyphs according to the offsets from the `loca` table.


            function parseGlyfTable(data, start, loca, font) {
              var glyphs = new glyphset.GlyphSet(font);
              var i; // The last element of the loca table is invalid.

              for (i = 0; i < loca.length - 1; i += 1) {
                var offset = loca[i];
                var nextOffset = loca[i + 1];

                if (offset !== nextOffset) {
                  glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
                } else {
                  glyphs.push(i, glyphset.glyphLoader(font, i));
                }
              }

              return glyphs;
            }

            var parse_1$c = parseGlyfTable;
            var glyf = {
              parse: parse_1$c
            };

            // These lists are unused by now, this function is just the basis for a real parsing.


            function parseTaggedListTable(data, start) {
              var p = new parse$2.Parser(data, start);
              var n = p.parseUShort();
              var list = [];

              for (var i = 0; i < n; i++) {
                list[p.parseTag()] = {
                  offset: p.parseUShort()
                };
              }

              return list;
            } // Parse a coverage table in a GSUB, GPOS or GDEF table.
            // Format 1 is a simple list of glyph ids,
            // Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.


            function parseCoverageTable(data, start) {
              var p = new parse$2.Parser(data, start);
              var format = p.parseUShort();
              var count = p.parseUShort();

              if (format === 1) {
                return p.parseUShortList(count);
              } else if (format === 2) {
                var coverage = [];

                for (; count--;) {
                  var begin = p.parseUShort();
                  var end = p.parseUShort();
                  var index = p.parseUShort();

                  for (var i = begin; i <= end; i++) {
                    coverage[index++] = i;
                  }
                }

                return coverage;
              }
            } // Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
            // Returns a function that gets a class value from a glyph ID.


            function parseClassDefTable(data, start) {
              var p = new parse$2.Parser(data, start);
              var format = p.parseUShort();

              if (format === 1) {
                // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.
                var startGlyph = p.parseUShort();
                var glyphCount = p.parseUShort();
                var classes = p.parseUShortList(glyphCount);
                return function (glyphID) {
                  return classes[glyphID - startGlyph] || 0;
                };
              } else if (format === 2) {
                // Format 2 defines multiple groups of glyph indices that belong to the same class.
                var rangeCount = p.parseUShort();
                var startGlyphs = [];
                var endGlyphs = [];
                var classValues = [];

                for (var i = 0; i < rangeCount; i++) {
                  startGlyphs[i] = p.parseUShort();
                  endGlyphs[i] = p.parseUShort();
                  classValues[i] = p.parseUShort();
                }

                return function (glyphID) {
                  var l = 0;
                  var r = startGlyphs.length - 1;

                  while (l < r) {
                    var c = l + r + 1 >> 1;

                    if (glyphID < startGlyphs[c]) {
                      r = c - 1;
                    } else {
                      l = c;
                    }
                  }

                  if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {
                    return classValues[l] || 0;
                  }

                  return 0;
                };
              }
            } // Parse a pair adjustment positioning subtable, format 1 or format 2
            // The subtable is returned in the form of a lookup function.


            function parsePairPosSubTable(data, start) {
              var p = new parse$2.Parser(data, start); // This part is common to format 1 and format 2 subtables

              var format = p.parseUShort();
              var coverageOffset = p.parseUShort();
              var coverage = parseCoverageTable(data, start + coverageOffset); // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph
              // Only valueFormat1=4 and valueFormat2=0 is supported.

              var valueFormat1 = p.parseUShort();
              var valueFormat2 = p.parseUShort();
              var value1;
              var value2;
              if (valueFormat1 !== 4 || valueFormat2 !== 0) return;
              var sharedPairSets = {};

              if (format === 1) {
                // Pair Positioning Adjustment: Format 1
                var pairSetCount = p.parseUShort();
                var pairSet = []; // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index

                var pairSetOffsets = p.parseOffset16List(pairSetCount);

                for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {
                  var pairSetOffset = pairSetOffsets[firstGlyph];
                  var sharedPairSet = sharedPairSets[pairSetOffset];

                  if (!sharedPairSet) {
                    // Parse a pairset table in a pair adjustment subtable format 1
                    sharedPairSet = {};
                    p.relativeOffset = pairSetOffset;
                    var pairValueCount = p.parseUShort();

                    for (; pairValueCount--;) {
                      var secondGlyph = p.parseUShort();
                      if (valueFormat1) value1 = p.parseShort();
                      if (valueFormat2) value2 = p.parseShort(); // We only support valueFormat1 = 4 and valueFormat2 = 0,
                      // so value1 is the XAdvance and value2 is empty.

                      sharedPairSet[secondGlyph] = value1;
                    }
                  }

                  pairSet[coverage[firstGlyph]] = sharedPairSet;
                }

                return function (leftGlyph, rightGlyph) {
                  var pairs = pairSet[leftGlyph];
                  if (pairs) return pairs[rightGlyph];
                };
              } else if (format === 2) {
                // Pair Positioning Adjustment: Format 2
                var classDef1Offset = p.parseUShort();
                var classDef2Offset = p.parseUShort();
                var class1Count = p.parseUShort();
                var class2Count = p.parseUShort();
                var getClass1 = parseClassDefTable(data, start + classDef1Offset);
                var getClass2 = parseClassDefTable(data, start + classDef2Offset); // Parse kerning values by class pair.

                var kerningMatrix = [];

                for (var i = 0; i < class1Count; i++) {
                  var kerningRow = kerningMatrix[i] = [];

                  for (var j = 0; j < class2Count; j++) {
                    if (valueFormat1) value1 = p.parseShort();
                    if (valueFormat2) value2 = p.parseShort(); // We only support valueFormat1 = 4 and valueFormat2 = 0,
                    // so value1 is the XAdvance and value2 is empty.

                    kerningRow[j] = value1;
                  }
                } // Convert coverage list to a hash


                var covered = {};

                for (i = 0; i < coverage.length; i++) covered[coverage[i]] = 1; // Get the kerning value for a specific glyph pair.


                return function (leftGlyph, rightGlyph) {
                  if (!covered[leftGlyph]) return;
                  var class1 = getClass1(leftGlyph);
                  var class2 = getClass2(rightGlyph);
                  var kerningRow = kerningMatrix[class1];

                  if (kerningRow) {
                    return kerningRow[class2];
                  }
                };
              }
            } // Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).


            function parseLookupTable(data, start) {
              var p = new parse$2.Parser(data, start);
              var lookupType = p.parseUShort();
              var lookupFlag = p.parseUShort();
              var useMarkFilteringSet = lookupFlag & 0x10;
              var subTableCount = p.parseUShort();
              var subTableOffsets = p.parseOffset16List(subTableCount);
              var table = {
                lookupType: lookupType,
                lookupFlag: lookupFlag,
                markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1
              }; // LookupType 2, Pair adjustment

              if (lookupType === 2) {
                var subtables = [];

                for (var i = 0; i < subTableCount; i++) {
                  subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));
                } // Return a function which finds the kerning values in the subtables.


                table.getKerningValue = function (leftGlyph, rightGlyph) {
                  for (var i = subtables.length; i--;) {
                    var value = subtables[i](leftGlyph, rightGlyph);
                    if (value !== undefined) return value;
                  }

                  return 0;
                };
              }

              return table;
            } // Parse the `GPOS` table which contains, among other things, kerning pairs.
            // https://www.microsoft.com/typography/OTSPEC/gpos.htm


            function parseGposTable(data, start, font) {
              var p = new parse$2.Parser(data, start);
              var tableVersion = p.parseFixed();
              check.argument(tableVersion === 1, 'Unsupported GPOS table version.'); // ScriptList and FeatureList - ignored for now

              parseTaggedListTable(data, start + p.parseUShort()); // 'kern' is the feature we are looking for.

              parseTaggedListTable(data, start + p.parseUShort()); // LookupList

              var lookupListOffset = p.parseUShort();
              p.relativeOffset = lookupListOffset;
              var lookupCount = p.parseUShort();
              var lookupTableOffsets = p.parseOffset16List(lookupCount);
              var lookupListAbsoluteOffset = start + lookupListOffset;

              for (var i = 0; i < lookupCount; i++) {
                var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);
                if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;
              }
            }

            var parse_1$d = parseGposTable;
            var gpos = {
              parse: parse_1$d
            };

            function parseKernTable(data, start) {
              var pairs = {};
              var p = new parse$2.Parser(data, start);
              var tableVersion = p.parseUShort();
              check.argument(tableVersion === 0, 'Unsupported kern table version.'); // Skip nTables.

              p.skip('uShort', 1);
              var subTableVersion = p.parseUShort();
              check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.'); // Skip subTableLength, subTableCoverage

              p.skip('uShort', 2);
              var nPairs = p.parseUShort(); // Skip searchRange, entrySelector, rangeShift.

              p.skip('uShort', 3);

              for (var i = 0; i < nPairs; i += 1) {
                var leftIndex = p.parseUShort();
                var rightIndex = p.parseUShort();
                var value = p.parseShort();
                pairs[leftIndex + ',' + rightIndex] = value;
              }

              return pairs;
            }

            var parse_1$e = parseKernTable;
            var kern = {
              parse: parse_1$e
            };

            // relative to the beginning of the glyphData table.
            // The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
            // The loca table has two versions: a short version where offsets are stored as uShorts, and a long
            // version where offsets are stored as uLongs. The `head` table specifies which version to use
            // (under indexToLocFormat).


            function parseLocaTable(data, start, numGlyphs, shortVersion) {
              var p = new parse$2.Parser(data, start);
              var parseFn = shortVersion ? p.parseUShort : p.parseULong; // There is an extra entry after the last index element to compute the length of the last glyph.
              // That's why we use numGlyphs + 1.

              var glyphOffsets = [];

              for (var i = 0; i < numGlyphs + 1; i += 1) {
                var glyphOffset = parseFn.call(p);

                if (shortVersion) {
                  // The short table version stores the actual offset divided by 2.
                  glyphOffset *= 2;
                }

                glyphOffsets.push(glyphOffset);
              }

              return glyphOffsets;
            }

            var parse_1$f = parseLocaTable;
            var loca = {
              parse: parse_1$f
            };

            // Convert a Node.js Buffer to an ArrayBuffer


            function toArrayBuffer(buffer) {
              var arrayBuffer = new ArrayBuffer(buffer.length);
              var data = new Uint8Array(arrayBuffer);

              for (var i = 0; i < buffer.length; i += 1) {
                data[i] = buffer[i];
              }

              return arrayBuffer;
            }

            function loadFromFile(path, callback) {
              var fs$1 = fs;
              fs$1.readFile(path, function (err, buffer) {
                if (err) {
                  return callback(err.message);
                }

                callback(null, toArrayBuffer(buffer));
              });
            }

            function loadFromUrl(url, callback) {
              var request = new XMLHttpRequest();
              request.open('get', url, true);
              request.responseType = 'arraybuffer';

              request.onload = function () {
                if (request.status !== 200) {
                  return callback('Font could not be loaded: ' + request.statusText);
                }

                return callback(null, request.response);
              };

              request.send();
            } // Public API ///////////////////////////////////////////////////////////
            // Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
            // Throws an error if the font could not be parsed.


            function parseBuffer(buffer) {
              var indexToLocFormat;
              var ltagTable;
              var cffOffset;
              var fvarOffset;
              var glyfOffset;
              var gposOffset;
              var hmtxOffset;
              var kernOffset;
              var locaOffset;
              var nameOffset; // OpenType fonts use big endian byte ordering.
              // We can't rely on typed array view types, because they operate with the endianness of the host computer.
              // Instead we use DataViews where we can specify endianness.

              var font$1 = new font.Font();
              var data = new DataView(buffer, 0);
              var version = parse$2.getFixed(data, 0);

              if (version === 1.0) {
                font$1.outlinesFormat = 'truetype';
              } else {
                version = parse$2.getTag(data, 0);

                if (version === 'OTTO') {
                  font$1.outlinesFormat = 'cff';
                } else {
                  throw new Error('Unsupported OpenType version ' + version);
                }
              }

              var numTables = parse$2.getUShort(data, 4); // Offset into the table records.

              var p = 12;

              for (var i = 0; i < numTables; i += 1) {
                var tag = parse$2.getTag(data, p);
                var offset = parse$2.getULong(data, p + 8);

                switch (tag) {
                  case 'cmap':
                    font$1.tables.cmap = cmap.parse(data, offset);
                    font$1.encoding = new encoding.CmapEncoding(font$1.tables.cmap);
                    break;

                  case 'fvar':
                    fvarOffset = offset;
                    break;

                  case 'head':
                    font$1.tables.head = head.parse(data, offset);
                    font$1.unitsPerEm = font$1.tables.head.unitsPerEm;
                    indexToLocFormat = font$1.tables.head.indexToLocFormat;
                    break;

                  case 'hhea':
                    font$1.tables.hhea = hhea.parse(data, offset);
                    font$1.ascender = font$1.tables.hhea.ascender;
                    font$1.descender = font$1.tables.hhea.descender;
                    font$1.numberOfHMetrics = font$1.tables.hhea.numberOfHMetrics;
                    break;

                  case 'hmtx':
                    hmtxOffset = offset;
                    break;

                  case 'ltag':
                    ltagTable = ltag.parse(data, offset);
                    break;

                  case 'maxp':
                    font$1.tables.maxp = maxp.parse(data, offset);
                    font$1.numGlyphs = font$1.tables.maxp.numGlyphs;
                    break;

                  case 'name':
                    nameOffset = offset;
                    break;

                  case 'OS/2':
                    font$1.tables.os2 = os2.parse(data, offset);
                    break;

                  case 'post':
                    font$1.tables.post = post.parse(data, offset);
                    font$1.glyphNames = new encoding.GlyphNames(font$1.tables.post);
                    break;

                  case 'glyf':
                    glyfOffset = offset;
                    break;

                  case 'loca':
                    locaOffset = offset;
                    break;

                  case 'CFF ':
                    cffOffset = offset;
                    break;

                  case 'kern':
                    kernOffset = offset;
                    break;

                  case 'GPOS':
                    gposOffset = offset;
                    break;
                }

                p += 16;
              }

              font$1.tables.name = name$1.parse(data, nameOffset, ltagTable);
              font$1.names = font$1.tables.name;

              if (glyfOffset && locaOffset) {
                var shortVersion = indexToLocFormat === 0;
                var locaTable = loca.parse(data, locaOffset, font$1.numGlyphs, shortVersion);
                font$1.glyphs = glyf.parse(data, glyfOffset, locaTable, font$1);
              } else if (cffOffset) {
                cff.parse(data, cffOffset, font$1);
              } else {
                throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
              }

              hmtx.parse(data, hmtxOffset, font$1.numberOfHMetrics, font$1.numGlyphs, font$1.glyphs);
              encoding.addGlyphNames(font$1);

              if (kernOffset) {
                font$1.kerningPairs = kern.parse(data, kernOffset);
              } else {
                font$1.kerningPairs = {};
              }

              if (gposOffset) {
                gpos.parse(data, gposOffset, font$1);
              }

              if (fvarOffset) {
                font$1.tables.fvar = fvar.parse(data, fvarOffset, font$1.names);
              }

              return font$1;
            } // Asynchronously load the font from a URL or a filesystem. When done, call the callback
            // with two arguments `(err, font)`. The `err` will be null on success,
            // the `font` is a Font object.
            //
            // We use the node.js callback convention so that
            // opentype.js can integrate with frameworks like async.js.


            function load(url, callback) {
              var isNode = typeof window === 'undefined';
              var loadFn = isNode ? loadFromFile : loadFromUrl;
              loadFn(url, function (err, arrayBuffer) {
                if (err) {
                  return callback(err);
                }

                var font = parseBuffer(arrayBuffer);
                return callback(null, font);
              });
            } // Syncronously load the font from a URL or file.
            // When done, return the font object or throw an error.


            function loadSync(url) {
              var fs$1 = fs;
              var buffer = fs$1.readFileSync(url);
              return parseBuffer(toArrayBuffer(buffer));
            }

            var _parse = parse$2;
            var Font$1 = font.Font;
            var Glyph$1 = glyph.Glyph;
            var Path$1 = path$1.Path;
            var parse_1$g = parseBuffer;
            var load_1 = load;
            var loadSync_1 = loadSync;
            var opentype = {
              _parse: _parse,
              Font: Font$1,
              Glyph: Glyph$1,
              Path: Path$1,
              parse: parse_1$g,
              load: load_1,
              loadSync: loadSync_1
            };

            /**
             * @type {object} Map containing all the fonts available for use
             */

            var _fonts = {};
            /**
             * Register Font
             *
             * @param {string} binaryPath Path to the font binary file(.eot, .ttf etc.)
             * @param {string} family     The name to give the font
             * @param {number} weight     The font weight to use
             * @param {string} style      Font style
             * @param {string} variant    Font variant
             *
             * @returns {void}
             */

            var registerFont = function (binaryPath, family, weight, style, variant) {
              _fonts[family] = {
                binary: binaryPath,
                family: family,
                weight: weight,
                style: style,
                variant: variant,
                loaded: false,
                font: null,
                load: function (cb) {
                  if (this.loaded) {
                    if (cb) cb();
                    return;
                  }

                  var self = this;
                  opentype.load(binaryPath, function (err, font) {
                    if (err) throw new Error('Could not load font: ' + err);
                    self.loaded = true;
                    self.font = font;
                    if (cb) cb();
                  });
                }
              };
              return _fonts[family];
            };
            /**@ignore */


            var debug_list_of_fonts = _fonts;
            /**
             * Find Font
             *
             * Search the `fonts` array for a given font family name
             *
             * @param {string} family The name of the font family to search for
             *
             * @returns {object}
             */

            function findFont(family) {
              if (_fonts[family]) return _fonts[family];
              family = Object.keys(_fonts)[0];
              return _fonts[family];
            }
            /**
             * Process Text Path
             *
             * @param {Context} ctx  The {@link Context} to paint on
             * @param {string}  text The text to write to the given Context
             * @param {number}  x    X position
             * @param {number}  y    Y position
             * @param {boolean} fill Indicates wether or not the font should be filled
             *
             * @returns {void}
             */


            var processTextPath = function (ctx, text, x, y, fill) {
              let font = findFont(ctx._font.family);

              if (!font) {
                console.warn("Font missing", ctx._font);
              }

              var size = ctx._font.size;

              if (ctx.USE_FONT_GLYPH_CACHING) {
                var off = 0;

                for (var i = 0; i < text.length; i++) {
                  var ch = text[i];

                  if (!cache.contains(font, size, ch)) {
                    var glyph = renderGlyphToBitmap(font, ch, size);
                    cache.insert(font, size, ch, glyph);
                  }

                  var glyph = cache.get(font, size, ch);
                  var fx = x + off;
                  var fy = y - glyph.ascent;
                  var fpt = ctx.transform.transformPoint(fx, fy);
                  ctx.copyImage(glyph.bitmap, Math.floor(fpt.x), Math.floor(fpt.y), ctx._fillColor);
                  off += glyph.advance;
                }
              } else {
                var path = font.font.getPath(text, x, y, size);
                ctx.beginPath();
                path.commands.forEach(function (cmd) {
                  switch (cmd.type) {
                    case 'M':
                      ctx.moveTo(cmd.x, cmd.y);
                      break;

                    case 'Q':
                      ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                      break;

                    case 'L':
                      ctx.lineTo(cmd.x, cmd.y);
                      break;

                    case 'Z':
                      {
                        ctx.closePath();
                        fill ? ctx.fill() : ctx.stroke();
                        ctx.beginPath();
                        break;
                      }
                  }
                });
              }
            };
            /**
             * Process Text Path
             *
             * @param {Context} ctx The {@link Context} to paint on
             * @param {string} text The name to give the font
             *
             * @returns {object}
             */


            var measureText = function (ctx, text) {
              let font = findFont(ctx._font.family);
              if (!font) console.warn("WARNING. Can't find font family ", ctx._font);
              var fsize = ctx._font.size;
              var glyphs = font.font.stringToGlyphs(text);
              var advance = 0;
              glyphs.forEach(function (g) {
                advance += g.advanceWidth;
              });
              return {
                width: advance / font.font.unitsPerEm * fsize,
                emHeightAscent: font.font.ascender / font.font.unitsPerEm * fsize,
                emHeightDescent: font.font.descender / font.font.unitsPerEm * fsize
              };
            };

            var text = {
              registerFont: registerFont,
              debug_list_of_fonts: debug_list_of_fonts,
              processTextPath: processTextPath,
              measureText: measureText
            };

            //transform code from https://github.com/kcmoot/transform-tracker/blob/master/transform-tracker.js
            /**
             * @ignore
             */

            function Transform$1(context) {
              this.context = context;
              this.matrix = [1, 0, 0, 1, 0, 0]; //initialize with the identity matrix

              this.stack = []; //==========================================
              // Constructor, getter/setter
              //==========================================

              this.setContext = function (context) {
                this.context = context;
              };

              this.getMatrix = function () {
                return this.matrix;
              };

              this.setMatrix = function (m) {
                this.matrix = [m[0], m[1], m[2], m[3], m[4], m[5]];
                this.setTransform();
              };

              this.cloneMatrix = function (m) {
                return [m[0], m[1], m[2], m[3], m[4], m[5]];
              }; //==========================================
              // Stack
              //==========================================


              this.save = function () {
                var matrix = this.cloneMatrix(this.getMatrix());
                this.stack.push(matrix);
                if (this.context) this.context.save();
              };

              this.restore = function () {
                if (this.stack.length > 0) {
                  var matrix = this.stack.pop();
                  this.setMatrix(matrix);
                }

                if (this.context) this.context.restore();
              }; //==========================================
              // Matrix
              //==========================================


              this.setTransform = function () {
                if (this.context) {
                  this.context.setTransform(this.matrix[0], this.matrix[1], this.matrix[2], this.matrix[3], this.matrix[4], this.matrix[5]);
                }
              };

              this.translate = function (x, y) {
                this.matrix[4] += this.matrix[0] * x + this.matrix[2] * y;
                this.matrix[5] += this.matrix[1] * x + this.matrix[3] * y;
                this.setTransform();
              };

              this.rotate = function (rad) {
                var c = Math.cos(rad);
                var s = Math.sin(rad);
                var m11 = this.matrix[0] * c + this.matrix[2] * s;
                var m12 = this.matrix[1] * c + this.matrix[3] * s;
                var m21 = this.matrix[0] * -s + this.matrix[2] * c;
                var m22 = this.matrix[1] * -s + this.matrix[3] * c;
                this.matrix[0] = m11;
                this.matrix[1] = m12;
                this.matrix[2] = m21;
                this.matrix[3] = m22;
                this.setTransform();
              };

              this.scale = function (sx, sy) {
                this.matrix[0] *= sx;
                this.matrix[1] *= sx;
                this.matrix[2] *= sy;
                this.matrix[3] *= sy;
                this.setTransform();
              }; //==========================================
              // Matrix extensions
              //==========================================


              this.rotateDegrees = function (deg) {
                var rad = deg * Math.PI / 180;
                this.rotate(rad);
              };

              this.rotateAbout = function (rad, x, y) {
                this.translate(x, y);
                this.rotate(rad);
                this.translate(-x, -y);
                this.setTransform();
              };

              this.rotateDegreesAbout = function (deg, x, y) {
                this.translate(x, y);
                this.rotateDegrees(deg);
                this.translate(-x, -y);
                this.setTransform();
              };

              this.identity = function () {
                this.m = [1, 0, 0, 1, 0, 0];
                this.setTransform();
              };

              this.multiply = function (matrix) {
                var m11 = this.matrix[0] * matrix.m[0] + this.matrix[2] * matrix.m[1];
                var m12 = this.matrix[1] * matrix.m[0] + this.matrix[3] * matrix.m[1];
                var m21 = this.matrix[0] * matrix.m[2] + this.matrix[2] * matrix.m[3];
                var m22 = this.matrix[1] * matrix.m[2] + this.matrix[3] * matrix.m[3];
                var dx = this.matrix[0] * matrix.m[4] + this.matrix[2] * matrix.m[5] + this.matrix[4];
                var dy = this.matrix[1] * matrix.m[4] + this.matrix[3] * matrix.m[5] + this.matrix[5];
                this.matrix[0] = m11;
                this.matrix[1] = m12;
                this.matrix[2] = m21;
                this.matrix[3] = m22;
                this.matrix[4] = dx;
                this.matrix[5] = dy;
                this.setTransform();
              };

              this.invert = function () {
                var d = 1 / (this.matrix[0] * this.matrix[3] - this.matrix[1] * this.matrix[2]);
                var m0 = this.matrix[3] * d;
                var m1 = -this.matrix[1] * d;
                var m2 = -this.matrix[2] * d;
                var m3 = this.matrix[0] * d;
                var m4 = d * (this.matrix[2] * this.matrix[5] - this.matrix[3] * this.matrix[4]);
                var m5 = d * (this.matrix[1] * this.matrix[4] - this.matrix[0] * this.matrix[5]);
                this.matrix[0] = m0;
                this.matrix[1] = m1;
                this.matrix[2] = m2;
                this.matrix[3] = m3;
                this.matrix[4] = m4;
                this.matrix[5] = m5;
                this.setTransform();
              }; //==========================================
              // Helpers
              //==========================================


              this.transformPoint = function (pt) {
                var x = pt.x;
                var y = pt.y;
                return {
                  x: x * this.matrix[0] + y * this.matrix[2] + this.matrix[4],
                  y: x * this.matrix[1] + y * this.matrix[3] + this.matrix[5]
                };
              };
            }

            var Transform_1 = Transform$1;
            var transform$2 = {
              Transform: Transform_1
            };

            var uint32 = createCommonjsModule(function (module) {
              //from https://github.com/fxa/uint32.js

              /* jshint bitwise: false */

              /**
               * @license (c) Franz X Antesberger 2013
               */
              (function (exporter) {

                var POW_2_32 = 0x0100000000;
                //  Creating and Extracting
                //

                /**
                 *  Creates an uint32 from the given bytes in big endian order.
                 *  @param {Number} highByte the high byte
                 *  @param {Number} secondHighByte the 2nd high byte
                 *  @param {Number} thirdHighByte the 3rd high byte
                 *  @param {Number} lowByte the low byte
                 *  @returns highByte concat secondHighByte concat thirdHighByte concat lowByte
                 */

                exporter.fromBytesBigEndian = function (highByte, secondHighByte, thirdHighByte, lowByte) {
                  return (highByte << 24 | secondHighByte << 16 | thirdHighByte << 8 | lowByte) >>> 0;
                };
                /**
                 *  Returns the byte.
                 *  e.g. when byteNo is 0, the high byte is returned, when byteNo = 3 the low byte is returned.
                 *  @param {Number} uint32value the source to be extracted
                 *  @param {Number} byteNo 0-3 the byte number, 0 is the high byte, 3 the low byte
                 *  @returns {Number} the 0-255 byte according byteNo
                 */


                exporter.getByteBigEndian = function (uint32value, byteNo) {
                  return uint32value >>> 8 * (3 - byteNo) & 0xff;
                };
                /**
                 *  Returns the bytes as array.
                 *  @param {Number} uint32value the source to be extracted
                 *  @returns {Array} the array [highByte, 2ndHighByte, 3rdHighByte, lowByte]
                 */


                exporter.getBytesBigEndian = function (uint32value) {
                  return [exporter.getByteBigEndian(uint32value, 0), exporter.getByteBigEndian(uint32value, 1), exporter.getByteBigEndian(uint32value, 2), exporter.getByteBigEndian(uint32value, 3)];
                };
                /**
                 *  Converts a given uin32 to a hex string including leading zeros.
                 *  @param {Number} uint32value the uint32 to be stringified
                 *  @param {Number} optionalMinLength the optional (default 8)
                 */


                exporter.toHex = function (uint32value, optionalMinLength) {
                  optionalMinLength = optionalMinLength || 8;
                  var result = uint32value.toString(16);

                  if (result.length < optionalMinLength) {
                    result = new Array(optionalMinLength - result.length + 1).join('0') + result;
                  }

                  return result;
                };
                /**
                 *  Converts a number to an uint32.
                 *  @param {Number} number the number to be converted.
                 *  @return {Number} an uint32 value
                 */


                exporter.toUint32 = function (number) {
                  // the shift operator forces js to perform the internal ToUint32 (see ecmascript spec 9.6)
                  return number >>> 0;
                };
                /**
                 *  Returns the part above the uint32 border.
                 *  Depending to the javascript engine, that are the 54-32 = 22 high bits
                 *  @param {Number} number the number to extract the high part
                 *  @return {Number} the high part of the number
                 */


                exporter.highPart = function (number) {
                  return exporter.toUint32(number / POW_2_32);
                }; //
                //  Bitwise Logical Operators
                //

                /**
                 *  Returns a bitwise OR operation on two or more values.
                 *  @param {Number} uint32val0 first uint32 value
                 *  @param {Number} argv one or more uint32 values
                 *  @return {Number} the bitwise OR uint32 value
                 */


                exporter.or = function (uint32val0, argv) {
                  var result = uint32val0;

                  for (var index = 1; index < arguments.length; index += 1) {
                    result = result | arguments[index];
                  }

                  return result >>> 0;
                };
                /**
                 *  Returns a bitwise AND operation on two or more values.
                 *  @param {Number} uint32val0 first uint32 value
                 *  @param {Number} argv one or more uint32 values
                 *  @return {Number} the bitwise AND uint32 value
                 */


                exporter.and = function (uint32val0, argv) {
                  var result = uint32val0;

                  for (var index = 1; index < arguments.length; index += 1) {
                    result = result & arguments[index];
                  }

                  return result >>> 0;
                };
                /**
                 *  Returns a bitwise XOR operation on two or more values.
                 *  @param {Number} uint32val0 first uint32 value
                 *  @param {Number} argv one or more uint32 values
                 *  @return {Number} the bitwise XOR uint32 value
                 */


                exporter.xor = function (uint32val0, argv) {
                  var result = uint32val0;

                  for (var index = 1; index < arguments.length; index += 1) {
                    result = result ^ arguments[index];
                  }

                  return result >>> 0;
                };

                exporter.not = function (uint32val) {
                  return ~uint32val >>> 0;
                }; //
                // Shifting and Rotating
                //

                /**
                 *  Returns the uint32 representation of a << operation.
                 *  @param {Number} uint32val the word to be shifted
                 *  @param {Number} numBits the number of bits to be shifted (0-31)
                 *  @returns {Number} the uint32 value of the shifted word
                 */


                exporter.shiftLeft = function (uint32val, numBits) {
                  return uint32val << numBits >>> 0;
                };
                /**
                 *  Returns the uint32 representation of a >>> operation.
                 *  @param {Number} uint32val the word to be shifted
                 *  @param {Number} numBits the number of bits to be shifted (0-31)
                 *  @returns {Number} the uint32 value of the shifted word
                 */


                exporter.shiftRight = function (uint32val, numBits) {
                  return uint32val >>> numBits;
                };

                exporter.rotateLeft = function (uint32val, numBits) {
                  return (uint32val << numBits >>> 0 | uint32val >>> 32 - numBits) >>> 0;
                };

                exporter.rotateRight = function (uint32val, numBits) {
                  return (uint32val >>> numBits | uint32val << 32 - numBits >>> 0) >>> 0;
                }; //
                // Logical Gates
                //

                /**
                 *  Bitwise choose bits from y or z, as a bitwise x ? y : z
                 */


                exporter.choose = function (x, y, z) {
                  return (x & (y ^ z) ^ z) >>> 0;
                };
                /**
                 * Majority gate for three parameters. Takes bitwise the majority of x, y and z,
                 * @see https://en.wikipedia.org/wiki/Majority_function
                 */


                exporter.majority = function (x, y, z) {
                  return (x & (y | z) | y & z) >>> 0;
                }; //
                //  Arithmetic
                //

                /**
                 *  Adds the given values modulus 2^32.
                 *  @returns the sum of the given values modulus 2^32
                 */


                exporter.addMod32 = function (uint32val0
                /*, optionalValues*/
                ) {
                  var result = uint32val0;

                  for (var index = 1; index < arguments.length; index += 1) {
                    result += arguments[index];
                  }

                  return result >>> 0;
                };
                /**
                 *  Returns the log base 2 of the given value. That is the number of the highest set bit.
                 *  @param {Number} uint32val the value, the log2 is calculated of
                 *  @return {Number} the logarithm base 2, an integer between 0 and 31
                 */


                exporter.log2 = function (uint32val) {
                  return Math.floor(Math.log(uint32val) / Math.LN2);
                };
                /*
                    // this implementation does the same, looks much funnier, but takes 2 times longer (according to jsperf) ...
                    var log2_u = new Uint32Array(2);
                    var log2_d = new Float64Array(log2_u.buffer);
                
                    exporter.log2 = function (uint32val) {
                        // Ported from http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogIEEE64Float to javascript
                        // (public domain)
                        if (uint32val === 0) {
                            return -Infinity;
                        }
                        // fill in the low part
                        log2_u[0] = uint32val;
                        // set the mantissa to 2^52
                        log2_u[1] = 0x43300000;
                        // subtract 2^52
                        log2_d[0] -= 0x10000000000000;
                        return (log2_u[1] >>> 20) - 0x3FF;
                    };
                */

                /**
                 *  Returns the the low and the high uint32 of the multiplication.
                 *  @param {Number} factor1 an uint32
                 *  @param {Number} factor2 an uint32
                 *  @param {Uint32Array[2]} resultUint32Array2 the Array, where the result will be written to
                 *  @returns undefined
                 */


                exporter.mult = function (factor1, factor2, resultUint32Array2) {
                  var high16 = ((factor1 & 0xffff0000) >>> 0) * factor2;
                  var low16 = (factor1 & 0x0000ffff) * factor2; // the addition is dangerous, because the result will be rounded, so the result depends on the lowest bits, which will be cut away!

                  var carry = exporter.toUint32(high16) + exporter.toUint32(low16) >= POW_2_32 ? 1 : 0;
                  resultUint32Array2[0] = exporter.highPart(high16) + exporter.highPart(low16) + carry >>> 0;
                  resultUint32Array2[1] = (high16 >>> 0) + (low16 >>> 0); // >>> 0;
                };
              })(module.exports = {});
            });

            /**
             * Enum for path commands (used for encoding and decoding lines, curves etc. to and from a path)
             * @enum {string}
             */


            const PATH_COMMAND = {
              MOVE: 'm',
              LINE: 'l',
              QUADRATIC_CURVE: 'q',
              BEZIER_CURVE: 'b'
            };
            /**
             * Used for drawing rectangles, text, images and other objects onto the canvas element. It provides the 2D rendering context for a drawing surface.
             *
             * It has the same API as [CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D) from the HTML5 canvas spec
             *
             * @class Context
             */

            class Context {
              /**
               * Creates a new pure image Context
               *
               * @param {Bitmap} bitmap An instance of the {@link Bitmap} class
               * @memberof Context
               */
              constructor(bitmap) {
                /**
                 * An instance of the {@link Bitmap} class. Used for direct pixel manipulation(for example setting pixel colours)
                 * @type {Bitmap}
                 */
                this.bitmap = bitmap;
                /**
                 *  A 32-bit unsigned integer (uint32) number representing the fill color of the 2D drawing context
                 *
                 * @type {number}
                 */

                this._fillColor = named_colors.black;
                /**
                 * @type {number}
                 */

                this._strokeColor = named_colors.black;
                /**
                 * @type {number}
                 */

                this._lineWidth = 1;
                /**
                 * @type {number}
                 */

                this._globalAlpha = 1;
                /**
                 * @type {Transform}
                 */

                this.transform = new transform$2.Transform();
                /**
                 * @type {object} Plain js object wrapping the font name and size
                 */

                this._font = {
                  family: 'invalid',
                  size: 12
                };
                /**
                 * @type {boolean} Enable or disable image smoothing(anti-aliasing)
                 */

                this.imageSmoothingEnabled = true;
                /**
                 * @type {?any}
                 */

                this._clip = null;
                /**
                 * @type {string}
                 */

                this._fillStyle_text = '';
                /**
                 * @type {string}
                 */

                this._strokeStyle_text = '';
              }
              /**
               * The color or style to use inside shapes. The default is #000 (black).
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle
               * @type {string}
               */


              get fillStyle() {
                return this._fillStyle_text;
              }

              /**
               * @param {string} val
               * @example ctx.fillStyle = 'rgba(0, 25, 234, 0.6)';
               */
              set fillStyle(val) {
                this._fillColor = Context.colorStringToUint32(val);
                this._fillStyle_text = val;
              }

              /**
               * The color or style to use for the lines around shapes. The default is #000 (black).
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle
               * @type {string}
               */
              get strokeStyle() {
                return this._strokeStyle_text;
              }

              /**
               * @param {number} val
               * @example ctx.strokeStyle = 'rgba(0, 25, 234, 0.6)';
               */
              set strokeStyle(val) {
                this._strokeColor = Context.colorStringToUint32(val);
                this._strokeStyle_text = val;
              }

              /**
               * The thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, `Infinity` and `NaN` values are ignored; otherwise the current value is set to the new value.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth
               * @type {number}
               */
              get lineWidth() {
                return this._lineWidth;
              }

              /**
               * @param {string} val
               * @example ctx.lineWidth = 15;
               */
              set lineWidth(val) {
                this._lineWidth = val;
              }

              /**
               * The alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha
               * @type {Boolean}
               */
              get globalAlpha() {
                return this._globalAlpha;
              }

              /**
               * @param {boolean} val
               * @example ctx.globalAlpha = 1;
               */
              set globalAlpha(val) {
                this._globalAlpha = clamp(val, 0, 1);
              }
              /**
               * The current text style being used when drawing text. This string uses the same syntax as the CSS font specifier
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font
               * @type {object}
               * @property {number} size   The an integer representing the font size to use
               * @property {string} family The font family to set
               */


              get font() {}

              /**
               * @param {object} font
               * @example ctx.globalAlpha = 1;
               */
              set font(val) {
                var n = val.trim().indexOf(' ');
                var font_size = parseInt(val.slice(0, n));
                var font_name = val.slice(n).trim();
                this._font.family = font_name;
                this._font.size = font_size;
              }
              /**
               * Saves the entire state of the canvas by pushing the current state onto a stack
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save
               *
               * @returns {void}
               *
               * @memberof Context
               */


              save() {
                this.transform.save();
              }
              /**
               * Adds a translation transformation by moving the canvas and its origin `x` horizontally and `y` vertically on the grid
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate
               *
               * @param {number} x X position
               * @param {number} y Y position
               *
               * @returns {void}
               *
               * @memberof Context
               */


              translate(x, y) {
                this.transform.translate(x, y);
              }
              /**
               * Add a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in adians
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate
               *
               * @param {number} angle Degrees of rotation (in radians)
               *
               * @returns {void}
               *
               * @memberof Context
               */


              rotate(angle) {
                this.transform.rotate(angle);
              }
              /**
               * Adds a scaling transformation to the canvas units by `x` horizontally and by `y` vertically
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate
               *
               * @param {number} sx Scale X amount
               * @param {number} sy Scale Y amount
               *
               * @returns {void}
               *
               * @memberof Context
               */


              scale(sx, sy) {
                this.transform.scale(sx, sy);
              }
              /**
               * Restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore
               *
               * @returns {void}
               *
               * @memberof Context
               */


              restore() {
                this.transform.restore();
              }
              /**
               * Draws a filled rectangle whose starting point is at the coordinates `(x, y)` with the specified width and height and whose style is determined by the fillStyle attribute.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect
               *
               * @param {number} x X position
               * @param {number} y Y position
               * @param {number} w Width
               * @param {number} h Height
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fillRect(x, y, w, h) {
                for (var i = x; i < x + w; i++) {
                  for (var j = y; j < y + h; j++) {
                    this.fillPixel(i, j);
                  }
                }
              }
              /**
               * Sets all pixels in the rectangle defined by starting point `(x, y)` and size `(width, height)` to transparent black, erasing any previously drawn content.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect
               *
               * @param {number} x X position
               * @param {number} y Y position
               * @param {number} w Width
               * @param {number} h Height
               *
               * @returns {void}
               *
               * @memberof Context
               */


              clearRect(x, y, w, h) {
                for (var i = x; i < x + w; i++) {
                  for (var j = y; j < y + h; j++) {
                    this.bitmap.setPixelRGBA(i, j, 0x00000000);
                  }
                }
              }
              /**
               * Paints a rectangle which has a starting point at `(x, y)` and has a `w` width and an `h` height onto the canvas, using the current stroke style.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect
               *
               * @param {number} x X position
               * @param {number} y Y position
               * @param {number} w Width
               * @param {number} h Height
               *
               * @returns {void}
               *
               * @memberof Context
               */


              strokeRect(x, y, w, h) {
                for (var i = x; i < x + w; i++) {
                  this.bitmap.setPixelRGBA(i, y, this._strokeColor);
                  this.bitmap.setPixelRGBA(i, y + h, this._strokeColor);
                }

                for (var j = y; j < y + h; j++) {
                  this.bitmap.setPixelRGBA(x, j, this._strokeColor);
                  this.bitmap.setPixelRGBA(x + w, j, this._strokeColor);
                }
              }
              /**
               * Set the background colour of a single pixel denoted by the `x` and `y` co-ordinates
               *
               * @param {number} x The x axis of the pixel
               * @param {number} y The y axis of the pixel
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fillPixel(x, y) {
                if (!this.pixelInsideClip(x, y)) {
                  return;
                }

                var new_pixel = this.calculateRGBA(x, y);
                var old_pixel = this.bitmap.getPixelRGBA(x, y);
                var final_pixel = this.composite(x, y, old_pixel, new_pixel);
                this.bitmap.setPixelRGBA(x, y, final_pixel);
              }
              /**
               * Paints a pixel which has an x axis position of `x` and a y axis psotion of `y`
               *
               * @param {number} x The x axis of the pixel to stroke
               * @param {number} y The y axis of the pixel to stroke
               *
               * @returns {void}
               *
               * @memberof Context
               */


              strokePixel(x, y) {
                if (!this.pixelInsideClip(x, y)) {
                  return;
                }

                var new_pixel = this.calculateRGBA_stroke(x, y);
                var old_pixel = this.bitmap.getPixelRGBA(x, y);
                var final_pixel = this.composite(x, y, old_pixel, new_pixel);
                this.bitmap.setPixelRGBA(x, y, final_pixel);
              }
              /**
               * Fill Pixel With Color
               *
               * @param {number} x   The x axis of the pixel to fill
               * @param {number} y   The y axis of the pixel to fill
               * @param {number} col
               *
               * @ignore
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fillPixelWithColor(x, y, col) {
                if (!this.pixelInsideClip(x, y)) {
                  return;
                }

                var new_pixel = col;
                var old_pixel = this.bitmap.getPixelRGBA(x, y);
                var final_pixel = this.composite(x, y, old_pixel, new_pixel);
                this.bitmap.setPixelRGBA(x, y, final_pixel);
              }
              /**
               * Composite
               *
               * @param {number} i Unused
               * @param {number} j Unused
               * @param {number} old_pixel
               * @param {number} new_pixel
               *
               * @ignore
               *
               * @returns {void}
               *
               * @memberof Context
               */


              composite(i, j, old_pixel, new_pixel) {
                const old_rgba = uint32.getBytesBigEndian(old_pixel);
                const new_rgba = uint32.getBytesBigEndian(new_pixel); //convert to range of 0->1

                const A = new_rgba.map(b => b / 255);
                const B = old_rgba.map(b => b / 255); //multiply by global alpha

                A[3] = A[3] * this._globalAlpha; //do a standard composite (SRC_OVER)

                function compit(ca, cb, aa, ab) {
                  return (ca * aa + cb * ab * (1 - aa)) / (aa + ab * (1 - aa));
                }

                const C = A.map((comp, i) => compit(A[i], B[i], A[3], B[3])); //convert back to 0->255 range

                const Cf = C.map(c => c * 255); //convert back to int

                return uint32.fromBytesBigEndian(Cf[0], Cf[1], Cf[2], Cf[3]);
              }
              /**
               * Calculate RGBA
               *
               * @param {number} x X position
               * @param {number} y Y position
               *
               * @ignore
               *
               * @returns {number}
               *
               * @memberof Context
               */


              calculateRGBA(x, y) {
                return this._fillColor;
              }
              /**
               * Calculate RGBA Stroke
               *
               * @param {number} x X position
               * @param {number} y Y position
               *
               * @ignore
               *
               * @returns {number}
               *
               * @memberof Context
               */


              calculateRGBA_stroke(x, y) {
                return this._strokeColor;
              }
              /**
               * Get Image Data
               *
               * @param {number} x X position
               * @param {number} y Y position
               * @param {number} w Width
               * @param {number} h Height
               *
               * @ignore
               *
               * @returns {Bitmap}
               *
               * @memberof Context
               */


              getImageData(x, y, w, h) {
                return this.bitmap;
              }
              /**
               * *Put Image Data
               *
               * @param {number} id Image ID
               * @param {number} x  X position
               * @param {number} y  Y position
               *
               * @ignore
               *
               * @returns {void}
               *
               * @memberof Context
               */


              putImageData(id, x, y) {
                throw new "Method not yet implemented"();
              }
              /**
               * Provides different ways to draw an image onto the canvas.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
               *
               * @param {Bitmap} bitmap An instance of the {@link Bitmap} class to use for drawing
               * @param {number} sx     The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.
               * @param {number} sy     The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.
               * @param {number} sw     The width of the sub-rectangle of the source {@link Bitmap} to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by `sx` and `sy` to the bottom-right corner of the image is used.
               * @param {number} sh     The height of the sub-rectangle of the source {@link Bitmap} to draw into the destination context.
               * @param {number} dx     The X coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}
               * @param {number} dy     The Y coordinate in the destination canvas at which to place the top-left corner of the source {@link Bitmap}
               * @param {number} dw     The width to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn
               * @param {number} dh     The height to draw the {@link Bitmap} in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn
               *
               * @returns {void}
               *
               * @memberof Context
               */


              drawImage(bitmap, sx, sy, sw, sh, dx, dy, dw, dh) {
                // two argument form
                if (typeof sw === 'undefined') return this.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, sx, sy, bitmap.width, bitmap.height); // four argument form

                if (typeof dx === 'undefined') return this.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, sx, sy, sw, sh);

                for (var i = 0; i < dw; i++) {
                  var tx = i / dw;
                  var ssx = Math.floor(tx * sw) + sx;

                  for (var j = 0; j < dh; j++) {
                    var ty = j / dh;
                    var ssy = sy + Math.floor(ty * sh);
                    var rgba = bitmap.getPixelRGBA(ssx, ssy);
                    this.bitmap.setPixelRGBA(dx + i, dy + j, rgba);
                  }
                }
              }
              /**
               * Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath
               *
               * @returns {void}
               *
               * @memberof Context
               */


              beginPath() {
                /**
                 * @type {Array}
                 */
                this.path = [];
              }
              /**
               * Moves the starting point of a new sub-path to the (x, y) coordinates.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo
               *
               * @param {number} x The x axis of the point.
               * @param {number} y The y axis of the point.
               *
               * @returns {void}
               *
               * @memberof Context
              * */


              moveTo(x, y) {
                return this._moveTo(new Point_1(x, y));
              }
              /**
               * Moves the starting point of a new sub-path to the (x, y) coordinates.
               *
               * @param {Point} pt A `point` object representing a set of co-ordinates to move the "pen" to.
               *
               * @example
               * //All of the following are valid:
               * this._moveTo({x: 20, y: 40})
               * this._moveTo(new Point(20, 40))
               *
               * @returns {void}
               *
               * @memberof Context
              * */


              _moveTo(pt) {
                pt = this.transform.transformPoint(pt);
                /**
                 * Set the starting co-ordinates for the path starting point
                 * @type {Point}
                 */

                this.pathstart = pt;
                this.path.push([PATH_COMMAND.MOVE, pt]);
              }
              /**
               * Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo
               *
               * @param {number} x The x axis of the coordinate for the end of the line.
               * @param {number} y The y axis of the coordinate for the end of the line.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              lineTo(x, y) {
                return this._lineTo(new Point_1(x, y));
              }
              /**
               * Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).
               *
               * @param {Point} pt A point object to draw a line to from the current set of co-ordinates
               *
               * @returns {void}
               *
               * @memberof Context
               */


              _lineTo(pt) {
                this.path.push([PATH_COMMAND.LINE, this.transform.transformPoint(pt)]);
              }
              /**
               * Adds a quadratic Bézier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo
               *
               * @param {number} cp1x The x axis of the coordinate for the control point.
               * @param {number} cp1y The y axis of the coordinate for the control point.
               * @param {number} x    The x axis of the coordinate for the end point.
               * @param {number} y    The y axis of the coordinate for the end point.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              quadraticCurveTo(cp1x, cp1y, x, y) {
                let cp1 = this.transform.transformPoint(new Point_1(cp1x, cp1y));
                let pt = this.transform.transformPoint(new Point_1(x, y));
                this.path.push([PATH_COMMAND.QUADRATIC_CURVE, cp1, pt]);
              }
              /**
               * Adds a cubic Bézier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the Bézier curve.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo
               *
               * @param {number} cp1x The x axis of the coordinate for the first control point.
               * @param {number} cp1y The y axis of the coordinate for first control point.
               * @param {number} cp2x The x axis of the coordinate for the second control point.
               * @param {number} cp2y The y axis of the coordinate for the second control point.
               * @param {number} x    The x axis of the coordinate for the end point.
               * @param {number} y    The y axis of the coordinate for the end point.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
                this._bezierCurveTo(new Point_1(cp1x, cp1y), new Point_1(cp2x, cp2y), new Point_1(x, y));
              }
              /**
               * Bezier Curve To
               *
               * @param {number} cp1 Curve point 1
               * @param {number} cp2 Curve point 2
               * @param {Point}  pt
               *
               * @returns {void}
               *
               * @memberof Context
              * */


              _bezierCurveTo(cp1, cp2, pt) {
                cp1 = this.transform.transformPoint(cp1);
                cp2 = this.transform.transformPoint(cp2);
                pt = this.transform.transformPoint(pt);
                this.path.push([PATH_COMMAND.BEZIER_CURVE, cp1, cp2, pt]);
              }
              /**
               * Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc
               *
               * @param {number}  x         The x coordinate of the arc's center
               * @param {number}  y         The y coordinate of the arc's center
               * @param {number}  rad       The arc's radius
               * @param {number}  start     The angle at which the arc starts, measured clockwise from the positive x axis and expressed in radians
               * @param {number}  end       The angle at which the arc ends, measured clockwise from the positive x axis and expressed in radians
               * @param {boolean} clockwise A boolean which, if true, causes the arc to be drawn clockwise between the two angles.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              arc(x, y, rad, start, end, clockwise) {
                function calcPoint(ctx, type, angle) {
                  let px = x + Math.sin(angle) * rad;
                  let py = y + Math.cos(angle) * rad;
                  return new Point_1(px, py);
                }

                this._moveTo(calcPoint(this, PATH_COMMAND.MOVE, start));

                for (var a = start; a <= end; a += Math.PI / 16) {
                  this._lineTo(calcPoint(this, PATH_COMMAND.LINE, a));
                }

                this._lineTo(calcPoint(this, PATH_COMMAND.LINE, end));
              }
              /**
               * Arc To
               *
               * @ignore
               *
               * @throws {Error} Method is not yet implemented
               *
               * @memberof Context
               */


              arcTo() {
                throw new Error("arcTo not yet supported");
              }
              /**
               * Rect
               *
               * @ignore
               *
               * @throws {Error} Method is not yet implemented
               *
               * @memberof Context
               */


              rect() {
                throw new Error("rect not yet supported");
              }
              /**
               * Ellipse
               *
               * @ignore
               *
               * @throws {Error} Method is not yet implemented
               *
               * @memberof Context
               */


              ellipse() {
                throw new Error("ellipse not yet supported");
              }
              /**
               * Turns the path currently being built into the current clipping path.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip
               *
               * @returns {void}
               *
               * @memberof Context
               */


              clip() {
                this._clip = pathToLines(this.path);
              }
              /**
               * Measure Text
               *
               * @ignore
               *
               * @throws {Error} Method is not yet implemented
               *
               * @memberof Context
               */


              measureText(string) {
                return text.measureText(this, string);
              }
              /**
               * Causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath
               *
               * @returns {void}
               *
               * @memberof Context
               */


              closePath() {
                this.path.push([PATH_COMMAND.LINE, this.pathstart]);
              }
              /**
               * Strokes the current or given path with the current stroke style
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke
               *
               * @returns {void}
               *
               * @memberof Context
               */


              stroke() {
                pathToLines(this.path).forEach(line => this.drawLine(line));
              }
              /**
               * Draw a line using the correct anti-aliased, or non-anti-aliased line drawing function based on the value of {@link imageSmoothingEnabled}
               *
               * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish
               * @example
               * //All of the following are valid:
               * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})
               * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))
               * ctx.drawLine(new Line(20, 42, 20, 90))
               *
               * @returns {void}
               *
               * @memberof Context
               */


              drawLine(line) {
                this.imageSmoothingEnabled ? this.drawLine_aa(line) : this.drawLine_noaa(line);
              }
              /**
               *
               * Draw a line without anti-aliasing using Bresenham's algorithm
               *
               * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish
               * @example
               * //All of the following are valid:
               * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})
               * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))
               * ctx.drawLine(new Line(20, 42, 20, 90))
               *
               * @returns {void}
               *
               * @memberof Context
               */


              drawLine_noaa(line) {
                //Bresenham's from Rosetta Code
                // http://rosettacode.org/wiki/Bitmap/Bresenham's_line_algorithm#JavaScript
                var x0 = Math.floor(line.start.x);
                var y0 = Math.floor(line.start.y);
                var x1 = Math.floor(line.end.x);
                var y1 = Math.floor(line.end.y);
                var dx = Math.abs(x1 - x0),
                    sx = x0 < x1 ? 1 : -1;
                var dy = Math.abs(y1 - y0),
                    sy = y0 < y1 ? 1 : -1;
                var err = (dx > dy ? dx : -dy) / 2;

                while (true) {
                  this.strokePixel(x0, y0);
                  if (x0 === x1 && y0 === y1) break;
                  var e2 = err;

                  if (e2 > -dx) {
                    err -= dy;
                    x0 += sx;
                  }

                  if (e2 < dy) {
                    err += dx;
                    y0 += sy;
                  }
                }
              }
              /**
               * Draw Line Anti-aliased
               *
               * Draw anti-aliased line using Bresenham's algorithm
               *
               * @see http://members.chello.at/~easyfilter/bresenham.html
               *
               * @param {Line} line A set of co-ordinates representing the start and end of the line. You can also pass a plain js object if you wish
               * @example
               * //All of the following are valid:
               * ctx.drawLine({start: {x: 20, y:42}, end: {x: 20, y:90}})
               * ctx.drawLine(new Line(new Point(20, 42), new Point(20, 90)))
               * ctx.drawLine(new Line(20, 42, 20, 90))
               *
               * @memberof Context
               */


              drawLine_aa(line) {
                let width = this._lineWidth;
                let x0 = Math.floor(line.start.x);
                let y0 = Math.floor(line.start.y);
                let x1 = Math.floor(line.end.x);
                let y1 = Math.floor(line.end.y);
                let dx = Math.abs(x1 - x0),
                    sx = x0 < x1 ? 1 : -1;
                let dy = Math.abs(y1 - y0),
                    sy = y0 < y1 ? 1 : -1;
                let err = dx - dy,
                    e2,
                    x2,
                    y2;
                let ed = dx + dy === 0 ? 1 : Math.sqrt(dx * dx + dy * dy);
                let rgb = uint32.and(this._strokeColor, 0xFFFFFF00);
                let a1 = uint32.and(this._strokeColor, 0x000000FF);

                for (width = (width + 1) / 2;;) {
                  const alpha = ~~Math.max(0, 255 * (Math.abs(err - dx + dy) / ed - width + 1));
                  const a2 = 255 - alpha;
                  const color = uint32.or(rgb, a1 * a2 / 255);
                  this.fillPixelWithColor(x0, y0, color);
                  e2 = err;
                  x2 = x0;

                  if (2 * e2 >= -dx) {
                    for (e2 += dy, y2 = y0; e2 < ed * width && (y1 !== y2 || dx > dy); e2 += dx) {
                      const alpha = ~~Math.max(0, 255 * (Math.abs(e2) / ed - width + 1));
                      const a2 = 255 - alpha;
                      const color = uint32.or(rgb, a1 * a2 / 255);
                      this.fillPixelWithColor(x0, y2 += sy, color);
                    }

                    if (x0 === x1) break;
                    e2 = err;
                    err -= dy;
                    x0 += sx;
                  }

                  if (2 * e2 <= dy) {
                    for (e2 = dx - e2; e2 < ed * width && (x1 !== x2 || dx < dy); e2 += dy) {
                      const alpha = ~~Math.max(0, 255 * (Math.abs(e2) / ed - width + 1));
                      const a2 = 255 - alpha;
                      const color = uint32.or(rgb, a1 * a2 / 255);
                      this.fillPixelWithColor(x2 += sx, y0, color);
                    }

                    if (y0 === y1) break;
                    err += dx;
                    y0 += sy;
                  }
                }
              }
              /**
               * Fills the current or given path with the current fill style. Uses {@link fill_aa} and {@link fill_noaa} depending on the the value of {@link imageSmoothingEnabled}
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fill() {
                this.imageSmoothingEnabled ? this.fill_aa() : this.fill_noaa();
              }
              /**
               * Fill Anti-aliased
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fill_aa() {
                //get just the color part
                var rgb = uint32.and(this._fillColor, 0xFFFFFF00);
                var lines = pathToLines(this.path);
                var bounds = calcMinimumBounds(lines);
                var startY = Math.min(bounds.y2 - 1, this.bitmap.height);
                var endY = Math.max(bounds.y, 0);

                for (var j = startY; j >= endY; j--) {
                  var ints = calcSortedIntersections(lines, j); //fill between each pair of intersections

                  for (var i = 0; i < ints.length; i += 2) {
                    var fstartf = fract(ints[i]);
                    var fendf = fract(ints[i + 1]);
                    var start = Math.floor(ints[i]);
                    var end = Math.floor(ints[i + 1]);

                    for (var ii = start; ii <= end; ii++) {
                      if (ii == start) {
                        //first
                        var int = uint32.or(rgb, (1 - fstartf) * 255);
                        this.fillPixelWithColor(ii, j, int);
                        continue;
                      }

                      if (ii == end) {
                        //last
                        var int = uint32.or(rgb, fendf * 255);
                        this.fillPixelWithColor(ii, j, int);
                        continue;
                      } //console.log("filling",ii,j);


                      this.fillPixelWithColor(ii, j, this._fillColor);
                    }
                  }
                }
              }
              /**
               * Fill No Anti-aliased
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fill_noaa() {
                //get just the color part
                var rgb = uint32.and(this._fillColor, 0xFFFFFF00);
                var lines = pathToLines(this.path);
                var bounds = calcMinimumBounds(lines);

                for (var j = bounds.y2 - 1; j >= bounds.y; j--) {
                  var ints = calcSortedIntersections(lines, j); //fill between each pair of intersections

                  for (var i = 0; i < ints.length; i += 2) {
                    var start = Math.floor(ints[i]);
                    var end = Math.floor(ints[i + 1]);

                    for (var ii = start; ii <= end; ii++) {
                      if (ii == start) {
                        //first
                        this.fillPixel(ii, j);
                        continue;
                      }

                      if (ii == end) {
                        //last
                        this.fillPixel(ii, j);
                        continue;
                      }

                      this.fillPixel(ii, j);
                    }
                  }
                }
              }
              /**
               * Pixel Inside Clip
               *
               * Even/odd rule. https://en.wikipedia.org/wiki/Point_in_polygon
               * technically this is not correct as the default algorithm for
               * html canvas is supposed to be the non-zero winding rule instead
               *
               * @see https://en.wikipedia.org/wiki/Point_in_polygon
               *
               * @param {number} x
               * @param {number} y
               *
               * @returns {void}
               *
               * @memberof Context
               */


              pixelInsideClip(x, y) {
                if (!this._clip) return true; //turn into a list of lines
                // calculate intersections with a horizontal line at j

                var ints = calcSortedIntersections(this._clip, y); // find the intersections to the left of i (where x < i)

                var left = ints.filter(inter => inter < x);

                if (left.length % 2 === 0) {
                  return false;
                } else {
                  return true;
                }
              }
              /**
               *  Draws a text string at the specified coordinates, filling the string's characters with the current foreground color
               *
               * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText
               *
               * @param {string} text A string specifying the text string to render into the context. The text is rendered using the settings specified by {@link font}.
               * @param {number} x    The x -coordinate of the point at which to begin drawing the text, in pixels.
               * @param {number} y    The y-coordinate of the point at which to begin drawing the text, in pixels.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              fillText(text$1, x, y) {
                text.processTextPath(this, text$1, x, y, true);
              }
              /**
               * Draws the outlines of the characters of a specified text string at the given (x, y) position.
               *
               * @param {string} text The text to draw using the current {@link font} values.
               * @param {number} x    The x axis of the coordinate for the text starting point.
               * @param {number} y    The y axis of the coordinate for the text starting point.
               *
               * @returns {void}
               *
               * @memberof Context
               */


              strokeText(text$1, x, y) {
                text.processTextPath(this, text$1, x, y, false);
              }
              /**
               * Color String To Unint32
               *
               * Convert a color string to Uint32 notation
               *
               * @static
               * @param {number} str The color string to convert
               *
               * @returns {number}
               *
               * @example
               * var uInt32 = colorStringToUint32('#FF00FF');
               * console.log(uInt32); // Prints 4278255615
               *
               * @memberof Context
               */


              static colorStringToUint32(str) {
                if (!str) return 0x000000; //hex values always get 255 for the alpha channel

                if (str.indexOf('#') == 0) {
                  var int = uint32.toUint32(parseInt(str.substring(1), 16));
                  int = uint32.shiftLeft(int, 8);
                  int = uint32.or(int, 0xff);
                  return int;
                }

                if (str.indexOf('rgba') == 0) {
                  var parts = str.trim().substring(4).replace('(', '').replace(')', '').split(',');
                  return uint32.fromBytesBigEndian(parseInt(parts[0]), parseInt(parts[1]), parseInt(parts[2]), Math.floor(parseFloat(parts[3]) * 255));
                }

                if (str.indexOf('rgb') == 0) {
                  var parts = str.trim().substring(3).replace('(', '').replace(')', '').split(',');
                  return uint32.fromBytesBigEndian(parseInt(parts[0]), parseInt(parts[1]), parseInt(parts[2]), 255);
                }

                if (named_colors[str]) {
                  return named_colors[str];
                }

                throw new Error("unknown style format: " + str);
              }

            }

            var context = Context;
            /**
             * Returns the decimal portion of a given floating point number
             *
             * @param {number} v The number to return the declimal fration of
             * @example
             * console.log(fract(12.35))
             * // Prints out 0.34999999999999964
             *
             * @returns {number}
             */

            function fract(v) {
              return v - Math.floor(v);
            }
            /**
             * Convert a path of points to an array of lines
             *
             * @param {Array} path List of sub-paths
             *
             * @returns {Array<Line>}
             */


            function pathToLines(path) {
              var lines = [];
              var curr = null;
              path.forEach(function (cmd) {
                if (cmd[0] == PATH_COMMAND.MOVE) {
                  curr = cmd[1];
                }

                if (cmd[0] == PATH_COMMAND.LINE) {
                  var pt = cmd[1];
                  lines.push(new Line_1(curr, pt));
                  curr = pt;
                }

                if (cmd[0] == PATH_COMMAND.QUADRATIC_CURVE) {
                  var pts = [curr, cmd[1], cmd[2]];

                  for (var t = 0; t < 1; t += 0.1) {
                    var pt = calcQuadraticAtT(pts, t);
                    lines.push(new Line_1(curr, pt));
                    curr = pt;
                  }
                }

                if (cmd[0] == PATH_COMMAND.BEZIER_CURVE) {
                  var pts = [curr, cmd[1], cmd[2], cmd[3]];

                  for (var t = 0; t < 1; t += 0.1) {
                    var pt = calcBezierAtT(pts, t);
                    lines.push(new Line_1(curr, pt));
                    curr = pt;
                  }
                }
              });
              return lines;
            }
            /**
             * Calculate Quadratic
             *
             * @param {number} p
             * @param {number} t
             *
             * @ignore
             *
             * @returns {void}
             */


            function calcQuadraticAtT(p, t) {
              var x = (1 - t) * (1 - t) * p[0].x + 2 * (1 - t) * t * p[1].x + t * t * p[2].x;
              var y = (1 - t) * (1 - t) * p[0].y + 2 * (1 - t) * t * p[1].y + t * t * p[2].y;
              return new Point_1(x, y);
            }
            /**
             * Calculate Bezier at T
             *
             * @param {number} p
             * @param {number} t
             *
             * @returns {void}
             */


            function calcBezierAtT(p, t) {
              var x = (1 - t) * (1 - t) * (1 - t) * p[0].x + 3 * (1 - t) * (1 - t) * t * p[1].x + 3 * (1 - t) * t * t * p[2].x + t * t * t * p[3].x;
              var y = (1 - t) * (1 - t) * (1 - t) * p[0].y + 3 * (1 - t) * (1 - t) * t * p[1].y + 3 * (1 - t) * t * t * p[2].y + t * t * t * p[3].y;
              return new Point_1(x, y);
            }
            /**
             * Calculate Minimum Bounds
             *
             * @param {Array} lines
             *
             * @ignore
             *
             * @returns {{x: Number.MAX_VALUE, y: Number.MAX_VALUE, x2: Number.MIN_VALUE, y2: Number.MIN_VALUE}}
             */


            function calcMinimumBounds(lines) {
              var bounds = {
                x: Number.MAX_VALUE,
                y: Number.MAX_VALUE,
                x2: Number.MIN_VALUE,
                y2: Number.MIN_VALUE
              };

              function checkPoint(pt) {
                bounds.x = Math.min(bounds.x, pt.x);
                bounds.y = Math.min(bounds.y, pt.y);
                bounds.x2 = Math.max(bounds.x2, pt.x);
                bounds.y2 = Math.max(bounds.y2, pt.y);
              }

              lines.forEach(function (line) {
                checkPoint(line.start);
                checkPoint(line.end);
              });
              return bounds;
            }
            /**
             * Calculate Sorted Intersections
             *
             * Adopted from http://alienryderflex.com/polygon
             *
             * @see http://alienryderflex.com/polygon
             *
             * @param {Array} lines An {@link Array} of Lines
             * @param {number} y
             *
             * @ignore
             *
             * @returns {Array}
             */


            function calcSortedIntersections(lines, y) {
              var xlist = [];

              for (var i = 0; i < lines.length; i++) {
                var A = lines[i].start;
                var B = lines[i].end;

                if (A.y < y && B.y >= y || B.y < y && A.y >= y) {
                  var xval = A.x + (y - A.y) / (B.y - A.y) * (B.x - A.x);
                  xlist.push(xval);
                }
              }

              return xlist.sort(function (a, b) {
                return a - b;
              });
            }
            /**
             * Clamping is the process of limiting a position to an area
             *
             * @see https://en.wikipedia.org/wiki/Clamping_(graphics)
             *
             * @param {number} value The value to apply the clamp restriction to
             * @param {number} min   Lower limit
             * @param {number} max   Upper limit
             *
             * @returns {number}
             */


            function clamp(value, min, max) {
              if (value < min) return min;
              if (value > max) return max;
              return value;
            }

            /**
             * The Bitmap class is used for direct pixel manipulation(for example setting a pixel colour,
             * transparency etc). It also provides a factory method for creating new instances of
             * {@link Context}
             *
             * @class Bitmap
             */

            class Bitmap {
              /**
               * Creates an instance of Bitmap.
               * @param {number} w      Width
               * @param {number} h      Height
               * @param {any}   options Currently unused
               * @memberof Bitmap
               */
              constructor(w, h, options) {
                /**
                 * @type {number}
                 */
                this.width = Math.floor(w);
                /**
                 * @type {number}
                 */

                this.height = Math.floor(h);
                /**
                 * @type {ArrayBuffer}
                 */

                this.data = Buffer.alloc(w * h * 4);
                const fillval = named_colors.transparent;

                for (var j = 0; j < h; j++) {
                  for (var i = 0; i < w; i++) {
                    this.setPixelRGBA(i, j, fillval);
                  }
                }
              }
              /**
               * Calculate Index
               *
               * @param {number} x X position
               * @param {number} y Y position
               *
               * @returns {number}
               *
               * @memberof Bitmap
               */


              calculateIndex(x, y) {
                x = Math.floor(x);
                y = Math.floor(y);
                if (x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
                return (this.width * y + x) * 4;
              }
              /**
               * Set the RGBA(Red, Green, Blue, Alpha) values on an individual pixel level
               *
               * @param {number} x    X axis position
               * @param {number} y    Y axis position
               * @param {number} rgba A hex representation of the RGBA value of the pixel. See {@link NAMED_COLORS} for examples
               *
               * @returns {void}
               *
               * @memberof Bitmap
               */


              setPixelRGBA(x, y, rgba) {
                let i = this.calculateIndex(x, y);
                const bytes = uint32.getBytesBigEndian(rgba);
                this.data[i + 0] = bytes[0];
                this.data[i + 1] = bytes[1];
                this.data[i + 2] = bytes[2];
                this.data[i + 3] = bytes[3];
              }
              /**
               * Set the individual red, green, blue and alpha levels of an individual pixel
               *
               * @param {number} x X axis position
               * @param {number} y Y axis position
               * @param {number} r Red level
               * @param {number} g Green level
               * @param {number} b Blue level
               * @param {number} a Alpha level
               *
               * @returns {void}
               *
               * @memberof Bitmap
               */


              setPixelRGBA_i(x, y, r, g, b, a) {
                let i = this.calculateIndex(x, y);
                this.data[i + 0] = r;
                this.data[i + 1] = g;
                this.data[i + 2] = b;
                this.data[i + 3] = a;
              }
              /**
               * Get the RGBA value of an individual pixel as a hexadecimal number(See {@link NAMED_COLORS} for examples)
               *
               * @param {number} x X axis potiion
               * @param {number} y Y axis position
               *
               * @returns {number}
               *
               * @memberof Bitmap
               */


              getPixelRGBA(x, y) {
                let i = this.calculateIndex(x, y);
                return uint32.fromBytesBigEndian(this.data[i + 0], this.data[i + 1], this.data[i + 2], this.data[i + 3]);
              }
              /**
               * Get Pixel RGBA Seperate
               *
               * @param {number} x X axis position
               * @param {number} y Y axis position
               *
               * @ignore
               *
               * @returns {Array}
               *
               * @memberof Bitmap
               */


              getPixelRGBA_separate(x, y) {
                var i = this.calculateIndex(x, y);
                return this.data.slice(i, i + 4);
              }
              /**
               * {@link Context} factory. Creates a new {@link Context} instance object for the current bitmap object
               *
               * @returns {Context}
               *
               * @memberof Bitmap
               */


              getContext() {
                return new context(this);
              }

            }

            var bitmap = Bitmap;

            /*
              Copyright (c) 2008, Adobe Systems Incorporated
              All rights reserved.

              Redistribution and use in source and binary forms, with or without 
              modification, are permitted provided that the following conditions are
              met:

              * Redistributions of source code must retain the above copyright notice, 
                this list of conditions and the following disclaimer.
              
              * Redistributions in binary form must reproduce the above copyright
                notice, this list of conditions and the following disclaimer in the 
                documentation and/or other materials provided with the distribution.
              
              * Neither the name of Adobe Systems Incorporated nor the names of its 
                contributors may be used to endorse or promote products derived from 
                this software without specific prior written permission.

              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
              IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
              THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
              PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
              CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
              EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
              PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
              PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
              LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
              NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
              SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            */

            /*
            JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009

            Basic GUI blocking jpeg encoder
            */

            var btoa$1 = btoa$1 || function (buf) {
              return new Buffer(buf).toString('base64');
            };

            function JPEGEncoder(quality) {
              var ffloor = Math.floor;
              var YTable = new Array(64);
              var UVTable = new Array(64);
              var fdtbl_Y = new Array(64);
              var fdtbl_UV = new Array(64);
              var YDC_HT;
              var UVDC_HT;
              var YAC_HT;
              var UVAC_HT;
              var bitcode = new Array(65535);
              var category = new Array(65535);
              var outputfDCTQuant = new Array(64);
              var DU = new Array(64);
              var byteout = [];
              var bytenew = 0;
              var bytepos = 7;
              var YDU = new Array(64);
              var UDU = new Array(64);
              var VDU = new Array(64);
              var clt = new Array(256);
              var RGB_YUV_TABLE = new Array(2048);
              var currentQuality;
              var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
              var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
              var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
              var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];
              var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];
              var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
              var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
              var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];
              var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];

              function initQuantTables(sf) {
                var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];

                for (var i = 0; i < 64; i++) {
                  var t = ffloor((YQT[i] * sf + 50) / 100);

                  if (t < 1) {
                    t = 1;
                  } else if (t > 255) {
                    t = 255;
                  }

                  YTable[ZigZag[i]] = t;
                }

                var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];

                for (var j = 0; j < 64; j++) {
                  var u = ffloor((UVQT[j] * sf + 50) / 100);

                  if (u < 1) {
                    u = 1;
                  } else if (u > 255) {
                    u = 255;
                  }

                  UVTable[ZigZag[j]] = u;
                }

                var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];
                var k = 0;

                for (var row = 0; row < 8; row++) {
                  for (var col = 0; col < 8; col++) {
                    fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
                    fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
                    k++;
                  }
                }
              }

              function computeHuffmanTbl(nrcodes, std_table) {
                var codevalue = 0;
                var pos_in_table = 0;
                var HT = new Array();

                for (var k = 1; k <= 16; k++) {
                  for (var j = 1; j <= nrcodes[k]; j++) {
                    HT[std_table[pos_in_table]] = [];
                    HT[std_table[pos_in_table]][0] = codevalue;
                    HT[std_table[pos_in_table]][1] = k;
                    pos_in_table++;
                    codevalue++;
                  }

                  codevalue *= 2;
                }

                return HT;
              }

              function initHuffmanTbl() {
                YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
                UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
                YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
                UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
              }

              function initCategoryNumber() {
                var nrlower = 1;
                var nrupper = 2;

                for (var cat = 1; cat <= 15; cat++) {
                  //Positive numbers
                  for (var nr = nrlower; nr < nrupper; nr++) {
                    category[32767 + nr] = cat;
                    bitcode[32767 + nr] = [];
                    bitcode[32767 + nr][1] = cat;
                    bitcode[32767 + nr][0] = nr;
                  } //Negative numbers


                  for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
                    category[32767 + nrneg] = cat;
                    bitcode[32767 + nrneg] = [];
                    bitcode[32767 + nrneg][1] = cat;
                    bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
                  }

                  nrlower <<= 1;
                  nrupper <<= 1;
                }
              }

              function initRGBYUVTable() {
                for (var i = 0; i < 256; i++) {
                  RGB_YUV_TABLE[i] = 19595 * i;
                  RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;
                  RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;
                  RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;
                  RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;
                  RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;
                  RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;
                  RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
                }
              } // IO functions


              function writeBits(bs) {
                var value = bs[0];
                var posval = bs[1] - 1;

                while (posval >= 0) {
                  if (value & 1 << posval) {
                    bytenew |= 1 << bytepos;
                  }

                  posval--;
                  bytepos--;

                  if (bytepos < 0) {
                    if (bytenew == 0xFF) {
                      writeByte(0xFF);
                      writeByte(0);
                    } else {
                      writeByte(bytenew);
                    }

                    bytepos = 7;
                    bytenew = 0;
                  }
                }
              }

              function writeByte(value) {
                //byteout.push(clt[value]); // write char directly instead of converting later
                byteout.push(value);
              }

              function writeWord(value) {
                writeByte(value >> 8 & 0xFF);
                writeByte(value & 0xFF);
              } // DCT & quantization core


              function fDCTQuant(data, fdtbl) {
                var d0, d1, d2, d3, d4, d5, d6, d7;
                /* Pass 1: process rows. */

                var dataOff = 0;
                var i;
                var I8 = 8;
                var I64 = 64;

                for (i = 0; i < I8; ++i) {
                  d0 = data[dataOff];
                  d1 = data[dataOff + 1];
                  d2 = data[dataOff + 2];
                  d3 = data[dataOff + 3];
                  d4 = data[dataOff + 4];
                  d5 = data[dataOff + 5];
                  d6 = data[dataOff + 6];
                  d7 = data[dataOff + 7];
                  var tmp0 = d0 + d7;
                  var tmp7 = d0 - d7;
                  var tmp1 = d1 + d6;
                  var tmp6 = d1 - d6;
                  var tmp2 = d2 + d5;
                  var tmp5 = d2 - d5;
                  var tmp3 = d3 + d4;
                  var tmp4 = d3 - d4;
                  /* Even part */

                  var tmp10 = tmp0 + tmp3;
                  /* phase 2 */

                  var tmp13 = tmp0 - tmp3;
                  var tmp11 = tmp1 + tmp2;
                  var tmp12 = tmp1 - tmp2;
                  data[dataOff] = tmp10 + tmp11;
                  /* phase 3 */

                  data[dataOff + 4] = tmp10 - tmp11;
                  var z1 = (tmp12 + tmp13) * 0.707106781;
                  /* c4 */

                  data[dataOff + 2] = tmp13 + z1;
                  /* phase 5 */

                  data[dataOff + 6] = tmp13 - z1;
                  /* Odd part */

                  tmp10 = tmp4 + tmp5;
                  /* phase 2 */

                  tmp11 = tmp5 + tmp6;
                  tmp12 = tmp6 + tmp7;
                  /* The rotator is modified from fig 4-8 to avoid extra negations. */

                  var z5 = (tmp10 - tmp12) * 0.382683433;
                  /* c6 */

                  var z2 = 0.541196100 * tmp10 + z5;
                  /* c2-c6 */

                  var z4 = 1.306562965 * tmp12 + z5;
                  /* c2+c6 */

                  var z3 = tmp11 * 0.707106781;
                  /* c4 */

                  var z11 = tmp7 + z3;
                  /* phase 5 */

                  var z13 = tmp7 - z3;
                  data[dataOff + 5] = z13 + z2;
                  /* phase 6 */

                  data[dataOff + 3] = z13 - z2;
                  data[dataOff + 1] = z11 + z4;
                  data[dataOff + 7] = z11 - z4;
                  dataOff += 8;
                  /* advance pointer to next row */
                }
                /* Pass 2: process columns. */


                dataOff = 0;

                for (i = 0; i < I8; ++i) {
                  d0 = data[dataOff];
                  d1 = data[dataOff + 8];
                  d2 = data[dataOff + 16];
                  d3 = data[dataOff + 24];
                  d4 = data[dataOff + 32];
                  d5 = data[dataOff + 40];
                  d6 = data[dataOff + 48];
                  d7 = data[dataOff + 56];
                  var tmp0p2 = d0 + d7;
                  var tmp7p2 = d0 - d7;
                  var tmp1p2 = d1 + d6;
                  var tmp6p2 = d1 - d6;
                  var tmp2p2 = d2 + d5;
                  var tmp5p2 = d2 - d5;
                  var tmp3p2 = d3 + d4;
                  var tmp4p2 = d3 - d4;
                  /* Even part */

                  var tmp10p2 = tmp0p2 + tmp3p2;
                  /* phase 2 */

                  var tmp13p2 = tmp0p2 - tmp3p2;
                  var tmp11p2 = tmp1p2 + tmp2p2;
                  var tmp12p2 = tmp1p2 - tmp2p2;
                  data[dataOff] = tmp10p2 + tmp11p2;
                  /* phase 3 */

                  data[dataOff + 32] = tmp10p2 - tmp11p2;
                  var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
                  /* c4 */

                  data[dataOff + 16] = tmp13p2 + z1p2;
                  /* phase 5 */

                  data[dataOff + 48] = tmp13p2 - z1p2;
                  /* Odd part */

                  tmp10p2 = tmp4p2 + tmp5p2;
                  /* phase 2 */

                  tmp11p2 = tmp5p2 + tmp6p2;
                  tmp12p2 = tmp6p2 + tmp7p2;
                  /* The rotator is modified from fig 4-8 to avoid extra negations. */

                  var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
                  /* c6 */

                  var z2p2 = 0.541196100 * tmp10p2 + z5p2;
                  /* c2-c6 */

                  var z4p2 = 1.306562965 * tmp12p2 + z5p2;
                  /* c2+c6 */

                  var z3p2 = tmp11p2 * 0.707106781;
                  /* c4 */

                  var z11p2 = tmp7p2 + z3p2;
                  /* phase 5 */

                  var z13p2 = tmp7p2 - z3p2;
                  data[dataOff + 40] = z13p2 + z2p2;
                  /* phase 6 */

                  data[dataOff + 24] = z13p2 - z2p2;
                  data[dataOff + 8] = z11p2 + z4p2;
                  data[dataOff + 56] = z11p2 - z4p2;
                  dataOff++;
                  /* advance pointer to next column */
                } // Quantize/descale the coefficients


                var fDCTQuant;

                for (i = 0; i < I64; ++i) {
                  // Apply the quantization and scaling factor & Round to nearest integer
                  fDCTQuant = data[i] * fdtbl[i];
                  outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);
                }

                return outputfDCTQuant;
              }

              function writeAPP0() {
                writeWord(0xFFE0); // marker

                writeWord(16); // length

                writeByte(0x4A); // J

                writeByte(0x46); // F

                writeByte(0x49); // I

                writeByte(0x46); // F

                writeByte(0); // = "JFIF",'\0'

                writeByte(1); // versionhi

                writeByte(1); // versionlo

                writeByte(0); // xyunits

                writeWord(1); // xdensity

                writeWord(1); // ydensity

                writeByte(0); // thumbnwidth

                writeByte(0); // thumbnheight
              }

              function writeSOF0(width, height) {
                writeWord(0xFFC0); // marker

                writeWord(17); // length, truecolor YUV JPG

                writeByte(8); // precision

                writeWord(height);
                writeWord(width);
                writeByte(3); // nrofcomponents

                writeByte(1); // IdY

                writeByte(0x11); // HVY

                writeByte(0); // QTY

                writeByte(2); // IdU

                writeByte(0x11); // HVU

                writeByte(1); // QTU

                writeByte(3); // IdV

                writeByte(0x11); // HVV

                writeByte(1); // QTV
              }

              function writeDQT() {
                writeWord(0xFFDB); // marker

                writeWord(132); // length

                writeByte(0);

                for (var i = 0; i < 64; i++) {
                  writeByte(YTable[i]);
                }

                writeByte(1);

                for (var j = 0; j < 64; j++) {
                  writeByte(UVTable[j]);
                }
              }

              function writeDHT() {
                writeWord(0xFFC4); // marker

                writeWord(0x01A2); // length

                writeByte(0); // HTYDCinfo

                for (var i = 0; i < 16; i++) {
                  writeByte(std_dc_luminance_nrcodes[i + 1]);
                }

                for (var j = 0; j <= 11; j++) {
                  writeByte(std_dc_luminance_values[j]);
                }

                writeByte(0x10); // HTYACinfo

                for (var k = 0; k < 16; k++) {
                  writeByte(std_ac_luminance_nrcodes[k + 1]);
                }

                for (var l = 0; l <= 161; l++) {
                  writeByte(std_ac_luminance_values[l]);
                }

                writeByte(1); // HTUDCinfo

                for (var m = 0; m < 16; m++) {
                  writeByte(std_dc_chrominance_nrcodes[m + 1]);
                }

                for (var n = 0; n <= 11; n++) {
                  writeByte(std_dc_chrominance_values[n]);
                }

                writeByte(0x11); // HTUACinfo

                for (var o = 0; o < 16; o++) {
                  writeByte(std_ac_chrominance_nrcodes[o + 1]);
                }

                for (var p = 0; p <= 161; p++) {
                  writeByte(std_ac_chrominance_values[p]);
                }
              }

              function writeSOS() {
                writeWord(0xFFDA); // marker

                writeWord(12); // length

                writeByte(3); // nrofcomponents

                writeByte(1); // IdY

                writeByte(0); // HTY

                writeByte(2); // IdU

                writeByte(0x11); // HTU

                writeByte(3); // IdV

                writeByte(0x11); // HTV

                writeByte(0); // Ss

                writeByte(0x3f); // Se

                writeByte(0); // Bf
              }

              function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
                var EOB = HTAC[0x00];
                var M16zeroes = HTAC[0xF0];
                var pos;
                var I16 = 16;
                var I63 = 63;
                var I64 = 64;
                var DU_DCT = fDCTQuant(CDU, fdtbl); //ZigZag reorder

                for (var j = 0; j < I64; ++j) {
                  DU[ZigZag[j]] = DU_DCT[j];
                }

                var Diff = DU[0] - DC;
                DC = DU[0]; //Encode DC

                if (Diff == 0) {
                  writeBits(HTDC[0]); // Diff might be 0
                } else {
                  pos = 32767 + Diff;
                  writeBits(HTDC[category[pos]]);
                  writeBits(bitcode[pos]);
                } //Encode ACs


                var end0pos = 63; // was const... which is crazy

                for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {}

                if (end0pos == 0) {
                  writeBits(EOB);
                  return DC;
                }

                var i = 1;
                var lng;

                while (i <= end0pos) {
                  var startpos = i;

                  for (; DU[i] == 0 && i <= end0pos; ++i) {}

                  var nrzeroes = i - startpos;

                  if (nrzeroes >= I16) {
                    lng = nrzeroes >> 4;

                    for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) writeBits(M16zeroes);

                    nrzeroes = nrzeroes & 0xF;
                  }

                  pos = 32767 + DU[i];
                  writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
                  writeBits(bitcode[pos]);
                  i++;
                }

                if (end0pos != I63) {
                  writeBits(EOB);
                }

                return DC;
              }

              function initCharLookupTable() {
                var sfcc = String.fromCharCode;

                for (var i = 0; i < 256; i++) {
                  ///// ACHTUNG // 255
                  clt[i] = sfcc(i);
                }
              }

              this.encode = function (image, quality) // image data object
              {
                var time_start = new Date().getTime();
                if (quality) setQuality(quality); // Initialize bit writer

                byteout = new Array();
                bytenew = 0;
                bytepos = 7; // Add JPEG headers

                writeWord(0xFFD8); // SOI

                writeAPP0();
                writeDQT();
                writeSOF0(image.width, image.height);
                writeDHT();
                writeSOS(); // Encode 8x8 macroblocks

                var DCY = 0;
                var DCU = 0;
                var DCV = 0;
                bytenew = 0;
                bytepos = 7;
                this.encode.displayName = "_encode_";
                var imageData = image.data;
                var width = image.width;
                var height = image.height;
                var quadWidth = width * 4;
                var x,
                    y = 0;
                var r, g, b;
                var start, p, col, row, pos;

                while (y < height) {
                  x = 0;

                  while (x < quadWidth) {
                    start = quadWidth * y + x;
                    p = start;
                    col = -1;
                    row = 0;

                    for (pos = 0; pos < 64; pos++) {
                      row = pos >> 3; // /8

                      col = (pos & 7) * 4; // %8

                      p = start + row * quadWidth + col;

                      if (y + row >= height) {
                        // padding bottom
                        p -= quadWidth * (y + 1 + row - height);
                      }

                      if (x + col >= quadWidth) {
                        // padding right	
                        p -= x + col - quadWidth + 4;
                      }

                      r = imageData[p++];
                      g = imageData[p++];
                      b = imageData[p++];
                      /* // calculate YUV values dynamically
                      YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
                      UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
                      VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
                      */
                      // use lookup table (slightly faster)

                      YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
                      UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
                      VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
                    }

                    DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
                    DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
                    DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
                    x += 32;
                  }

                  y += 8;
                } ////////////////////////////////////////////////////////////////
                // Do the bit alignment of the EOI marker


                if (bytepos >= 0) {
                  var fillbits = [];
                  fillbits[1] = bytepos + 1;
                  fillbits[0] = (1 << bytepos + 1) - 1;
                  writeBits(fillbits);
                }

                writeWord(0xFFD9); //EOI
                //return new Uint8Array(byteout);

                return new Buffer(byteout);
                var jpegDataUri = 'data:image/jpeg;base64,' + btoa$1(byteout.join(''));
                byteout = []; // benchmarking

                var duration = new Date().getTime() - time_start; //console.log('Encoding time: '+ duration + 'ms');
                //

                return jpegDataUri;
              };

              function setQuality(quality) {
                if (quality <= 0) {
                  quality = 1;
                }

                if (quality > 100) {
                  quality = 100;
                }

                if (currentQuality == quality) return; // don't recalc if unchanged

                var sf = 0;

                if (quality < 50) {
                  sf = Math.floor(5000 / quality);
                } else {
                  sf = Math.floor(200 - quality * 2);
                }

                initQuantTables(sf);
                currentQuality = quality; //console.log('Quality set to: '+quality +'%');
              }

              function init() {
                var time_start = new Date().getTime();
                if (!quality) quality = 50; // Create tables

                initCharLookupTable();
                initHuffmanTbl();
                initCategoryNumber();
                initRGBYUVTable();
                setQuality(quality);
                var duration = new Date().getTime() - time_start; //console.log('Initialization '+ duration + 'ms');
              }

              init();
            }
            var encoder = encode$5;

            function encode$5(imgData, qu) {
              if (typeof qu === 'undefined') qu = 50;
              var encoder = new JPEGEncoder(qu);
              var data = encoder.encode(imgData, qu);
              return {
                data: data,
                width: imgData.width,
                height: imgData.height
              };
            } // helper function to get the imageData of an existing image on the current page.

            /* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
            /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

            /*
               Copyright 2011 notmasteryet

               Licensed under the Apache License, Version 2.0 (the "License");
               you may not use this file except in compliance with the License.
               You may obtain a copy of the License at

                   http://www.apache.org/licenses/LICENSE-2.0

               Unless required by applicable law or agreed to in writing, software
               distributed under the License is distributed on an "AS IS" BASIS,
               WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               See the License for the specific language governing permissions and
               limitations under the License.
            */
            // - The JPEG specification can be found in the ITU CCITT Recommendation T.81
            //   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
            // - The JFIF specification can be found in the JPEG File Interchange Format
            //   (www.w3.org/Graphics/JPEG/jfif3.pdf)
            // - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
            //   in PostScript Level 2, Technical Note #5116
            //   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

            var JpegImage = function jpegImage() {

              var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
              var dctCos1 = 4017; // cos(pi/16)

              var dctSin1 = 799; // sin(pi/16)

              var dctCos3 = 3406; // cos(3*pi/16)

              var dctSin3 = 2276; // sin(3*pi/16)

              var dctCos6 = 1567; // cos(6*pi/16)

              var dctSin6 = 3784; // sin(6*pi/16)

              var dctSqrt2 = 5793; // sqrt(2)

              var dctSqrt1d2 = 2896; // sqrt(2) / 2

              function constructor() {}

              function buildHuffmanTable(codeLengths, values) {
                var k = 0,
                    code = [],
                    i,
                    j,
                    length = 16;

                while (length > 0 && !codeLengths[length - 1]) length--;

                code.push({
                  children: [],
                  index: 0
                });
                var p = code[0],
                    q;

                for (i = 0; i < length; i++) {
                  for (j = 0; j < codeLengths[i]; j++) {
                    p = code.pop();
                    p.children[p.index] = values[k];

                    while (p.index > 0) {
                      p = code.pop();
                    }

                    p.index++;
                    code.push(p);

                    while (code.length <= i) {
                      code.push(q = {
                        children: [],
                        index: 0
                      });
                      p.children[p.index] = q.children;
                      p = q;
                    }

                    k++;
                  }

                  if (i + 1 < length) {
                    // p here points to last code
                    code.push(q = {
                      children: [],
                      index: 0
                    });
                    p.children[p.index] = q.children;
                    p = q;
                  }
                }

                return code[0].children;
              }

              function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
                var precision = frame.precision;
                var samplesPerLine = frame.samplesPerLine;
                var scanLines = frame.scanLines;
                var mcusPerLine = frame.mcusPerLine;
                var progressive = frame.progressive;
                var maxH = frame.maxH,
                    maxV = frame.maxV;
                var startOffset = offset,
                    bitsData = 0,
                    bitsCount = 0;

                function readBit() {
                  if (bitsCount > 0) {
                    bitsCount--;
                    return bitsData >> bitsCount & 1;
                  }

                  bitsData = data[offset++];

                  if (bitsData == 0xFF) {
                    var nextByte = data[offset++];

                    if (nextByte) {
                      throw new Error("unexpected marker: " + (bitsData << 8 | nextByte).toString(16));
                    } // unstuff 0

                  }

                  bitsCount = 7;
                  return bitsData >>> 7;
                }

                function decodeHuffman(tree) {
                  var node = tree,
                      bit;

                  while ((bit = readBit()) !== null) {
                    node = node[bit];
                    if (typeof node === 'number') return node;
                    if (typeof node !== 'object') throw new Error("invalid huffman sequence");
                  }

                  return null;
                }

                function receive(length) {
                  var n = 0;

                  while (length > 0) {
                    var bit = readBit();
                    if (bit === null) return;
                    n = n << 1 | bit;
                    length--;
                  }

                  return n;
                }

                function receiveAndExtend(length) {
                  var n = receive(length);
                  if (n >= 1 << length - 1) return n;
                  return n + (-1 << length) + 1;
                }

                function decodeBaseline(component, zz) {
                  var t = decodeHuffman(component.huffmanTableDC);
                  var diff = t === 0 ? 0 : receiveAndExtend(t);
                  zz[0] = component.pred += diff;
                  var k = 1;

                  while (k < 64) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15,
                        r = rs >> 4;

                    if (s === 0) {
                      if (r < 15) break;
                      k += 16;
                      continue;
                    }

                    k += r;
                    var z = dctZigZag[k];
                    zz[z] = receiveAndExtend(s);
                    k++;
                  }
                }

                function decodeDCFirst(component, zz) {
                  var t = decodeHuffman(component.huffmanTableDC);
                  var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
                  zz[0] = component.pred += diff;
                }

                function decodeDCSuccessive(component, zz) {
                  zz[0] |= readBit() << successive;
                }

                var eobrun = 0;

                function decodeACFirst(component, zz) {
                  if (eobrun > 0) {
                    eobrun--;
                    return;
                  }

                  var k = spectralStart,
                      e = spectralEnd;

                  while (k <= e) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15,
                        r = rs >> 4;

                    if (s === 0) {
                      if (r < 15) {
                        eobrun = receive(r) + (1 << r) - 1;
                        break;
                      }

                      k += 16;
                      continue;
                    }

                    k += r;
                    var z = dctZigZag[k];
                    zz[z] = receiveAndExtend(s) * (1 << successive);
                    k++;
                  }
                }

                var successiveACState = 0,
                    successiveACNextValue;

                function decodeACSuccessive(component, zz) {
                  var k = spectralStart,
                      e = spectralEnd,
                      r = 0;

                  while (k <= e) {
                    var z = dctZigZag[k];
                    var direction = zz[z] < 0 ? -1 : 1;

                    switch (successiveACState) {
                      case 0:
                        // initial state
                        var rs = decodeHuffman(component.huffmanTableAC);
                        var s = rs & 15,
                            r = rs >> 4;

                        if (s === 0) {
                          if (r < 15) {
                            eobrun = receive(r) + (1 << r);
                            successiveACState = 4;
                          } else {
                            r = 16;
                            successiveACState = 1;
                          }
                        } else {
                          if (s !== 1) throw new Error("invalid ACn encoding");
                          successiveACNextValue = receiveAndExtend(s);
                          successiveACState = r ? 2 : 3;
                        }

                        continue;

                      case 1: // skipping r zero items

                      case 2:
                        if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
                          r--;
                          if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;
                        }
                        break;

                      case 3:
                        // set value for a zero item
                        if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
                          zz[z] = successiveACNextValue << successive;
                          successiveACState = 0;
                        }
                        break;

                      case 4:
                        // eob
                        if (zz[z]) zz[z] += (readBit() << successive) * direction;
                        break;
                    }

                    k++;
                  }

                  if (successiveACState === 4) {
                    eobrun--;
                    if (eobrun === 0) successiveACState = 0;
                  }
                }

                function decodeMcu(component, decode, mcu, row, col) {
                  var mcuRow = mcu / mcusPerLine | 0;
                  var mcuCol = mcu % mcusPerLine;
                  var blockRow = mcuRow * component.v + row;
                  var blockCol = mcuCol * component.h + col;
                  decode(component, component.blocks[blockRow][blockCol]);
                }

                function decodeBlock(component, decode, mcu) {
                  var blockRow = mcu / component.blocksPerLine | 0;
                  var blockCol = mcu % component.blocksPerLine;
                  decode(component, component.blocks[blockRow][blockCol]);
                }

                var componentsLength = components.length;
                var component, i, j, k, n;
                var decodeFn;

                if (progressive) {
                  if (spectralStart === 0) decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
                } else {
                  decodeFn = decodeBaseline;
                }

                var mcu = 0,
                    marker;
                var mcuExpected;

                if (componentsLength == 1) {
                  mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
                } else {
                  mcuExpected = mcusPerLine * frame.mcusPerColumn;
                }

                if (!resetInterval) resetInterval = mcuExpected;
                var h, v;

                while (mcu < mcuExpected) {
                  // reset interval stuff
                  for (i = 0; i < componentsLength; i++) components[i].pred = 0;

                  eobrun = 0;

                  if (componentsLength == 1) {
                    component = components[0];

                    for (n = 0; n < resetInterval; n++) {
                      decodeBlock(component, decodeFn, mcu);
                      mcu++;
                    }
                  } else {
                    for (n = 0; n < resetInterval; n++) {
                      for (i = 0; i < componentsLength; i++) {
                        component = components[i];
                        h = component.h;
                        v = component.v;

                        for (j = 0; j < v; j++) {
                          for (k = 0; k < h; k++) {
                            decodeMcu(component, decodeFn, mcu, j, k);
                          }
                        }
                      }

                      mcu++; // If we've reached our expected MCU's, stop decoding

                      if (mcu === mcuExpected) break;
                    }
                  } // find marker


                  bitsCount = 0;
                  marker = data[offset] << 8 | data[offset + 1];

                  if (marker < 0xFF00) {
                    throw new Error("marker was not found");
                  }

                  if (marker >= 0xFFD0 && marker <= 0xFFD7) {
                    // RSTx
                    offset += 2;
                  } else break;
                }

                return offset - startOffset;
              }

              function buildComponentData(frame, component) {
                var lines = [];
                var blocksPerLine = component.blocksPerLine;
                var blocksPerColumn = component.blocksPerColumn;
                var samplesPerLine = blocksPerLine << 3;
                var R = new Int32Array(64),
                    r = new Uint8Array(64); // A port of poppler's IDCT method which in turn is taken from:
                //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
                //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
                //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
                //   988-991.

                function quantizeAndInverse(zz, dataOut, dataIn) {
                  var qt = component.quantizationTable;
                  var v0, v1, v2, v3, v4, v5, v6, v7, t;
                  var p = dataIn;
                  var i; // dequant

                  for (i = 0; i < 64; i++) p[i] = zz[i] * qt[i]; // inverse DCT on rows


                  for (i = 0; i < 8; ++i) {
                    var row = 8 * i; // check for all-zero AC coefficients

                    if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {
                      t = dctSqrt2 * p[0 + row] + 512 >> 10;
                      p[0 + row] = t;
                      p[1 + row] = t;
                      p[2 + row] = t;
                      p[3 + row] = t;
                      p[4 + row] = t;
                      p[5 + row] = t;
                      p[6 + row] = t;
                      p[7 + row] = t;
                      continue;
                    } // stage 4


                    v0 = dctSqrt2 * p[0 + row] + 128 >> 8;
                    v1 = dctSqrt2 * p[4 + row] + 128 >> 8;
                    v2 = p[2 + row];
                    v3 = p[6 + row];
                    v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;
                    v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;
                    v5 = p[3 + row] << 4;
                    v6 = p[5 + row] << 4; // stage 3

                    t = v0 - v1 + 1 >> 1;
                    v0 = v0 + v1 + 1 >> 1;
                    v1 = t;
                    t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
                    v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
                    v3 = t;
                    t = v4 - v6 + 1 >> 1;
                    v4 = v4 + v6 + 1 >> 1;
                    v6 = t;
                    t = v7 + v5 + 1 >> 1;
                    v5 = v7 - v5 + 1 >> 1;
                    v7 = t; // stage 2

                    t = v0 - v3 + 1 >> 1;
                    v0 = v0 + v3 + 1 >> 1;
                    v3 = t;
                    t = v1 - v2 + 1 >> 1;
                    v1 = v1 + v2 + 1 >> 1;
                    v2 = t;
                    t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                    v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                    v7 = t;
                    t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                    v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                    v6 = t; // stage 1

                    p[0 + row] = v0 + v7;
                    p[7 + row] = v0 - v7;
                    p[1 + row] = v1 + v6;
                    p[6 + row] = v1 - v6;
                    p[2 + row] = v2 + v5;
                    p[5 + row] = v2 - v5;
                    p[3 + row] = v3 + v4;
                    p[4 + row] = v3 - v4;
                  } // inverse DCT on columns


                  for (i = 0; i < 8; ++i) {
                    var col = i; // check for all-zero AC coefficients

                    if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {
                      t = dctSqrt2 * dataIn[i + 0] + 8192 >> 14;
                      p[0 * 8 + col] = t;
                      p[1 * 8 + col] = t;
                      p[2 * 8 + col] = t;
                      p[3 * 8 + col] = t;
                      p[4 * 8 + col] = t;
                      p[5 * 8 + col] = t;
                      p[6 * 8 + col] = t;
                      p[7 * 8 + col] = t;
                      continue;
                    } // stage 4


                    v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;
                    v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;
                    v2 = p[2 * 8 + col];
                    v3 = p[6 * 8 + col];
                    v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;
                    v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;
                    v5 = p[3 * 8 + col];
                    v6 = p[5 * 8 + col]; // stage 3

                    t = v0 - v1 + 1 >> 1;
                    v0 = v0 + v1 + 1 >> 1;
                    v1 = t;
                    t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
                    v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
                    v3 = t;
                    t = v4 - v6 + 1 >> 1;
                    v4 = v4 + v6 + 1 >> 1;
                    v6 = t;
                    t = v7 + v5 + 1 >> 1;
                    v5 = v7 - v5 + 1 >> 1;
                    v7 = t; // stage 2

                    t = v0 - v3 + 1 >> 1;
                    v0 = v0 + v3 + 1 >> 1;
                    v3 = t;
                    t = v1 - v2 + 1 >> 1;
                    v1 = v1 + v2 + 1 >> 1;
                    v2 = t;
                    t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                    v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                    v7 = t;
                    t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                    v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                    v6 = t; // stage 1

                    p[0 * 8 + col] = v0 + v7;
                    p[7 * 8 + col] = v0 - v7;
                    p[1 * 8 + col] = v1 + v6;
                    p[6 * 8 + col] = v1 - v6;
                    p[2 * 8 + col] = v2 + v5;
                    p[5 * 8 + col] = v2 - v5;
                    p[3 * 8 + col] = v3 + v4;
                    p[4 * 8 + col] = v3 - v4;
                  } // convert to 8-bit integers


                  for (i = 0; i < 64; ++i) {
                    var sample = 128 + (p[i] + 8 >> 4);
                    dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;
                  }
                }

                var i, j;

                for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
                  var scanLine = blockRow << 3;

                  for (i = 0; i < 8; i++) lines.push(new Uint8Array(samplesPerLine));

                  for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                    quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);
                    var offset = 0,
                        sample = blockCol << 3;

                    for (j = 0; j < 8; j++) {
                      var line = lines[scanLine + j];

                      for (i = 0; i < 8; i++) line[sample + i] = r[offset++];
                    }
                  }
                }

                return lines;
              }

              function clampTo8bit(a) {
                return a < 0 ? 0 : a > 255 ? 255 : a;
              }

              constructor.prototype = {
                load: function load(path) {
                  var xhr = new XMLHttpRequest();
                  xhr.open("GET", path, true);
                  xhr.responseType = "arraybuffer";

                  xhr.onload = function () {
                    // TODO catch parse error
                    var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
                    this.parse(data);
                    if (this.onload) this.onload();
                  }.bind(this);

                  xhr.send(null);
                },
                parse: function parse(data) {
                  var offset = 0,
                      length = data.length;

                  function readUint16() {
                    var value = data[offset] << 8 | data[offset + 1];
                    offset += 2;
                    return value;
                  }

                  function readDataBlock() {
                    var length = readUint16();
                    var array = data.subarray(offset, offset + length - 2);
                    offset += array.length;
                    return array;
                  }

                  function prepareComponents(frame) {
                    var maxH = 0,
                        maxV = 0;
                    var component, componentId;

                    for (componentId in frame.components) {
                      if (frame.components.hasOwnProperty(componentId)) {
                        component = frame.components[componentId];
                        if (maxH < component.h) maxH = component.h;
                        if (maxV < component.v) maxV = component.v;
                      }
                    }

                    var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);
                    var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);

                    for (componentId in frame.components) {
                      if (frame.components.hasOwnProperty(componentId)) {
                        component = frame.components[componentId];
                        var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);
                        var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);
                        var blocksPerLineForMcu = mcusPerLine * component.h;
                        var blocksPerColumnForMcu = mcusPerColumn * component.v;
                        var blocks = [];

                        for (var i = 0; i < blocksPerColumnForMcu; i++) {
                          var row = [];

                          for (var j = 0; j < blocksPerLineForMcu; j++) row.push(new Int32Array(64));

                          blocks.push(row);
                        }

                        component.blocksPerLine = blocksPerLine;
                        component.blocksPerColumn = blocksPerColumn;
                        component.blocks = blocks;
                      }
                    }

                    frame.maxH = maxH;
                    frame.maxV = maxV;
                    frame.mcusPerLine = mcusPerLine;
                    frame.mcusPerColumn = mcusPerColumn;
                  }

                  var jfif = null;
                  var adobe = null;
                  var frame, resetInterval;
                  var quantizationTables = [],
                      frames = [];
                  var huffmanTablesAC = [],
                      huffmanTablesDC = [];
                  var fileMarker = readUint16();

                  if (fileMarker != 0xFFD8) {
                    // SOI (Start of Image)
                    throw new Error("SOI not found");
                  }

                  fileMarker = readUint16();

                  while (fileMarker != 0xFFD9) {
                    // EOI (End of image)
                    var i, j;

                    switch (fileMarker) {
                      case 0xFF00:
                        break;

                      case 0xFFE0: // APP0 (Application Specific)

                      case 0xFFE1: // APP1

                      case 0xFFE2: // APP2

                      case 0xFFE3: // APP3

                      case 0xFFE4: // APP4

                      case 0xFFE5: // APP5

                      case 0xFFE6: // APP6

                      case 0xFFE7: // APP7

                      case 0xFFE8: // APP8

                      case 0xFFE9: // APP9

                      case 0xFFEA: // APP10

                      case 0xFFEB: // APP11

                      case 0xFFEC: // APP12

                      case 0xFFED: // APP13

                      case 0xFFEE: // APP14

                      case 0xFFEF: // APP15

                      case 0xFFFE:
                        // COM (Comment)
                        var appData = readDataBlock();

                        if (fileMarker === 0xFFE0) {
                          if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                            // 'JFIF\x00'
                            jfif = {
                              version: {
                                major: appData[5],
                                minor: appData[6]
                              },
                              densityUnits: appData[7],
                              xDensity: appData[8] << 8 | appData[9],
                              yDensity: appData[10] << 8 | appData[11],
                              thumbWidth: appData[12],
                              thumbHeight: appData[13],
                              thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                            };
                          }
                        } // TODO APP1 - Exif


                        if (fileMarker === 0xFFEE) {
                          if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {
                            // 'Adobe\x00'
                            adobe = {
                              version: appData[6],
                              flags0: appData[7] << 8 | appData[8],
                              flags1: appData[9] << 8 | appData[10],
                              transformCode: appData[11]
                            };
                          }
                        }

                        break;

                      case 0xFFDB:
                        // DQT (Define Quantization Tables)
                        var quantizationTablesLength = readUint16();
                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;

                        while (offset < quantizationTablesEnd) {
                          var quantizationTableSpec = data[offset++];
                          var tableData = new Int32Array(64);

                          if (quantizationTableSpec >> 4 === 0) {
                            // 8 bit values
                            for (j = 0; j < 64; j++) {
                              var z = dctZigZag[j];
                              tableData[z] = data[offset++];
                            }
                          } else if (quantizationTableSpec >> 4 === 1) {
                            //16 bit
                            for (j = 0; j < 64; j++) {
                              var z = dctZigZag[j];
                              tableData[z] = readUint16();
                            }
                          } else throw new Error("DQT: invalid table spec");

                          quantizationTables[quantizationTableSpec & 15] = tableData;
                        }

                        break;

                      case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)

                      case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)

                      case 0xFFC2:
                        // SOF2 (Start of Frame, Progressive DCT)
                        readUint16(); // skip data length

                        frame = {};
                        frame.extended = fileMarker === 0xFFC1;
                        frame.progressive = fileMarker === 0xFFC2;
                        frame.precision = data[offset++];
                        frame.scanLines = readUint16();
                        frame.samplesPerLine = readUint16();
                        frame.components = {};
                        frame.componentsOrder = [];
                        var componentsCount = data[offset++],
                            componentId;

                        for (i = 0; i < componentsCount; i++) {
                          componentId = data[offset];
                          var h = data[offset + 1] >> 4;
                          var v = data[offset + 1] & 15;
                          var qId = data[offset + 2];
                          frame.componentsOrder.push(componentId);
                          frame.components[componentId] = {
                            h: h,
                            v: v,
                            quantizationIdx: qId
                          };
                          offset += 3;
                        }

                        prepareComponents(frame);
                        frames.push(frame);
                        break;

                      case 0xFFC4:
                        // DHT (Define Huffman Tables)
                        var huffmanLength = readUint16();

                        for (i = 2; i < huffmanLength;) {
                          var huffmanTableSpec = data[offset++];
                          var codeLengths = new Uint8Array(16);
                          var codeLengthSum = 0;

                          for (j = 0; j < 16; j++, offset++) codeLengthSum += codeLengths[j] = data[offset];

                          var huffmanValues = new Uint8Array(codeLengthSum);

                          for (j = 0; j < codeLengthSum; j++, offset++) huffmanValues[j] = data[offset];

                          i += 17 + codeLengthSum;
                          (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                        }

                        break;

                      case 0xFFDD:
                        // DRI (Define Restart Interval)
                        readUint16(); // skip data length

                        resetInterval = readUint16();
                        break;

                      case 0xFFDA:
                        // SOS (Start of Scan)
                        var scanLength = readUint16();
                        var selectorsCount = data[offset++];
                        var components = [],
                            component;

                        for (i = 0; i < selectorsCount; i++) {
                          component = frame.components[data[offset++]];
                          var tableSpec = data[offset++];
                          component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                          component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                          components.push(component);
                        }

                        var spectralStart = data[offset++];
                        var spectralEnd = data[offset++];
                        var successiveApproximation = data[offset++];
                        var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
                        offset += processed;
                        break;

                      case 0xFFFF:
                        // Fill bytes
                        if (data[offset] !== 0xFF) {
                          // Avoid skipping a valid marker.
                          offset--;
                        }

                        break;

                      default:
                        if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
                          // could be incorrect encoding -- last 0xFF byte of the previous
                          // block was eaten by the encoder
                          offset -= 3;
                          break;
                        }

                        throw new Error("unknown JPEG marker " + fileMarker.toString(16));
                    }

                    fileMarker = readUint16();
                  }

                  if (frames.length != 1) throw new Error("only single frame JPEGs supported"); // set each frame's components quantization table

                  for (var i = 0; i < frames.length; i++) {
                    var cp = frames[i].components;

                    for (var j in cp) {
                      cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];
                      delete cp[j].quantizationIdx;
                    }
                  }

                  this.width = frame.samplesPerLine;
                  this.height = frame.scanLines;
                  this.jfif = jfif;
                  this.adobe = adobe;
                  this.components = [];

                  for (var i = 0; i < frame.componentsOrder.length; i++) {
                    var component = frame.components[frame.componentsOrder[i]];
                    this.components.push({
                      lines: buildComponentData(frame, component),
                      scaleX: component.h / frame.maxH,
                      scaleY: component.v / frame.maxV
                    });
                  }
                },
                getData: function getData(width, height) {
                  var scaleX = this.width / width,
                      scaleY = this.height / height;
                  var component1, component2, component3, component4;
                  var component1Line, component2Line, component3Line, component4Line;
                  var x, y;
                  var offset = 0;
                  var Y, Cb, Cr, K, C, M, Ye, R, G, B;
                  var colorTransform;
                  var dataLength = width * height * this.components.length;
                  var data = new Uint8Array(dataLength);

                  switch (this.components.length) {
                    case 1:
                      component1 = this.components[0];

                      for (y = 0; y < height; y++) {
                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];

                        for (x = 0; x < width; x++) {
                          Y = component1Line[0 | x * component1.scaleX * scaleX];
                          data[offset++] = Y;
                        }
                      }

                      break;

                    case 2:
                      // PDF might compress two component data in custom colorspace
                      component1 = this.components[0];
                      component2 = this.components[1];

                      for (y = 0; y < height; y++) {
                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];

                        for (x = 0; x < width; x++) {
                          Y = component1Line[0 | x * component1.scaleX * scaleX];
                          data[offset++] = Y;
                          Y = component2Line[0 | x * component2.scaleX * scaleX];
                          data[offset++] = Y;
                        }
                      }

                      break;

                    case 3:
                      // The default transform for three components is true
                      colorTransform = true; // The adobe transform marker overrides any previous setting

                      if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;
                      component1 = this.components[0];
                      component2 = this.components[1];
                      component3 = this.components[2];

                      for (y = 0; y < height; y++) {
                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                        component3Line = component3.lines[0 | y * component3.scaleY * scaleY];

                        for (x = 0; x < width; x++) {
                          if (!colorTransform) {
                            R = component1Line[0 | x * component1.scaleX * scaleX];
                            G = component2Line[0 | x * component2.scaleX * scaleX];
                            B = component3Line[0 | x * component3.scaleX * scaleX];
                          } else {
                            Y = component1Line[0 | x * component1.scaleX * scaleX];
                            Cb = component2Line[0 | x * component2.scaleX * scaleX];
                            Cr = component3Line[0 | x * component3.scaleX * scaleX];
                            R = clampTo8bit(Y + 1.402 * (Cr - 128));
                            G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                            B = clampTo8bit(Y + 1.772 * (Cb - 128));
                          }

                          data[offset++] = R;
                          data[offset++] = G;
                          data[offset++] = B;
                        }
                      }

                      break;

                    case 4:
                      if (!this.adobe) throw 'Unsupported color mode (4 components)'; // The default transform for four components is false

                      colorTransform = false; // The adobe transform marker overrides any previous setting

                      if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;
                      component1 = this.components[0];
                      component2 = this.components[1];
                      component3 = this.components[2];
                      component4 = this.components[3];

                      for (y = 0; y < height; y++) {
                        component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                        component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                        component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
                        component4Line = component4.lines[0 | y * component4.scaleY * scaleY];

                        for (x = 0; x < width; x++) {
                          if (!colorTransform) {
                            C = component1Line[0 | x * component1.scaleX * scaleX];
                            M = component2Line[0 | x * component2.scaleX * scaleX];
                            Ye = component3Line[0 | x * component3.scaleX * scaleX];
                            K = component4Line[0 | x * component4.scaleX * scaleX];
                          } else {
                            Y = component1Line[0 | x * component1.scaleX * scaleX];
                            Cb = component2Line[0 | x * component2.scaleX * scaleX];
                            Cr = component3Line[0 | x * component3.scaleX * scaleX];
                            K = component4Line[0 | x * component4.scaleX * scaleX];
                            C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));
                            M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                            Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
                          }

                          data[offset++] = 255 - C;
                          data[offset++] = 255 - M;
                          data[offset++] = 255 - Ye;
                          data[offset++] = 255 - K;
                        }
                      }

                      break;

                    default:
                      throw 'Unsupported color mode';
                  }

                  return data;
                },
                copyToImageData: function copyToImageData(imageData) {
                  var width = imageData.width,
                      height = imageData.height;
                  var imageDataArray = imageData.data;
                  var data = this.getData(width, height);
                  var i = 0,
                      j = 0,
                      x,
                      y;
                  var Y, K, C, M, R, G, B;

                  switch (this.components.length) {
                    case 1:
                      for (y = 0; y < height; y++) {
                        for (x = 0; x < width; x++) {
                          Y = data[i++];
                          imageDataArray[j++] = Y;
                          imageDataArray[j++] = Y;
                          imageDataArray[j++] = Y;
                          imageDataArray[j++] = 255;
                        }
                      }

                      break;

                    case 3:
                      for (y = 0; y < height; y++) {
                        for (x = 0; x < width; x++) {
                          R = data[i++];
                          G = data[i++];
                          B = data[i++];
                          imageDataArray[j++] = R;
                          imageDataArray[j++] = G;
                          imageDataArray[j++] = B;
                          imageDataArray[j++] = 255;
                        }
                      }

                      break;

                    case 4:
                      for (y = 0; y < height; y++) {
                        for (x = 0; x < width; x++) {
                          C = data[i++];
                          M = data[i++];
                          Y = data[i++];
                          K = data[i++];
                          R = 255 - clampTo8bit(C * (1 - K / 255) + K);
                          G = 255 - clampTo8bit(M * (1 - K / 255) + K);
                          B = 255 - clampTo8bit(Y * (1 - K / 255) + K);
                          imageDataArray[j++] = R;
                          imageDataArray[j++] = G;
                          imageDataArray[j++] = B;
                          imageDataArray[j++] = 255;
                        }
                      }

                      break;

                    default:
                      throw 'Unsupported color mode';
                  }
                }
              };
              return constructor;
            }();

            var decoder = decode$4;

            function decode$4(jpegData, useTArray) {
              var arr = new Uint8Array(jpegData);
              var decoder = new JpegImage();
              decoder.parse(arr);
              var image = {
                width: decoder.width,
                height: decoder.height,
                data: useTArray ? new Uint8Array(decoder.width * decoder.height * 4) : new Buffer(decoder.width * decoder.height * 4)
              };
              decoder.copyToImageData(image);
              return image;
            }

            var jpegJs = {
              encode: encoder,
              decode: decoder
            };

            var msg = {
              2: 'need dictionary',

              /* Z_NEED_DICT       2  */
              1: 'stream end',

              /* Z_STREAM_END      1  */
              0: '',

              /* Z_OK              0  */
              '-1': 'file error',

              /* Z_ERRNO         (-1) */
              '-2': 'stream error',

              /* Z_STREAM_ERROR  (-2) */
              '-3': 'data error',

              /* Z_DATA_ERROR    (-3) */
              '-4': 'insufficient memory',

              /* Z_MEM_ERROR     (-4) */
              '-5': 'buffer error',

              /* Z_BUF_ERROR     (-5) */
              '-6': 'incompatible version'
              /* Z_VERSION_ERROR (-6) */

            };

            function ZStream() {
              /* next input byte */
              this.input = null; // JS specific, because we have no pointers

              this.next_in = 0;
              /* number of bytes available at input */

              this.avail_in = 0;
              /* total number of input bytes read so far */

              this.total_in = 0;
              /* next output byte should be put there */

              this.output = null; // JS specific, because we have no pointers

              this.next_out = 0;
              /* remaining free space at output */

              this.avail_out = 0;
              /* total number of bytes output so far */

              this.total_out = 0;
              /* last error message, NULL if no error */

              this.msg = ''
              /*Z_NULL*/
              ;
              /* not visible by applications */

              this.state = null;
              /* best guess about the data type: binary or text */

              this.data_type = 2
              /*Z_UNKNOWN*/
              ;
              /* adler32 value of the uncompressed data */

              this.adler = 0;
            }

            function arraySet(dest, src, src_offs, len, dest_offs) {
              if (src.subarray && dest.subarray) {
                dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                return;
              } // Fallback to ordinary array


              for (var i = 0; i < len; i++) {
                dest[dest_offs + i] = src[src_offs + i];
              }
            }
            var Buf8 = Uint8Array;
            var Buf16 = Uint16Array;
            var Buf32 = Int32Array; // Enable/Disable typed arrays use, for testing
            //

            /* Public constants ==========================================================*/

            /* ===========================================================================*/
            //var Z_FILTERED          = 1;
            //var Z_HUFFMAN_ONLY      = 2;
            //var Z_RLE               = 3;

            var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

            /* Possible values of the data_type field (though see inflate()) */

            var Z_BINARY = 0;
            var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

            var Z_UNKNOWN = 2;
            /*============================================================================*/

            function zero(buf) {
              var len = buf.length;

              while (--len >= 0) {
                buf[len] = 0;
              }
            } // From zutil.h


            var STORED_BLOCK = 0;
            var STATIC_TREES = 1;
            var DYN_TREES = 2;
            /* The three kinds of block type */

            var MIN_MATCH = 3;
            var MAX_MATCH = 258;
            /* The minimum and maximum match lengths */
            // From deflate.h

            /* ===========================================================================
             * Internal compression state.
             */

            var LENGTH_CODES = 29;
            /* number of length codes, not counting the special END_BLOCK code */

            var LITERALS = 256;
            /* number of literal bytes 0..255 */

            var L_CODES = LITERALS + 1 + LENGTH_CODES;
            /* number of Literal or Length codes, including the END_BLOCK code */

            var D_CODES = 30;
            /* number of distance codes */

            var BL_CODES = 19;
            /* number of codes used to transfer the bit lengths */

            var HEAP_SIZE = 2 * L_CODES + 1;
            /* maximum heap size */

            var MAX_BITS = 15;
            /* All codes must not exceed MAX_BITS bits */

            var Buf_size = 16;
            /* size of bit buffer in bi_buf */

            /* ===========================================================================
             * Constants
             */

            var MAX_BL_BITS = 7;
            /* Bit length codes must not exceed MAX_BL_BITS bits */

            var END_BLOCK = 256;
            /* end of block literal code */

            var REP_3_6 = 16;
            /* repeat previous bit length 3-6 times (2 bits of repeat count) */

            var REPZ_3_10 = 17;
            /* repeat a zero length 3-10 times  (3 bits of repeat count) */

            var REPZ_11_138 = 18;
            /* repeat a zero length 11-138 times  (7 bits of repeat count) */

            /* eslint-disable comma-spacing,array-bracket-spacing */

            var extra_lbits =
            /* extra bits for each length code */
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
            var extra_dbits =
            /* extra bits for each distance code */
            [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
            var extra_blbits =
            /* extra bits for each bit length code */
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
            var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            /* eslint-enable comma-spacing,array-bracket-spacing */

            /* The lengths of the bit length codes are sent in order of decreasing
             * probability, to avoid transmitting the lengths for unused bit length codes.
             */

            /* ===========================================================================
             * Local data. These are initialized only once.
             */
            // We pre-fill arrays with 0 to avoid uninitialized gaps

            var DIST_CODE_LEN = 512;
            /* see definition of array dist_code below */
            // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1

            var static_ltree = new Array((L_CODES + 2) * 2);
            zero(static_ltree);
            /* The static literal tree. Since the bit lengths are imposed, there is no
             * need for the L_CODES extra codes used during heap construction. However
             * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
             * below).
             */

            var static_dtree = new Array(D_CODES * 2);
            zero(static_dtree);
            /* The static distance tree. (Actually a trivial tree since all codes use
             * 5 bits.)
             */

            var _dist_code = new Array(DIST_CODE_LEN);

            zero(_dist_code);
            /* Distance codes. The first 256 values correspond to the distances
             * 3 .. 258, the last 256 values correspond to the top 8 bits of
             * the 15 bit distances.
             */

            var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

            zero(_length_code);
            /* length code for each normalized match length (0 == MIN_MATCH) */

            var base_length = new Array(LENGTH_CODES);
            zero(base_length);
            /* First normalized length for each code (0 = MIN_MATCH) */

            var base_dist = new Array(D_CODES);
            zero(base_dist);
            /* First normalized distance for each code (0 = distance of 1) */

            function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
              this.static_tree = static_tree;
              /* static tree or NULL */

              this.extra_bits = extra_bits;
              /* extra bits for each code or NULL */

              this.extra_base = extra_base;
              /* base index for extra_bits */

              this.elems = elems;
              /* max number of elements in the tree */

              this.max_length = max_length;
              /* max bit length for the codes */
              // show if `static_tree` has data or dummy - needed for monomorphic objects

              this.has_stree = static_tree && static_tree.length;
            }

            var static_l_desc;
            var static_d_desc;
            var static_bl_desc;

            function TreeDesc(dyn_tree, stat_desc) {
              this.dyn_tree = dyn_tree;
              /* the dynamic tree */

              this.max_code = 0;
              /* largest code with non zero frequency */

              this.stat_desc = stat_desc;
              /* the corresponding static tree */
            }

            function d_code(dist) {
              return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
            }
            /* ===========================================================================
             * Output a short LSB first on the stream.
             * IN assertion: there is enough room in pendingBuf.
             */


            function put_short(s, w) {
              //    put_byte(s, (uch)((w) & 0xff));
              //    put_byte(s, (uch)((ush)(w) >> 8));
              s.pending_buf[s.pending++] = w & 0xff;
              s.pending_buf[s.pending++] = w >>> 8 & 0xff;
            }
            /* ===========================================================================
             * Send a value on a given number of bits.
             * IN assertion: length <= 16 and value fits in length bits.
             */


            function send_bits(s, value, length) {
              if (s.bi_valid > Buf_size - length) {
                s.bi_buf |= value << s.bi_valid & 0xffff;
                put_short(s, s.bi_buf);
                s.bi_buf = value >> Buf_size - s.bi_valid;
                s.bi_valid += length - Buf_size;
              } else {
                s.bi_buf |= value << s.bi_valid & 0xffff;
                s.bi_valid += length;
              }
            }

            function send_code(s, c, tree) {
              send_bits(s, tree[c * 2]
              /*.Code*/
              , tree[c * 2 + 1]
              /*.Len*/
              );
            }
            /* ===========================================================================
             * Reverse the first len bits of a code, using straightforward code (a faster
             * method would use a table)
             * IN assertion: 1 <= len <= 15
             */


            function bi_reverse(code, len) {
              var res = 0;

              do {
                res |= code & 1;
                code >>>= 1;
                res <<= 1;
              } while (--len > 0);

              return res >>> 1;
            }
            /* ===========================================================================
             * Flush the bit buffer, keeping at most 7 bits in it.
             */


            function bi_flush(s) {
              if (s.bi_valid === 16) {
                put_short(s, s.bi_buf);
                s.bi_buf = 0;
                s.bi_valid = 0;
              } else if (s.bi_valid >= 8) {
                s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                s.bi_buf >>= 8;
                s.bi_valid -= 8;
              }
            }
            /* ===========================================================================
             * Compute the optimal bit lengths for a tree and update the total bit length
             * for the current block.
             * IN assertion: the fields freq and dad are set, heap[heap_max] and
             *    above are the tree nodes sorted by increasing frequency.
             * OUT assertions: the field len is set to the optimal bit length, the
             *     array bl_count contains the frequencies for each bit length.
             *     The length opt_len is updated; static_len is also updated if stree is
             *     not null.
             */


            function gen_bitlen(s, desc) {
              //    deflate_state *s;
              //    tree_desc *desc;    /* the tree descriptor */
              var tree = desc.dyn_tree;
              var max_code = desc.max_code;
              var stree = desc.stat_desc.static_tree;
              var has_stree = desc.stat_desc.has_stree;
              var extra = desc.stat_desc.extra_bits;
              var base = desc.stat_desc.extra_base;
              var max_length = desc.stat_desc.max_length;
              var h;
              /* heap index */

              var n, m;
              /* iterate over the tree elements */

              var bits;
              /* bit length */

              var xbits;
              /* extra bits */

              var f;
              /* frequency */

              var overflow = 0;
              /* number of elements with bit length too large */

              for (bits = 0; bits <= MAX_BITS; bits++) {
                s.bl_count[bits] = 0;
              }
              /* In a first pass, compute the optimal bit lengths (which may
               * overflow in the case of the bit length tree).
               */


              tree[s.heap[s.heap_max] * 2 + 1]
              /*.Len*/
              = 0;
              /* root of the heap */

              for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                n = s.heap[h];
                bits = tree[tree[n * 2 + 1]
                /*.Dad*/
                * 2 + 1]
                /*.Len*/
                + 1;

                if (bits > max_length) {
                  bits = max_length;
                  overflow++;
                }

                tree[n * 2 + 1]
                /*.Len*/
                = bits;
                /* We overwrite tree[n].Dad which is no longer needed */

                if (n > max_code) {
                  continue;
                }
                /* not a leaf node */


                s.bl_count[bits]++;
                xbits = 0;

                if (n >= base) {
                  xbits = extra[n - base];
                }

                f = tree[n * 2]
                /*.Freq*/
                ;
                s.opt_len += f * (bits + xbits);

                if (has_stree) {
                  s.static_len += f * (stree[n * 2 + 1]
                  /*.Len*/
                  + xbits);
                }
              }

              if (overflow === 0) {
                return;
              } // Trace((stderr,"\nbit length overflow\n"));

              /* This happens for example on obj2 and pic of the Calgary corpus */

              /* Find the first bit length which could increase: */


              do {
                bits = max_length - 1;

                while (s.bl_count[bits] === 0) {
                  bits--;
                }

                s.bl_count[bits]--;
                /* move one leaf down the tree */

                s.bl_count[bits + 1] += 2;
                /* move one overflow item as its brother */

                s.bl_count[max_length]--;
                /* The brother of the overflow item also moves one step up,
                 * but this does not affect bl_count[max_length]
                 */

                overflow -= 2;
              } while (overflow > 0);
              /* Now recompute all bit lengths, scanning in increasing frequency.
               * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
               * lengths instead of fixing only the wrong ones. This idea is taken
               * from 'ar' written by Haruhiko Okumura.)
               */


              for (bits = max_length; bits !== 0; bits--) {
                n = s.bl_count[bits];

                while (n !== 0) {
                  m = s.heap[--h];

                  if (m > max_code) {
                    continue;
                  }

                  if (tree[m * 2 + 1]
                  /*.Len*/
                  !== bits) {
                    // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                    s.opt_len += (bits - tree[m * 2 + 1]
                    /*.Len*/
                    ) * tree[m * 2]
                    /*.Freq*/
                    ;
                    tree[m * 2 + 1]
                    /*.Len*/
                    = bits;
                  }

                  n--;
                }
              }
            }
            /* ===========================================================================
             * Generate the codes for a given tree and bit counts (which need not be
             * optimal).
             * IN assertion: the array bl_count contains the bit length statistics for
             * the given tree and the field len is set for all tree elements.
             * OUT assertion: the field code is set for all tree elements of non
             *     zero code length.
             */


            function gen_codes(tree, max_code, bl_count) {
              //    ct_data *tree;             /* the tree to decorate */
              //    int max_code;              /* largest code with non zero frequency */
              //    ushf *bl_count;            /* number of codes at each bit length */
              var next_code = new Array(MAX_BITS + 1);
              /* next code value for each bit length */

              var code = 0;
              /* running code value */

              var bits;
              /* bit index */

              var n;
              /* code index */

              /* The distribution counts are first used to generate the code values
               * without bit reversal.
               */

              for (bits = 1; bits <= MAX_BITS; bits++) {
                next_code[bits] = code = code + bl_count[bits - 1] << 1;
              }
              /* Check that the bit counts in bl_count are consistent. The last code
               * must be all ones.
               */
              //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
              //        "inconsistent bit counts");
              //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


              for (n = 0; n <= max_code; n++) {
                var len = tree[n * 2 + 1]
                /*.Len*/
                ;

                if (len === 0) {
                  continue;
                }
                /* Now reverse the bits */


                tree[n * 2]
                /*.Code*/
                = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
              }
            }
            /* ===========================================================================
             * Initialize the various 'constant' tables.
             */


            function tr_static_init() {
              var n;
              /* iterates over tree elements */

              var bits;
              /* bit counter */

              var length;
              /* length value */

              var code;
              /* code value */

              var dist;
              /* distance index */

              var bl_count = new Array(MAX_BITS + 1);
              /* number of codes at each bit length for an optimal tree */
              // do check in _tr_init()
              //if (static_init_done) return;

              /* For some embedded targets, global variables are not initialized: */

              /*#ifdef NO_INIT_GLOBAL_POINTERS
                static_l_desc.static_tree = static_ltree;
                static_l_desc.extra_bits = extra_lbits;
                static_d_desc.static_tree = static_dtree;
                static_d_desc.extra_bits = extra_dbits;
                static_bl_desc.extra_bits = extra_blbits;
              #endif*/

              /* Initialize the mapping length (0..255) -> length code (0..28) */

              length = 0;

              for (code = 0; code < LENGTH_CODES - 1; code++) {
                base_length[code] = length;

                for (n = 0; n < 1 << extra_lbits[code]; n++) {
                  _length_code[length++] = code;
                }
              } //Assert (length == 256, "tr_static_init: length != 256");

              /* Note that the length 255 (match length 258) can be represented
               * in two different ways: code 284 + 5 bits or code 285, so we
               * overwrite length_code[255] to use the best encoding:
               */


              _length_code[length - 1] = code;
              /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

              dist = 0;

              for (code = 0; code < 16; code++) {
                base_dist[code] = dist;

                for (n = 0; n < 1 << extra_dbits[code]; n++) {
                  _dist_code[dist++] = code;
                }
              } //Assert (dist == 256, "tr_static_init: dist != 256");


              dist >>= 7;
              /* from now on, all distances are divided by 128 */

              for (; code < D_CODES; code++) {
                base_dist[code] = dist << 7;

                for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
                  _dist_code[256 + dist++] = code;
                }
              } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

              /* Construct the codes of the static literal tree */


              for (bits = 0; bits <= MAX_BITS; bits++) {
                bl_count[bits] = 0;
              }

              n = 0;

              while (n <= 143) {
                static_ltree[n * 2 + 1]
                /*.Len*/
                = 8;
                n++;
                bl_count[8]++;
              }

              while (n <= 255) {
                static_ltree[n * 2 + 1]
                /*.Len*/
                = 9;
                n++;
                bl_count[9]++;
              }

              while (n <= 279) {
                static_ltree[n * 2 + 1]
                /*.Len*/
                = 7;
                n++;
                bl_count[7]++;
              }

              while (n <= 287) {
                static_ltree[n * 2 + 1]
                /*.Len*/
                = 8;
                n++;
                bl_count[8]++;
              }
              /* Codes 286 and 287 do not exist, but we must include them in the
               * tree construction to get a canonical Huffman tree (longest code
               * all ones)
               */


              gen_codes(static_ltree, L_CODES + 1, bl_count);
              /* The static distance tree is trivial: */

              for (n = 0; n < D_CODES; n++) {
                static_dtree[n * 2 + 1]
                /*.Len*/
                = 5;
                static_dtree[n * 2]
                /*.Code*/
                = bi_reverse(n, 5);
              } // Now data ready and we can init static trees


              static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
              static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
              static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
            }
            /* ===========================================================================
             * Initialize a new block.
             */


            function init_block(s) {
              var n;
              /* iterates over tree elements */

              /* Initialize the trees. */

              for (n = 0; n < L_CODES; n++) {
                s.dyn_ltree[n * 2]
                /*.Freq*/
                = 0;
              }

              for (n = 0; n < D_CODES; n++) {
                s.dyn_dtree[n * 2]
                /*.Freq*/
                = 0;
              }

              for (n = 0; n < BL_CODES; n++) {
                s.bl_tree[n * 2]
                /*.Freq*/
                = 0;
              }

              s.dyn_ltree[END_BLOCK * 2]
              /*.Freq*/
              = 1;
              s.opt_len = s.static_len = 0;
              s.last_lit = s.matches = 0;
            }
            /* ===========================================================================
             * Flush the bit buffer and align the output on a byte boundary
             */


            function bi_windup(s) {
              if (s.bi_valid > 8) {
                put_short(s, s.bi_buf);
              } else if (s.bi_valid > 0) {
                //put_byte(s, (Byte)s->bi_buf);
                s.pending_buf[s.pending++] = s.bi_buf;
              }

              s.bi_buf = 0;
              s.bi_valid = 0;
            }
            /* ===========================================================================
             * Copy a stored block, storing first the length and its
             * one's complement if requested.
             */


            function copy_block(s, buf, len, header) {
              //DeflateState *s;
              //charf    *buf;    /* the input data */
              //unsigned len;     /* its length */
              //int      header;  /* true if block header must be written */
              bi_windup(s);
              /* align on byte boundary */

              if (header) {
                put_short(s, len);
                put_short(s, ~len);
              } //  while (len--) {
              //    put_byte(s, *buf++);
              //  }


              arraySet(s.pending_buf, s.window, buf, len, s.pending);
              s.pending += len;
            }
            /* ===========================================================================
             * Compares to subtrees, using the tree depth as tie breaker when
             * the subtrees have equal frequency. This minimizes the worst case length.
             */


            function smaller(tree, n, m, depth) {
              var _n2 = n * 2;

              var _m2 = m * 2;

              return tree[_n2]
              /*.Freq*/
              < tree[_m2]
              /*.Freq*/
              || tree[_n2]
              /*.Freq*/
              === tree[_m2]
              /*.Freq*/
              && depth[n] <= depth[m];
            }
            /* ===========================================================================
             * Restore the heap property by moving down the tree starting at node k,
             * exchanging a node with the smallest of its two sons if necessary, stopping
             * when the heap property is re-established (each father smaller than its
             * two sons).
             */


            function pqdownheap(s, tree, k) //    deflate_state *s;
            //    ct_data *tree;  /* the tree to restore */
            //    int k;               /* node to move down */
            {
              var v = s.heap[k];
              var j = k << 1;
              /* left son of k */

              while (j <= s.heap_len) {
                /* Set j to the smallest of the two sons: */
                if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                  j++;
                }
                /* Exit if v is smaller than both sons */


                if (smaller(tree, v, s.heap[j], s.depth)) {
                  break;
                }
                /* Exchange v with the smallest son */


                s.heap[k] = s.heap[j];
                k = j;
                /* And continue down the tree, setting j to the left son of k */

                j <<= 1;
              }

              s.heap[k] = v;
            } // inlined manually
            // var SMALLEST = 1;

            /* ===========================================================================
             * Send the block data compressed using the given Huffman trees
             */


            function compress_block(s, ltree, dtree) //    deflate_state *s;
            //    const ct_data *ltree; /* literal tree */
            //    const ct_data *dtree; /* distance tree */
            {
              var dist;
              /* distance of matched string */

              var lc;
              /* match length or unmatched char (if dist == 0) */

              var lx = 0;
              /* running index in l_buf */

              var code;
              /* the code to send */

              var extra;
              /* number of extra bits to send */

              if (s.last_lit !== 0) {
                do {
                  dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
                  lc = s.pending_buf[s.l_buf + lx];
                  lx++;

                  if (dist === 0) {
                    send_code(s, lc, ltree);
                    /* send a literal byte */
                    //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                  } else {
                    /* Here, lc is the match length - MIN_MATCH */
                    code = _length_code[lc];
                    send_code(s, code + LITERALS + 1, ltree);
                    /* send the length code */

                    extra = extra_lbits[code];

                    if (extra !== 0) {
                      lc -= base_length[code];
                      send_bits(s, lc, extra);
                      /* send the extra length bits */
                    }

                    dist--;
                    /* dist is now the match distance - 1 */

                    code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

                    send_code(s, code, dtree);
                    /* send the distance code */

                    extra = extra_dbits[code];

                    if (extra !== 0) {
                      dist -= base_dist[code];
                      send_bits(s, dist, extra);
                      /* send the extra distance bits */
                    }
                  }
                  /* literal or match pair ? */

                  /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                  //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                  //       "pendingBuf overflow");

                } while (lx < s.last_lit);
              }

              send_code(s, END_BLOCK, ltree);
            }
            /* ===========================================================================
             * Construct one Huffman tree and assigns the code bit strings and lengths.
             * Update the total bit length for the current block.
             * IN assertion: the field freq is set for all tree elements.
             * OUT assertions: the fields len and code are set to the optimal bit length
             *     and corresponding code. The length opt_len is updated; static_len is
             *     also updated if stree is not null. The field max_code is set.
             */


            function build_tree(s, desc) //    deflate_state *s;
            //    tree_desc *desc; /* the tree descriptor */
            {
              var tree = desc.dyn_tree;
              var stree = desc.stat_desc.static_tree;
              var has_stree = desc.stat_desc.has_stree;
              var elems = desc.stat_desc.elems;
              var n, m;
              /* iterate over heap elements */

              var max_code = -1;
              /* largest code with non zero frequency */

              var node;
              /* new node being created */

              /* Construct the initial heap, with least frequent element in
               * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
               * heap[0] is not used.
               */

              s.heap_len = 0;
              s.heap_max = HEAP_SIZE;

              for (n = 0; n < elems; n++) {
                if (tree[n * 2]
                /*.Freq*/
                !== 0) {
                  s.heap[++s.heap_len] = max_code = n;
                  s.depth[n] = 0;
                } else {
                  tree[n * 2 + 1]
                  /*.Len*/
                  = 0;
                }
              }
              /* The pkzip format requires that at least one distance code exists,
               * and that at least one bit should be sent even if there is only one
               * possible code. So to avoid special checks later on we force at least
               * two codes of non zero frequency.
               */


              while (s.heap_len < 2) {
                node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
                tree[node * 2]
                /*.Freq*/
                = 1;
                s.depth[node] = 0;
                s.opt_len--;

                if (has_stree) {
                  s.static_len -= stree[node * 2 + 1]
                  /*.Len*/
                  ;
                }
                /* node is 0 or 1 so it does not have extra bits */

              }

              desc.max_code = max_code;
              /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
               * establish sub-heaps of increasing lengths:
               */

              for (n = s.heap_len >> 1
              /*int /2*/
              ; n >= 1; n--) {
                pqdownheap(s, tree, n);
              }
              /* Construct the Huffman tree by repeatedly combining the least two
               * frequent nodes.
               */


              node = elems;
              /* next internal node of the tree */

              do {
                //pqremove(s, tree, n);  /* n = node of least frequency */

                /*** pqremove ***/
                n = s.heap[1
                /*SMALLEST*/
                ];
                s.heap[1
                /*SMALLEST*/
                ] = s.heap[s.heap_len--];
                pqdownheap(s, tree, 1
                /*SMALLEST*/
                );
                /***/

                m = s.heap[1
                /*SMALLEST*/
                ];
                /* m = node of next least frequency */

                s.heap[--s.heap_max] = n;
                /* keep the nodes sorted by frequency */

                s.heap[--s.heap_max] = m;
                /* Create a new node father of n and m */

                tree[node * 2]
                /*.Freq*/
                = tree[n * 2]
                /*.Freq*/
                + tree[m * 2]
                /*.Freq*/
                ;
                s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                tree[n * 2 + 1]
                /*.Dad*/
                = tree[m * 2 + 1]
                /*.Dad*/
                = node;
                /* and insert the new node in the heap */

                s.heap[1
                /*SMALLEST*/
                ] = node++;
                pqdownheap(s, tree, 1
                /*SMALLEST*/
                );
              } while (s.heap_len >= 2);

              s.heap[--s.heap_max] = s.heap[1
              /*SMALLEST*/
              ];
              /* At this point, the fields freq and dad are set. We can now
               * generate the bit lengths.
               */

              gen_bitlen(s, desc);
              /* The field len is now set, we can generate the bit codes */

              gen_codes(tree, max_code, s.bl_count);
            }
            /* ===========================================================================
             * Scan a literal or distance tree to determine the frequencies of the codes
             * in the bit length tree.
             */


            function scan_tree(s, tree, max_code) //    deflate_state *s;
            //    ct_data *tree;   /* the tree to be scanned */
            //    int max_code;    /* and its largest code of non zero frequency */
            {
              var n;
              /* iterates over all tree elements */

              var prevlen = -1;
              /* last emitted length */

              var curlen;
              /* length of current code */

              var nextlen = tree[0 * 2 + 1]
              /*.Len*/
              ;
              /* length of next code */

              var count = 0;
              /* repeat count of the current code */

              var max_count = 7;
              /* max repeat count */

              var min_count = 4;
              /* min repeat count */

              if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
              }

              tree[(max_code + 1) * 2 + 1]
              /*.Len*/
              = 0xffff;
              /* guard */

              for (n = 0; n <= max_code; n++) {
                curlen = nextlen;
                nextlen = tree[(n + 1) * 2 + 1]
                /*.Len*/
                ;

                if (++count < max_count && curlen === nextlen) {
                  continue;
                } else if (count < min_count) {
                  s.bl_tree[curlen * 2]
                  /*.Freq*/
                  += count;
                } else if (curlen !== 0) {
                  if (curlen !== prevlen) {
                    s.bl_tree[curlen * 2] /*.Freq*/++;
                  }

                  s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
                } else if (count <= 10) {
                  s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
                } else {
                  s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
                }

                count = 0;
                prevlen = curlen;

                if (nextlen === 0) {
                  max_count = 138;
                  min_count = 3;
                } else if (curlen === nextlen) {
                  max_count = 6;
                  min_count = 3;
                } else {
                  max_count = 7;
                  min_count = 4;
                }
              }
            }
            /* ===========================================================================
             * Send a literal or distance tree in compressed form, using the codes in
             * bl_tree.
             */


            function send_tree(s, tree, max_code) //    deflate_state *s;
            //    ct_data *tree; /* the tree to be scanned */
            //    int max_code;       /* and its largest code of non zero frequency */
            {
              var n;
              /* iterates over all tree elements */

              var prevlen = -1;
              /* last emitted length */

              var curlen;
              /* length of current code */

              var nextlen = tree[0 * 2 + 1]
              /*.Len*/
              ;
              /* length of next code */

              var count = 0;
              /* repeat count of the current code */

              var max_count = 7;
              /* max repeat count */

              var min_count = 4;
              /* min repeat count */

              /* tree[max_code+1].Len = -1; */

              /* guard already set */

              if (nextlen === 0) {
                max_count = 138;
                min_count = 3;
              }

              for (n = 0; n <= max_code; n++) {
                curlen = nextlen;
                nextlen = tree[(n + 1) * 2 + 1]
                /*.Len*/
                ;

                if (++count < max_count && curlen === nextlen) {
                  continue;
                } else if (count < min_count) {
                  do {
                    send_code(s, curlen, s.bl_tree);
                  } while (--count !== 0);
                } else if (curlen !== 0) {
                  if (curlen !== prevlen) {
                    send_code(s, curlen, s.bl_tree);
                    count--;
                  } //Assert(count >= 3 && count <= 6, " 3_6?");


                  send_code(s, REP_3_6, s.bl_tree);
                  send_bits(s, count - 3, 2);
                } else if (count <= 10) {
                  send_code(s, REPZ_3_10, s.bl_tree);
                  send_bits(s, count - 3, 3);
                } else {
                  send_code(s, REPZ_11_138, s.bl_tree);
                  send_bits(s, count - 11, 7);
                }

                count = 0;
                prevlen = curlen;

                if (nextlen === 0) {
                  max_count = 138;
                  min_count = 3;
                } else if (curlen === nextlen) {
                  max_count = 6;
                  min_count = 3;
                } else {
                  max_count = 7;
                  min_count = 4;
                }
              }
            }
            /* ===========================================================================
             * Construct the Huffman tree for the bit lengths and return the index in
             * bl_order of the last bit length code to send.
             */


            function build_bl_tree(s) {
              var max_blindex;
              /* index of last bit length code of non zero freq */

              /* Determine the bit length frequencies for literal and distance trees */

              scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
              scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
              /* Build the bit length tree: */

              build_tree(s, s.bl_desc);
              /* opt_len now includes the length of the tree representations, except
               * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
               */

              /* Determine the number of bit length codes to send. The pkzip format
               * requires that at least 4 bit length codes be sent. (appnote.txt says
               * 3 but the actual value used is 4.)
               */

              for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
                /*.Len*/
                !== 0) {
                  break;
                }
              }
              /* Update opt_len to include the bit length tree and counts */


              s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
              //        s->opt_len, s->static_len));

              return max_blindex;
            }
            /* ===========================================================================
             * Send the header for a block using dynamic Huffman trees: the counts, the
             * lengths of the bit length codes, the literal tree and the distance tree.
             * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
             */


            function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
            //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
            {
              var rank;
              /* index in bl_order */
              //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
              //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
              //        "too many codes");
              //Tracev((stderr, "\nbl counts: "));

              send_bits(s, lcodes - 257, 5);
              /* not +255 as stated in appnote.txt */

              send_bits(s, dcodes - 1, 5);
              send_bits(s, blcodes - 4, 4);
              /* not -3 as stated in appnote.txt */

              for (rank = 0; rank < blcodes; rank++) {
                //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
                /*.Len*/
                , 3);
              } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


              send_tree(s, s.dyn_ltree, lcodes - 1);
              /* literal tree */
              //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

              send_tree(s, s.dyn_dtree, dcodes - 1);
              /* distance tree */
              //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
            }
            /* ===========================================================================
             * Check if the data type is TEXT or BINARY, using the following algorithm:
             * - TEXT if the two conditions below are satisfied:
             *    a) There are no non-portable control characters belonging to the
             *       "black list" (0..6, 14..25, 28..31).
             *    b) There is at least one printable character belonging to the
             *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
             * - BINARY otherwise.
             * - The following partially-portable control characters form a
             *   "gray list" that is ignored in this detection algorithm:
             *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
             * IN assertion: the fields Freq of dyn_ltree are set.
             */


            function detect_data_type(s) {
              /* black_mask is the bit mask of black-listed bytes
               * set bits 0..6, 14..25, and 28..31
               * 0xf3ffc07f = binary 11110011111111111100000001111111
               */
              var black_mask = 0xf3ffc07f;
              var n;
              /* Check for non-textual ("black-listed") bytes. */

              for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                if (black_mask & 1 && s.dyn_ltree[n * 2]
                /*.Freq*/
                !== 0) {
                  return Z_BINARY;
                }
              }
              /* Check for textual ("white-listed") bytes. */


              if (s.dyn_ltree[9 * 2]
              /*.Freq*/
              !== 0 || s.dyn_ltree[10 * 2]
              /*.Freq*/
              !== 0 || s.dyn_ltree[13 * 2]
              /*.Freq*/
              !== 0) {
                return Z_TEXT;
              }

              for (n = 32; n < LITERALS; n++) {
                if (s.dyn_ltree[n * 2]
                /*.Freq*/
                !== 0) {
                  return Z_TEXT;
                }
              }
              /* There are no "black-listed" or "white-listed" bytes:
               * this stream either is empty or has tolerated ("gray-listed") bytes only.
               */


              return Z_BINARY;
            }

            var static_init_done = false;
            /* ===========================================================================
             * Initialize the tree data structures for a new zlib stream.
             */

            function _tr_init(s) {
              if (!static_init_done) {
                tr_static_init();
                static_init_done = true;
              }

              s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
              s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
              s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
              s.bi_buf = 0;
              s.bi_valid = 0;
              /* Initialize the first block of the first file: */

              init_block(s);
            }
            /* ===========================================================================
             * Send a stored block
             */

            function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
            //charf *buf;       /* input block */
            //ulg stored_len;   /* length of input block */
            //int last;         /* one if this is the last block for a file */
            {
              send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
              /* send block type */

              copy_block(s, buf, stored_len, true);
              /* with header */
            }
            /* ===========================================================================
             * Send one empty static block to give enough lookahead for inflate.
             * This takes 10 bits, of which 7 may remain in the bit buffer.
             */

            function _tr_align(s) {
              send_bits(s, STATIC_TREES << 1, 3);
              send_code(s, END_BLOCK, static_ltree);
              bi_flush(s);
            }
            /* ===========================================================================
             * Determine the best encoding for the current block: dynamic trees, static
             * trees or store, and output the encoded block to the zip file.
             */

            function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
            //charf *buf;       /* input block, or NULL if too old */
            //ulg stored_len;   /* length of input block */
            //int last;         /* one if this is the last block for a file */
            {
              var opt_lenb, static_lenb;
              /* opt_len and static_len in bytes */

              var max_blindex = 0;
              /* index of last bit length code of non zero freq */

              /* Build the Huffman trees unless a stored block is forced */

              if (s.level > 0) {
                /* Check if the file is binary or text */
                if (s.strm.data_type === Z_UNKNOWN) {
                  s.strm.data_type = detect_data_type(s);
                }
                /* Construct the literal and distance trees */


                build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                //        s->static_len));

                build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                //        s->static_len));

                /* At this point, opt_len and static_len are the total bit lengths of
                 * the compressed block data, excluding the tree representations.
                 */

                /* Build the bit length tree for the above two trees, and get the index
                 * in bl_order of the last bit length code to send.
                 */

                max_blindex = build_bl_tree(s);
                /* Determine the best encoding. Compute the block lengths in bytes. */

                opt_lenb = s.opt_len + 3 + 7 >>> 3;
                static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                //        s->last_lit));

                if (static_lenb <= opt_lenb) {
                  opt_lenb = static_lenb;
                }
              } else {
                // Assert(buf != (char*)0, "lost buf");
                opt_lenb = static_lenb = stored_len + 5;
                /* force a stored block */
              }

              if (stored_len + 4 <= opt_lenb && buf !== -1) {
                /* 4: two words for the lengths */

                /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                 * Otherwise we can't have processed more than WSIZE input bytes since
                 * the last block flush, because compression would have been
                 * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                 * transform a block into a stored block.
                 */
                _tr_stored_block(s, buf, stored_len, last);
              } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
                send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                compress_block(s, static_ltree, static_dtree);
              } else {
                send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                compress_block(s, s.dyn_ltree, s.dyn_dtree);
              } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

              /* The above check is made mod 2^32, for files larger than 512 MB
               * and uLong implemented on 32 bits.
               */


              init_block(s);

              if (last) {
                bi_windup(s);
              } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
              //       s->compressed_len-7*last));

            }
            /* ===========================================================================
             * Save the match info and tally the frequency counts. Return true if
             * the current block must be flushed.
             */

            function _tr_tally(s, dist, lc) //    deflate_state *s;
            //    unsigned dist;  /* distance of matched string */
            //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
            {
              //var out_length, in_length, dcode;
              s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
              s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
              s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
              s.last_lit++;

              if (dist === 0) {
                /* lc is the unmatched char */
                s.dyn_ltree[lc * 2] /*.Freq*/++;
              } else {
                s.matches++;
                /* Here, lc is the match length - MIN_MATCH */

                dist--;
                /* dist = match distance - 1 */
                //Assert((ush)dist < (ush)MAX_DIST(s) &&
                //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
                s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
              } // (!) This block is disabled in zlib defailts,
              // don't enable it for binary compatibility
              //#ifdef TRUNCATE_BLOCK
              //  /* Try to guess if it is profitable to stop the current block here */
              //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
              //    /* Compute an upper bound for the compressed length */
              //    out_length = s.last_lit*8;
              //    in_length = s.strstart - s.block_start;
              //
              //    for (dcode = 0; dcode < D_CODES; dcode++) {
              //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
              //    }
              //    out_length >>>= 3;
              //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
              //    //       s->last_lit, in_length, out_length,
              //    //       100L - out_length*100L/in_length));
              //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
              //      return true;
              //    }
              //  }
              //#endif


              return s.last_lit === s.lit_bufsize - 1;
              /* We avoid equality with lit_bufsize because of wraparound at 64K
               * on 16 bit machines and because stored blocks are restricted to
               * 64K-1 bytes.
               */
            }

            // Note: adler32 takes 12% for level 0 and 2% for level 6.
            // It doesn't worth to make additional optimizationa as in original.
            // Small size is preferable.
            function adler32(adler, buf, len, pos) {
              var s1 = adler & 0xffff | 0,
                  s2 = adler >>> 16 & 0xffff | 0,
                  n = 0;

              while (len !== 0) {
                // Set limit ~ twice less than 5552, to keep
                // s2 in 31-bits, because we force signed ints.
                // in other case %= will fail.
                n = len > 2000 ? 2000 : len;
                len -= n;

                do {
                  s1 = s1 + buf[pos++] | 0;
                  s2 = s2 + s1 | 0;
                } while (--n);

                s1 %= 65521;
                s2 %= 65521;
              }

              return s1 | s2 << 16 | 0;
            }

            // Note: we can't get significant speed boost here.
            // So write code to minimize size - no pregenerated tables
            // and array tools dependencies.
            // Use ordinary array, since untyped makes no boost here
            function makeTable() {
              var c,
                  table = [];

              for (var n = 0; n < 256; n++) {
                c = n;

                for (var k = 0; k < 8; k++) {
                  c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
                }

                table[n] = c;
              }

              return table;
            } // Create table on load. Just 255 signed longs. Not a problem.


            var crcTable = makeTable();

            function crc32(crc, buf, len, pos) {
              var t = crcTable,
                  end = pos + len;
              crc ^= -1;

              for (var i = pos; i < end; i++) {
                crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
              }

              return crc ^ -1; // >>> 0;
            }

            /* Public constants ==========================================================*/

            /* ===========================================================================*/

            /* Allowed flush values; see deflate() and inflate() below for details */

            var Z_NO_FLUSH = 0;
            var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

            var Z_FULL_FLUSH = 3;
            var Z_FINISH = 4;
            var Z_BLOCK = 5; //var Z_TREES         = 6;

            /* Return codes for the compression/decompression functions. Negative values
             * are errors, positive values are used for special but normal events.
             */

            var Z_OK = 0;
            var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
            //var Z_ERRNO         = -1;

            var Z_STREAM_ERROR = -2;
            var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

            var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

            /* compression levels */
            //var Z_NO_COMPRESSION      = 0;
            //var Z_BEST_SPEED          = 1;
            //var Z_BEST_COMPRESSION    = 9;

            var Z_DEFAULT_COMPRESSION = -1;
            var Z_FILTERED = 1;
            var Z_HUFFMAN_ONLY = 2;
            var Z_RLE = 3;
            var Z_FIXED$1 = 4;
            /* Possible values of the data_type field (though see inflate()) */
            //var Z_BINARY              = 0;
            //var Z_TEXT                = 1;
            //var Z_ASCII               = 1; // = Z_TEXT

            var Z_UNKNOWN$1 = 2;
            /* The deflate compression method */

            var Z_DEFLATED = 8;
            /*============================================================================*/

            var MAX_MEM_LEVEL = 9;
            var LENGTH_CODES$1 = 29;
            /* number of length codes, not counting the special END_BLOCK code */

            var LITERALS$1 = 256;
            /* number of literal bytes 0..255 */

            var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
            /* number of Literal or Length codes, including the END_BLOCK code */

            var D_CODES$1 = 30;
            /* number of distance codes */

            var BL_CODES$1 = 19;
            /* number of codes used to transfer the bit lengths */

            var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
            /* maximum heap size */

            var MAX_BITS$1 = 15;
            /* All codes must not exceed MAX_BITS bits */

            var MIN_MATCH$1 = 3;
            var MAX_MATCH$1 = 258;
            var MIN_LOOKAHEAD = MAX_MATCH$1 + MIN_MATCH$1 + 1;
            var PRESET_DICT = 0x20;
            var INIT_STATE = 42;
            var EXTRA_STATE = 69;
            var NAME_STATE = 73;
            var COMMENT_STATE = 91;
            var HCRC_STATE = 103;
            var BUSY_STATE = 113;
            var FINISH_STATE = 666;
            var BS_NEED_MORE = 1;
            /* block not completed, need more input or more output */

            var BS_BLOCK_DONE = 2;
            /* block flush performed */

            var BS_FINISH_STARTED = 3;
            /* finish started, need only more output at next deflate */

            var BS_FINISH_DONE = 4;
            /* finish done, accept no more input or output */

            var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

            function err(strm, errorCode) {
              strm.msg = msg[errorCode];
              return errorCode;
            }

            function rank(f) {
              return (f << 1) - (f > 4 ? 9 : 0);
            }

            function zero$1(buf) {
              var len = buf.length;

              while (--len >= 0) {
                buf[len] = 0;
              }
            }
            /* =========================================================================
             * Flush as much pending output as possible. All deflate() output goes
             * through this function so some applications may wish to modify it
             * to avoid allocating a large strm->output buffer and copying into it.
             * (See also read_buf()).
             */


            function flush_pending(strm) {
              var s = strm.state; //_tr_flush_bits(s);

              var len = s.pending;

              if (len > strm.avail_out) {
                len = strm.avail_out;
              }

              if (len === 0) {
                return;
              }

              arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
              strm.next_out += len;
              s.pending_out += len;
              strm.total_out += len;
              strm.avail_out -= len;
              s.pending -= len;

              if (s.pending === 0) {
                s.pending_out = 0;
              }
            }

            function flush_block_only(s, last) {
              _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

              s.block_start = s.strstart;
              flush_pending(s.strm);
            }

            function put_byte(s, b) {
              s.pending_buf[s.pending++] = b;
            }
            /* =========================================================================
             * Put a short in the pending buffer. The 16-bit value is put in MSB order.
             * IN assertion: the stream state is correct and there is enough room in
             * pending_buf.
             */


            function putShortMSB(s, b) {
              //  put_byte(s, (Byte)(b >> 8));
              //  put_byte(s, (Byte)(b & 0xff));
              s.pending_buf[s.pending++] = b >>> 8 & 0xff;
              s.pending_buf[s.pending++] = b & 0xff;
            }
            /* ===========================================================================
             * Read a new buffer from the current input stream, update the adler32
             * and total number of bytes read.  All deflate() input goes through
             * this function so some applications may wish to modify it to avoid
             * allocating a large strm->input buffer and copying from it.
             * (See also flush_pending()).
             */


            function read_buf(strm, buf, start, size) {
              var len = strm.avail_in;

              if (len > size) {
                len = size;
              }

              if (len === 0) {
                return 0;
              }

              strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);

              arraySet(buf, strm.input, strm.next_in, len, start);

              if (strm.state.wrap === 1) {
                strm.adler = adler32(strm.adler, buf, len, start);
              } else if (strm.state.wrap === 2) {
                strm.adler = crc32(strm.adler, buf, len, start);
              }

              strm.next_in += len;
              strm.total_in += len;
              return len;
            }
            /* ===========================================================================
             * Set match_start to the longest match starting at the given string and
             * return its length. Matches shorter or equal to prev_length are discarded,
             * in which case the result is equal to prev_length and match_start is
             * garbage.
             * IN assertions: cur_match is the head of the hash chain for the current
             *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
             * OUT assertion: the match length is not greater than s->lookahead.
             */


            function longest_match(s, cur_match) {
              var chain_length = s.max_chain_length;
              /* max hash chain length */

              var scan = s.strstart;
              /* current string */

              var match;
              /* matched string */

              var len;
              /* length of current match */

              var best_len = s.prev_length;
              /* best match length so far */

              var nice_match = s.nice_match;
              /* stop if match long enough */

              var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
              /*NIL*/
              ;
              var _win = s.window; // shortcut

              var wmask = s.w_mask;
              var prev = s.prev;
              /* Stop when cur_match becomes <= limit. To simplify the code,
               * we prevent matches with the string of window index 0.
               */

              var strend = s.strstart + MAX_MATCH$1;
              var scan_end1 = _win[scan + best_len - 1];
              var scan_end = _win[scan + best_len];
              /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
               * It is easy to get rid of this optimization if necessary.
               */
              // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

              /* Do not waste too much time if we already have a good match: */

              if (s.prev_length >= s.good_match) {
                chain_length >>= 2;
              }
              /* Do not look for matches beyond the end of the input. This is necessary
               * to make deflate deterministic.
               */


              if (nice_match > s.lookahead) {
                nice_match = s.lookahead;
              } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


              do {
                // Assert(cur_match < s->strstart, "no future");
                match = cur_match;
                /* Skip to next match if the match length cannot increase
                 * or if the match length is less than 2.  Note that the checks below
                 * for insufficient lookahead only occur occasionally for performance
                 * reasons.  Therefore uninitialized memory will be accessed, and
                 * conditional jumps will be made that depend on those values.
                 * However the length of the match is limited to the lookahead, so
                 * the output of deflate is not affected by the uninitialized values.
                 */

                if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
                  continue;
                }
                /* The check at best_len-1 can be removed because it will be made
                 * again later. (This heuristic is not always a win.)
                 * It is not necessary to compare scan[2] and match[2] since they
                 * are always equal when the other bytes match, given that
                 * the hash keys are equal and that HASH_BITS >= 8.
                 */


                scan += 2;
                match++; // Assert(*scan == *match, "match[2]?");

                /* We check for insufficient lookahead only every 8th comparison;
                 * the 256th check will be made at strstart+258.
                 */

                do {
                  /*jshint noempty:false*/
                } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


                len = MAX_MATCH$1 - (strend - scan);
                scan = strend - MAX_MATCH$1;

                if (len > best_len) {
                  s.match_start = cur_match;
                  best_len = len;

                  if (len >= nice_match) {
                    break;
                  }

                  scan_end1 = _win[scan + best_len - 1];
                  scan_end = _win[scan + best_len];
                }
              } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

              if (best_len <= s.lookahead) {
                return best_len;
              }

              return s.lookahead;
            }
            /* ===========================================================================
             * Fill the window when the lookahead becomes insufficient.
             * Updates strstart and lookahead.
             *
             * IN assertion: lookahead < MIN_LOOKAHEAD
             * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
             *    At least one byte has been read, or avail_in == 0; reads are
             *    performed for at least two bytes (required for the zip translate_eol
             *    option -- not supported here).
             */


            function fill_window(s) {
              var _w_size = s.w_size;
              var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

              do {
                more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

                /* Deal with !@#$% 64K limit: */
                //if (sizeof(int) <= 2) {
                //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                //        more = wsize;
                //
                //  } else if (more == (unsigned)(-1)) {
                //        /* Very unlikely, but possible on 16 bit machine if
                //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                //         */
                //        more--;
                //    }
                //}

                /* If the window is almost full and there is insufficient lookahead,
                 * move the upper half to the lower one to make room in the upper half.
                 */

                if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
                  arraySet(s.window, s.window, _w_size, _w_size, 0);
                  s.match_start -= _w_size;
                  s.strstart -= _w_size;
                  /* we now have strstart >= MAX_DIST */

                  s.block_start -= _w_size;
                  /* Slide the hash table (could be avoided with 32 bit values
                   at the expense of memory usage). We slide even when level == 0
                   to keep the hash table consistent if we switch back to level > 0
                   later. (Using level 0 permanently is not an optimal usage of
                   zlib, so we don't care about this pathological case.)
                   */

                  n = s.hash_size;
                  p = n;

                  do {
                    m = s.head[--p];
                    s.head[p] = m >= _w_size ? m - _w_size : 0;
                  } while (--n);

                  n = _w_size;
                  p = n;

                  do {
                    m = s.prev[--p];
                    s.prev[p] = m >= _w_size ? m - _w_size : 0;
                    /* If n is not on any hash chain, prev[n] is garbage but
                     * its value will never be used.
                     */
                  } while (--n);

                  more += _w_size;
                }

                if (s.strm.avail_in === 0) {
                  break;
                }
                /* If there was no sliding:
                 *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                 *    more == window_size - lookahead - strstart
                 * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                 * => more >= window_size - 2*WSIZE + 2
                 * In the BIG_MEM or MMAP case (not yet supported),
                 *   window_size == input_size + MIN_LOOKAHEAD  &&
                 *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                 * Otherwise, window_size == 2*WSIZE so more >= 2.
                 * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                 */
                //Assert(more >= 2, "more < 2");


                n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                s.lookahead += n;
                /* Initialize the hash value now that we have some input: */

                if (s.lookahead + s.insert >= MIN_MATCH$1) {
                  str = s.strstart - s.insert;
                  s.ins_h = s.window[str];
                  /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
                  //        Call update_hash() MIN_MATCH-3 more times
                  //#endif

                  while (s.insert) {
                    /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH$1 - 1]) & s.hash_mask;
                    s.prev[str & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = str;
                    str++;
                    s.insert--;

                    if (s.lookahead + s.insert < MIN_MATCH$1) {
                      break;
                    }
                  }
                }
                /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                 * but this is not important since only literal bytes will be emitted.
                 */

              } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
              /* If the WIN_INIT bytes after the end of the current data have never been
               * written, then zero those bytes in order to avoid memory check reports of
               * the use of uninitialized (or uninitialised as Julian writes) bytes by
               * the longest match routines.  Update the high water mark for the next
               * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
               * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
               */
              //  if (s.high_water < s.window_size) {
              //    var curr = s.strstart + s.lookahead;
              //    var init = 0;
              //
              //    if (s.high_water < curr) {
              //      /* Previous high water mark below current data -- zero WIN_INIT
              //       * bytes or up to end of window, whichever is less.
              //       */
              //      init = s.window_size - curr;
              //      if (init > WIN_INIT)
              //        init = WIN_INIT;
              //      zmemzero(s->window + curr, (unsigned)init);
              //      s->high_water = curr + init;
              //    }
              //    else if (s->high_water < (ulg)curr + WIN_INIT) {
              //      /* High water mark at or above current data, but below current data
              //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
              //       * to end of window, whichever is less.
              //       */
              //      init = (ulg)curr + WIN_INIT - s->high_water;
              //      if (init > s->window_size - s->high_water)
              //        init = s->window_size - s->high_water;
              //      zmemzero(s->window + s->high_water, (unsigned)init);
              //      s->high_water += init;
              //    }
              //  }
              //
              //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
              //    "not enough room for search");

            }
            /* ===========================================================================
             * Copy without compression as much as possible from the input stream, return
             * the current block state.
             * This function does not insert new strings in the dictionary since
             * uncompressible data is probably not useful. This function is used
             * only for the level=0 compression option.
             * NOTE: this function should be optimized to avoid extra copying from
             * window to pending_buf.
             */


            function deflate_stored(s, flush) {
              /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
               * to pending_buf_size, and each stored block has a 5 byte header:
               */
              var max_block_size = 0xffff;

              if (max_block_size > s.pending_buf_size - 5) {
                max_block_size = s.pending_buf_size - 5;
              }
              /* Copy as much as possible from input to output: */


              for (;;) {
                /* Fill the window as much as possible: */
                if (s.lookahead <= 1) {
                  //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                  //  s->block_start >= (long)s->w_size, "slide too late");
                  //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                  //        s.block_start >= s.w_size)) {
                  //        throw  new Error("slide too late");
                  //      }
                  fill_window(s);

                  if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                    return BS_NEED_MORE;
                  }

                  if (s.lookahead === 0) {
                    break;
                  }
                  /* flush the current block */

                } //Assert(s->block_start >= 0L, "block gone");
                //    if (s.block_start < 0) throw new Error("block gone");


                s.strstart += s.lookahead;
                s.lookahead = 0;
                /* Emit a stored block if pending_buf will be full: */

                var max_start = s.block_start + max_block_size;

                if (s.strstart === 0 || s.strstart >= max_start) {
                  /* strstart == 0 is possible when wraparound on 16-bit machine */
                  s.lookahead = s.strstart - max_start;
                  s.strstart = max_start;
                  /*** FLUSH_BLOCK(s, 0); ***/

                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }
                /* Flush if we may have to slide, otherwise block_start may become
                 * negative and the data will be gone:
                 */


                if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }
              }

              s.insert = 0;

              if (flush === Z_FINISH) {
                /*** FLUSH_BLOCK(s, 1); ***/
                flush_block_only(s, true);

                if (s.strm.avail_out === 0) {
                  return BS_FINISH_STARTED;
                }
                /***/


                return BS_FINISH_DONE;
              }

              if (s.strstart > s.block_start) {
                /*** FLUSH_BLOCK(s, 0); ***/
                flush_block_only(s, false);

                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
                /***/

              }

              return BS_NEED_MORE;
            }
            /* ===========================================================================
             * Compress as much as possible from the input stream, return the current
             * block state.
             * This function does not perform lazy evaluation of matches and inserts
             * new strings in the dictionary only for unmatched strings or for short
             * matches. It is used only for the fast compression options.
             */


            function deflate_fast(s, flush) {
              var hash_head;
              /* head of the hash chain */

              var bflush;
              /* set if current block must be flushed */

              for (;;) {
                /* Make sure that we always have enough lookahead, except
                 * at the end of the input file. We need MAX_MATCH bytes
                 * for the next match, plus MIN_MATCH bytes to insert the
                 * string following the next match.
                 */
                if (s.lookahead < MIN_LOOKAHEAD) {
                  fill_window(s);

                  if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                    return BS_NEED_MORE;
                  }

                  if (s.lookahead === 0) {
                    break;
                    /* flush the current block */
                  }
                }
                /* Insert the string window[strstart .. strstart+2] in the
                 * dictionary, and set hash_head to the head of the hash chain:
                 */


                hash_head = 0
                /*NIL*/
                ;

                if (s.lookahead >= MIN_MATCH$1) {
                  /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
                  hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                  s.head[s.ins_h] = s.strstart;
                  /***/
                }
                /* Find the longest match, discarding those <= prev_length.
                 * At this point we have always match_length < MIN_MATCH
                 */


                if (hash_head !== 0
                /*NIL*/
                && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                  /* To simplify the code, we prevent matches with the string
                   * of window index 0 (in particular we have to avoid a match
                   * of the string with itself at the start of the input file).
                   */
                  s.match_length = longest_match(s, hash_head);
                  /* longest_match() sets match_start */
                }

                if (s.match_length >= MIN_MATCH$1) {
                  // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                  /*** _tr_tally_dist(s, s.strstart - s.match_start,
                                 s.match_length - MIN_MATCH, bflush); ***/
                  bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);
                  s.lookahead -= s.match_length;
                  /* Insert new strings in the hash table only if the match length
                   * is not too large. This saves time but degrades compression.
                   */

                  if (s.match_length <= s.max_lazy_match
                  /*max_insert_length*/
                  && s.lookahead >= MIN_MATCH$1) {
                    s.match_length--;
                    /* string at strstart already in table */

                    do {
                      s.strstart++;
                      /*** INSERT_STRING(s, s.strstart, hash_head); ***/

                      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
                      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                      s.head[s.ins_h] = s.strstart;
                      /***/

                      /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                       * always MIN_MATCH bytes ahead.
                       */
                    } while (--s.match_length !== 0);

                    s.strstart++;
                  } else {
                    s.strstart += s.match_length;
                    s.match_length = 0;
                    s.ins_h = s.window[s.strstart];
                    /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
                    //                Call UPDATE_HASH() MIN_MATCH-3 more times
                    //#endif

                    /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                     * matter since it will be recomputed at next deflate call.
                     */
                  }
                } else {
                  /* No match, output a literal byte */
                  //Tracevv((stderr,"%c", s.window[s.strstart]));

                  /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                  bflush = _tr_tally(s, 0, s.window[s.strstart]);
                  s.lookahead--;
                  s.strstart++;
                }

                if (bflush) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }
              }

              s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;

              if (flush === Z_FINISH) {
                /*** FLUSH_BLOCK(s, 1); ***/
                flush_block_only(s, true);

                if (s.strm.avail_out === 0) {
                  return BS_FINISH_STARTED;
                }
                /***/


                return BS_FINISH_DONE;
              }

              if (s.last_lit) {
                /*** FLUSH_BLOCK(s, 0); ***/
                flush_block_only(s, false);

                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
                /***/

              }

              return BS_BLOCK_DONE;
            }
            /* ===========================================================================
             * Same as above, but achieves better compression. We use a lazy
             * evaluation for matches: a match is finally adopted only if there is
             * no better match at the next window position.
             */


            function deflate_slow(s, flush) {
              var hash_head;
              /* head of hash chain */

              var bflush;
              /* set if current block must be flushed */

              var max_insert;
              /* Process the input block. */

              for (;;) {
                /* Make sure that we always have enough lookahead, except
                 * at the end of the input file. We need MAX_MATCH bytes
                 * for the next match, plus MIN_MATCH bytes to insert the
                 * string following the next match.
                 */
                if (s.lookahead < MIN_LOOKAHEAD) {
                  fill_window(s);

                  if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                    return BS_NEED_MORE;
                  }

                  if (s.lookahead === 0) {
                    break;
                  }
                  /* flush the current block */

                }
                /* Insert the string window[strstart .. strstart+2] in the
                 * dictionary, and set hash_head to the head of the hash chain:
                 */


                hash_head = 0
                /*NIL*/
                ;

                if (s.lookahead >= MIN_MATCH$1) {
                  /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                  s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
                  hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                  s.head[s.ins_h] = s.strstart;
                  /***/
                }
                /* Find the longest match, discarding those <= prev_length.
                 */


                s.prev_length = s.match_length;
                s.prev_match = s.match_start;
                s.match_length = MIN_MATCH$1 - 1;

                if (hash_head !== 0
                /*NIL*/
                && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
                /*MAX_DIST(s)*/
                ) {
                    /* To simplify the code, we prevent matches with the string
                     * of window index 0 (in particular we have to avoid a match
                     * of the string with itself at the start of the input file).
                     */
                    s.match_length = longest_match(s, hash_head);
                    /* longest_match() sets match_start */

                    if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096
                    /*TOO_FAR*/
                    )) {
                      /* If prev_match is also MIN_MATCH, match_start is garbage
                       * but we will ignore the current match anyway.
                       */
                      s.match_length = MIN_MATCH$1 - 1;
                    }
                  }
                /* If there was a match at the previous step and the current
                 * match is not better, output the previous match:
                 */


                if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
                  max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
                  /* Do not insert strings in hash table beyond this. */
                  //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                  /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                                 s.prev_length - MIN_MATCH, bflush);***/

                  bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
                  /* Insert in hash table all strings up to the end of the match.
                   * strstart-1 and strstart are already inserted. If there is not
                   * enough lookahead, the last two strings are not inserted in
                   * the hash table.
                   */

                  s.lookahead -= s.prev_length - 1;
                  s.prev_length -= 2;

                  do {
                    if (++s.strstart <= max_insert) {
                      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$1 - 1]) & s.hash_mask;
                      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                      s.head[s.ins_h] = s.strstart;
                      /***/
                    }
                  } while (--s.prev_length !== 0);

                  s.match_available = 0;
                  s.match_length = MIN_MATCH$1 - 1;
                  s.strstart++;

                  if (bflush) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                } else if (s.match_available) {
                  /* If there was no match at the previous position, output a
                   * single literal. If there was a match but the current match
                   * is longer, truncate the previous match to a single literal.
                   */
                  //Tracevv((stderr,"%c", s->window[s->strstart-1]));

                  /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                  bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

                  if (bflush) {
                    /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                    flush_block_only(s, false);
                    /***/
                  }

                  s.strstart++;
                  s.lookahead--;

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                } else {
                  /* There is no previous match to compare with, wait for
                   * the next step to decide.
                   */
                  s.match_available = 1;
                  s.strstart++;
                  s.lookahead--;
                }
              } //Assert (flush != Z_NO_FLUSH, "no flush?");


              if (s.match_available) {
                //Tracevv((stderr,"%c", s->window[s->strstart-1]));

                /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
                s.match_available = 0;
              }

              s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;

              if (flush === Z_FINISH) {
                /*** FLUSH_BLOCK(s, 1); ***/
                flush_block_only(s, true);

                if (s.strm.avail_out === 0) {
                  return BS_FINISH_STARTED;
                }
                /***/


                return BS_FINISH_DONE;
              }

              if (s.last_lit) {
                /*** FLUSH_BLOCK(s, 0); ***/
                flush_block_only(s, false);

                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
                /***/

              }

              return BS_BLOCK_DONE;
            }
            /* ===========================================================================
             * For Z_RLE, simply look for runs of bytes, generate matches only of distance
             * one.  Do not maintain a hash table.  (It will be regenerated if this run of
             * deflate switches away from Z_RLE.)
             */


            function deflate_rle(s, flush) {
              var bflush;
              /* set if current block must be flushed */

              var prev;
              /* byte at distance one to match */

              var scan, strend;
              /* scan goes up to strend for length of run */

              var _win = s.window;

              for (;;) {
                /* Make sure that we always have enough lookahead, except
                 * at the end of the input file. We need MAX_MATCH bytes
                 * for the longest run, plus one for the unrolled loop.
                 */
                if (s.lookahead <= MAX_MATCH$1) {
                  fill_window(s);

                  if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
                    return BS_NEED_MORE;
                  }

                  if (s.lookahead === 0) {
                    break;
                  }
                  /* flush the current block */

                }
                /* See how many times the previous byte repeats */


                s.match_length = 0;

                if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
                  scan = s.strstart - 1;
                  prev = _win[scan];

                  if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                    strend = s.strstart + MAX_MATCH$1;

                    do {
                      /*jshint noempty:false*/
                    } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

                    s.match_length = MAX_MATCH$1 - (strend - scan);

                    if (s.match_length > s.lookahead) {
                      s.match_length = s.lookahead;
                    }
                  } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

                }
                /* Emit match if have run of MIN_MATCH or longer, else emit literal */


                if (s.match_length >= MIN_MATCH$1) {
                  //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                  /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                  bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH$1);
                  s.lookahead -= s.match_length;
                  s.strstart += s.match_length;
                  s.match_length = 0;
                } else {
                  /* No match, output a literal byte */
                  //Tracevv((stderr,"%c", s->window[s->strstart]));

                  /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                  bflush = _tr_tally(s, 0, s.window[s.strstart]);
                  s.lookahead--;
                  s.strstart++;
                }

                if (bflush) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }
              }

              s.insert = 0;

              if (flush === Z_FINISH) {
                /*** FLUSH_BLOCK(s, 1); ***/
                flush_block_only(s, true);

                if (s.strm.avail_out === 0) {
                  return BS_FINISH_STARTED;
                }
                /***/


                return BS_FINISH_DONE;
              }

              if (s.last_lit) {
                /*** FLUSH_BLOCK(s, 0); ***/
                flush_block_only(s, false);

                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
                /***/

              }

              return BS_BLOCK_DONE;
            }
            /* ===========================================================================
             * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
             * (It will be regenerated if this run of deflate switches away from Huffman.)
             */


            function deflate_huff(s, flush) {
              var bflush;
              /* set if current block must be flushed */

              for (;;) {
                /* Make sure that we have a literal to write. */
                if (s.lookahead === 0) {
                  fill_window(s);

                  if (s.lookahead === 0) {
                    if (flush === Z_NO_FLUSH) {
                      return BS_NEED_MORE;
                    }

                    break;
                    /* flush the current block */
                  }
                }
                /* Output a literal byte */


                s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

                /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

                bflush = _tr_tally(s, 0, s.window[s.strstart]);
                s.lookahead--;
                s.strstart++;

                if (bflush) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }
              }

              s.insert = 0;

              if (flush === Z_FINISH) {
                /*** FLUSH_BLOCK(s, 1); ***/
                flush_block_only(s, true);

                if (s.strm.avail_out === 0) {
                  return BS_FINISH_STARTED;
                }
                /***/


                return BS_FINISH_DONE;
              }

              if (s.last_lit) {
                /*** FLUSH_BLOCK(s, 0); ***/
                flush_block_only(s, false);

                if (s.strm.avail_out === 0) {
                  return BS_NEED_MORE;
                }
                /***/

              }

              return BS_BLOCK_DONE;
            }
            /* Values for max_lazy_match, good_match and max_chain_length, depending on
             * the desired pack level (0..9). The values given below have been tuned to
             * exclude worst case performance for pathological files. Better values may be
             * found for specific files.
             */


            function Config(good_length, max_lazy, nice_length, max_chain, func) {
              this.good_length = good_length;
              this.max_lazy = max_lazy;
              this.nice_length = nice_length;
              this.max_chain = max_chain;
              this.func = func;
            }

            var configuration_table;
            configuration_table = [
            /*      good lazy nice chain */
            new Config(0, 0, 0, 0, deflate_stored),
            /* 0 store only */
            new Config(4, 4, 8, 4, deflate_fast),
            /* 1 max speed, no lazy matches */
            new Config(4, 5, 16, 8, deflate_fast),
            /* 2 */
            new Config(4, 6, 32, 32, deflate_fast),
            /* 3 */
            new Config(4, 4, 16, 16, deflate_slow),
            /* 4 lazy matches */
            new Config(8, 16, 32, 32, deflate_slow),
            /* 5 */
            new Config(8, 16, 128, 128, deflate_slow),
            /* 6 */
            new Config(8, 32, 128, 256, deflate_slow),
            /* 7 */
            new Config(32, 128, 258, 1024, deflate_slow),
            /* 8 */
            new Config(32, 258, 258, 4096, deflate_slow)
            /* 9 max compression */
            ];
            /* ===========================================================================
             * Initialize the "longest match" routines for a new zlib stream
             */

            function lm_init(s) {
              s.window_size = 2 * s.w_size;
              /*** CLEAR_HASH(s); ***/

              zero$1(s.head); // Fill with NIL (= 0);

              /* Set the default configuration parameters:
               */

              s.max_lazy_match = configuration_table[s.level].max_lazy;
              s.good_match = configuration_table[s.level].good_length;
              s.nice_match = configuration_table[s.level].nice_length;
              s.max_chain_length = configuration_table[s.level].max_chain;
              s.strstart = 0;
              s.block_start = 0;
              s.lookahead = 0;
              s.insert = 0;
              s.match_length = s.prev_length = MIN_MATCH$1 - 1;
              s.match_available = 0;
              s.ins_h = 0;
            }

            function DeflateState() {
              this.strm = null;
              /* pointer back to this zlib stream */

              this.status = 0;
              /* as the name implies */

              this.pending_buf = null;
              /* output still pending */

              this.pending_buf_size = 0;
              /* size of pending_buf */

              this.pending_out = 0;
              /* next pending byte to output to the stream */

              this.pending = 0;
              /* nb of bytes in the pending buffer */

              this.wrap = 0;
              /* bit 0 true for zlib, bit 1 true for gzip */

              this.gzhead = null;
              /* gzip header information to write */

              this.gzindex = 0;
              /* where in extra, name, or comment */

              this.method = Z_DEFLATED;
              /* can only be DEFLATED */

              this.last_flush = -1;
              /* value of flush param for previous deflate call */

              this.w_size = 0;
              /* LZ77 window size (32K by default) */

              this.w_bits = 0;
              /* log2(w_size)  (8..16) */

              this.w_mask = 0;
              /* w_size - 1 */

              this.window = null;
              /* Sliding window. Input bytes are read into the second half of the window,
               * and move to the first half later to keep a dictionary of at least wSize
               * bytes. With this organization, matches are limited to a distance of
               * wSize-MAX_MATCH bytes, but this ensures that IO is always
               * performed with a length multiple of the block size.
               */

              this.window_size = 0;
              /* Actual size of window: 2*wSize, except when the user input buffer
               * is directly used as sliding window.
               */

              this.prev = null;
              /* Link to older string with same hash index. To limit the size of this
               * array to 64K, this link is maintained only for the last 32K strings.
               * An index in this array is thus a window index modulo 32K.
               */

              this.head = null;
              /* Heads of the hash chains or NIL. */

              this.ins_h = 0;
              /* hash index of string to be inserted */

              this.hash_size = 0;
              /* number of elements in hash table */

              this.hash_bits = 0;
              /* log2(hash_size) */

              this.hash_mask = 0;
              /* hash_size-1 */

              this.hash_shift = 0;
              /* Number of bits by which ins_h must be shifted at each input
               * step. It must be such that after MIN_MATCH steps, the oldest
               * byte no longer takes part in the hash key, that is:
               *   hash_shift * MIN_MATCH >= hash_bits
               */

              this.block_start = 0;
              /* Window position at the beginning of the current output block. Gets
               * negative when the window is moved backwards.
               */

              this.match_length = 0;
              /* length of best match */

              this.prev_match = 0;
              /* previous match */

              this.match_available = 0;
              /* set if previous match exists */

              this.strstart = 0;
              /* start of string to insert */

              this.match_start = 0;
              /* start of matching string */

              this.lookahead = 0;
              /* number of valid bytes ahead in window */

              this.prev_length = 0;
              /* Length of the best match at previous step. Matches not greater than this
               * are discarded. This is used in the lazy match evaluation.
               */

              this.max_chain_length = 0;
              /* To speed up deflation, hash chains are never searched beyond this
               * length.  A higher limit improves compression ratio but degrades the
               * speed.
               */

              this.max_lazy_match = 0;
              /* Attempt to find a better match only when the current match is strictly
               * smaller than this value. This mechanism is used only for compression
               * levels >= 4.
               */
              // That's alias to max_lazy_match, don't use directly
              //this.max_insert_length = 0;

              /* Insert new strings in the hash table only if the match length is not
               * greater than this length. This saves time but degrades compression.
               * max_insert_length is used only for compression levels <= 3.
               */

              this.level = 0;
              /* compression level (1..9) */

              this.strategy = 0;
              /* favor or force Huffman coding*/

              this.good_match = 0;
              /* Use a faster search when the previous match is longer than this */

              this.nice_match = 0;
              /* Stop searching when current match exceeds this */

              /* used by c: */

              /* Didn't use ct_data typedef below to suppress compiler warning */
              // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
              // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
              // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
              // Use flat array of DOUBLE size, with interleaved fata,
              // because JS does not support effective

              this.dyn_ltree = new Buf16(HEAP_SIZE$1 * 2);
              this.dyn_dtree = new Buf16((2 * D_CODES$1 + 1) * 2);
              this.bl_tree = new Buf16((2 * BL_CODES$1 + 1) * 2);
              zero$1(this.dyn_ltree);
              zero$1(this.dyn_dtree);
              zero$1(this.bl_tree);
              this.l_desc = null;
              /* desc. for literal tree */

              this.d_desc = null;
              /* desc. for distance tree */

              this.bl_desc = null;
              /* desc. for bit length tree */
              //ush bl_count[MAX_BITS+1];

              this.bl_count = new Buf16(MAX_BITS$1 + 1);
              /* number of codes at each bit length for an optimal tree */
              //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

              this.heap = new Buf16(2 * L_CODES$1 + 1);
              /* heap used to build the Huffman trees */

              zero$1(this.heap);
              this.heap_len = 0;
              /* number of elements in the heap */

              this.heap_max = 0;
              /* element of largest frequency */

              /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
               * The same heap array is used to build all
               */

              this.depth = new Buf16(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];

              zero$1(this.depth);
              /* Depth of each subtree used as tie breaker for trees of equal frequency
               */

              this.l_buf = 0;
              /* buffer index for literals or lengths */

              this.lit_bufsize = 0;
              /* Size of match buffer for literals/lengths.  There are 4 reasons for
               * limiting lit_bufsize to 64K:
               *   - frequencies can be kept in 16 bit counters
               *   - if compression is not successful for the first block, all input
               *     data is still in the window so we can still emit a stored block even
               *     when input comes from standard input.  (This can also be done for
               *     all blocks if lit_bufsize is not greater than 32K.)
               *   - if compression is not successful for a file smaller than 64K, we can
               *     even emit a stored file instead of a stored block (saving 5 bytes).
               *     This is applicable only for zip (not gzip or zlib).
               *   - creating new Huffman trees less frequently may not provide fast
               *     adaptation to changes in the input data statistics. (Take for
               *     example a binary file with poorly compressible code followed by
               *     a highly compressible string table.) Smaller buffer sizes give
               *     fast adaptation but have of course the overhead of transmitting
               *     trees more frequently.
               *   - I can't count above 4
               */

              this.last_lit = 0;
              /* running index in l_buf */

              this.d_buf = 0;
              /* Buffer index for distances. To simplify the code, d_buf and l_buf have
               * the same number of elements. To use different lengths, an extra flag
               * array would be necessary.
               */

              this.opt_len = 0;
              /* bit length of current block with optimal trees */

              this.static_len = 0;
              /* bit length of current block with static trees */

              this.matches = 0;
              /* number of string matches in current block */

              this.insert = 0;
              /* bytes at end of window left to insert */

              this.bi_buf = 0;
              /* Output buffer. bits are inserted starting at the bottom (least
               * significant bits).
               */

              this.bi_valid = 0;
              /* Number of valid bits in bi_buf.  All bits above the last valid bit
               * are always zero.
               */
              // Used for window memory init. We safely ignore it for JS. That makes
              // sense only for pointers and memory check tools.
              //this.high_water = 0;

              /* High water mark offset in window for initialized bytes -- bytes above
               * this are set to zero in order to avoid memory check warnings when
               * longest match routines access bytes past the input.  This is then
               * updated to the new high water mark.
               */
            }

            function deflateResetKeep(strm) {
              var s;

              if (!strm || !strm.state) {
                return err(strm, Z_STREAM_ERROR);
              }

              strm.total_in = strm.total_out = 0;
              strm.data_type = Z_UNKNOWN$1;
              s = strm.state;
              s.pending = 0;
              s.pending_out = 0;

              if (s.wrap < 0) {
                s.wrap = -s.wrap;
                /* was made negative by deflate(..., Z_FINISH); */
              }

              s.status = s.wrap ? INIT_STATE : BUSY_STATE;
              strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
              : 1; // adler32(0, Z_NULL, 0)

              s.last_flush = Z_NO_FLUSH;

              _tr_init(s);

              return Z_OK;
            }
            function deflateReset(strm) {
              var ret = deflateResetKeep(strm);

              if (ret === Z_OK) {
                lm_init(strm.state);
              }

              return ret;
            }
            function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
              if (!strm) {
                // === Z_NULL
                return Z_STREAM_ERROR;
              }

              var wrap = 1;

              if (level === Z_DEFAULT_COMPRESSION) {
                level = 6;
              }

              if (windowBits < 0) {
                /* suppress zlib wrapper */
                wrap = 0;
                windowBits = -windowBits;
              } else if (windowBits > 15) {
                wrap = 2;
                /* write gzip wrapper instead */

                windowBits -= 16;
              }

              if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED$1) {
                return err(strm, Z_STREAM_ERROR);
              }

              if (windowBits === 8) {
                windowBits = 9;
              }
              /* until 256-byte window bug fixed */


              var s = new DeflateState();
              strm.state = s;
              s.strm = strm;
              s.wrap = wrap;
              s.gzhead = null;
              s.w_bits = windowBits;
              s.w_size = 1 << s.w_bits;
              s.w_mask = s.w_size - 1;
              s.hash_bits = memLevel + 7;
              s.hash_size = 1 << s.hash_bits;
              s.hash_mask = s.hash_size - 1;
              s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);
              s.window = new Buf8(s.w_size * 2);
              s.head = new Buf16(s.hash_size);
              s.prev = new Buf16(s.w_size); // Don't need mem init magic for JS.
              //s.high_water = 0;  /* nothing written to s->window yet */

              s.lit_bufsize = 1 << memLevel + 6;
              /* 16K elements by default */

              s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
              //s->pending_buf = (uchf *) overlay;

              s.pending_buf = new Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
              //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

              s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

              s.l_buf = (1 + 2) * s.lit_bufsize;
              s.level = level;
              s.strategy = strategy;
              s.method = method;
              return deflateReset(strm);
            }
            function deflate(strm, flush) {
              var old_flush, s;
              var beg, val; // for gzip header write only

              if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
                return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
              }

              s = strm.state;

              if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
                return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
              }

              s.strm = strm;
              /* just in case */

              old_flush = s.last_flush;
              s.last_flush = flush;
              /* Write the header */

              if (s.status === INIT_STATE) {
                if (s.wrap === 2) {
                  // GZIP header
                  strm.adler = 0; //crc32(0L, Z_NULL, 0);

                  put_byte(s, 31);
                  put_byte(s, 139);
                  put_byte(s, 8);

                  if (!s.gzhead) {
                    // s->gzhead == Z_NULL
                    put_byte(s, 0);
                    put_byte(s, 0);
                    put_byte(s, 0);
                    put_byte(s, 0);
                    put_byte(s, 0);
                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                    put_byte(s, OS_CODE);
                    s.status = BUSY_STATE;
                  } else {
                    put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
                    put_byte(s, s.gzhead.time & 0xff);
                    put_byte(s, s.gzhead.time >> 8 & 0xff);
                    put_byte(s, s.gzhead.time >> 16 & 0xff);
                    put_byte(s, s.gzhead.time >> 24 & 0xff);
                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                    put_byte(s, s.gzhead.os & 0xff);

                    if (s.gzhead.extra && s.gzhead.extra.length) {
                      put_byte(s, s.gzhead.extra.length & 0xff);
                      put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
                    }

                    if (s.gzhead.hcrc) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                    }

                    s.gzindex = 0;
                    s.status = EXTRA_STATE;
                  }
                } else // DEFLATE header
                  {
                    var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
                    var level_flags = -1;

                    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                      level_flags = 0;
                    } else if (s.level < 6) {
                      level_flags = 1;
                    } else if (s.level === 6) {
                      level_flags = 2;
                    } else {
                      level_flags = 3;
                    }

                    header |= level_flags << 6;

                    if (s.strstart !== 0) {
                      header |= PRESET_DICT;
                    }

                    header += 31 - header % 31;
                    s.status = BUSY_STATE;
                    putShortMSB(s, header);
                    /* Save the adler32 of the preset dictionary: */

                    if (s.strstart !== 0) {
                      putShortMSB(s, strm.adler >>> 16);
                      putShortMSB(s, strm.adler & 0xffff);
                    }

                    strm.adler = 1; // adler32(0L, Z_NULL, 0);
                  }
              } //#ifdef GZIP


              if (s.status === EXTRA_STATE) {
                if (s.gzhead.extra
                /* != Z_NULL*/
                ) {
                    beg = s.pending;
                    /* start of bytes to update crc */

                    while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                      if (s.pending === s.pending_buf_size) {
                        if (s.gzhead.hcrc && s.pending > beg) {
                          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }

                        flush_pending(strm);
                        beg = s.pending;

                        if (s.pending === s.pending_buf_size) {
                          break;
                        }
                      }

                      put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                      s.gzindex++;
                    }

                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }

                    if (s.gzindex === s.gzhead.extra.length) {
                      s.gzindex = 0;
                      s.status = NAME_STATE;
                    }
                  } else {
                  s.status = NAME_STATE;
                }
              }

              if (s.status === NAME_STATE) {
                if (s.gzhead.name
                /* != Z_NULL*/
                ) {
                    beg = s.pending;
                    /* start of bytes to update crc */
                    //int val;

                    do {
                      if (s.pending === s.pending_buf_size) {
                        if (s.gzhead.hcrc && s.pending > beg) {
                          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }

                        flush_pending(strm);
                        beg = s.pending;

                        if (s.pending === s.pending_buf_size) {
                          val = 1;
                          break;
                        }
                      } // JS specific: little magic to add zero terminator to end of string


                      if (s.gzindex < s.gzhead.name.length) {
                        val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                      } else {
                        val = 0;
                      }

                      put_byte(s, val);
                    } while (val !== 0);

                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }

                    if (val === 0) {
                      s.gzindex = 0;
                      s.status = COMMENT_STATE;
                    }
                  } else {
                  s.status = COMMENT_STATE;
                }
              }

              if (s.status === COMMENT_STATE) {
                if (s.gzhead.comment
                /* != Z_NULL*/
                ) {
                    beg = s.pending;
                    /* start of bytes to update crc */
                    //int val;

                    do {
                      if (s.pending === s.pending_buf_size) {
                        if (s.gzhead.hcrc && s.pending > beg) {
                          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                        }

                        flush_pending(strm);
                        beg = s.pending;

                        if (s.pending === s.pending_buf_size) {
                          val = 1;
                          break;
                        }
                      } // JS specific: little magic to add zero terminator to end of string


                      if (s.gzindex < s.gzhead.comment.length) {
                        val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                      } else {
                        val = 0;
                      }

                      put_byte(s, val);
                    } while (val !== 0);

                    if (s.gzhead.hcrc && s.pending > beg) {
                      strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                    }

                    if (val === 0) {
                      s.status = HCRC_STATE;
                    }
                  } else {
                  s.status = HCRC_STATE;
                }
              }

              if (s.status === HCRC_STATE) {
                if (s.gzhead.hcrc) {
                  if (s.pending + 2 > s.pending_buf_size) {
                    flush_pending(strm);
                  }

                  if (s.pending + 2 <= s.pending_buf_size) {
                    put_byte(s, strm.adler & 0xff);
                    put_byte(s, strm.adler >> 8 & 0xff);
                    strm.adler = 0; //crc32(0L, Z_NULL, 0);

                    s.status = BUSY_STATE;
                  }
                } else {
                  s.status = BUSY_STATE;
                }
              } //#endif

              /* Flush as much pending output as possible */


              if (s.pending !== 0) {
                flush_pending(strm);

                if (strm.avail_out === 0) {
                  /* Since avail_out is 0, deflate will be called again with
                   * more output space, but possibly with both pending and
                   * avail_in equal to zero. There won't be anything to do,
                   * but this is not an error situation so make sure we
                   * return OK instead of BUF_ERROR at next call of deflate:
                   */
                  s.last_flush = -1;
                  return Z_OK;
                }
                /* Make sure there is something to do and avoid duplicate consecutive
                 * flushes. For repeated and useless calls with Z_FINISH, we keep
                 * returning Z_STREAM_END instead of Z_BUF_ERROR.
                 */

              } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
                return err(strm, Z_BUF_ERROR);
              }
              /* User must not provide more input after the first FINISH: */


              if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                return err(strm, Z_BUF_ERROR);
              }
              /* Start a new block or continue the current one.
               */


              if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
                var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

                if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                  s.status = FINISH_STATE;
                }

                if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                  if (strm.avail_out === 0) {
                    s.last_flush = -1;
                    /* avoid BUF_ERROR next call, see above */
                  }

                  return Z_OK;
                  /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                   * of deflate should use the same flush parameter to make sure
                   * that the flush is complete. So we don't have to output an
                   * empty block here, this will be done at next call. This also
                   * ensures that for a very small output buffer, we emit at most
                   * one empty block.
                   */
                }

                if (bstate === BS_BLOCK_DONE) {
                  if (flush === Z_PARTIAL_FLUSH) {
                    _tr_align(s);
                  } else if (flush !== Z_BLOCK) {
                    /* FULL_FLUSH or SYNC_FLUSH */
                    _tr_stored_block(s, 0, 0, false);
                    /* For a full flush, this empty block will be recognized
                     * as a special marker by inflate_sync().
                     */


                    if (flush === Z_FULL_FLUSH) {
                      /*** CLEAR_HASH(s); ***/

                      /* forget history */
                      zero$1(s.head); // Fill with NIL (= 0);

                      if (s.lookahead === 0) {
                        s.strstart = 0;
                        s.block_start = 0;
                        s.insert = 0;
                      }
                    }
                  }

                  flush_pending(strm);

                  if (strm.avail_out === 0) {
                    s.last_flush = -1;
                    /* avoid BUF_ERROR at next call, see above */

                    return Z_OK;
                  }
                }
              } //Assert(strm->avail_out > 0, "bug2");
              //if (strm.avail_out <= 0) { throw new Error("bug2");}


              if (flush !== Z_FINISH) {
                return Z_OK;
              }

              if (s.wrap <= 0) {
                return Z_STREAM_END;
              }
              /* Write the trailer */


              if (s.wrap === 2) {
                put_byte(s, strm.adler & 0xff);
                put_byte(s, strm.adler >> 8 & 0xff);
                put_byte(s, strm.adler >> 16 & 0xff);
                put_byte(s, strm.adler >> 24 & 0xff);
                put_byte(s, strm.total_in & 0xff);
                put_byte(s, strm.total_in >> 8 & 0xff);
                put_byte(s, strm.total_in >> 16 & 0xff);
                put_byte(s, strm.total_in >> 24 & 0xff);
              } else {
                putShortMSB(s, strm.adler >>> 16);
                putShortMSB(s, strm.adler & 0xffff);
              }

              flush_pending(strm);
              /* If avail_out is zero, the application will call deflate again
               * to flush the rest.
               */

              if (s.wrap > 0) {
                s.wrap = -s.wrap;
              }
              /* write the trailer only once! */


              return s.pending !== 0 ? Z_OK : Z_STREAM_END;
            }
            function deflateEnd(strm) {
              var status;

              if (!strm
              /*== Z_NULL*/
              || !strm.state
              /*== Z_NULL*/
              ) {
                  return Z_STREAM_ERROR;
                }

              status = strm.state.status;

              if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
                return err(strm, Z_STREAM_ERROR);
              }

              strm.state = null;
              return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
            }
            /* Not implemented
            exports.deflateBound = deflateBound;
            exports.deflateCopy = deflateCopy;
            exports.deflateParams = deflateParams;
            exports.deflatePending = deflatePending;
            exports.deflatePrime = deflatePrime;
            exports.deflateTune = deflateTune;
            */

            // See state defs from inflate.js
            var BAD = 30;
            /* got a data error -- remain here until reset */

            var TYPE = 12;
            /* i: waiting for type bits, including last-flag bit */

            /*
               Decode literal, length, and distance codes and write out the resulting
               literal and match bytes until either not enough input or output is
               available, an end-of-block is encountered, or a data error is encountered.
               When large enough input and output buffers are supplied to inflate(), for
               example, a 16K input buffer and a 64K output buffer, more than 95% of the
               inflate execution time is spent in this routine.

               Entry assumptions:

                    state.mode === LEN
                    strm.avail_in >= 6
                    strm.avail_out >= 258
                    start >= strm.avail_out
                    state.bits < 8

               On return, state.mode is one of:

                    LEN -- ran out of enough output space or enough available input
                    TYPE -- reached end of block code, inflate() to interpret next block
                    BAD -- error in block data

               Notes:

                - The maximum input bits used by a length/distance pair is 15 bits for the
                  length code, 5 bits for the length extra, 15 bits for the distance code,
                  and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
                  Therefore if strm.avail_in >= 6, then there is enough input to avoid
                  checking for available input while decoding.

                - The maximum bytes that a single length/distance pair can output is 258
                  bytes, which is the maximum length that can be coded.  inflate_fast()
                  requires strm.avail_out >= 258 for each loop to avoid checking for
                  output space.
             */

            function inflate_fast(strm, start) {
              var state;

              var _in;
              /* local strm.input */


              var last;
              /* have enough input while in < last */

              var _out;
              /* local strm.output */


              var beg;
              /* inflate()'s initial strm.output */

              var end;
              /* while out < end, enough space available */
              //#ifdef INFLATE_STRICT

              var dmax;
              /* maximum distance from zlib header */
              //#endif

              var wsize;
              /* window size or zero if not using window */

              var whave;
              /* valid bytes in the window */

              var wnext;
              /* window write index */
              // Use `s_window` instead `window`, avoid conflict with instrumentation tools

              var s_window;
              /* allocated sliding window, if wsize != 0 */

              var hold;
              /* local strm.hold */

              var bits;
              /* local strm.bits */

              var lcode;
              /* local strm.lencode */

              var dcode;
              /* local strm.distcode */

              var lmask;
              /* mask for first level of length codes */

              var dmask;
              /* mask for first level of distance codes */

              var here;
              /* retrieved table entry */

              var op;
              /* code bits, operation, extra bits, or */

              /*  window position, window bytes to copy */

              var len;
              /* match length, unused bytes */

              var dist;
              /* match distance */

              var from;
              /* where to copy match from */

              var from_source;
              var input, output; // JS specific, because we have no pointers

              /* copy state to local variables */

              state = strm.state; //here = state.here;

              _in = strm.next_in;
              input = strm.input;
              last = _in + (strm.avail_in - 5);
              _out = strm.next_out;
              output = strm.output;
              beg = _out - (start - strm.avail_out);
              end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

              dmax = state.dmax; //#endif

              wsize = state.wsize;
              whave = state.whave;
              wnext = state.wnext;
              s_window = state.window;
              hold = state.hold;
              bits = state.bits;
              lcode = state.lencode;
              dcode = state.distcode;
              lmask = (1 << state.lenbits) - 1;
              dmask = (1 << state.distbits) - 1;
              /* decode literals and length/distances until end-of-block or not enough
                 input data or output space */

              top: do {
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }

                here = lcode[hold & lmask];

                dolen: for (;;) {
                  // Goto emulation
                  op = here >>> 24
                  /*here.bits*/
                  ;
                  hold >>>= op;
                  bits -= op;
                  op = here >>> 16 & 0xff
                  /*here.op*/
                  ;

                  if (op === 0) {
                    /* literal */
                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                    //        "inflate:         literal '%c'\n" :
                    //        "inflate:         literal 0x%02x\n", here.val));
                    output[_out++] = here & 0xffff
                    /*here.val*/
                    ;
                  } else if (op & 16) {
                    /* length base */
                    len = here & 0xffff
                    /*here.val*/
                    ;
                    op &= 15;
                    /* number of extra bits */

                    if (op) {
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                      }

                      len += hold & (1 << op) - 1;
                      hold >>>= op;
                      bits -= op;
                    } //Tracevv((stderr, "inflate:         length %u\n", len));


                    if (bits < 15) {
                      hold += input[_in++] << bits;
                      bits += 8;
                      hold += input[_in++] << bits;
                      bits += 8;
                    }

                    here = dcode[hold & dmask];

                    dodist: for (;;) {
                      // goto emulation
                      op = here >>> 24
                      /*here.bits*/
                      ;
                      hold >>>= op;
                      bits -= op;
                      op = here >>> 16 & 0xff
                      /*here.op*/
                      ;

                      if (op & 16) {
                        /* distance base */
                        dist = here & 0xffff
                        /*here.val*/
                        ;
                        op &= 15;
                        /* number of extra bits */

                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;

                          if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                          }
                        }

                        dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                        if (dist > dmax) {
                          strm.msg = 'invalid distance too far back';
                          state.mode = BAD;
                          break top;
                        } //#endif


                        hold >>>= op;
                        bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                        op = _out - beg;
                        /* max distance in output */

                        if (dist > op) {
                          /* see if copy from window */
                          op = dist - op;
                          /* distance back in window */

                          if (op > whave) {
                            if (state.sane) {
                              strm.msg = 'invalid distance too far back';
                              state.mode = BAD;
                              break top;
                            } // (!) This block is disabled in zlib defailts,
                            // don't enable it for binary compatibility
                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                            //                if (len <= op - whave) {
                            //                  do {
                            //                    output[_out++] = 0;
                            //                  } while (--len);
                            //                  continue top;
                            //                }
                            //                len -= op - whave;
                            //                do {
                            //                  output[_out++] = 0;
                            //                } while (--op > whave);
                            //                if (op === 0) {
                            //                  from = _out - dist;
                            //                  do {
                            //                    output[_out++] = output[from++];
                            //                  } while (--len);
                            //                  continue top;
                            //                }
                            //#endif

                          }

                          from = 0; // window index

                          from_source = s_window;

                          if (wnext === 0) {
                            /* very common case */
                            from += wsize - op;

                            if (op < len) {
                              /* some from window */
                              len -= op;

                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);

                              from = _out - dist;
                              /* rest from output */

                              from_source = output;
                            }
                          } else if (wnext < op) {
                            /* wrap around window */
                            from += wsize + wnext - op;
                            op -= wnext;

                            if (op < len) {
                              /* some from end of window */
                              len -= op;

                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);

                              from = 0;

                              if (wnext < len) {
                                /* some from start of window */
                                op = wnext;
                                len -= op;

                                do {
                                  output[_out++] = s_window[from++];
                                } while (--op);

                                from = _out - dist;
                                /* rest from output */

                                from_source = output;
                              }
                            }
                          } else {
                            /* contiguous in window */
                            from += wnext - op;

                            if (op < len) {
                              /* some from window */
                              len -= op;

                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);

                              from = _out - dist;
                              /* rest from output */

                              from_source = output;
                            }
                          }

                          while (len > 2) {
                            output[_out++] = from_source[from++];
                            output[_out++] = from_source[from++];
                            output[_out++] = from_source[from++];
                            len -= 3;
                          }

                          if (len) {
                            output[_out++] = from_source[from++];

                            if (len > 1) {
                              output[_out++] = from_source[from++];
                            }
                          }
                        } else {
                          from = _out - dist;
                          /* copy direct from output */

                          do {
                            /* minimum length is three */
                            output[_out++] = output[from++];
                            output[_out++] = output[from++];
                            output[_out++] = output[from++];
                            len -= 3;
                          } while (len > 2);

                          if (len) {
                            output[_out++] = output[from++];

                            if (len > 1) {
                              output[_out++] = output[from++];
                            }
                          }
                        }
                      } else if ((op & 64) === 0) {
                        /* 2nd level distance code */
                        here = dcode[(here & 0xffff) + (
                        /*here.val*/
                        hold & (1 << op) - 1)];
                        continue dodist;
                      } else {
                        strm.msg = 'invalid distance code';
                        state.mode = BAD;
                        break top;
                      }

                      break; // need to emulate goto via "continue"
                    }
                  } else if ((op & 64) === 0) {
                    /* 2nd level length code */
                    here = lcode[(here & 0xffff) + (
                    /*here.val*/
                    hold & (1 << op) - 1)];
                    continue dolen;
                  } else if (op & 32) {
                    /* end-of-block */
                    //Tracevv((stderr, "inflate:         end of block\n"));
                    state.mode = TYPE;
                    break top;
                  } else {
                    strm.msg = 'invalid literal/length code';
                    state.mode = BAD;
                    break top;
                  }

                  break; // need to emulate goto via "continue"
                }
              } while (_in < last && _out < end);
              /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


              len = bits >> 3;
              _in -= len;
              bits -= len << 3;
              hold &= (1 << bits) - 1;
              /* update state and return */

              strm.next_in = _in;
              strm.next_out = _out;
              strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
              strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
              state.hold = hold;
              state.bits = bits;
              return;
            }

            var MAXBITS = 15;
            var ENOUGH_LENS = 852;
            var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

            var CODES = 0;
            var LENS = 1;
            var DISTS = 2;
            var lbase = [
            /* Length codes 257..285 base */
            3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
            var lext = [
            /* Length codes 257..285 extra */
            16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
            var dbase = [
            /* Distance codes 0..29 base */
            1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
            var dext = [
            /* Distance codes 0..29 extra */
            16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
            function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
              var bits = opts.bits; //here = opts.here; /* table entry for duplication */

              var len = 0;
              /* a code's length in bits */

              var sym = 0;
              /* index of code symbols */

              var min = 0,
                  max = 0;
              /* minimum and maximum code lengths */

              var root = 0;
              /* number of index bits for root table */

              var curr = 0;
              /* number of index bits for current table */

              var drop = 0;
              /* code bits to drop for sub-table */

              var left = 0;
              /* number of prefix codes available */

              var used = 0;
              /* code entries in table used */

              var huff = 0;
              /* Huffman code */

              var incr;
              /* for incrementing code, index */

              var fill;
              /* index for replicating entries */

              var low;
              /* low bits for current root entry */

              var mask;
              /* mask for low root bits */

              var next;
              /* next available space in table */

              var base = null;
              /* base value table to use */

              var base_index = 0; //  var shoextra;    /* extra bits table to use */

              var end;
              /* use base and extra for symbol > end */

              var count = new Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

              var offs = new Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

              var extra = null;
              var extra_index = 0;
              var here_bits, here_op, here_val;
              /*
               Process a set of code lengths to create a canonical Huffman code.  The
               code lengths are lens[0..codes-1].  Each length corresponds to the
               symbols 0..codes-1.  The Huffman code is generated by first sorting the
               symbols by length from short to long, and retaining the symbol order
               for codes with equal lengths.  Then the code starts with all zero bits
               for the first code of the shortest length, and the codes are integer
               increments for the same length, and zeros are appended as the length
               increases.  For the deflate format, these bits are stored backwards
               from their more natural integer increment ordering, and so when the
               decoding tables are built in the large loop below, the integer codes
               are incremented backwards.
                This routine assumes, but does not check, that all of the entries in
               lens[] are in the range 0..MAXBITS.  The caller must assure this.
               1..MAXBITS is interpreted as that code length.  zero means that that
               symbol does not occur in this code.
                The codes are sorted by computing a count of codes for each length,
               creating from that a table of starting indices for each length in the
               sorted table, and then entering the symbols in order in the sorted
               table.  The sorted table is work[], with that space being provided by
               the caller.
                The length counts are used for other purposes as well, i.e. finding
               the minimum and maximum length codes, determining if there are any
               codes at all, checking for a valid set of lengths, and looking ahead
               at length counts to determine sub-table sizes when building the
               decoding tables.
               */

              /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

              for (len = 0; len <= MAXBITS; len++) {
                count[len] = 0;
              }

              for (sym = 0; sym < codes; sym++) {
                count[lens[lens_index + sym]]++;
              }
              /* bound code lengths, force root to be within code lengths */


              root = bits;

              for (max = MAXBITS; max >= 1; max--) {
                if (count[max] !== 0) {
                  break;
                }
              }

              if (root > max) {
                root = max;
              }

              if (max === 0) {
                /* no symbols to code at all */
                //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
                //table.bits[opts.table_index] = 1;
                //table.val[opts.table_index++] = 0;

                table[table_index++] = 1 << 24 | 64 << 16 | 0;
                opts.bits = 1;
                return 0;
                /* no symbols, but wait for decoding to report error */
              }

              for (min = 1; min < max; min++) {
                if (count[min] !== 0) {
                  break;
                }
              }

              if (root < min) {
                root = min;
              }
              /* check for an over-subscribed or incomplete set of lengths */


              left = 1;

              for (len = 1; len <= MAXBITS; len++) {
                left <<= 1;
                left -= count[len];

                if (left < 0) {
                  return -1;
                }
                /* over-subscribed */

              }

              if (left > 0 && (type === CODES || max !== 1)) {
                return -1;
                /* incomplete set */
              }
              /* generate offsets into symbol table for each length for sorting */


              offs[1] = 0;

              for (len = 1; len < MAXBITS; len++) {
                offs[len + 1] = offs[len] + count[len];
              }
              /* sort symbols by length, by symbol order within each length */


              for (sym = 0; sym < codes; sym++) {
                if (lens[lens_index + sym] !== 0) {
                  work[offs[lens[lens_index + sym]]++] = sym;
                }
              }
              /*
               Create and fill in decoding tables.  In this loop, the table being
               filled is at next and has curr index bits.  The code being used is huff
               with length len.  That code is converted to an index by dropping drop
               bits off of the bottom.  For codes where len is less than drop + curr,
               those top drop + curr - len bits are incremented through all values to
               fill the table with replicated entries.
                root is the number of index bits for the root table.  When len exceeds
               root, sub-tables are created pointed to by the root entry with an index
               of the low root bits of huff.  This is saved in low to check for when a
               new sub-table should be started.  drop is zero when the root table is
               being filled, and drop is root when sub-tables are being filled.
                When a new sub-table is needed, it is necessary to look ahead in the
               code lengths to determine what size sub-table is needed.  The length
               counts are used for this, and so count[] is decremented as codes are
               entered in the tables.
                used keeps track of how many table entries have been allocated from the
               provided *table space.  It is checked for LENS and DIST tables against
               the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
               the initial root table size constants.  See the comments in inftrees.h
               for more information.
                sym increments through all symbols, and the loop terminates when
               all codes of length max, i.e. all codes, have been processed.  This
               routine permits incomplete codes, so another loop after this one fills
               in the rest of the decoding tables with invalid code markers.
               */

              /* set up for code type */
              // poor man optimization - use if-else instead of switch,
              // to avoid deopts in old v8


              if (type === CODES) {
                base = extra = work;
                /* dummy value--not used */

                end = 19;
              } else if (type === LENS) {
                base = lbase;
                base_index -= 257;
                extra = lext;
                extra_index -= 257;
                end = 256;
              } else {
                /* DISTS */
                base = dbase;
                extra = dext;
                end = -1;
              }
              /* initialize opts for loop */


              huff = 0;
              /* starting code */

              sym = 0;
              /* starting code symbol */

              len = min;
              /* starting code length */

              next = table_index;
              /* current table to fill in */

              curr = root;
              /* current table index bits */

              drop = 0;
              /* current bits to drop from code for index */

              low = -1;
              /* trigger new sub-table when len > root */

              used = 1 << root;
              /* use root table entries */

              mask = used - 1;
              /* mask for comparing low */

              /* check available table space */

              if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                return 1;
              }
              /* process all codes and make table entries */

              for (;;) {
                /* create table entry */

                here_bits = len - drop;

                if (work[sym] < end) {
                  here_op = 0;
                  here_val = work[sym];
                } else if (work[sym] > end) {
                  here_op = extra[extra_index + work[sym]];
                  here_val = base[base_index + work[sym]];
                } else {
                  here_op = 32 + 64;
                  /* end of block */

                  here_val = 0;
                }
                /* replicate for those indices with low len bits equal to huff */


                incr = 1 << len - drop;
                fill = 1 << curr;
                min = fill;
                /* save offset to next table */

                do {
                  fill -= incr;
                  table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
                } while (fill !== 0);
                /* backwards increment the len-bit code huff */


                incr = 1 << len - 1;

                while (huff & incr) {
                  incr >>= 1;
                }

                if (incr !== 0) {
                  huff &= incr - 1;
                  huff += incr;
                } else {
                  huff = 0;
                }
                /* go to next symbol, update count, len */


                sym++;

                if (--count[len] === 0) {
                  if (len === max) {
                    break;
                  }

                  len = lens[lens_index + work[sym]];
                }
                /* create new sub-table if needed */


                if (len > root && (huff & mask) !== low) {
                  /* if first time, transition to sub-tables */
                  if (drop === 0) {
                    drop = root;
                  }
                  /* increment past last table */


                  next += min;
                  /* here min is 1 << curr */

                  /* determine length of next table */

                  curr = len - drop;
                  left = 1 << curr;

                  while (curr + drop < max) {
                    left -= count[curr + drop];

                    if (left <= 0) {
                      break;
                    }

                    curr++;
                    left <<= 1;
                  }
                  /* check for enough space */


                  used += 1 << curr;

                  if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                    return 1;
                  }
                  /* point entry in root table to sub-table */


                  low = huff & mask;
                  /*table.op[low] = curr;
                  table.bits[low] = root;
                  table.val[low] = next - opts.table_index;*/

                  table[low] = root << 24 | curr << 16 | next - table_index | 0;
                }
              }
              /* fill in remaining table entry if code is incomplete (guaranteed to have
               at most one remaining entry, since if the code is incomplete, the
               maximum code length that was allowed to get this far is one bit) */


              if (huff !== 0) {
                //table.op[next + huff] = 64;            /* invalid code marker */
                //table.bits[next + huff] = len - drop;
                //table.val[next + huff] = 0;
                table[next + huff] = len - drop << 24 | 64 << 16 | 0;
              }
              /* set return parameters */
              //opts.table_index += used;


              opts.bits = root;
              return 0;
            }

            var CODES$1 = 0;
            var LENS$1 = 1;
            var DISTS$1 = 2;
            /* Public constants ==========================================================*/

            /* ===========================================================================*/

            /* Allowed flush values; see deflate() and inflate() below for details */
            //var Z_NO_FLUSH      = 0;
            //var Z_PARTIAL_FLUSH = 1;
            //var Z_SYNC_FLUSH    = 2;
            //var Z_FULL_FLUSH    = 3;

            var Z_FINISH$1 = 4;
            var Z_BLOCK$1 = 5;
            var Z_TREES = 6;
            /* Return codes for the compression/decompression functions. Negative values
             * are errors, positive values are used for special but normal events.
             */

            var Z_OK$1 = 0;
            var Z_STREAM_END$1 = 1;
            var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

            var Z_STREAM_ERROR$1 = -2;
            var Z_DATA_ERROR$1 = -3;
            var Z_MEM_ERROR = -4;
            var Z_BUF_ERROR$1 = -5; //var Z_VERSION_ERROR = -6;

            /* The deflate compression method */

            var Z_DEFLATED$1 = 8;
            /* STATES ====================================================================*/

            /* ===========================================================================*/

            var HEAD = 1;
            /* i: waiting for magic header */

            var FLAGS = 2;
            /* i: waiting for method and flags (gzip) */

            var TIME = 3;
            /* i: waiting for modification time (gzip) */

            var OS = 4;
            /* i: waiting for extra flags and operating system (gzip) */

            var EXLEN = 5;
            /* i: waiting for extra length (gzip) */

            var EXTRA = 6;
            /* i: waiting for extra bytes (gzip) */

            var NAME = 7;
            /* i: waiting for end of file name (gzip) */

            var COMMENT = 8;
            /* i: waiting for end of comment (gzip) */

            var HCRC = 9;
            /* i: waiting for header crc (gzip) */

            var DICTID = 10;
            /* i: waiting for dictionary check value */

            var DICT = 11;
            /* waiting for inflateSetDictionary() call */

            var TYPE$1 = 12;
            /* i: waiting for type bits, including last-flag bit */

            var TYPEDO = 13;
            /* i: same, but skip check to exit inflate on new block */

            var STORED = 14;
            /* i: waiting for stored size (length and complement) */

            var COPY_ = 15;
            /* i/o: same as COPY below, but only first time in */

            var COPY = 16;
            /* i/o: waiting for input or output to copy stored block */

            var TABLE = 17;
            /* i: waiting for dynamic block table lengths */

            var LENLENS = 18;
            /* i: waiting for code length code lengths */

            var CODELENS = 19;
            /* i: waiting for length/lit and distance code lengths */

            var LEN_ = 20;
            /* i: same as LEN below, but only first time in */

            var LEN = 21;
            /* i: waiting for length/lit/eob code */

            var LENEXT = 22;
            /* i: waiting for length extra bits */

            var DIST = 23;
            /* i: waiting for distance code */

            var DISTEXT = 24;
            /* i: waiting for distance extra bits */

            var MATCH = 25;
            /* o: waiting for output space to copy string */

            var LIT = 26;
            /* o: waiting for output space to write literal */

            var CHECK = 27;
            /* i: waiting for 32-bit check value */

            var LENGTH = 28;
            /* i: waiting for 32-bit length (gzip) */

            var DONE = 29;
            /* finished check, done -- remain here until reset */

            var BAD$1 = 30;
            /* got a data error -- remain here until reset */

            var MEM = 31;
            /* got an inflate() memory error -- remain here until reset */

            var SYNC = 32;
            /* looking for synchronization bytes to restart inflate() */

            /* ===========================================================================*/

            var ENOUGH_LENS$1 = 852;
            var ENOUGH_DISTS$1 = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

            function zswap32(q) {
              return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
            }

            function InflateState() {
              this.mode = 0;
              /* current inflate mode */

              this.last = false;
              /* true if processing last block */

              this.wrap = 0;
              /* bit 0 true for zlib, bit 1 true for gzip */

              this.havedict = false;
              /* true if dictionary provided */

              this.flags = 0;
              /* gzip header method and flags (0 if zlib) */

              this.dmax = 0;
              /* zlib header max distance (INFLATE_STRICT) */

              this.check = 0;
              /* protected copy of check value */

              this.total = 0;
              /* protected copy of output count */
              // TODO: may be {}

              this.head = null;
              /* where to save gzip header information */

              /* sliding window */

              this.wbits = 0;
              /* log base 2 of requested window size */

              this.wsize = 0;
              /* window size or zero if not using window */

              this.whave = 0;
              /* valid bytes in the window */

              this.wnext = 0;
              /* window write index */

              this.window = null;
              /* allocated sliding window, if needed */

              /* bit accumulator */

              this.hold = 0;
              /* input bit accumulator */

              this.bits = 0;
              /* number of bits in "in" */

              /* for string and stored block copying */

              this.length = 0;
              /* literal or length of data to copy */

              this.offset = 0;
              /* distance back to copy string from */

              /* for table and code decoding */

              this.extra = 0;
              /* extra bits needed */

              /* fixed and dynamic code tables */

              this.lencode = null;
              /* starting table for length/literal codes */

              this.distcode = null;
              /* starting table for distance codes */

              this.lenbits = 0;
              /* index bits for lencode */

              this.distbits = 0;
              /* index bits for distcode */

              /* dynamic table building */

              this.ncode = 0;
              /* number of code length code lengths */

              this.nlen = 0;
              /* number of length code lengths */

              this.ndist = 0;
              /* number of distance code lengths */

              this.have = 0;
              /* number of code lengths in lens[] */

              this.next = null;
              /* next available space in codes[] */

              this.lens = new Buf16(320);
              /* temporary storage for code lengths */

              this.work = new Buf16(288);
              /* work area for code table building */

              /*
               because we don't have pointers in js, we use lencode and distcode directly
               as buffers so we don't need codes
              */
              //this.codes = new Buf32(ENOUGH);       /* space for code tables */

              this.lendyn = null;
              /* dynamic table for length/literal codes (JS specific) */

              this.distdyn = null;
              /* dynamic table for distance codes (JS specific) */

              this.sane = 0;
              /* if false, allow invalid distance too far */

              this.back = 0;
              /* bits back of last unprocessed length/lit */

              this.was = 0;
              /* initial length of match */
            }

            function inflateResetKeep(strm) {
              var state;

              if (!strm || !strm.state) {
                return Z_STREAM_ERROR$1;
              }

              state = strm.state;
              strm.total_in = strm.total_out = state.total = 0;
              strm.msg = '';
              /*Z_NULL*/

              if (state.wrap) {
                /* to support ill-conceived Java test suite */
                strm.adler = state.wrap & 1;
              }

              state.mode = HEAD;
              state.last = 0;
              state.havedict = 0;
              state.dmax = 32768;
              state.head = null
              /*Z_NULL*/
              ;
              state.hold = 0;
              state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

              state.lencode = state.lendyn = new Buf32(ENOUGH_LENS$1);
              state.distcode = state.distdyn = new Buf32(ENOUGH_DISTS$1);
              state.sane = 1;
              state.back = -1; //Tracev((stderr, "inflate: reset\n"));

              return Z_OK$1;
            }
            function inflateReset(strm) {
              var state;

              if (!strm || !strm.state) {
                return Z_STREAM_ERROR$1;
              }

              state = strm.state;
              state.wsize = 0;
              state.whave = 0;
              state.wnext = 0;
              return inflateResetKeep(strm);
            }
            function inflateReset2(strm, windowBits) {
              var wrap;
              var state;
              /* get the state */

              if (!strm || !strm.state) {
                return Z_STREAM_ERROR$1;
              }

              state = strm.state;
              /* extract wrap request from windowBits parameter */

              if (windowBits < 0) {
                wrap = 0;
                windowBits = -windowBits;
              } else {
                wrap = (windowBits >> 4) + 1;

                if (windowBits < 48) {
                  windowBits &= 15;
                }
              }
              /* set number of window bits, free window if different */


              if (windowBits && (windowBits < 8 || windowBits > 15)) {
                return Z_STREAM_ERROR$1;
              }

              if (state.window !== null && state.wbits !== windowBits) {
                state.window = null;
              }
              /* update state and reset the rest of it */


              state.wrap = wrap;
              state.wbits = windowBits;
              return inflateReset(strm);
            }
            function inflateInit2(strm, windowBits) {
              var ret;
              var state;

              if (!strm) {
                return Z_STREAM_ERROR$1;
              } //strm.msg = Z_NULL;                 /* in case we return an error */


              state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
              //Tracev((stderr, "inflate: allocated\n"));

              strm.state = state;
              state.window = null
              /*Z_NULL*/
              ;
              ret = inflateReset2(strm, windowBits);

              if (ret !== Z_OK$1) {
                strm.state = null
                /*Z_NULL*/
                ;
              }

              return ret;
            }
            /*
             Return state with length and distance decoding tables and index sizes set to
             fixed code decoding.  Normally this returns fixed tables from inffixed.h.
             If BUILDFIXED is defined, then instead this routine builds the tables the
             first time it's called, and returns those tables the first time and
             thereafter.  This reduces the size of the code by about 2K bytes, in
             exchange for a little execution time.  However, BUILDFIXED should not be
             used for threaded applications, since the rewriting of the tables and virgin
             may not be thread-safe.
             */

            var virgin = true;
            var lenfix, distfix; // We have no pointers in JS, so keep tables separate

            function fixedtables(state) {
              /* build fixed huffman tables if first call (may not be thread safe) */
              if (virgin) {
                var sym;
                lenfix = new Buf32(512);
                distfix = new Buf32(32);
                /* literal/length table */

                sym = 0;

                while (sym < 144) {
                  state.lens[sym++] = 8;
                }

                while (sym < 256) {
                  state.lens[sym++] = 9;
                }

                while (sym < 280) {
                  state.lens[sym++] = 7;
                }

                while (sym < 288) {
                  state.lens[sym++] = 8;
                }

                inflate_table(LENS$1, state.lens, 0, 288, lenfix, 0, state.work, {
                  bits: 9
                });
                /* distance table */

                sym = 0;

                while (sym < 32) {
                  state.lens[sym++] = 5;
                }

                inflate_table(DISTS$1, state.lens, 0, 32, distfix, 0, state.work, {
                  bits: 5
                });
                /* do this just once */

                virgin = false;
              }

              state.lencode = lenfix;
              state.lenbits = 9;
              state.distcode = distfix;
              state.distbits = 5;
            }
            /*
             Update the window with the last wsize (normally 32K) bytes written before
             returning.  If window does not exist yet, create it.  This is only called
             when a window is already in use, or when output has been written during this
             inflate call, but the end of the deflate stream has not been reached yet.
             It is also called to create a window for dictionary data when a dictionary
             is loaded.

             Providing output buffers larger than 32K to inflate() should provide a speed
             advantage, since only the last 32K of output is copied to the sliding window
             upon return from inflate(), and since all distances after the first 32K of
             output will fall in the output data, making match copies simpler and faster.
             The advantage may be dependent on the size of the processor's data caches.
             */


            function updatewindow(strm, src, end, copy) {
              var dist;
              var state = strm.state;
              /* if it hasn't been done already, allocate space for the window */

              if (state.window === null) {
                state.wsize = 1 << state.wbits;
                state.wnext = 0;
                state.whave = 0;
                state.window = new Buf8(state.wsize);
              }
              /* copy state->wsize or less output bytes into the circular window */


              if (copy >= state.wsize) {
                arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                state.wnext = 0;
                state.whave = state.wsize;
              } else {
                dist = state.wsize - state.wnext;

                if (dist > copy) {
                  dist = copy;
                } //zmemcpy(state->window + state->wnext, end - copy, dist);


                arraySet(state.window, src, end - copy, dist, state.wnext);
                copy -= dist;

                if (copy) {
                  //zmemcpy(state->window, end - copy, copy);
                  arraySet(state.window, src, end - copy, copy, 0);
                  state.wnext = copy;
                  state.whave = state.wsize;
                } else {
                  state.wnext += dist;

                  if (state.wnext === state.wsize) {
                    state.wnext = 0;
                  }

                  if (state.whave < state.wsize) {
                    state.whave += dist;
                  }
                }
              }

              return 0;
            }

            function inflate(strm, flush) {
              var state;
              var input, output; // input/output buffers

              var next;
              /* next input INDEX */

              var put;
              /* next output INDEX */

              var have, left;
              /* available input and output */

              var hold;
              /* bit buffer */

              var bits;
              /* bits in bit buffer */

              var _in, _out;
              /* save starting available input and output */


              var copy;
              /* number of stored or match bytes to copy */

              var from;
              /* where to copy match bytes from */

              var from_source;
              var here = 0;
              /* current decoding table entry */

              var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
              //var last;                   /* parent table entry */

              var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

              var len;
              /* length to copy for repeats, bits to drop */

              var ret;
              /* return code */

              var hbuf = new Buf8(4);
              /* buffer for gzip header crc calculation */

              var opts;
              var n; // temporary var for NEED_BITS

              var order =
              /* permutation of code lengths */
              [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

              if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
                return Z_STREAM_ERROR$1;
              }

              state = strm.state;

              if (state.mode === TYPE$1) {
                state.mode = TYPEDO;
              }
              /* skip check */
              //--- LOAD() ---


              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits; //---

              _in = have;
              _out = left;
              ret = Z_OK$1;

              inf_leave: // goto emulation
              for (;;) {
                switch (state.mode) {
                  case HEAD:
                    if (state.wrap === 0) {
                      state.mode = TYPEDO;
                      break;
                    } //=== NEEDBITS(16);


                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    if (state.wrap & 2 && hold === 0x8b1f) {
                      /* gzip header */
                      state.check = 0
                      /*crc32(0L, Z_NULL, 0)*/
                      ; //=== CRC2(state.check, hold);

                      hbuf[0] = hold & 0xff;
                      hbuf[1] = hold >>> 8 & 0xff;
                      state.check = crc32(state.check, hbuf, 2, 0); //===//
                      //=== INITBITS();

                      hold = 0;
                      bits = 0; //===//

                      state.mode = FLAGS;
                      break;
                    }

                    state.flags = 0;
                    /* expect zlib header */

                    if (state.head) {
                      state.head.done = false;
                    }

                    if (!(state.wrap & 1) ||
                    /* check if zlib header allowed */
                    (((hold & 0xff) <<
                    /*BITS(8)*/
                    8) + (hold >> 8)) % 31) {
                      strm.msg = 'incorrect header check';
                      state.mode = BAD$1;
                      break;
                    }

                    if ((hold & 0x0f) !==
                    /*BITS(4)*/
                    Z_DEFLATED$1) {
                      strm.msg = 'unknown compression method';
                      state.mode = BAD$1;
                      break;
                    } //--- DROPBITS(4) ---//


                    hold >>>= 4;
                    bits -= 4; //---//

                    len = (hold & 0x0f) +
                    /*BITS(4)*/
                    8;

                    if (state.wbits === 0) {
                      state.wbits = len;
                    } else if (len > state.wbits) {
                      strm.msg = 'invalid window size';
                      state.mode = BAD$1;
                      break;
                    }

                    state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

                    strm.adler = state.check = 1
                    /*adler32(0L, Z_NULL, 0)*/
                    ;
                    state.mode = hold & 0x200 ? DICTID : TYPE$1; //=== INITBITS();

                    hold = 0;
                    bits = 0; //===//

                    break;

                  case FLAGS:
                    //=== NEEDBITS(16); */
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    state.flags = hold;

                    if ((state.flags & 0xff) !== Z_DEFLATED$1) {
                      strm.msg = 'unknown compression method';
                      state.mode = BAD$1;
                      break;
                    }

                    if (state.flags & 0xe000) {
                      strm.msg = 'unknown header flags set';
                      state.mode = BAD$1;
                      break;
                    }

                    if (state.head) {
                      state.head.text = hold >> 8 & 1;
                    }

                    if (state.flags & 0x0200) {
                      //=== CRC2(state.check, hold);
                      hbuf[0] = hold & 0xff;
                      hbuf[1] = hold >>> 8 & 0xff;
                      state.check = crc32(state.check, hbuf, 2, 0); //===//
                    } //=== INITBITS();


                    hold = 0;
                    bits = 0; //===//

                    state.mode = TIME;

                  /* falls through */

                  case TIME:
                    //=== NEEDBITS(32); */
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    if (state.head) {
                      state.head.time = hold;
                    }

                    if (state.flags & 0x0200) {
                      //=== CRC4(state.check, hold)
                      hbuf[0] = hold & 0xff;
                      hbuf[1] = hold >>> 8 & 0xff;
                      hbuf[2] = hold >>> 16 & 0xff;
                      hbuf[3] = hold >>> 24 & 0xff;
                      state.check = crc32(state.check, hbuf, 4, 0); //===
                    } //=== INITBITS();


                    hold = 0;
                    bits = 0; //===//

                    state.mode = OS;

                  /* falls through */

                  case OS:
                    //=== NEEDBITS(16); */
                    while (bits < 16) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    if (state.head) {
                      state.head.xflags = hold & 0xff;
                      state.head.os = hold >> 8;
                    }

                    if (state.flags & 0x0200) {
                      //=== CRC2(state.check, hold);
                      hbuf[0] = hold & 0xff;
                      hbuf[1] = hold >>> 8 & 0xff;
                      state.check = crc32(state.check, hbuf, 2, 0); //===//
                    } //=== INITBITS();


                    hold = 0;
                    bits = 0; //===//

                    state.mode = EXLEN;

                  /* falls through */

                  case EXLEN:
                    if (state.flags & 0x0400) {
                      //=== NEEDBITS(16); */
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.length = hold;

                      if (state.head) {
                        state.head.extra_len = hold;
                      }

                      if (state.flags & 0x0200) {
                        //=== CRC2(state.check, hold);
                        hbuf[0] = hold & 0xff;
                        hbuf[1] = hold >>> 8 & 0xff;
                        state.check = crc32(state.check, hbuf, 2, 0); //===//
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//
                    } else if (state.head) {
                      state.head.extra = null
                      /*Z_NULL*/
                      ;
                    }

                    state.mode = EXTRA;

                  /* falls through */

                  case EXTRA:
                    if (state.flags & 0x0400) {
                      copy = state.length;

                      if (copy > have) {
                        copy = have;
                      }

                      if (copy) {
                        if (state.head) {
                          len = state.head.extra_len - state.length;

                          if (!state.head.extra) {
                            // Use untyped array for more conveniend processing later
                            state.head.extra = new Array(state.head.extra_len);
                          }

                          arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                          // - no need for additional size check
                          copy,
                          /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                          len); //zmemcpy(state.head.extra + len, next,
                          //        len + copy > state.head.extra_max ?
                          //        state.head.extra_max - len : copy);
                        }

                        if (state.flags & 0x0200) {
                          state.check = crc32(state.check, input, copy, next);
                        }

                        have -= copy;
                        next += copy;
                        state.length -= copy;
                      }

                      if (state.length) {
                        break inf_leave;
                      }
                    }

                    state.length = 0;
                    state.mode = NAME;

                  /* falls through */

                  case NAME:
                    if (state.flags & 0x0800) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      copy = 0;

                      do {
                        // TODO: 2 or 1 bytes?
                        len = input[next + copy++];
                        /* use constant limit because in js we should not preallocate memory */

                        if (state.head && len && state.length < 65536
                        /*state.head.name_max*/
                        ) {
                          state.head.name += String.fromCharCode(len);
                        }
                      } while (len && copy < have);

                      if (state.flags & 0x0200) {
                        state.check = crc32(state.check, input, copy, next);
                      }

                      have -= copy;
                      next += copy;

                      if (len) {
                        break inf_leave;
                      }
                    } else if (state.head) {
                      state.head.name = null;
                    }

                    state.length = 0;
                    state.mode = COMMENT;

                  /* falls through */

                  case COMMENT:
                    if (state.flags & 0x1000) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      copy = 0;

                      do {
                        len = input[next + copy++];
                        /* use constant limit because in js we should not preallocate memory */

                        if (state.head && len && state.length < 65536
                        /*state.head.comm_max*/
                        ) {
                          state.head.comment += String.fromCharCode(len);
                        }
                      } while (len && copy < have);

                      if (state.flags & 0x0200) {
                        state.check = crc32(state.check, input, copy, next);
                      }

                      have -= copy;
                      next += copy;

                      if (len) {
                        break inf_leave;
                      }
                    } else if (state.head) {
                      state.head.comment = null;
                    }

                    state.mode = HCRC;

                  /* falls through */

                  case HCRC:
                    if (state.flags & 0x0200) {
                      //=== NEEDBITS(16); */
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if (hold !== (state.check & 0xffff)) {
                        strm.msg = 'header crc mismatch';
                        state.mode = BAD$1;
                        break;
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//
                    }

                    if (state.head) {
                      state.head.hcrc = state.flags >> 9 & 1;
                      state.head.done = true;
                    }

                    strm.adler = state.check = 0;
                    state.mode = TYPE$1;
                    break;

                  case DICTID:
                    //=== NEEDBITS(32); */
                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    strm.adler = state.check = zswap32(hold); //=== INITBITS();

                    hold = 0;
                    bits = 0; //===//

                    state.mode = DICT;

                  /* falls through */

                  case DICT:
                    if (state.havedict === 0) {
                      //--- RESTORE() ---
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state.hold = hold;
                      state.bits = bits; //---

                      return Z_NEED_DICT;
                    }

                    strm.adler = state.check = 1
                    /*adler32(0L, Z_NULL, 0)*/
                    ;
                    state.mode = TYPE$1;

                  /* falls through */

                  case TYPE$1:
                    if (flush === Z_BLOCK$1 || flush === Z_TREES) {
                      break inf_leave;
                    }

                  /* falls through */

                  case TYPEDO:
                    if (state.last) {
                      //--- BYTEBITS() ---//
                      hold >>>= bits & 7;
                      bits -= bits & 7; //---//

                      state.mode = CHECK;
                      break;
                    } //=== NEEDBITS(3); */


                    while (bits < 3) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    state.last = hold & 0x01
                    /*BITS(1)*/
                    ; //--- DROPBITS(1) ---//

                    hold >>>= 1;
                    bits -= 1; //---//

                    switch (hold & 0x03) {
                      /*BITS(2)*/
                      case 0:
                        /* stored block */
                        //Tracev((stderr, "inflate:     stored block%s\n",
                        //        state.last ? " (last)" : ""));
                        state.mode = STORED;
                        break;

                      case 1:
                        /* fixed block */
                        fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                        //        state.last ? " (last)" : ""));

                        state.mode = LEN_;
                        /* decode codes */

                        if (flush === Z_TREES) {
                          //--- DROPBITS(2) ---//
                          hold >>>= 2;
                          bits -= 2; //---//

                          break inf_leave;
                        }

                        break;

                      case 2:
                        /* dynamic block */
                        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                        //        state.last ? " (last)" : ""));
                        state.mode = TABLE;
                        break;

                      case 3:
                        strm.msg = 'invalid block type';
                        state.mode = BAD$1;
                    } //--- DROPBITS(2) ---//


                    hold >>>= 2;
                    bits -= 2; //---//

                    break;

                  case STORED:
                    //--- BYTEBITS() ---// /* go to byte boundary */
                    hold >>>= bits & 7;
                    bits -= bits & 7; //---//
                    //=== NEEDBITS(32); */

                    while (bits < 32) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                      strm.msg = 'invalid stored block lengths';
                      state.mode = BAD$1;
                      break;
                    }

                    state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
                    //        state.length));
                    //=== INITBITS();

                    hold = 0;
                    bits = 0; //===//

                    state.mode = COPY_;

                    if (flush === Z_TREES) {
                      break inf_leave;
                    }

                  /* falls through */

                  case COPY_:
                    state.mode = COPY;

                  /* falls through */

                  case COPY:
                    copy = state.length;

                    if (copy) {
                      if (copy > have) {
                        copy = have;
                      }

                      if (copy > left) {
                        copy = left;
                      }

                      if (copy === 0) {
                        break inf_leave;
                      } //--- zmemcpy(put, next, copy); ---


                      arraySet(output, input, next, copy, put); //---//

                      have -= copy;
                      next += copy;
                      left -= copy;
                      put += copy;
                      state.length -= copy;
                      break;
                    } //Tracev((stderr, "inflate:       stored end\n"));


                    state.mode = TYPE$1;
                    break;

                  case TABLE:
                    //=== NEEDBITS(14); */
                    while (bits < 14) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//


                    state.nlen = (hold & 0x1f) +
                    /*BITS(5)*/
                    257; //--- DROPBITS(5) ---//

                    hold >>>= 5;
                    bits -= 5; //---//

                    state.ndist = (hold & 0x1f) +
                    /*BITS(5)*/
                    1; //--- DROPBITS(5) ---//

                    hold >>>= 5;
                    bits -= 5; //---//

                    state.ncode = (hold & 0x0f) +
                    /*BITS(4)*/
                    4; //--- DROPBITS(4) ---//

                    hold >>>= 4;
                    bits -= 4; //---//
                    //#ifndef PKZIP_BUG_WORKAROUND

                    if (state.nlen > 286 || state.ndist > 30) {
                      strm.msg = 'too many length or distance symbols';
                      state.mode = BAD$1;
                      break;
                    } //#endif
                    //Tracev((stderr, "inflate:       table sizes ok\n"));


                    state.have = 0;
                    state.mode = LENLENS;

                  /* falls through */

                  case LENLENS:
                    while (state.have < state.ncode) {
                      //=== NEEDBITS(3);
                      while (bits < 3) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                      //--- DROPBITS(3) ---//

                      hold >>>= 3;
                      bits -= 3; //---//
                    }

                    while (state.have < 19) {
                      state.lens[order[state.have++]] = 0;
                    } // We have separate tables & no pointers. 2 commented lines below not needed.
                    //state.next = state.codes;
                    //state.lencode = state.next;
                    // Switch to use dynamic table


                    state.lencode = state.lendyn;
                    state.lenbits = 7;
                    opts = {
                      bits: state.lenbits
                    };
                    ret = inflate_table(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                    state.lenbits = opts.bits;

                    if (ret) {
                      strm.msg = 'invalid code lengths set';
                      state.mode = BAD$1;
                      break;
                    } //Tracev((stderr, "inflate:       code lengths ok\n"));


                    state.have = 0;
                    state.mode = CODELENS;

                  /* falls through */

                  case CODELENS:
                    while (state.have < state.nlen + state.ndist) {
                      for (;;) {
                        here = state.lencode[hold & (1 << state.lenbits) - 1];
                        /*BITS(state.lenbits)*/

                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 0xff;
                        here_val = here & 0xffff;

                        if (here_bits <= bits) {
                          break;
                        } //--- PULLBYTE() ---//


                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8; //---//
                      }

                      if (here_val < 16) {
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits; //---//

                        state.lens[state.have++] = here_val;
                      } else {
                        if (here_val === 16) {
                          //=== NEEDBITS(here.bits + 2);
                          n = here_bits + 2;

                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }

                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          } //===//
                          //--- DROPBITS(here.bits) ---//


                          hold >>>= here_bits;
                          bits -= here_bits; //---//

                          if (state.have === 0) {
                            strm.msg = 'invalid bit length repeat';
                            state.mode = BAD$1;
                            break;
                          }

                          len = state.lens[state.have - 1];
                          copy = 3 + (hold & 0x03); //BITS(2);
                          //--- DROPBITS(2) ---//

                          hold >>>= 2;
                          bits -= 2; //---//
                        } else if (here_val === 17) {
                          //=== NEEDBITS(here.bits + 3);
                          n = here_bits + 3;

                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }

                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          } //===//
                          //--- DROPBITS(here.bits) ---//


                          hold >>>= here_bits;
                          bits -= here_bits; //---//

                          len = 0;
                          copy = 3 + (hold & 0x07); //BITS(3);
                          //--- DROPBITS(3) ---//

                          hold >>>= 3;
                          bits -= 3; //---//
                        } else {
                          //=== NEEDBITS(here.bits + 7);
                          n = here_bits + 7;

                          while (bits < n) {
                            if (have === 0) {
                              break inf_leave;
                            }

                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                          } //===//
                          //--- DROPBITS(here.bits) ---//


                          hold >>>= here_bits;
                          bits -= here_bits; //---//

                          len = 0;
                          copy = 11 + (hold & 0x7f); //BITS(7);
                          //--- DROPBITS(7) ---//

                          hold >>>= 7;
                          bits -= 7; //---//
                        }

                        if (state.have + copy > state.nlen + state.ndist) {
                          strm.msg = 'invalid bit length repeat';
                          state.mode = BAD$1;
                          break;
                        }

                        while (copy--) {
                          state.lens[state.have++] = len;
                        }
                      }
                    }
                    /* handle error breaks in while */


                    if (state.mode === BAD$1) {
                      break;
                    }
                    /* check for end-of-block code (better have one) */


                    if (state.lens[256] === 0) {
                      strm.msg = 'invalid code -- missing end-of-block';
                      state.mode = BAD$1;
                      break;
                    }
                    /* build code tables -- note: do not change the lenbits or distbits
                       values here (9 and 6) without reading the comments in inftrees.h
                       concerning the ENOUGH constants, which depend on those values */


                    state.lenbits = 9;
                    opts = {
                      bits: state.lenbits
                    };
                    ret = inflate_table(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
                    // state.next_index = opts.table_index;

                    state.lenbits = opts.bits; // state.lencode = state.next;

                    if (ret) {
                      strm.msg = 'invalid literal/lengths set';
                      state.mode = BAD$1;
                      break;
                    }

                    state.distbits = 6; //state.distcode.copy(state.codes);
                    // Switch to use dynamic table

                    state.distcode = state.distdyn;
                    opts = {
                      bits: state.distbits
                    };
                    ret = inflate_table(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
                    // state.next_index = opts.table_index;

                    state.distbits = opts.bits; // state.distcode = state.next;

                    if (ret) {
                      strm.msg = 'invalid distances set';
                      state.mode = BAD$1;
                      break;
                    } //Tracev((stderr, 'inflate:       codes ok\n'));


                    state.mode = LEN_;

                    if (flush === Z_TREES) {
                      break inf_leave;
                    }

                  /* falls through */

                  case LEN_:
                    state.mode = LEN;

                  /* falls through */

                  case LEN:
                    if (have >= 6 && left >= 258) {
                      //--- RESTORE() ---
                      strm.next_out = put;
                      strm.avail_out = left;
                      strm.next_in = next;
                      strm.avail_in = have;
                      state.hold = hold;
                      state.bits = bits; //---

                      inflate_fast(strm, _out); //--- LOAD() ---

                      put = strm.next_out;
                      output = strm.output;
                      left = strm.avail_out;
                      next = strm.next_in;
                      input = strm.input;
                      have = strm.avail_in;
                      hold = state.hold;
                      bits = state.bits; //---

                      if (state.mode === TYPE$1) {
                        state.back = -1;
                      }

                      break;
                    }

                    state.back = 0;

                    for (;;) {
                      here = state.lencode[hold & (1 << state.lenbits) - 1];
                      /*BITS(state.lenbits)*/

                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 0xff;
                      here_val = here & 0xffff;

                      if (here_bits <= bits) {
                        break;
                      } //--- PULLBYTE() ---//


                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8; //---//
                    }

                    if (here_op && (here_op & 0xf0) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;

                      for (;;) {
                        here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                        /*BITS(last.bits + last.op)*/
                        last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 0xff;
                        here_val = here & 0xffff;

                        if (last_bits + here_bits <= bits) {
                          break;
                        } //--- PULLBYTE() ---//


                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8; //---//
                      } //--- DROPBITS(last.bits) ---//


                      hold >>>= last_bits;
                      bits -= last_bits; //---//

                      state.back += last_bits;
                    } //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    state.back += here_bits;
                    state.length = here_val;

                    if (here_op === 0) {
                      //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                      //        "inflate:         literal '%c'\n" :
                      //        "inflate:         literal 0x%02x\n", here.val));
                      state.mode = LIT;
                      break;
                    }

                    if (here_op & 32) {
                      //Tracevv((stderr, "inflate:         end of block\n"));
                      state.back = -1;
                      state.mode = TYPE$1;
                      break;
                    }

                    if (here_op & 64) {
                      strm.msg = 'invalid literal/length code';
                      state.mode = BAD$1;
                      break;
                    }

                    state.extra = here_op & 15;
                    state.mode = LENEXT;

                  /* falls through */

                  case LENEXT:
                    if (state.extra) {
                      //=== NEEDBITS(state.extra);
                      n = state.extra;

                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.length += hold & (1 << state.extra) - 1
                      /*BITS(state.extra)*/
                      ; //--- DROPBITS(state.extra) ---//

                      hold >>>= state.extra;
                      bits -= state.extra; //---//

                      state.back += state.extra;
                    } //Tracevv((stderr, "inflate:         length %u\n", state.length));


                    state.was = state.length;
                    state.mode = DIST;

                  /* falls through */

                  case DIST:
                    for (;;) {
                      here = state.distcode[hold & (1 << state.distbits) - 1];
                      /*BITS(state.distbits)*/

                      here_bits = here >>> 24;
                      here_op = here >>> 16 & 0xff;
                      here_val = here & 0xffff;

                      if (here_bits <= bits) {
                        break;
                      } //--- PULLBYTE() ---//


                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8; //---//
                    }

                    if ((here_op & 0xf0) === 0) {
                      last_bits = here_bits;
                      last_op = here_op;
                      last_val = here_val;

                      for (;;) {
                        here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                        /*BITS(last.bits + last.op)*/
                        last_bits)];
                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 0xff;
                        here_val = here & 0xffff;

                        if (last_bits + here_bits <= bits) {
                          break;
                        } //--- PULLBYTE() ---//


                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8; //---//
                      } //--- DROPBITS(last.bits) ---//


                      hold >>>= last_bits;
                      bits -= last_bits; //---//

                      state.back += last_bits;
                    } //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    state.back += here_bits;

                    if (here_op & 64) {
                      strm.msg = 'invalid distance code';
                      state.mode = BAD$1;
                      break;
                    }

                    state.offset = here_val;
                    state.extra = here_op & 15;
                    state.mode = DISTEXT;

                  /* falls through */

                  case DISTEXT:
                    if (state.extra) {
                      //=== NEEDBITS(state.extra);
                      n = state.extra;

                      while (bits < n) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.offset += hold & (1 << state.extra) - 1
                      /*BITS(state.extra)*/
                      ; //--- DROPBITS(state.extra) ---//

                      hold >>>= state.extra;
                      bits -= state.extra; //---//

                      state.back += state.extra;
                    } //#ifdef INFLATE_STRICT


                    if (state.offset > state.dmax) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD$1;
                      break;
                    } //#endif
                    //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


                    state.mode = MATCH;

                  /* falls through */

                  case MATCH:
                    if (left === 0) {
                      break inf_leave;
                    }

                    copy = _out - left;

                    if (state.offset > copy) {
                      /* copy from window */
                      copy = state.offset - copy;

                      if (copy > state.whave) {
                        if (state.sane) {
                          strm.msg = 'invalid distance too far back';
                          state.mode = BAD$1;
                          break;
                        } // (!) This block is disabled in zlib defailts,
                        // don't enable it for binary compatibility
                        //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                        //          Trace((stderr, "inflate.c too far\n"));
                        //          copy -= state.whave;
                        //          if (copy > state.length) { copy = state.length; }
                        //          if (copy > left) { copy = left; }
                        //          left -= copy;
                        //          state.length -= copy;
                        //          do {
                        //            output[put++] = 0;
                        //          } while (--copy);
                        //          if (state.length === 0) { state.mode = LEN; }
                        //          break;
                        //#endif

                      }

                      if (copy > state.wnext) {
                        copy -= state.wnext;
                        from = state.wsize - copy;
                      } else {
                        from = state.wnext - copy;
                      }

                      if (copy > state.length) {
                        copy = state.length;
                      }

                      from_source = state.window;
                    } else {
                      /* copy from output */
                      from_source = output;
                      from = put - state.offset;
                      copy = state.length;
                    }

                    if (copy > left) {
                      copy = left;
                    }

                    left -= copy;
                    state.length -= copy;

                    do {
                      output[put++] = from_source[from++];
                    } while (--copy);

                    if (state.length === 0) {
                      state.mode = LEN;
                    }

                    break;

                  case LIT:
                    if (left === 0) {
                      break inf_leave;
                    }

                    output[put++] = state.length;
                    left--;
                    state.mode = LEN;
                    break;

                  case CHECK:
                    if (state.wrap) {
                      //=== NEEDBITS(32);
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--; // Use '|' insdead of '+' to make sure that result is signed

                        hold |= input[next++] << bits;
                        bits += 8;
                      } //===//


                      _out -= left;
                      strm.total_out += _out;
                      state.total += _out;

                      if (_out) {
                        strm.adler = state.check =
                        /*UPDATE(state.check, put - _out, _out);*/
                        state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                      }

                      _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

                      if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                        strm.msg = 'incorrect data check';
                        state.mode = BAD$1;
                        break;
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//
                      //Tracev((stderr, "inflate:   check matches trailer\n"));
                    }

                    state.mode = LENGTH;

                  /* falls through */

                  case LENGTH:
                    if (state.wrap && state.flags) {
                      //=== NEEDBITS(32);
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if (hold !== (state.total & 0xffffffff)) {
                        strm.msg = 'incorrect length check';
                        state.mode = BAD$1;
                        break;
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//
                      //Tracev((stderr, "inflate:   length matches trailer\n"));
                    }

                    state.mode = DONE;

                  /* falls through */

                  case DONE:
                    ret = Z_STREAM_END$1;
                    break inf_leave;

                  case BAD$1:
                    ret = Z_DATA_ERROR$1;
                    break inf_leave;

                  case MEM:
                    return Z_MEM_ERROR;

                  case SYNC:
                  /* falls through */

                  default:
                    return Z_STREAM_ERROR$1;
                }
              } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

              /*
                 Return from inflate(), updating the total counts and the check value.
                 If there was no progress during the inflate() call, return a buffer
                 error.  Call updatewindow() to create and/or update the window state.
                 Note: a memory error from inflate() is non-recoverable.
               */
              //--- RESTORE() ---


              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits; //---

              if (state.wsize || _out !== strm.avail_out && state.mode < BAD$1 && (state.mode < CHECK || flush !== Z_FINISH$1)) {
                if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
              }

              _in -= strm.avail_in;
              _out -= strm.avail_out;
              strm.total_in += _in;
              strm.total_out += _out;
              state.total += _out;

              if (state.wrap && _out) {
                strm.adler = state.check =
                /*UPDATE(state.check, strm.next_out - _out, _out);*/
                state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
              }

              strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE$1 ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

              if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {
                ret = Z_BUF_ERROR$1;
              }

              return ret;
            }
            function inflateEnd(strm) {
              if (!strm || !strm.state
              /*|| strm->zfree == (free_func)0*/
              ) {
                  return Z_STREAM_ERROR$1;
                }

              var state = strm.state;

              if (state.window) {
                state.window = null;
              }

              strm.state = null;
              return Z_OK$1;
            }
            /* Not implemented
            exports.inflateCopy = inflateCopy;
            exports.inflateGetDictionary = inflateGetDictionary;
            exports.inflateMark = inflateMark;
            exports.inflatePrime = inflatePrime;
            exports.inflateSync = inflateSync;
            exports.inflateSyncPoint = inflateSyncPoint;
            exports.inflateUndermine = inflateUndermine;
            */

            // zlib modes

            var NONE = 0;
            var DEFLATE = 1;
            var INFLATE = 2;
            var GZIP = 3;
            var GUNZIP = 4;
            var DEFLATERAW = 5;
            var INFLATERAW = 6;
            var UNZIP = 7;
            var Z_NO_FLUSH$1 = 0,
                Z_PARTIAL_FLUSH$1 = 1,
                Z_SYNC_FLUSH = 2,
                Z_FULL_FLUSH$1 = 3,
                Z_FINISH$2 = 4,
                Z_BLOCK$2 = 5,
                Z_TREES$1 = 6,

            /* Return codes for the compression/decompression functions. Negative values
            * are errors, positive values are used for special but normal events.
            */
            Z_OK$2 = 0,
                Z_STREAM_END$2 = 1,
                Z_NEED_DICT$1 = 2,
                Z_ERRNO = -1,
                Z_STREAM_ERROR$2 = -2,
                Z_DATA_ERROR$2 = -3,
                //Z_MEM_ERROR:     -4,
            Z_BUF_ERROR$2 = -5,
                //Z_VERSION_ERROR: -6,

            /* compression levels */
            Z_NO_COMPRESSION = 0,
                Z_BEST_SPEED = 1,
                Z_BEST_COMPRESSION = 9,
                Z_DEFAULT_COMPRESSION$1 = -1,
                Z_FILTERED$1 = 1,
                Z_HUFFMAN_ONLY$1 = 2,
                Z_RLE$1 = 3,
                Z_FIXED$2 = 4,
                Z_DEFAULT_STRATEGY = 0,

            /* Possible values of the data_type field (though see inflate()) */
            Z_BINARY$1 = 0,
                Z_TEXT$1 = 1,
                //Z_ASCII:                1, // = Z_TEXT (deprecated)
            Z_UNKNOWN$2 = 2,

            /* The deflate compression method */
            Z_DEFLATED$2 = 8;
            function Zlib(mode) {
              if (mode < DEFLATE || mode > UNZIP) throw new TypeError('Bad argument');
              this.mode = mode;
              this.init_done = false;
              this.write_in_progress = false;
              this.pending_close = false;
              this.windowBits = 0;
              this.level = 0;
              this.memLevel = 0;
              this.strategy = 0;
              this.dictionary = null;
            }

            Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
              this.windowBits = windowBits;
              this.level = level;
              this.memLevel = memLevel;
              this.strategy = strategy; // dictionary not supported.

              if (this.mode === GZIP || this.mode === GUNZIP) this.windowBits += 16;
              if (this.mode === UNZIP) this.windowBits += 32;
              if (this.mode === DEFLATERAW || this.mode === INFLATERAW) this.windowBits = -this.windowBits;
              this.strm = new ZStream();
              var status;

              switch (this.mode) {
                case DEFLATE:
                case GZIP:
                case DEFLATERAW:
                  status = deflateInit2(this.strm, this.level, Z_DEFLATED$2, this.windowBits, this.memLevel, this.strategy);
                  break;

                case INFLATE:
                case GUNZIP:
                case INFLATERAW:
                case UNZIP:
                  status = inflateInit2(this.strm, this.windowBits);
                  break;

                default:
                  throw new Error('Unknown mode ' + this.mode);
              }

              if (status !== Z_OK$2) {
                this._error(status);

                return;
              }

              this.write_in_progress = false;
              this.init_done = true;
            };

            Zlib.prototype.params = function () {
              throw new Error('deflateParams Not supported');
            };

            Zlib.prototype._writeCheck = function () {
              if (!this.init_done) throw new Error('write before init');
              if (this.mode === NONE) throw new Error('already finalized');
              if (this.write_in_progress) throw new Error('write already in progress');
              if (this.pending_close) throw new Error('close is pending');
            };

            Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
              this._writeCheck();

              this.write_in_progress = true;
              var self = this;
              nextTick(function () {
                self.write_in_progress = false;

                var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);

                self.callback(res[0], res[1]);
                if (self.pending_close) self.close();
              });
              return this;
            }; // set method for Node buffers, used by pako


            function bufferSet(data, offset) {
              for (var i = 0; i < data.length; i++) {
                this[offset + i] = data[i];
              }
            }

            Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
              this._writeCheck();

              return this._write(flush, input, in_off, in_len, out, out_off, out_len);
            };

            Zlib.prototype._write = function (flush, input, in_off, in_len, out, out_off, out_len) {
              this.write_in_progress = true;

              if (flush !== Z_NO_FLUSH$1 && flush !== Z_PARTIAL_FLUSH$1 && flush !== Z_SYNC_FLUSH && flush !== Z_FULL_FLUSH$1 && flush !== Z_FINISH$2 && flush !== Z_BLOCK$2) {
                throw new Error('Invalid flush value');
              }

              if (input == null) {
                input = new Buffer(0);
                in_len = 0;
                in_off = 0;
              }

              if (out._set) out.set = out._set;else out.set = bufferSet;
              var strm = this.strm;
              strm.avail_in = in_len;
              strm.input = input;
              strm.next_in = in_off;
              strm.avail_out = out_len;
              strm.output = out;
              strm.next_out = out_off;
              var status;

              switch (this.mode) {
                case DEFLATE:
                case GZIP:
                case DEFLATERAW:
                  status = deflate(strm, flush);
                  break;

                case UNZIP:
                case INFLATE:
                case GUNZIP:
                case INFLATERAW:
                  status = inflate(strm, flush);
                  break;

                default:
                  throw new Error('Unknown mode ' + this.mode);
              }

              if (status !== Z_STREAM_END$2 && status !== Z_OK$2) {
                this._error(status);
              }

              this.write_in_progress = false;
              return [strm.avail_in, strm.avail_out];
            };

            Zlib.prototype.close = function () {
              if (this.write_in_progress) {
                this.pending_close = true;
                return;
              }

              this.pending_close = false;

              if (this.mode === DEFLATE || this.mode === GZIP || this.mode === DEFLATERAW) {
                deflateEnd(this.strm);
              } else {
                inflateEnd(this.strm);
              }

              this.mode = NONE;
            };

            var status;

            Zlib.prototype.reset = function () {
              switch (this.mode) {
                case DEFLATE:
                case DEFLATERAW:
                  status = deflateReset(this.strm);
                  break;

                case INFLATE:
                case INFLATERAW:
                  status = inflateReset(this.strm);
                  break;
              }

              if (status !== Z_OK$2) {
                this._error(status);
              }
            };

            Zlib.prototype._error = function (status) {
              this.onerror(msg[status] + ': ' + this.strm.msg, status);
              this.write_in_progress = false;
              if (this.pending_close) this.close();
            };

            var _binding = /*#__PURE__*/Object.freeze({
                        NONE: NONE,
                        DEFLATE: DEFLATE,
                        INFLATE: INFLATE,
                        GZIP: GZIP,
                        GUNZIP: GUNZIP,
                        DEFLATERAW: DEFLATERAW,
                        INFLATERAW: INFLATERAW,
                        UNZIP: UNZIP,
                        Z_NO_FLUSH: Z_NO_FLUSH$1,
                        Z_PARTIAL_FLUSH: Z_PARTIAL_FLUSH$1,
                        Z_SYNC_FLUSH: Z_SYNC_FLUSH,
                        Z_FULL_FLUSH: Z_FULL_FLUSH$1,
                        Z_FINISH: Z_FINISH$2,
                        Z_BLOCK: Z_BLOCK$2,
                        Z_TREES: Z_TREES$1,
                        Z_OK: Z_OK$2,
                        Z_STREAM_END: Z_STREAM_END$2,
                        Z_NEED_DICT: Z_NEED_DICT$1,
                        Z_ERRNO: Z_ERRNO,
                        Z_STREAM_ERROR: Z_STREAM_ERROR$2,
                        Z_DATA_ERROR: Z_DATA_ERROR$2,
                        Z_BUF_ERROR: Z_BUF_ERROR$2,
                        Z_NO_COMPRESSION: Z_NO_COMPRESSION,
                        Z_BEST_SPEED: Z_BEST_SPEED,
                        Z_BEST_COMPRESSION: Z_BEST_COMPRESSION,
                        Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
                        Z_FILTERED: Z_FILTERED$1,
                        Z_HUFFMAN_ONLY: Z_HUFFMAN_ONLY$1,
                        Z_RLE: Z_RLE$1,
                        Z_FIXED: Z_FIXED$2,
                        Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY,
                        Z_BINARY: Z_BINARY$1,
                        Z_TEXT: Z_TEXT$1,
                        Z_UNKNOWN: Z_UNKNOWN$2,
                        Z_DEFLATED: Z_DEFLATED$2,
                        Zlib: Zlib
            });

            function assert(a, msg) {
              if (!a) {
                throw new Error(msg);
              }
            }

            var binding$1 = {};
            Object.keys(_binding).forEach(function (key) {
              binding$1[key] = _binding[key];
            }); // zlib doesn't provide these, so kludge them in following the same
            // const naming scheme zlib uses.

            binding$1.Z_MIN_WINDOWBITS = 8;
            binding$1.Z_MAX_WINDOWBITS = 15;
            binding$1.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
            // technically it could work with as few as 8, but even 64 bytes
            // is absurdly low.  Usually a MB or more is best.

            binding$1.Z_MIN_CHUNK = 64;
            binding$1.Z_MAX_CHUNK = Infinity;
            binding$1.Z_DEFAULT_CHUNK = 16 * 1024;
            binding$1.Z_MIN_MEMLEVEL = 1;
            binding$1.Z_MAX_MEMLEVEL = 9;
            binding$1.Z_DEFAULT_MEMLEVEL = 8;
            binding$1.Z_MIN_LEVEL = -1;
            binding$1.Z_MAX_LEVEL = 9;
            binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION; // translation table for return codes.

            var codes$1 = {
              Z_OK: binding$1.Z_OK,
              Z_STREAM_END: binding$1.Z_STREAM_END,
              Z_NEED_DICT: binding$1.Z_NEED_DICT,
              Z_ERRNO: binding$1.Z_ERRNO,
              Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
              Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
              Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
              Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
              Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
            };
            Object.keys(codes$1).forEach(function (k) {
              codes$1[codes$1[k]] = k;
            });
            function createDeflate(o) {
              return new Deflate(o);
            }
            function createInflate(o) {
              return new Inflate(o);
            }
            function createDeflateRaw(o) {
              return new DeflateRaw(o);
            }
            function createInflateRaw(o) {
              return new InflateRaw(o);
            }
            function createGzip(o) {
              return new Gzip(o);
            }
            function createGunzip(o) {
              return new Gunzip(o);
            }
            function createUnzip(o) {
              return new Unzip(o);
            } // Convenience methods.
            // compress/decompress a string or buffer in one step.

            function deflate$1(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new Deflate(opts), buffer, callback);
            }
            function deflateSync(buffer, opts) {
              return zlibBufferSync(new Deflate(opts), buffer);
            }
            function gzip(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new Gzip(opts), buffer, callback);
            }
            function gzipSync(buffer, opts) {
              return zlibBufferSync(new Gzip(opts), buffer);
            }
            function deflateRaw(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new DeflateRaw(opts), buffer, callback);
            }
            function deflateRawSync(buffer, opts) {
              return zlibBufferSync(new DeflateRaw(opts), buffer);
            }
            function unzip(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new Unzip(opts), buffer, callback);
            }
            function unzipSync(buffer, opts) {
              return zlibBufferSync(new Unzip(opts), buffer);
            }
            function inflate$1(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new Inflate(opts), buffer, callback);
            }
            function inflateSync(buffer, opts) {
              return zlibBufferSync(new Inflate(opts), buffer);
            }
            function gunzip(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new Gunzip(opts), buffer, callback);
            }
            function gunzipSync(buffer, opts) {
              return zlibBufferSync(new Gunzip(opts), buffer);
            }
            function inflateRaw(buffer, opts, callback) {
              if (typeof opts === 'function') {
                callback = opts;
                opts = {};
              }

              return zlibBuffer(new InflateRaw(opts), buffer, callback);
            }
            function inflateRawSync(buffer, opts) {
              return zlibBufferSync(new InflateRaw(opts), buffer);
            }

            function zlibBuffer(engine, buffer, callback) {
              var buffers = [];
              var nread = 0;
              engine.on('error', onError);
              engine.on('end', onEnd);
              engine.end(buffer);
              flow();

              function flow() {
                var chunk;

                while (null !== (chunk = engine.read())) {
                  buffers.push(chunk);
                  nread += chunk.length;
                }

                engine.once('readable', flow);
              }

              function onError(err) {
                engine.removeListener('end', onEnd);
                engine.removeListener('readable', flow);
                callback(err);
              }

              function onEnd() {
                var buf = Buffer.concat(buffers, nread);
                buffers = [];
                callback(null, buf);
                engine.close();
              }
            }

            function zlibBufferSync(engine, buffer) {
              if (typeof buffer === 'string') buffer = new Buffer(buffer);
              if (!isBuffer(buffer)) throw new TypeError('Not a string or buffer');
              var flushFlag = binding$1.Z_FINISH;
              return engine._processChunk(buffer, flushFlag);
            } // generic zlib
            // minimal 2-byte header


            function Deflate(opts) {
              if (!(this instanceof Deflate)) return new Deflate(opts);
              Zlib$1.call(this, opts, binding$1.DEFLATE);
            }
            function Inflate(opts) {
              if (!(this instanceof Inflate)) return new Inflate(opts);
              Zlib$1.call(this, opts, binding$1.INFLATE);
            } // gzip - bigger header, same deflate compression

            function Gzip(opts) {
              if (!(this instanceof Gzip)) return new Gzip(opts);
              Zlib$1.call(this, opts, binding$1.GZIP);
            }
            function Gunzip(opts) {
              if (!(this instanceof Gunzip)) return new Gunzip(opts);
              Zlib$1.call(this, opts, binding$1.GUNZIP);
            } // raw - no header

            function DeflateRaw(opts) {
              if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
              Zlib$1.call(this, opts, binding$1.DEFLATERAW);
            }
            function InflateRaw(opts) {
              if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
              Zlib$1.call(this, opts, binding$1.INFLATERAW);
            } // auto-detect header.

            function Unzip(opts) {
              if (!(this instanceof Unzip)) return new Unzip(opts);
              Zlib$1.call(this, opts, binding$1.UNZIP);
            } // the Zlib class they all inherit from
            // This thing manages the queue of requests, and returns
            // true or false if there is anything in the queue when
            // you call the .write() method.

            function Zlib$1(opts, mode) {
              this._opts = opts = opts || {};
              this._chunkSize = opts.chunkSize || binding$1.Z_DEFAULT_CHUNK;
              Transform.call(this, opts);

              if (opts.flush) {
                if (opts.flush !== binding$1.Z_NO_FLUSH && opts.flush !== binding$1.Z_PARTIAL_FLUSH && opts.flush !== binding$1.Z_SYNC_FLUSH && opts.flush !== binding$1.Z_FULL_FLUSH && opts.flush !== binding$1.Z_FINISH && opts.flush !== binding$1.Z_BLOCK) {
                  throw new Error('Invalid flush flag: ' + opts.flush);
                }
              }

              this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;

              if (opts.chunkSize) {
                if (opts.chunkSize < binding$1.Z_MIN_CHUNK || opts.chunkSize > binding$1.Z_MAX_CHUNK) {
                  throw new Error('Invalid chunk size: ' + opts.chunkSize);
                }
              }

              if (opts.windowBits) {
                if (opts.windowBits < binding$1.Z_MIN_WINDOWBITS || opts.windowBits > binding$1.Z_MAX_WINDOWBITS) {
                  throw new Error('Invalid windowBits: ' + opts.windowBits);
                }
              }

              if (opts.level) {
                if (opts.level < binding$1.Z_MIN_LEVEL || opts.level > binding$1.Z_MAX_LEVEL) {
                  throw new Error('Invalid compression level: ' + opts.level);
                }
              }

              if (opts.memLevel) {
                if (opts.memLevel < binding$1.Z_MIN_MEMLEVEL || opts.memLevel > binding$1.Z_MAX_MEMLEVEL) {
                  throw new Error('Invalid memLevel: ' + opts.memLevel);
                }
              }

              if (opts.strategy) {
                if (opts.strategy != binding$1.Z_FILTERED && opts.strategy != binding$1.Z_HUFFMAN_ONLY && opts.strategy != binding$1.Z_RLE && opts.strategy != binding$1.Z_FIXED && opts.strategy != binding$1.Z_DEFAULT_STRATEGY) {
                  throw new Error('Invalid strategy: ' + opts.strategy);
                }
              }

              if (opts.dictionary) {
                if (!isBuffer(opts.dictionary)) {
                  throw new Error('Invalid dictionary: it should be a Buffer instance');
                }
              }

              this._binding = new binding$1.Zlib(mode);
              var self = this;
              this._hadError = false;

              this._binding.onerror = function (message, errno) {
                // there is no way to cleanly recover.
                // continuing only obscures problems.
                self._binding = null;
                self._hadError = true;
                var error = new Error(message);
                error.errno = errno;
                error.code = binding$1.codes[errno];
                self.emit('error', error);
              };

              var level = binding$1.Z_DEFAULT_COMPRESSION;
              if (typeof opts.level === 'number') level = opts.level;
              var strategy = binding$1.Z_DEFAULT_STRATEGY;
              if (typeof opts.strategy === 'number') strategy = opts.strategy;

              this._binding.init(opts.windowBits || binding$1.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || binding$1.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

              this._buffer = new Buffer(this._chunkSize);
              this._offset = 0;
              this._closed = false;
              this._level = level;
              this._strategy = strategy;
              this.once('end', this.close);
            }
            inherits$2(Zlib$1, Transform);

            Zlib$1.prototype.params = function (level, strategy, callback) {
              if (level < binding$1.Z_MIN_LEVEL || level > binding$1.Z_MAX_LEVEL) {
                throw new RangeError('Invalid compression level: ' + level);
              }

              if (strategy != binding$1.Z_FILTERED && strategy != binding$1.Z_HUFFMAN_ONLY && strategy != binding$1.Z_RLE && strategy != binding$1.Z_FIXED && strategy != binding$1.Z_DEFAULT_STRATEGY) {
                throw new TypeError('Invalid strategy: ' + strategy);
              }

              if (this._level !== level || this._strategy !== strategy) {
                var self = this;
                this.flush(binding$1.Z_SYNC_FLUSH, function () {
                  self._binding.params(level, strategy);

                  if (!self._hadError) {
                    self._level = level;
                    self._strategy = strategy;
                    if (callback) callback();
                  }
                });
              } else {
                nextTick(callback);
              }
            };

            Zlib$1.prototype.reset = function () {
              return this._binding.reset();
            }; // This is the _flush function called by the transform class,
            // internally, when the last chunk has been written.


            Zlib$1.prototype._flush = function (callback) {
              this._transform(new Buffer(0), '', callback);
            };

            Zlib$1.prototype.flush = function (kind, callback) {
              var ws = this._writableState;

              if (typeof kind === 'function' || kind === void 0 && !callback) {
                callback = kind;
                kind = binding$1.Z_FULL_FLUSH;
              }

              if (ws.ended) {
                if (callback) nextTick(callback);
              } else if (ws.ending) {
                if (callback) this.once('end', callback);
              } else if (ws.needDrain) {
                var self = this;
                this.once('drain', function () {
                  self.flush(callback);
                });
              } else {
                this._flushFlag = kind;
                this.write(new Buffer(0), '', callback);
              }
            };

            Zlib$1.prototype.close = function (callback) {
              if (callback) nextTick(callback);
              if (this._closed) return;
              this._closed = true;

              this._binding.close();

              var self = this;
              nextTick(function () {
                self.emit('close');
              });
            };

            Zlib$1.prototype._transform = function (chunk, encoding, cb) {
              var flushFlag;
              var ws = this._writableState;
              var ending = ws.ending || ws.ended;
              var last = ending && (!chunk || ws.length === chunk.length);
              if (!chunk === null && !isBuffer(chunk)) return cb(new Error('invalid input')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
              // If it's explicitly flushing at some other time, then we use
              // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
              // goodness.

              if (last) flushFlag = binding$1.Z_FINISH;else {
                flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
                // go back to the normal behavior.

                if (chunk.length >= ws.length) {
                  this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
                }
              }

              this._processChunk(chunk, flushFlag, cb);
            };

            Zlib$1.prototype._processChunk = function (chunk, flushFlag, cb) {
              var availInBefore = chunk && chunk.length;
              var availOutBefore = this._chunkSize - this._offset;
              var inOff = 0;
              var self = this;
              var async = typeof cb === 'function';

              if (!async) {
                var buffers = [];
                var nread = 0;
                var error;
                this.on('error', function (er) {
                  error = er;
                });

                do {
                  var res = this._binding.writeSync(flushFlag, chunk, // in
                  inOff, // in_off
                  availInBefore, // in_len
                  this._buffer, // out
                  this._offset, //out_off
                  availOutBefore); // out_len

                } while (!this._hadError && callback(res[0], res[1]));

                if (this._hadError) {
                  throw error;
                }

                var buf = Buffer.concat(buffers, nread);
                this.close();
                return buf;
              }

              var req = this._binding.write(flushFlag, chunk, // in
              inOff, // in_off
              availInBefore, // in_len
              this._buffer, // out
              this._offset, //out_off
              availOutBefore); // out_len


              req.buffer = chunk;
              req.callback = callback;

              function callback(availInAfter, availOutAfter) {
                if (self._hadError) return;
                var have = availOutBefore - availOutAfter;
                assert(have >= 0, 'have should not go down');

                if (have > 0) {
                  var out = self._buffer.slice(self._offset, self._offset + have);

                  self._offset += have; // serve some output to the consumer.

                  if (async) {
                    self.push(out);
                  } else {
                    buffers.push(out);
                    nread += out.length;
                  }
                } // exhausted the output buffer, or used all the input create a new one.


                if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                  availOutBefore = self._chunkSize;
                  self._offset = 0;
                  self._buffer = new Buffer(self._chunkSize);
                }

                if (availOutAfter === 0) {
                  // Not actually done.  Need to reprocess.
                  // Also, update the availInBefore to the availInAfter value,
                  // so that if we have to hit it a third (fourth, etc.) time,
                  // it'll have the correct byte counts.
                  inOff += availInBefore - availInAfter;
                  availInBefore = availInAfter;
                  if (!async) return true;

                  var newReq = self._binding.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);

                  newReq.callback = callback; // this same function

                  newReq.buffer = chunk;
                  return;
                }

                if (!async) return false; // finished with the chunk.

                cb();
              }
            };

            inherits$2(Deflate, Zlib$1);
            inherits$2(Inflate, Zlib$1);
            inherits$2(Gzip, Zlib$1);
            inherits$2(Gunzip, Zlib$1);
            inherits$2(DeflateRaw, Zlib$1);
            inherits$2(InflateRaw, Zlib$1);
            inherits$2(Unzip, Zlib$1);
            var zlib = {
              codes: codes$1,
              createDeflate: createDeflate,
              createInflate: createInflate,
              createDeflateRaw: createDeflateRaw,
              createInflateRaw: createInflateRaw,
              createGzip: createGzip,
              createGunzip: createGunzip,
              createUnzip: createUnzip,
              deflate: deflate$1,
              deflateSync: deflateSync,
              gzip: gzip,
              gzipSync: gzipSync,
              deflateRaw: deflateRaw,
              deflateRawSync: deflateRawSync,
              unzip: unzip,
              unzipSync: unzipSync,
              inflate: inflate$1,
              inflateSync: inflateSync,
              gunzip: gunzip,
              gunzipSync: gunzipSync,
              inflateRaw: inflateRaw,
              inflateRawSync: inflateRawSync,
              Deflate: Deflate,
              Inflate: Inflate,
              Gzip: Gzip,
              Gunzip: Gunzip,
              DeflateRaw: DeflateRaw,
              InflateRaw: InflateRaw,
              Unzip: Unzip,
              Zlib: Zlib$1
            };

            var chunkstream = createCommonjsModule(function (module) {

              var ChunkStream = module.exports = function () {
                Stream.call(this);
                this._buffers = [];
                this._buffered = 0;
                this._reads = [];
                this._paused = false;
                this._encoding = 'utf8';
                this.writable = true;
              };

              util.inherits(ChunkStream, Stream);

              ChunkStream.prototype.read = function (length, callback) {
                this._reads.push({
                  length: Math.abs(length),
                  // if length < 0 then at most this length
                  allowLess: length < 0,
                  func: callback
                });

                nextTick(function () {
                  this._process(); // its paused and there is not enought data then ask for more


                  if (this._paused && this._reads.length > 0) {
                    this._paused = false;
                    this.emit('drain');
                  }
                }.bind(this));
              };

              ChunkStream.prototype.write = function (data, encoding) {
                if (!this.writable) {
                  this.emit('error', new Error('Stream not writable'));
                  return false;
                }

                var dataBuffer;

                if (isBuffer(data)) {
                  dataBuffer = data;
                } else {
                  dataBuffer = new Buffer(data, encoding || this._encoding);
                }

                this._buffers.push(dataBuffer);

                this._buffered += dataBuffer.length;

                this._process(); // ok if there are no more read requests


                if (this._reads && this._reads.length === 0) {
                  this._paused = true;
                }

                return this.writable && !this._paused;
              };

              ChunkStream.prototype.end = function (data, encoding) {
                if (data) {
                  this.write(data, encoding);
                }

                this.writable = false; // already destroyed

                if (!this._buffers) {
                  return;
                } // enqueue or handle end


                if (this._buffers.length === 0) {
                  this._end();
                } else {
                  this._buffers.push(null);

                  this._process();
                }
              };

              ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;

              ChunkStream.prototype._end = function () {
                if (this._reads.length > 0) {
                  this.emit('error', new Error('There are some read requests waiting on finished stream'));
                }

                this.destroy();
              };

              ChunkStream.prototype.destroy = function () {
                if (!this._buffers) {
                  return;
                }

                this.writable = false;
                this._reads = null;
                this._buffers = null;
                this.emit('close');
              };

              ChunkStream.prototype._processReadAllowingLess = function (read) {
                // ok there is any data so that we can satisfy this request
                this._reads.shift(); // == read
                // first we need to peek into first buffer


                var smallerBuf = this._buffers[0]; // ok there is more data than we need

                if (smallerBuf.length > read.length) {
                  this._buffered -= read.length;
                  this._buffers[0] = smallerBuf.slice(read.length);
                  read.func.call(this, smallerBuf.slice(0, read.length));
                } else {
                  // ok this is less than maximum length so use it all
                  this._buffered -= smallerBuf.length;

                  this._buffers.shift(); // == smallerBuf


                  read.func.call(this, smallerBuf);
                }
              };

              ChunkStream.prototype._processRead = function (read) {
                this._reads.shift(); // == read


                var pos = 0;
                var count = 0;
                var data = new Buffer(read.length); // create buffer for all data

                while (pos < read.length) {
                  var buf = this._buffers[count++];
                  var len = Math.min(buf.length, read.length - pos);
                  buf.copy(data, pos, 0, len);
                  pos += len; // last buffer wasn't used all so just slice it and leave

                  if (len !== buf.length) {
                    this._buffers[--count] = buf.slice(len);
                  }
                } // remove all used buffers


                if (count > 0) {
                  this._buffers.splice(0, count);
                }

                this._buffered -= read.length;
                read.func.call(this, data);
              };

              ChunkStream.prototype._process = function () {
                try {
                  // as long as there is any data and read requests
                  while (this._buffered > 0 && this._reads && this._reads.length > 0) {
                    var read = this._reads[0]; // read any data (but no more than length)

                    if (read.allowLess) {
                      this._processReadAllowingLess(read);
                    } else if (this._buffered >= read.length) {
                      // ok we can meet some expectations
                      this._processRead(read);
                    } else {
                      // not enought data to satisfy first request in queue
                      // so we need to wait for more
                      break;
                    }
                  }

                  if (this._buffers && this._buffers.length > 0 && this._buffers[0] === null) {
                    this._end();
                  }
                } catch (ex) {
                  this.emit('error', ex);
                }
              };
            });

            //   0 1 2 3 4 5 6 7
            // 0 x 6 4 6 x 6 4 6
            // 1 7 7 7 7 7 7 7 7
            // 2 5 6 5 6 5 6 5 6
            // 3 7 7 7 7 7 7 7 7
            // 4 3 6 4 6 3 6 4 6
            // 5 7 7 7 7 7 7 7 7
            // 6 5 6 5 6 5 6 5 6
            // 7 7 7 7 7 7 7 7 7

            var imagePasses = [{
              // pass 1 - 1px
              x: [0],
              y: [0]
            }, {
              // pass 2 - 1px
              x: [4],
              y: [0]
            }, {
              // pass 3 - 2px
              x: [0, 4],
              y: [4]
            }, {
              // pass 4 - 4px
              x: [2, 6],
              y: [0, 4]
            }, {
              // pass 5 - 8px
              x: [0, 2, 4, 6],
              y: [2, 6]
            }, {
              // pass 6 - 16px
              x: [1, 3, 5, 7],
              y: [0, 2, 4, 6]
            }, {
              // pass 7 - 32px
              x: [0, 1, 2, 3, 4, 5, 6, 7],
              y: [1, 3, 5, 7]
            }];

            var getImagePasses = function (width, height) {
              var images = [];
              var xLeftOver = width % 8;
              var yLeftOver = height % 8;
              var xRepeats = (width - xLeftOver) / 8;
              var yRepeats = (height - yLeftOver) / 8;

              for (var i = 0; i < imagePasses.length; i++) {
                var pass = imagePasses[i];
                var passWidth = xRepeats * pass.x.length;
                var passHeight = yRepeats * pass.y.length;

                for (var j = 0; j < pass.x.length; j++) {
                  if (pass.x[j] < xLeftOver) {
                    passWidth++;
                  } else {
                    break;
                  }
                }

                for (j = 0; j < pass.y.length; j++) {
                  if (pass.y[j] < yLeftOver) {
                    passHeight++;
                  } else {
                    break;
                  }
                }

                if (passWidth > 0 && passHeight > 0) {
                  images.push({
                    width: passWidth,
                    height: passHeight,
                    index: i
                  });
                }
              }

              return images;
            };

            var getInterlaceIterator = function (width) {
              return function (x, y, pass) {
                var outerXLeftOver = x % imagePasses[pass].x.length;
                var outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];
                var outerYLeftOver = y % imagePasses[pass].y.length;
                var outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];
                return outerX * 4 + outerY * width * 4;
              };
            };

            var interlace = {
              getImagePasses: getImagePasses,
              getInterlaceIterator: getInterlaceIterator
            };

            var paethPredictor = function paethPredictor(left, above, upLeft) {
              var paeth = left + above - upLeft;
              var pLeft = Math.abs(paeth - left);
              var pAbove = Math.abs(paeth - above);
              var pUpLeft = Math.abs(paeth - upLeft);

              if (pLeft <= pAbove && pLeft <= pUpLeft) {
                return left;
              }

              if (pAbove <= pUpLeft) {
                return above;
              }

              return upLeft;
            };

            var filterParse = createCommonjsModule(function (module) {

              function getByteWidth(width, bpp, depth) {
                var byteWidth = width * bpp;

                if (depth !== 8) {
                  byteWidth = Math.ceil(byteWidth / (8 / depth));
                }

                return byteWidth;
              }

              var Filter = module.exports = function (bitmapInfo, dependencies) {
                var width = bitmapInfo.width;
                var height = bitmapInfo.height;
                var interlace$1 = bitmapInfo.interlace;
                var bpp = bitmapInfo.bpp;
                var depth = bitmapInfo.depth;
                this.read = dependencies.read;
                this.write = dependencies.write;
                this.complete = dependencies.complete;
                this._imageIndex = 0;
                this._images = [];

                if (interlace$1) {
                  var passes = interlace.getImagePasses(width, height);

                  for (var i = 0; i < passes.length; i++) {
                    this._images.push({
                      byteWidth: getByteWidth(passes[i].width, bpp, depth),
                      height: passes[i].height,
                      lineIndex: 0
                    });
                  }
                } else {
                  this._images.push({
                    byteWidth: getByteWidth(width, bpp, depth),
                    height: height,
                    lineIndex: 0
                  });
                } // when filtering the line we look at the pixel to the left
                // the spec also says it is done on a byte level regardless of the number of pixels
                // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
                // a pixel rather than just a different byte part. However if we are sub byte, we ignore.


                if (depth === 8) {
                  this._xComparison = bpp;
                } else if (depth === 16) {
                  this._xComparison = bpp * 2;
                } else {
                  this._xComparison = 1;
                }
              };

              Filter.prototype.start = function () {
                this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
              };

              Filter.prototype._unFilterType1 = function (rawData, unfilteredLine, byteWidth) {
                var xComparison = this._xComparison;
                var xBiggerThan = xComparison - 1;

                for (var x = 0; x < byteWidth; x++) {
                  var rawByte = rawData[1 + x];
                  var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                  unfilteredLine[x] = rawByte + f1Left;
                }
              };

              Filter.prototype._unFilterType2 = function (rawData, unfilteredLine, byteWidth) {
                var lastLine = this._lastLine;

                for (var x = 0; x < byteWidth; x++) {
                  var rawByte = rawData[1 + x];
                  var f2Up = lastLine ? lastLine[x] : 0;
                  unfilteredLine[x] = rawByte + f2Up;
                }
              };

              Filter.prototype._unFilterType3 = function (rawData, unfilteredLine, byteWidth) {
                var xComparison = this._xComparison;
                var xBiggerThan = xComparison - 1;
                var lastLine = this._lastLine;

                for (var x = 0; x < byteWidth; x++) {
                  var rawByte = rawData[1 + x];
                  var f3Up = lastLine ? lastLine[x] : 0;
                  var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                  var f3Add = Math.floor((f3Left + f3Up) / 2);
                  unfilteredLine[x] = rawByte + f3Add;
                }
              };

              Filter.prototype._unFilterType4 = function (rawData, unfilteredLine, byteWidth) {
                var xComparison = this._xComparison;
                var xBiggerThan = xComparison - 1;
                var lastLine = this._lastLine;

                for (var x = 0; x < byteWidth; x++) {
                  var rawByte = rawData[1 + x];
                  var f4Up = lastLine ? lastLine[x] : 0;
                  var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                  var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
                  var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
                  unfilteredLine[x] = rawByte + f4Add;
                }
              };

              Filter.prototype._reverseFilterLine = function (rawData) {
                var filter = rawData[0];
                var unfilteredLine;
                var currentImage = this._images[this._imageIndex];
                var byteWidth = currentImage.byteWidth;

                if (filter === 0) {
                  unfilteredLine = rawData.slice(1, byteWidth + 1);
                } else {
                  unfilteredLine = new Buffer(byteWidth);

                  switch (filter) {
                    case 1:
                      this._unFilterType1(rawData, unfilteredLine, byteWidth);

                      break;

                    case 2:
                      this._unFilterType2(rawData, unfilteredLine, byteWidth);

                      break;

                    case 3:
                      this._unFilterType3(rawData, unfilteredLine, byteWidth);

                      break;

                    case 4:
                      this._unFilterType4(rawData, unfilteredLine, byteWidth);

                      break;

                    default:
                      throw new Error('Unrecognised filter type - ' + filter);
                  }
                }

                this.write(unfilteredLine);
                currentImage.lineIndex++;

                if (currentImage.lineIndex >= currentImage.height) {
                  this._lastLine = null;
                  this._imageIndex++;
                  currentImage = this._images[this._imageIndex];
                } else {
                  this._lastLine = unfilteredLine;
                }

                if (currentImage) {
                  // read, using the byte width that may be from the new current image
                  this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
                } else {
                  this._lastLine = null;
                  this.complete();
                }
              };
            });

            var filterParseAsync = createCommonjsModule(function (module) {

              var FilterAsync = module.exports = function (bitmapInfo) {
                chunkstream.call(this);
                var buffers = [];
                var that = this;
                this._filter = new filterParse(bitmapInfo, {
                  read: this.read.bind(this),
                  write: function (buffer) {
                    buffers.push(buffer);
                  },
                  complete: function () {
                    that.emit('complete', Buffer.concat(buffers));
                  }
                });

                this._filter.start();
              };

              util.inherits(FilterAsync, chunkstream);
            });

            var constants = {
              PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],
              TYPE_IHDR: 0x49484452,
              TYPE_IEND: 0x49454e44,
              TYPE_IDAT: 0x49444154,
              TYPE_PLTE: 0x504c5445,
              TYPE_tRNS: 0x74524e53,
              // eslint-disable-line camelcase
              TYPE_gAMA: 0x67414d41,
              // eslint-disable-line camelcase
              // color-type bits
              COLORTYPE_GRAYSCALE: 0,
              COLORTYPE_PALETTE: 1,
              COLORTYPE_COLOR: 2,
              COLORTYPE_ALPHA: 4,
              // e.g. grayscale and alpha
              // color-type combinations
              COLORTYPE_PALETTE_COLOR: 3,
              COLORTYPE_COLOR_ALPHA: 6,
              COLORTYPE_TO_BPP_MAP: {
                0: 1,
                2: 3,
                3: 1,
                4: 2,
                6: 4
              },
              GAMMA_DIVISION: 100000
            };

            var crc = createCommonjsModule(function (module) {

              var crcTable = [];

              (function () {
                for (var i = 0; i < 256; i++) {
                  var currentCrc = i;

                  for (var j = 0; j < 8; j++) {
                    if (currentCrc & 1) {
                      currentCrc = 0xedb88320 ^ currentCrc >>> 1;
                    } else {
                      currentCrc = currentCrc >>> 1;
                    }
                  }

                  crcTable[i] = currentCrc;
                }
              })();

              var CrcCalculator = module.exports = function () {
                this._crc = -1;
              };

              CrcCalculator.prototype.write = function (data) {
                for (var i = 0; i < data.length; i++) {
                  this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;
                }

                return true;
              };

              CrcCalculator.prototype.crc32 = function () {
                return this._crc ^ -1;
              };

              CrcCalculator.crc32 = function (buf) {
                var crc = -1;

                for (var i = 0; i < buf.length; i++) {
                  crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;
                }

                return crc ^ -1;
              };
            });

            var parser = createCommonjsModule(function (module) {

              var Parser = module.exports = function (options, dependencies) {
                this._options = options;
                options.checkCRC = options.checkCRC !== false;
                this._hasIHDR = false;
                this._hasIEND = false; // input flags/metadata

                this._palette = [];
                this._colorType = 0;
                this._chunks = {};
                this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
                this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
                this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
                this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
                this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
                this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);
                this.read = dependencies.read;
                this.error = dependencies.error;
                this.metadata = dependencies.metadata;
                this.gamma = dependencies.gamma;
                this.transColor = dependencies.transColor;
                this.palette = dependencies.palette;
                this.parsed = dependencies.parsed;
                this.inflateData = dependencies.inflateData;
                this.finished = dependencies.finished;
              };

              Parser.prototype.start = function () {
                this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));
              };

              Parser.prototype._parseSignature = function (data) {
                var signature = constants.PNG_SIGNATURE;

                for (var i = 0; i < signature.length; i++) {
                  if (data[i] !== signature[i]) {
                    this.error(new Error('Invalid file signature'));
                    return;
                  }
                }

                this.read(8, this._parseChunkBegin.bind(this));
              };

              Parser.prototype._parseChunkBegin = function (data) {
                // chunk content length
                var length = data.readUInt32BE(0); // chunk type

                var type = data.readUInt32BE(4);
                var name = '';

                for (var i = 4; i < 8; i++) {
                  name += String.fromCharCode(data[i]);
                } //console.log('chunk ', name, length);
                // chunk flags


                var ancillary = Boolean(data[4] & 0x20); // or critical
                //    priv = Boolean(data[5] & 0x20), // or public
                //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

                if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
                  this.error(new Error('Expected IHDR on beggining'));
                  return;
                }

                this._crc = new crc();

                this._crc.write(new Buffer(name));

                if (this._chunks[type]) {
                  return this._chunks[type](length);
                }

                if (!ancillary) {
                  this.error(new Error('Unsupported critical chunk type ' + name));
                  return;
                }

                this.read(length + 4, this._skipChunk.bind(this));
              };

              Parser.prototype._skipChunk = function ()
              /*data*/
              {
                this.read(8, this._parseChunkBegin.bind(this));
              };

              Parser.prototype._handleChunkEnd = function () {
                this.read(4, this._parseChunkEnd.bind(this));
              };

              Parser.prototype._parseChunkEnd = function (data) {
                var fileCrc = data.readInt32BE(0);

                var calcCrc = this._crc.crc32(); // check CRC


                if (this._options.checkCRC && calcCrc !== fileCrc) {
                  this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
                  return;
                }

                if (!this._hasIEND) {
                  this.read(8, this._parseChunkBegin.bind(this));
                }
              };

              Parser.prototype._handleIHDR = function (length) {
                this.read(length, this._parseIHDR.bind(this));
              };

              Parser.prototype._parseIHDR = function (data) {
                this._crc.write(data);

                var width = data.readUInt32BE(0);
                var height = data.readUInt32BE(4);
                var depth = data[8];
                var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha

                var compr = data[10];
                var filter = data[11];
                var interlace = data[12]; // console.log('    width', width, 'height', height,
                //     'depth', depth, 'colorType', colorType,
                //     'compr', compr, 'filter', filter, 'interlace', interlace
                // );

                if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
                  this.error(new Error('Unsupported bit depth ' + depth));
                  return;
                }

                if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
                  this.error(new Error('Unsupported color type'));
                  return;
                }

                if (compr !== 0) {
                  this.error(new Error('Unsupported compression method'));
                  return;
                }

                if (filter !== 0) {
                  this.error(new Error('Unsupported filter method'));
                  return;
                }

                if (interlace !== 0 && interlace !== 1) {
                  this.error(new Error('Unsupported interlace method'));
                  return;
                }

                this._colorType = colorType;
                var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];
                this._hasIHDR = true;
                this.metadata({
                  width: width,
                  height: height,
                  depth: depth,
                  interlace: Boolean(interlace),
                  palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
                  color: Boolean(colorType & constants.COLORTYPE_COLOR),
                  alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
                  bpp: bpp,
                  colorType: colorType
                });

                this._handleChunkEnd();
              };

              Parser.prototype._handlePLTE = function (length) {
                this.read(length, this._parsePLTE.bind(this));
              };

              Parser.prototype._parsePLTE = function (data) {
                this._crc.write(data);

                var entries = Math.floor(data.length / 3); // console.log('Palette:', entries);

                for (var i = 0; i < entries; i++) {
                  this._palette.push([data[i * 3], data[i * 3 + 1], data[i * 3 + 2], 0xff]);
                }

                this.palette(this._palette);

                this._handleChunkEnd();
              };

              Parser.prototype._handleTRNS = function (length) {
                this.read(length, this._parseTRNS.bind(this));
              };

              Parser.prototype._parseTRNS = function (data) {
                this._crc.write(data); // palette


                if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
                  if (this._palette.length === 0) {
                    this.error(new Error('Transparency chunk must be after palette'));
                    return;
                  }

                  if (data.length > this._palette.length) {
                    this.error(new Error('More transparent colors than palette size'));
                    return;
                  }

                  for (var i = 0; i < data.length; i++) {
                    this._palette[i][3] = data[i];
                  }

                  this.palette(this._palette);
                } // for colorType 0 (grayscale) and 2 (rgb)
                // there might be one gray/color defined as transparent


                if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
                  // grey, 2 bytes
                  this.transColor([data.readUInt16BE(0)]);
                }

                if (this._colorType === constants.COLORTYPE_COLOR) {
                  this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
                }

                this._handleChunkEnd();
              };

              Parser.prototype._handleGAMA = function (length) {
                this.read(length, this._parseGAMA.bind(this));
              };

              Parser.prototype._parseGAMA = function (data) {
                this._crc.write(data);

                this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);

                this._handleChunkEnd();
              };

              Parser.prototype._handleIDAT = function (length) {
                this.read(-length, this._parseIDAT.bind(this, length));
              };

              Parser.prototype._parseIDAT = function (length, data) {
                this._crc.write(data);

                if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
                  throw new Error('Expected palette not found');
                }

                this.inflateData(data);
                var leftOverLength = length - data.length;

                if (leftOverLength > 0) {
                  this._handleIDAT(leftOverLength);
                } else {
                  this._handleChunkEnd();
                }
              };

              Parser.prototype._handleIEND = function (length) {
                this.read(length, this._parseIEND.bind(this));
              };

              Parser.prototype._parseIEND = function (data) {
                this._crc.write(data);

                this._hasIEND = true;

                this._handleChunkEnd();

                if (this.finished) {
                  this.finished();
                }
              };
            });

            var pixelBppMap = {
              1: {
                // L
                0: 0,
                1: 0,
                2: 0,
                3: 0xff
              },
              2: {
                // LA
                0: 0,
                1: 0,
                2: 0,
                3: 1
              },
              3: {
                // RGB
                0: 0,
                1: 1,
                2: 2,
                3: 0xff
              },
              4: {
                // RGBA
                0: 0,
                1: 1,
                2: 2,
                3: 3
              }
            };

            function bitRetriever(data, depth) {
              var leftOver = [];
              var i = 0;

              function split() {
                if (i === data.length) {
                  throw new Error('Ran out of data');
                }

                var byte = data[i];
                i++;
                var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;

                switch (depth) {
                  default:
                    throw new Error('unrecognised depth');

                  case 16:
                    byte2 = data[i];
                    i++;
                    leftOver.push((byte << 8) + byte2);
                    break;

                  case 4:
                    byte2 = byte & 0x0f;
                    byte1 = byte >> 4;
                    leftOver.push(byte1, byte2);
                    break;

                  case 2:
                    byte4 = byte & 3;
                    byte3 = byte >> 2 & 3;
                    byte2 = byte >> 4 & 3;
                    byte1 = byte >> 6 & 3;
                    leftOver.push(byte1, byte2, byte3, byte4);
                    break;

                  case 1:
                    byte8 = byte & 1;
                    byte7 = byte >> 1 & 1;
                    byte6 = byte >> 2 & 1;
                    byte5 = byte >> 3 & 1;
                    byte4 = byte >> 4 & 1;
                    byte3 = byte >> 5 & 1;
                    byte2 = byte >> 6 & 1;
                    byte1 = byte >> 7 & 1;
                    leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
                    break;
                }
              }

              return {
                get: function (count) {
                  while (leftOver.length < count) {
                    split();
                  }

                  var returner = leftOver.slice(0, count);
                  leftOver = leftOver.slice(count);
                  return returner;
                },
                resetAfterLine: function () {
                  leftOver.length = 0;
                },
                end: function () {
                  if (i !== data.length) {
                    throw new Error('extra data found');
                  }
                }
              };
            }

            function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {
              // eslint-disable-line max-params
              var imageWidth = image.width;
              var imageHeight = image.height;
              var imagePass = image.index;

              for (var y = 0; y < imageHeight; y++) {
                for (var x = 0; x < imageWidth; x++) {
                  var pxPos = getPxPos(x, y, imagePass);

                  for (var i = 0; i < 4; i++) {
                    var idx = pixelBppMap[bpp][i];

                    if (idx === 0xff) {
                      pxData[pxPos + i] = 0xff;
                    } else {
                      var dataPos = idx + rawPos;

                      if (dataPos === data.length) {
                        throw new Error('Ran out of data');
                      }

                      pxData[pxPos + i] = data[dataPos];
                    }
                  }

                  rawPos += bpp; //eslint-disable-line no-param-reassign
                }
              }

              return rawPos;
            }

            function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {
              // eslint-disable-line max-params
              var imageWidth = image.width;
              var imageHeight = image.height;
              var imagePass = image.index;

              for (var y = 0; y < imageHeight; y++) {
                for (var x = 0; x < imageWidth; x++) {
                  var pixelData = bits.get(bpp);
                  var pxPos = getPxPos(x, y, imagePass);

                  for (var i = 0; i < 4; i++) {
                    var idx = pixelBppMap[bpp][i];
                    pxData[pxPos + i] = idx !== 0xff ? pixelData[idx] : maxBit;
                  }
                }

                bits.resetAfterLine();
              }
            }

            var dataToBitMap = function (data, bitmapInfo) {
              var width = bitmapInfo.width;
              var height = bitmapInfo.height;
              var depth = bitmapInfo.depth;
              var bpp = bitmapInfo.bpp;
              var interlace$1 = bitmapInfo.interlace;

              if (depth !== 8) {
                var bits = bitRetriever(data, depth);
              }

              var pxData;

              if (depth <= 8) {
                pxData = new Buffer(width * height * 4);
              } else {
                pxData = new Uint16Array(width * height * 4);
              }

              var maxBit = Math.pow(2, depth) - 1;
              var rawPos = 0;
              var images;
              var getPxPos;

              if (interlace$1) {
                images = interlace.getImagePasses(width, height);
                getPxPos = interlace.getInterlaceIterator(width, height);
              } else {
                var nonInterlacedPxPos = 0;

                getPxPos = function () {
                  var returner = nonInterlacedPxPos;
                  nonInterlacedPxPos += 4;
                  return returner;
                };

                images = [{
                  width: width,
                  height: height
                }];
              }

              for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
                if (depth === 8) {
                  rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
                } else {
                  mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
                }
              }

              if (depth === 8) {
                if (rawPos !== data.length) {
                  throw new Error('extra data found');
                }
              } else {
                bits.end();
              }

              return pxData;
            };

            var bitmapper = {
              dataToBitMap: dataToBitMap
            };

            function dePalette(indata, outdata, width, height, palette) {
              var pxPos = 0; // use values from palette

              for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                  var color = palette[indata[pxPos]];

                  if (!color) {
                    throw new Error('index ' + indata[pxPos] + ' not in palette');
                  }

                  for (var i = 0; i < 4; i++) {
                    outdata[pxPos + i] = color[i];
                  }

                  pxPos += 4;
                }
              }
            }

            function replaceTransparentColor(indata, outdata, width, height, transColor) {
              var pxPos = 0;

              for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                  var makeTrans = false;

                  if (transColor.length === 1) {
                    if (transColor[0] === indata[pxPos]) {
                      makeTrans = true;
                    }
                  } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
                    makeTrans = true;
                  }

                  if (makeTrans) {
                    for (var i = 0; i < 4; i++) {
                      outdata[pxPos + i] = 0;
                    }
                  }

                  pxPos += 4;
                }
              }
            }

            function scaleDepth(indata, outdata, width, height, depth) {
              var maxOutSample = 255;
              var maxInSample = Math.pow(2, depth) - 1;
              var pxPos = 0;

              for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                  for (var i = 0; i < 4; i++) {
                    outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);
                  }

                  pxPos += 4;
                }
              }
            }

            var formatNormaliser = function (indata, imageData) {
              var depth = imageData.depth;
              var width = imageData.width;
              var height = imageData.height;
              var colorType = imageData.colorType;
              var transColor = imageData.transColor;
              var palette = imageData.palette;
              var outdata = indata; // only different for 16 bits

              if (colorType === 3) {
                // paletted
                dePalette(indata, outdata, width, height, palette);
              } else {
                if (transColor) {
                  replaceTransparentColor(indata, outdata, width, height, transColor);
                } // if it needs scaling


                if (depth !== 8) {
                  // if we need to change the buffer size
                  if (depth === 16) {
                    outdata = new Buffer(width * height * 4);
                  }

                  scaleDepth(indata, outdata, width, height, depth);
                }
              }

              return outdata;
            };

            var parserAsync = createCommonjsModule(function (module) {

              var ParserAsync = module.exports = function (options) {
                chunkstream.call(this);
                this._parser = new parser(options, {
                  read: this.read.bind(this),
                  error: this._handleError.bind(this),
                  metadata: this._handleMetaData.bind(this),
                  gamma: this.emit.bind(this, 'gamma'),
                  palette: this._handlePalette.bind(this),
                  transColor: this._handleTransColor.bind(this),
                  finished: this._finished.bind(this),
                  inflateData: this._inflateData.bind(this)
                });
                this._options = options;
                this.writable = true;

                this._parser.start();
              };

              util.inherits(ParserAsync, chunkstream);

              ParserAsync.prototype._handleError = function (err) {
                this.emit('error', err);
                this.writable = false;
                this.destroy();

                if (this._inflate && this._inflate.destroy) {
                  this._inflate.destroy();
                }

                if (this._filter) {
                  this._filter.destroy(); // For backward compatibility with Node 7 and below.
                  // Suppress errors due to _inflate calling write() even after
                  // it's destroy()'ed.


                  this._filter.on('error', function () {});
                }

                this.errord = true;
              };

              ParserAsync.prototype._inflateData = function (data) {
                if (!this._inflate) {
                  if (this._bitmapInfo.interlace) {
                    this._inflate = zlib.createInflate();

                    this._inflate.on('error', this.emit.bind(this, 'error'));

                    this._filter.on('complete', this._complete.bind(this));

                    this._inflate.pipe(this._filter);
                  } else {
                    var rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;
                    var imageSize = rowSize * this._bitmapInfo.height;
                    var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);
                    this._inflate = zlib.createInflate({
                      chunkSize: chunkSize
                    });
                    var leftToInflate = imageSize;
                    var emitError = this.emit.bind(this, 'error');

                    this._inflate.on('error', function (err) {
                      if (!leftToInflate) {
                        return;
                      }

                      emitError(err);
                    });

                    this._filter.on('complete', this._complete.bind(this));

                    var filterWrite = this._filter.write.bind(this._filter);

                    this._inflate.on('data', function (chunk) {
                      if (!leftToInflate) {
                        return;
                      }

                      if (chunk.length > leftToInflate) {
                        chunk = chunk.slice(0, leftToInflate);
                      }

                      leftToInflate -= chunk.length;
                      filterWrite(chunk);
                    });

                    this._inflate.on('end', this._filter.end.bind(this._filter));
                  }
                }

                this._inflate.write(data);
              };

              ParserAsync.prototype._handleMetaData = function (metaData) {
                this.emit('metadata', metaData);
                this._bitmapInfo = Object.create(metaData);
                this._filter = new filterParseAsync(this._bitmapInfo);
              };

              ParserAsync.prototype._handleTransColor = function (transColor) {
                this._bitmapInfo.transColor = transColor;
              };

              ParserAsync.prototype._handlePalette = function (palette) {
                this._bitmapInfo.palette = palette;
              };

              ParserAsync.prototype._finished = function () {
                if (this.errord) {
                  return;
                }

                if (!this._inflate) {
                  this.emit('error', 'No Inflate block');
                } else {
                  // no more data to inflate
                  this._inflate.end();
                }

                this.destroySoon();
              };

              ParserAsync.prototype._complete = function (filteredData) {
                if (this.errord) {
                  return;
                }

                try {
                  var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);
                  var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
                  bitmapData = null;
                } catch (ex) {
                  this._handleError(ex);

                  return;
                }

                this.emit('parsed', normalisedBitmapData);
              };
            });

            var bitpacker = function (dataIn, width, height, options) {
              var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;

              if (options.colorType === options.inputColorType) {
                var bigEndian = function () {
                  var buffer = new ArrayBuffer(2);
                  new DataView(buffer).setInt16(0, 256, true
                  /* littleEndian */
                  ); // Int16Array uses the platform's endianness.

                  return new Int16Array(buffer)[0] !== 256;
                }(); // If no need to convert to grayscale and alpha is present/absent in both, take a fast route


                if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {
                  return dataIn;
                }
              } // map to a UInt16 array if data is 16bit, fix endianness below


              var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);
              var maxValue = 255;
              var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];
              if (inBpp == 4 && !options.inputHasAlpha) inBpp = 3;
              var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];

              if (options.bitDepth === 16) {
                maxValue = 65535;
                outBpp *= 2;
              }

              var outData = new Buffer(width * height * outBpp);
              var inIndex = 0;
              var outIndex = 0;
              var bgColor = options.bgColor || {};

              if (bgColor.red === undefined) {
                bgColor.red = maxValue;
              }

              if (bgColor.green === undefined) {
                bgColor.green = maxValue;
              }

              if (bgColor.blue === undefined) {
                bgColor.blue = maxValue;
              }

              function getRGBA(data, inIndex) {
                var red,
                    green,
                    blue,
                    alpha = maxValue;

                switch (options.inputColorType) {
                  case constants.COLORTYPE_COLOR_ALPHA:
                    alpha = data[inIndex + 3];
                    red = data[inIndex];
                    green = data[inIndex + 1];
                    blue = data[inIndex + 2];
                    break;

                  case constants.COLORTYPE_COLOR:
                    red = data[inIndex];
                    green = data[inIndex + 1];
                    blue = data[inIndex + 2];
                    break;

                  case constants.COLORTYPE_ALPHA:
                    alpha = data[inIndex + 1];
                    red = data[inIndex];
                    green = red;
                    blue = red;
                    break;

                  case constants.COLORTYPE_GRAYSCALE:
                    red = data[inIndex];
                    green = red;
                    blue = red;
                    break;

                  default:
                    throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
                }

                if (options.inputHasAlpha) {
                  if (!outHasAlpha) {
                    alpha /= maxValue;
                    red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
                    green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
                    blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
                  }
                }

                return {
                  red: red,
                  green: green,
                  blue: blue,
                  alpha: alpha
                };
              }

              for (var y = 0; y < height; y++) {
                for (var x = 0; x < width; x++) {
                  var rgba = getRGBA(data, inIndex);

                  switch (options.colorType) {
                    case constants.COLORTYPE_COLOR_ALPHA:
                    case constants.COLORTYPE_COLOR:
                      if (options.bitDepth === 8) {
                        outData[outIndex] = rgba.red;
                        outData[outIndex + 1] = rgba.green;
                        outData[outIndex + 2] = rgba.blue;

                        if (outHasAlpha) {
                          outData[outIndex + 3] = rgba.alpha;
                        }
                      } else {
                        outData.writeUInt16BE(rgba.red, outIndex);
                        outData.writeUInt16BE(rgba.green, outIndex + 2);
                        outData.writeUInt16BE(rgba.blue, outIndex + 4);

                        if (outHasAlpha) {
                          outData.writeUInt16BE(rgba.alpha, outIndex + 6);
                        }
                      }

                      break;

                    case constants.COLORTYPE_ALPHA:
                    case constants.COLORTYPE_GRAYSCALE:
                      // Convert to grayscale and alpha
                      var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;

                      if (options.bitDepth === 8) {
                        outData[outIndex] = grayscale;

                        if (outHasAlpha) {
                          outData[outIndex + 1] = rgba.alpha;
                        }
                      } else {
                        outData.writeUInt16BE(grayscale, outIndex);

                        if (outHasAlpha) {
                          outData.writeUInt16BE(rgba.alpha, outIndex + 2);
                        }
                      }

                      break;
                  }

                  inIndex += inBpp;
                  outIndex += outBpp;
                }
              }

              return outData;
            };

            function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {
              for (var x = 0; x < byteWidth; x++) {
                rawData[rawPos + x] = pxData[pxPos + x];
              }
            }

            function filterSumNone(pxData, pxPos, byteWidth) {
              var sum = 0;
              var length = pxPos + byteWidth;

              for (var i = pxPos; i < length; i++) {
                sum += Math.abs(pxData[i]);
              }

              return sum;
            }

            function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var val = pxData[pxPos + x] - left;
                rawData[rawPos + x] = val;
              }
            }

            function filterSumSub(pxData, pxPos, byteWidth, bpp) {
              var sum = 0;

              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var val = pxData[pxPos + x] - left;
                sum += Math.abs(val);
              }

              return sum;
            }

            function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {
              for (var x = 0; x < byteWidth; x++) {
                var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                var val = pxData[pxPos + x] - up;
                rawData[rawPos + x] = val;
              }
            }

            function filterSumUp(pxData, pxPos, byteWidth) {
              var sum = 0;
              var length = pxPos + byteWidth;

              for (var x = pxPos; x < length; x++) {
                var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
                var val = pxData[x] - up;
                sum += Math.abs(val);
              }

              return sum;
            }

            function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                var val = pxData[pxPos + x] - (left + up >> 1);
                rawData[rawPos + x] = val;
              }
            }

            function filterSumAvg(pxData, pxPos, byteWidth, bpp) {
              var sum = 0;

              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                var val = pxData[pxPos + x] - (left + up >> 1);
                sum += Math.abs(val);
              }

              return sum;
            }

            function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
                var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
                rawData[rawPos + x] = val;
              }
            }

            function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
              var sum = 0;

              for (var x = 0; x < byteWidth; x++) {
                var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
                var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
                sum += Math.abs(val);
              }

              return sum;
            }

            var filters = {
              0: filterNone,
              1: filterSub,
              2: filterUp,
              3: filterAvg,
              4: filterPaeth
            };
            var filterSums = {
              0: filterSumNone,
              1: filterSumSub,
              2: filterSumUp,
              3: filterSumAvg,
              4: filterSumPaeth
            };

            var filterPack = function (pxData, width, height, options, bpp) {
              var filterTypes;

              if (!('filterType' in options) || options.filterType === -1) {
                filterTypes = [0, 1, 2, 3, 4];
              } else if (typeof options.filterType === 'number') {
                filterTypes = [options.filterType];
              } else {
                throw new Error('unrecognised filter types');
              }

              if (options.bitDepth === 16) bpp *= 2;
              var byteWidth = width * bpp;
              var rawPos = 0;
              var pxPos = 0;
              var rawData = new Buffer((byteWidth + 1) * height);
              var sel = filterTypes[0];

              for (var y = 0; y < height; y++) {
                if (filterTypes.length > 1) {
                  // find best filter for this line (with lowest sum of values)
                  var min = Infinity;

                  for (var i = 0; i < filterTypes.length; i++) {
                    var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);

                    if (sum < min) {
                      sel = filterTypes[i];
                      min = sum;
                    }
                  }
                }

                rawData[rawPos] = sel;
                rawPos++;
                filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
                rawPos += byteWidth;
                pxPos += byteWidth;
              }

              return rawData;
            };

            var packer = createCommonjsModule(function (module) {

              var Packer = module.exports = function (options) {
                this._options = options;
                options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
                options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
                options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
                options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
                options.deflateFactory = options.deflateFactory || zlib.createDeflate;
                options.bitDepth = options.bitDepth || 8; // This is outputColorType

                options.colorType = typeof options.colorType === 'number' ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
                options.inputColorType = typeof options.inputColorType === 'number' ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;

                if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) === -1) {
                  throw new Error('option color type:' + options.colorType + ' is not supported at present');
                }

                if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.inputColorType) === -1) {
                  throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
                }

                if (options.bitDepth !== 8 && options.bitDepth !== 16) {
                  throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
                }
              };

              Packer.prototype.getDeflateOptions = function () {
                return {
                  chunkSize: this._options.deflateChunkSize,
                  level: this._options.deflateLevel,
                  strategy: this._options.deflateStrategy
                };
              };

              Packer.prototype.createDeflate = function () {
                return this._options.deflateFactory(this.getDeflateOptions());
              };

              Packer.prototype.filterData = function (data, width, height) {
                // convert to correct format for filtering (e.g. right bpp and bit depth)
                var packedData = bitpacker(data, width, height, this._options); // filter pixel data

                var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
                var filteredData = filterPack(packedData, width, height, this._options, bpp);
                return filteredData;
              };

              Packer.prototype._packChunk = function (type, data) {
                var len = data ? data.length : 0;
                var buf = new Buffer(len + 12);
                buf.writeUInt32BE(len, 0);
                buf.writeUInt32BE(type, 4);

                if (data) {
                  data.copy(buf, 8);
                }

                buf.writeInt32BE(crc.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
                return buf;
              };

              Packer.prototype.packGAMA = function (gamma) {
                var buf = new Buffer(4);
                buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
                return this._packChunk(constants.TYPE_gAMA, buf);
              };

              Packer.prototype.packIHDR = function (width, height) {
                var buf = new Buffer(13);
                buf.writeUInt32BE(width, 0);
                buf.writeUInt32BE(height, 4);
                buf[8] = this._options.bitDepth; // Bit depth

                buf[9] = this._options.colorType; // colorType

                buf[10] = 0; // compression

                buf[11] = 0; // filter

                buf[12] = 0; // interlace

                return this._packChunk(constants.TYPE_IHDR, buf);
              };

              Packer.prototype.packIDAT = function (data) {
                return this._packChunk(constants.TYPE_IDAT, data);
              };

              Packer.prototype.packIEND = function () {
                return this._packChunk(constants.TYPE_IEND, null);
              };
            });

            var packerAsync = createCommonjsModule(function (module) {

              var PackerAsync = module.exports = function (opt) {
                Stream.call(this);
                var options = opt || {};
                this._packer = new packer(options);
                this._deflate = this._packer.createDeflate();
                this.readable = true;
              };

              util.inherits(PackerAsync, Stream);

              PackerAsync.prototype.pack = function (data, width, height, gamma) {
                // Signature
                this.emit('data', new Buffer(constants.PNG_SIGNATURE));
                this.emit('data', this._packer.packIHDR(width, height));

                if (gamma) {
                  this.emit('data', this._packer.packGAMA(gamma));
                }

                var filteredData = this._packer.filterData(data, width, height); // compress it


                this._deflate.on('error', this.emit.bind(this, 'error'));

                this._deflate.on('data', function (compressedData) {
                  this.emit('data', this._packer.packIDAT(compressedData));
                }.bind(this));

                this._deflate.on('end', function () {
                  this.emit('data', this._packer.packIEND());
                  this.emit('end');
                }.bind(this));

                this._deflate.end(filteredData);
              };
            });

            function compare(a, b) {
              if (a === b) {
                return 0;
              }

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) {
                return -1;
              }

              if (y < x) {
                return 1;
              }

              return 0;
            }

            var hasOwn = Object.prototype.hasOwnProperty;

            var objectKeys = Object.keys || function (obj) {
              var keys = [];

              for (var key in obj) {
                if (hasOwn.call(obj, key)) keys.push(key);
              }

              return keys;
            }; // based on node assert, original notice:
            var pSlice = Array.prototype.slice;

            var _functionsHaveNames;

            function functionsHaveNames() {
              if (typeof _functionsHaveNames !== 'undefined') {
                return _functionsHaveNames;
              }

              return _functionsHaveNames = function () {
                return function foo() {}.name === 'foo';
              }();
            }

            function pToString(obj) {
              return Object.prototype.toString.call(obj);
            }

            function isView(arrbuf) {
              if (isBuffer(arrbuf)) {
                return false;
              }

              if (typeof global$1.ArrayBuffer !== 'function') {
                return false;
              }

              if (typeof ArrayBuffer.isView === 'function') {
                return ArrayBuffer.isView(arrbuf);
              }

              if (!arrbuf) {
                return false;
              }

              if (arrbuf instanceof DataView) {
                return true;
              }

              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true;
              }

              return false;
            } // 1. The assert module provides functions that throw
            // AssertionError's when particular conditions are not met. The
            // assert module must conform to the following interface.


            function assert$1(value, message) {
              if (!value) fail(value, true, message, '==', ok);
            }
            // new assert.AssertionError({ message: message,
            //                             actual: actual,
            //                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

            function getName(func) {
              if (!isFunction(func)) {
                return;
              }

              if (functionsHaveNames()) {
                return func.name;
              }

              var str = func.toString();
              var match = str.match(regex);
              return match && match[1];
            }

            assert$1.AssertionError = AssertionError;
            function AssertionError(options) {
              this.name = 'AssertionError';
              this.actual = options.actual;
              this.expected = options.expected;
              this.operator = options.operator;

              if (options.message) {
                this.message = options.message;
                this.generatedMessage = false;
              } else {
                this.message = getMessage(this);
                this.generatedMessage = true;
              }

              var stackStartFunction = options.stackStartFunction || fail;

              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction);
              } else {
                // non v8 browsers so we can have a stacktrace
                var err = new Error();

                if (err.stack) {
                  var out = err.stack; // try to strip useless frames

                  var fn_name = getName(stackStartFunction);
                  var idx = out.indexOf('\n' + fn_name);

                  if (idx >= 0) {
                    // once we have located the function frame
                    // we need to strip out everything before it (and its line)
                    var next_line = out.indexOf('\n', idx + 1);
                    out = out.substring(next_line + 1);
                  }

                  this.stack = out;
                }
              }
            } // assert.AssertionError instanceof Error

            inherits$2(AssertionError, Error);

            function truncate(s, n) {
              if (typeof s === 'string') {
                return s.length < n ? s : s.slice(0, n);
              } else {
                return s;
              }
            }

            function inspect$1(something) {
              if (functionsHaveNames() || !isFunction(something)) {
                return inspect(something);
              }

              var rawname = getName(something);
              var name = rawname ? ': ' + rawname : '';
              return '[Function' + name + ']';
            }

            function getMessage(self) {
              return truncate(inspect$1(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect$1(self.expected), 128);
            } // At present only the three keys mentioned above are used and
            // understood by the spec. Implementations or sub modules can pass
            // other keys to the AssertionError's constructor - they will be
            // ignored.
            // 3. All of the following functions must throw an AssertionError
            // when a corresponding condition is not met, with a message that
            // may be undefined if not provided.  All assertion methods provide
            // both the actual and expected values to the assertion error for
            // display purposes.


            function fail(actual, expected, message, operator, stackStartFunction) {
              throw new AssertionError({
                message: message,
                actual: actual,
                expected: expected,
                operator: operator,
                stackStartFunction: stackStartFunction
              });
            } // EXTENSION! allows for well behaved errors defined elsewhere.

            assert$1.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
            // by !!guard.
            // assert.ok(guard, message_opt);
            // This statement is equivalent to assert.equal(true, !!guard,
            // message_opt);. To test strictly for the value true, use
            // assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
              if (!value) fail(value, true, message, '==', ok);
            }
            assert$1.ok = ok;
            // ==.
            // assert.equal(actual, expected, message_opt);

            assert$1.equal = equal;
            function equal(actual, expected, message) {
              if (actual != expected) fail(actual, expected, message, '==', equal);
            } // 6. The non-equality assertion tests for whether two objects are not equal
            // with != assert.notEqual(actual, expected, message_opt);

            assert$1.notEqual = notEqual;
            function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, '!=', notEqual);
              }
            } // 7. The equivalence assertion tests a deep equality relation.
            // assert.deepEqual(actual, expected, message_opt);

            assert$1.deepEqual = deepEqual;
            function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, 'deepEqual', deepEqual);
              }
            }
            assert$1.deepStrictEqual = deepStrictEqual;
            function deepStrictEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
              }
            }

            function _deepEqual(actual, expected, strict, memos) {
              // 7.1. All identical values are equivalent, as determined by ===.
              if (actual === expected) {
                return true;
              } else if (isBuffer(actual) && isBuffer(expected)) {
                return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
                // equivalent if it is also a Date object that refers to the same time.
              } else if (isDate(actual) && isDate(expected)) {
                return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
                // equivalent if it is also a RegExp object with the same source and
                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
              } else if (isRegExp(actual) && isRegExp(expected)) {
                return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
              } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
                return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
                // ArrayBuffers in a Buffer each to increase performance
                // This optimization requires the arrays to have the same type as checked by
                // Object.prototype.toString (aka pToString). Never perform binary
                // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                // bit patterns are not identical.
              } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
                return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
              } else if (isBuffer(actual) !== isBuffer(expected)) {
                return false;
              } else {
                memos = memos || {
                  actual: [],
                  expected: []
                };
                var actualIndex = memos.actual.indexOf(actual);

                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true;
                  }
                }

                memos.actual.push(actual);
                memos.expected.push(expected);
                return objEquiv(actual, expected, strict, memos);
              }
            }

            function isArguments(object) {
              return Object.prototype.toString.call(object) == '[object Arguments]';
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
              if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

              if (isPrimitive(a) || isPrimitive(b)) return a === b;
              if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
              var aIsArgs = isArguments(a);
              var bIsArgs = isArguments(b);
              if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

              if (aIsArgs) {
                a = pSlice.call(a);
                b = pSlice.call(b);
                return _deepEqual(a, b, strict);
              }

              var ka = objectKeys(a);
              var kb = objectKeys(b);
              var key, i; // having the same number of owned properties (keys incorporates
              // hasOwnProperty)

              if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

              ka.sort();
              kb.sort(); //~~~cheap key test

              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i]) return false;
              } //equivalent values for every corresponding key, and
              //~~~possibly expensive deep test


              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
              }

              return true;
            } // 8. The non-equivalence assertion tests for any deep inequality.
            // assert.notDeepEqual(actual, expected, message_opt);


            assert$1.notDeepEqual = notDeepEqual;
            function notDeepEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
              }
            }
            assert$1.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
              }
            } // 9. The strict equality assertion tests strict equality, as determined by ===.
            // assert.strictEqual(actual, expected, message_opt);

            assert$1.strictEqual = strictEqual;
            function strictEqual(actual, expected, message) {
              if (actual !== expected) {
                fail(actual, expected, message, '===', strictEqual);
              }
            } // 10. The strict non-equality assertion tests for strict inequality, as
            // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert$1.notStrictEqual = notStrictEqual;
            function notStrictEqual(actual, expected, message) {
              if (actual === expected) {
                fail(actual, expected, message, '!==', notStrictEqual);
              }
            }

            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false;
              }

              if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                return expected.test(actual);
              }

              try {
                if (actual instanceof expected) {
                  return true;
                }
              } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
              }

              if (Error.isPrototypeOf(expected)) {
                return false;
              }

              return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
              var error;

              try {
                block();
              } catch (e) {
                error = e;
              }

              return error;
            }

            function _throws(shouldThrow, block, expected, message) {
              var actual;

              if (typeof block !== 'function') {
                throw new TypeError('"block" argument must be a function');
              }

              if (typeof expected === 'string') {
                message = expected;
                expected = null;
              }

              actual = _tryBlock(block);
              message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

              if (shouldThrow && !actual) {
                fail(actual, expected, 'Missing expected exception' + message);
              }

              var userProvidedMessage = typeof message === 'string';
              var isUnwantedException = !shouldThrow && isError(actual);
              var isUnexpectedException = !shouldThrow && actual && !expected;

              if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
                fail(actual, expected, 'Got unwanted exception' + message);
              }

              if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
                throw actual;
              }
            } // 11. Expected to throw an error:
            // assert.throws(block, Error_opt, message_opt);


            assert$1.throws = throws;
            function throws(block,
            /*optional*/
            error,
            /*optional*/
            message) {
              _throws(true, block, error, message);
            } // EXTENSION! This is annoying to write outside this module.

            assert$1.doesNotThrow = doesNotThrow;
            function doesNotThrow(block,
            /*optional*/
            error,
            /*optional*/
            message) {
              _throws(false, block, error, message);
            }
            assert$1.ifError = ifError;
            function ifError(err) {
              if (err) throw err;
            }

            var syncInflate = createCommonjsModule(function (module, exports) {

              var assert = assert$1.ok;
              var kMaxLength = bufferEs6.kMaxLength;

              function Inflate(opts) {
                if (!(this instanceof Inflate)) {
                  return new Inflate(opts);
                }

                if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
                  opts.chunkSize = zlib.Z_MIN_CHUNK;
                }

                zlib.Inflate.call(this, opts); // Node 8 --> 9 compatibility check

                this._offset = this._offset === undefined ? this._outOffset : this._offset;
                this._buffer = this._buffer || this._outBuffer;

                if (opts && opts.maxLength != null) {
                  this._maxLength = opts.maxLength;
                }
              }

              function createInflate(opts) {
                return new Inflate(opts);
              }

              function _close(engine, callback) {
                if (callback) {
                  nextTick(callback);
                } // Caller may invoke .close after a zlib error (which will null _handle).


                if (!engine._handle) {
                  return;
                }

                engine._handle.close();

                engine._handle = null;
              }

              Inflate.prototype._processChunk = function (chunk, flushFlag, asyncCb) {
                if (typeof asyncCb === 'function') {
                  return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
                }

                var self = this;
                var availInBefore = chunk && chunk.length;
                var availOutBefore = this._chunkSize - this._offset;
                var leftToInflate = this._maxLength;
                var inOff = 0;
                var buffers = [];
                var nread = 0;
                var error;
                this.on('error', function (err) {
                  error = err;
                });

                function handleChunk(availInAfter, availOutAfter) {
                  if (self._hadError) {
                    return;
                  }

                  var have = availOutBefore - availOutAfter;
                  assert(have >= 0, 'have should not go down');

                  if (have > 0) {
                    var out = self._buffer.slice(self._offset, self._offset + have);

                    self._offset += have;

                    if (out.length > leftToInflate) {
                      out = out.slice(0, leftToInflate);
                    }

                    buffers.push(out);
                    nread += out.length;
                    leftToInflate -= out.length;

                    if (leftToInflate === 0) {
                      return false;
                    }
                  }

                  if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                    availOutBefore = self._chunkSize;
                    self._offset = 0;
                    self._buffer = Buffer.allocUnsafe(self._chunkSize);
                  }

                  if (availOutAfter === 0) {
                    inOff += availInBefore - availInAfter;
                    availInBefore = availInAfter;
                    return true;
                  }

                  return false;
                }

                assert(this._handle, 'zlib binding closed');

                do {
                  var res = this._handle.writeSync(flushFlag, chunk, // in
                  inOff, // in_off
                  availInBefore, // in_len
                  this._buffer, // out
                  this._offset, //out_off
                  availOutBefore); // out_len
                  // Node 8 --> 9 compatibility check


                  res = res || this._writeState;
                } while (!this._hadError && handleChunk(res[0], res[1]));

                if (this._hadError) {
                  throw error;
                }

                if (nread >= kMaxLength) {
                  _close(this);

                  throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
                }

                var buf = Buffer.concat(buffers, nread);

                _close(this);

                return buf;
              };

              util.inherits(Inflate, zlib.Inflate);

              function zlibBufferSync(engine, buffer) {
                if (typeof buffer === 'string') {
                  buffer = Buffer.from(buffer);
                }

                if (!(buffer instanceof Buffer)) {
                  throw new TypeError('Not a string or buffer');
                }

                var flushFlag = engine._finishFlushFlag;

                if (flushFlag == null) {
                  flushFlag = zlib.Z_FINISH;
                }

                return engine._processChunk(buffer, flushFlag);
              }

              function inflateSync(buffer, opts) {
                return zlibBufferSync(new Inflate(opts), buffer);
              }

              module.exports = exports = inflateSync;
              exports.Inflate = Inflate;
              exports.createInflate = createInflate;
              exports.inflateSync = inflateSync;
            });
            var syncInflate_1 = syncInflate.Inflate;
            var syncInflate_2 = syncInflate.createInflate;
            var syncInflate_3 = syncInflate.inflateSync;

            var syncReader = createCommonjsModule(function (module) {

              var SyncReader = module.exports = function (buffer) {
                this._buffer = buffer;
                this._reads = [];
              };

              SyncReader.prototype.read = function (length, callback) {
                this._reads.push({
                  length: Math.abs(length),
                  // if length < 0 then at most this length
                  allowLess: length < 0,
                  func: callback
                });
              };

              SyncReader.prototype.process = function () {
                // as long as there is any data and read requests
                while (this._reads.length > 0 && this._buffer.length) {
                  var read = this._reads[0];

                  if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {
                    // ok there is any data so that we can satisfy this request
                    this._reads.shift(); // == read


                    var buf = this._buffer;
                    this._buffer = buf.slice(read.length);
                    read.func.call(this, buf.slice(0, read.length));
                  } else {
                    break;
                  }
                }

                if (this._reads.length > 0) {
                  return new Error('There are some read requests waitng on finished stream');
                }

                if (this._buffer.length > 0) {
                  return new Error('unrecognised content at end of stream');
                }
              };
            });

            var process_1 = function (inBuffer, bitmapInfo) {
              var outBuffers = [];
              var reader = new syncReader(inBuffer);
              var filter = new filterParse(bitmapInfo, {
                read: reader.read.bind(reader),
                write: function (bufferPart) {
                  outBuffers.push(bufferPart);
                },
                complete: function () {}
              });
              filter.start();
              reader.process();
              return Buffer.concat(outBuffers);
            };

            var filterParseSync = {
              process: process_1
            };

            var hasSyncZlib = true;

            if (!zlib.deflateSync) {
              hasSyncZlib = false;
            }

            var parserSync = function (buffer, options) {
              if (!hasSyncZlib) {
                throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
              }

              var err;

              function handleError(_err_) {
                err = _err_;
              }

              var metaData;

              function handleMetaData(_metaData_) {
                metaData = _metaData_;
              }

              function handleTransColor(transColor) {
                metaData.transColor = transColor;
              }

              function handlePalette(palette) {
                metaData.palette = palette;
              }

              var gamma;

              function handleGamma(_gamma_) {
                gamma = _gamma_;
              }

              var inflateDataList = [];

              function handleInflateData(inflatedData) {
                inflateDataList.push(inflatedData);
              }

              var reader = new syncReader(buffer);
              var parser$1 = new parser(options, {
                read: reader.read.bind(reader),
                error: handleError,
                metadata: handleMetaData,
                gamma: handleGamma,
                palette: handlePalette,
                transColor: handleTransColor,
                inflateData: handleInflateData
              });
              parser$1.start();
              reader.process();

              if (err) {
                throw err;
              } //join together the inflate datas


              var inflateData = Buffer.concat(inflateDataList);
              inflateDataList.length = 0;
              var inflatedData;

              if (metaData.interlace) {
                inflatedData = zlib.inflateSync(inflateData);
              } else {
                var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;
                var imageSize = rowSize * metaData.height;
                inflatedData = syncInflate(inflateData, {
                  chunkSize: imageSize,
                  maxLength: imageSize
                });
              }

              inflateData = null;

              if (!inflatedData || !inflatedData.length) {
                throw new Error('bad png - invalid inflate data response');
              }

              var unfilteredData = filterParseSync.process(inflatedData, metaData);
              inflateData = null;
              var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
              unfilteredData = null;
              var normalisedBitmapData = formatNormaliser(bitmapData, metaData);
              metaData.data = normalisedBitmapData;
              metaData.gamma = gamma || 0;
              return metaData;
            };

            var hasSyncZlib$1 = true;

            if (!zlib.deflateSync) {
              hasSyncZlib$1 = false;
            }

            var packerSync = function (metaData, opt) {
              if (!hasSyncZlib$1) {
                throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
              }

              var options = opt || {};
              var packer$1 = new packer(options);
              var chunks = []; // Signature

              chunks.push(new Buffer(constants.PNG_SIGNATURE)); // Header

              chunks.push(packer$1.packIHDR(metaData.width, metaData.height));

              if (metaData.gamma) {
                chunks.push(packer$1.packGAMA(metaData.gamma));
              }

              var filteredData = packer$1.filterData(metaData.data, metaData.width, metaData.height); // compress it

              var compressedData = zlib.deflateSync(filteredData, packer$1.getDeflateOptions());
              filteredData = null;

              if (!compressedData || !compressedData.length) {
                throw new Error('bad png - invalid compressed data response');
              }

              chunks.push(packer$1.packIDAT(compressedData)); // End

              chunks.push(packer$1.packIEND());
              return Buffer.concat(chunks);
            };

            var read$2 = function (buffer, options) {
              return parserSync(buffer, options || {});
            };

            var write$2 = function (png, options) {
              return packerSync(png, options);
            };

            var pngSync = {
              read: read$2,
              write: write$2
            };

            var png = createCommonjsModule(function (module, exports) {

              var PNG = exports.PNG = function (options) {
                Stream.call(this);
                options = options || {}; // eslint-disable-line no-param-reassign
                // coerce pixel dimensions to integers (also coerces undefined -> 0):

                this.width = options.width | 0;
                this.height = options.height | 0;
                this.data = this.width > 0 && this.height > 0 ? new Buffer(4 * this.width * this.height) : null;

                if (options.fill && this.data) {
                  this.data.fill(0);
                }

                this.gamma = 0;
                this.readable = this.writable = true;
                this._parser = new parserAsync(options);

                this._parser.on('error', this.emit.bind(this, 'error'));

                this._parser.on('close', this._handleClose.bind(this));

                this._parser.on('metadata', this._metadata.bind(this));

                this._parser.on('gamma', this._gamma.bind(this));

                this._parser.on('parsed', function (data) {
                  this.data = data;
                  this.emit('parsed', data);
                }.bind(this));

                this._packer = new packerAsync(options);

                this._packer.on('data', this.emit.bind(this, 'data'));

                this._packer.on('end', this.emit.bind(this, 'end'));

                this._parser.on('close', this._handleClose.bind(this));

                this._packer.on('error', this.emit.bind(this, 'error'));
              };

              util.inherits(PNG, Stream);
              PNG.sync = pngSync;

              PNG.prototype.pack = function () {
                if (!this.data || !this.data.length) {
                  this.emit('error', 'No data provided');
                  return this;
                }

                nextTick(function () {
                  this._packer.pack(this.data, this.width, this.height, this.gamma);
                }.bind(this));
                return this;
              };

              PNG.prototype.parse = function (data, callback) {
                if (callback) {
                  var onParsed, onError;

                  onParsed = function (parsedData) {
                    this.removeListener('error', onError);
                    this.data = parsedData;
                    callback(null, this);
                  }.bind(this);

                  onError = function (err) {
                    this.removeListener('parsed', onParsed);
                    callback(err, null);
                  }.bind(this);

                  this.once('parsed', onParsed);
                  this.once('error', onError);
                }

                this.end(data);
                return this;
              };

              PNG.prototype.write = function (data) {
                this._parser.write(data);

                return true;
              };

              PNG.prototype.end = function (data) {
                this._parser.end(data);
              };

              PNG.prototype._metadata = function (metadata) {
                this.width = metadata.width;
                this.height = metadata.height;
                this.emit('metadata', metadata);
              };

              PNG.prototype._gamma = function (gamma) {
                this.gamma = gamma;
              };

              PNG.prototype._handleClose = function () {
                if (!this._parser.writable && !this._packer.readable) {
                  this.emit('close');
                }
              };

              PNG.bitblt = function (src, dst, srcX, srcY, width, height, deltaX, deltaY) {
                // eslint-disable-line max-params
                // coerce pixel dimensions to integers (also coerces undefined -> 0):

                /* eslint-disable no-param-reassign */
                srcX |= 0;
                srcY |= 0;
                width |= 0;
                height |= 0;
                deltaX |= 0;
                deltaY |= 0;
                /* eslint-enable no-param-reassign */

                if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
                  throw new Error('bitblt reading outside image');
                }

                if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
                  throw new Error('bitblt writing outside image');
                }

                for (var y = 0; y < height; y++) {
                  src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);
                }
              };

              PNG.prototype.bitblt = function (dst, srcX, srcY, width, height, deltaX, deltaY) {
                // eslint-disable-line max-params
                PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
                return this;
              };

              PNG.adjustGamma = function (src) {
                if (src.gamma) {
                  for (var y = 0; y < src.height; y++) {
                    for (var x = 0; x < src.width; x++) {
                      var idx = src.width * y + x << 2;

                      for (var i = 0; i < 3; i++) {
                        var sample = src.data[idx + i] / 255;
                        sample = Math.pow(sample, 1 / 2.2 / src.gamma);
                        src.data[idx + i] = Math.round(sample * 255);
                      }
                    }
                  }

                  src.gamma = 0;
                }
              };

              PNG.prototype.adjustGamma = function () {
                PNG.adjustGamma(this);
              };
            });
            var png_1 = png.PNG;

            const PNG = png.PNG;
            /**
             * Create a new bitmap image
             *
             * @param {number} w       Image width
             * @param {number} h       Image height
             * @param {object} options Options to be passed to {@link Bitmap}
             *
             * @returns {Bitmap}
             */

            var make$c = function (w, h, options) {
              return new bitmap(w, h, options);
            };
            /**
             * Encode the PNG image to output stream
             *
             * @param {Bitmap} bitmap    An instance of {@link Bitmap} to be encoded to PNG, `bitmap.data` must be a buffer of raw PNG data
             * @param {Stream} outstream The stream to write the PNG file to
             *
             * @returns {Promise<void>}
             */


            var encodePNGToStream = function (bitmap, outstream) {
              return new Promise((res, rej) => {
                if (!bitmap.hasOwnProperty('data') || !bitmap.hasOwnProperty('width') || !bitmap.hasOwnProperty('height')) {
                  rej(new TypeError('Invalid bitmap image provided'));
                }

                var png = new PNG({
                  width: bitmap.width,
                  height: bitmap.height
                });

                for (var i = 0; i < bitmap.width; i++) {
                  for (var j = 0; j < bitmap.height; j++) {
                    var rgba = bitmap.getPixelRGBA(i, j);
                    var n = (j * bitmap.width + i) * 4;
                    var bytes = uint32.getBytesBigEndian(rgba);

                    for (var k = 0; k < 4; k++) {
                      png.data[n + k] = bytes[k];
                    }
                  }
                }

                png.pack().pipe(outstream).on('finish', () => {
                  res();
                }).on('error', err => {
                  rej(err);
                });
              });
            };
            /**
             * Encode JPEG To Stream
             *
             * Encode the JPEG image to output stream
             *
             * @param {Bitmap} img       An instance of {@link Bitmap} to be encoded to JPEG, `img.data` must be a buffer of raw JPEG data
             * @param {Stream} outstream The stream to write the raw JPEG buffer to
             * @returns {Promise<void>}
             */


            var encodeJPEGToStream = function (img, outstream) {
              return new Promise((res, rej) => {
                if (!img.hasOwnProperty('data') || !img.hasOwnProperty('width') || !img.hasOwnProperty('height')) {
                  rej(new TypeError('Invalid bitmap image provided'));
                }

                var data = {
                  data: img.data,
                  width: img.width,
                  height: img.height
                };
                outstream.on('error', err => rej(err));
                outstream.write(jpegJs.encode(data, 50).data, () => {
                  outstream.end();
                  res();
                });
              });
            };
            /**
             * Decode JPEG From Stream
             *
             * Decode a JPEG image from an incoming stream of data
             *
             * @param {Stream} data A readable stream to decode JPEG data from
             *
             * @returns {Promise<Bitmap>}
             */


            var decodeJPEGFromStream = function (data) {
              return new Promise((res, rej) => {
                try {
                  var chunks = [];
                  data.on('data', chunk => chunks.push(chunk));
                  data.on('end', () => {
                    var buf = Buffer.concat(chunks);
                    var rawImageData = jpegJs.decode(buf);
                    var bitmap$1 = new bitmap(rawImageData.width, rawImageData.height);

                    for (var x_axis = 0; x_axis < rawImageData.width; x_axis++) {
                      for (var y_axis = 0; y_axis < rawImageData.height; y_axis++) {
                        var n = (y_axis * rawImageData.width + x_axis) * 4;
                        bitmap$1.setPixelRGBA_i(x_axis, y_axis, rawImageData.data[n + 0], rawImageData.data[n + 1], rawImageData.data[n + 2], rawImageData.data[n + 3]);
                      }
                    }

                    res(bitmap$1);
                  });
                } catch (e) {
                  console.log(e);
                  rej(e);
                }
              });
            };
            /**
             * Decode PNG From Stream
             *
             * Decode a PNG file from an incoming readable stream
             *
             * @param {Stream} instream A readable stream containing raw PNG data
             *
             * @returns {Promise<Bitmap>}
             */


            var decodePNGFromStream = function (instream) {
              return new Promise((res, rej) => {
                instream.pipe(new PNG()).on("parsed", function () {
                  var bitmap$1 = new bitmap(this.width, this.height);

                  for (var i = 0; i < bitmap$1.data.length; i++) {
                    bitmap$1.data[i] = this.data[i];
                  }
                  res(bitmap$1);
                });
              });
            };
            /**@ignore */


            var registerFont$1 = text.registerFont;
            var pureimage = {
              make: make$c,
              encodePNGToStream: encodePNGToStream,
              encodeJPEGToStream: encodeJPEGToStream,
              decodeJPEGFromStream: decodeJPEGFromStream,
              decodePNGFromStream: decodePNGFromStream,
              registerFont: registerFont$1
            };

            var destination_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              }); // http://en.wikipedia.org/wiki/Haversine_formula
              // http://www.movable-type.co.uk/scripts/latlong.html

              /**
               * Takes a {@link Point} and calculates the location of a destination point given a distance in
               * degrees, radians, miles, or kilometers; and bearing in degrees.
               * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
               *
               * @name destination
               * @param {Coord} origin starting point
               * @param {number} distance distance from the origin point
               * @param {number} bearing ranging from -180 to 180
               * @param {Object} [options={}] Optional parameters
               * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
               * @param {Object} [options.properties={}] Translate properties to Point
               * @returns {Feature<Point>} destination point
               * @example
               * var point = turf.point([-75.343, 39.984]);
               * var distance = 50;
               * var bearing = 90;
               * var options = {units: 'miles'};
               *
               * var destination = turf.destination(point, distance, bearing, options);
               *
               * //addToMap
               * var addToMap = [point, destination]
               * destination.properties['marker-color'] = '#f00';
               * point.properties['marker-color'] = '#0f0';
               */

              function destination(origin, distance, bearing, options) {
                if (options === void 0) {
                  options = {};
                } // Handle input


                var coordinates1 = invariant.getCoord(origin);
                var longitude1 = helpers.degreesToRadians(coordinates1[0]);
                var latitude1 = helpers.degreesToRadians(coordinates1[1]);
                var bearingRad = helpers.degreesToRadians(bearing);
                var radians = helpers.lengthToRadians(distance, options.units); // Main

                var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));
                var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));
                var lng = helpers.radiansToDegrees(longitude2);
                var lat = helpers.radiansToDegrees(latitude2);
                return helpers.point([lng, lat], options.properties);
              }

              exports.default = destination;
            });
            unwrapExports(destination_1);

            var circle_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.
               *
               * @name circle
               * @param {Feature<Point>|number[]} center center point
               * @param {number} radius radius of the circle
               * @param {Object} [options={}] Optional parameters
               * @param {number} [options.steps=64] number of steps
               * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
               * @param {Object} [options.properties={}] properties
               * @returns {Feature<Polygon>} circle polygon
               * @example
               * var center = [-75.343, 39.984];
               * var radius = 5;
               * var options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};
               * var circle = turf.circle(center, radius, options);
               *
               * //addToMap
               * var addToMap = [turf.point(center), circle]
               */

              function circle(center, radius, options) {
                if (options === void 0) {
                  options = {};
                } // default params


                var steps = options.steps || 64;
                var properties = options.properties ? options.properties : !Array.isArray(center) && center.type === 'Feature' && center.properties ? center.properties : {}; // main

                var coordinates = [];

                for (var i = 0; i < steps; i++) {
                  coordinates.push(destination_1.default(center, radius, i * -360 / steps, options).geometry.coordinates);
                }

                coordinates.push(coordinates[0]);
                return helpers.polygon([coordinates], properties);
              }

              exports.default = circle;
            });
            var TurfCircle = unwrapExports(circle_1);

            var polygonToLine_1 = createCommonjsModule(function (module, exports) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              /**
               * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a
               * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.
               *
               * @name polygonToLine
               * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert
               * @param {Object} [options={}] Optional parameters
               * @param {Object} [options.properties={}] translates GeoJSON properties to Feature
               * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString
               * @example
               * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);
               *
               * var line = turf.polygonToLine(poly);
               *
               * //addToMap
               * var addToMap = [line];
               */

              function default_1(poly, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = invariant.getGeom(poly);

                if (!options.properties && poly.type === "Feature") {
                  options.properties = poly.properties;
                }

                switch (geom.type) {
                  case "Polygon":
                    return polygonToLine(geom, options);

                  case "MultiPolygon":
                    return multiPolygonToLine(geom, options);

                  default:
                    throw new Error("invalid poly");
                }
              }

              exports.default = default_1;
              /**
               * @private
               */

              function polygonToLine(poly, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = invariant.getGeom(poly);
                var type = geom.type;
                var coords = geom.coordinates;
                var properties = options.properties ? options.properties : poly.type === "Feature" ? poly.properties : {};
                return coordsToLine(coords, properties);
              }

              exports.polygonToLine = polygonToLine;
              /**
               * @private
               */

              function multiPolygonToLine(multiPoly, options) {
                if (options === void 0) {
                  options = {};
                }

                var geom = invariant.getGeom(multiPoly);
                var type = geom.type;
                var coords = geom.coordinates;
                var properties = options.properties ? options.properties : multiPoly.type === "Feature" ? multiPoly.properties : {};
                var lines = [];
                coords.forEach(function (coord) {
                  lines.push(coordsToLine(coord, properties));
                });
                return helpers.featureCollection(lines);
              }

              exports.multiPolygonToLine = multiPolygonToLine;
              /**
               * @private
               */

              function coordsToLine(coords, properties) {
                if (coords.length > 1) {
                  return helpers.multiLineString(coords, properties);
                }

                return helpers.lineString(coords[0], properties);
              }

              exports.coordsToLine = coordsToLine;
            });
            var PolyToLine = unwrapExports(polygonToLine_1);
            var polygonToLine_2 = polygonToLine_1.polygonToLine;
            var polygonToLine_3 = polygonToLine_1.multiPolygonToLine;
            var polygonToLine_4 = polygonToLine_1.coordsToLine;

            /**
             *  Tiles drawn from or linked to features. Used to query features and optionally draw tiles
             *  from those features.
             */

            var FeatureTiles = function (featureDao, tileWidth, tileHeight) {
              this.featureDao = featureDao;
              this.tileWidth = tileWidth || 256;
              this.tileHeight = tileHeight || 256;
              this.compressFormat = 'png';
              this.pointRadius = 4.0;
              this.lineStrokeWidth = 2;
              this.polygonStrokeWidth = 2.0;
              this.fillPolygon = false;
              this.calculateDrawOverlap();
            };

            FeatureTiles.prototype.getFeatureDao = function () {
              return this.featureDao;
            };

            FeatureTiles.prototype.calculateDrawOverlap = function () {
              if (this.pointIcon) {
                this.heightOverlap = this.pointIcon.getHeight();
                this.widthOverlap = this.pointIcon.getWidth();
              } else {
                this.heightOverlap = this.pointRadius;
                this.widthOverlap = this.pointRadius;
              }

              var lineHalfStroke = this.lineStrokeWidth / 2.0;
              this.heightOverlap = Math.max(this.heightOverlap, lineHalfStroke);
              this.widthOverlap = Math.max(this.widthOverlap, lineHalfStroke);
              var polygonHalfStroke = this.polygonStrokeWidth / 2.0;
              this.heightOverlap = Math.max(this.heightOverlap, polygonHalfStroke);
              this.widthOverlap = Math.max(this.widthOverlap, polygonHalfStroke);
            };

            FeatureTiles.prototype.setDrawOverlapsWithPixels = function (pixels) {
              this.widthOverlap = pixels;
              this.heightOverlap = pixels;
            };

            FeatureTiles.prototype.drawTile = function (x, y, z) {
              var indexed = this.featureDao.isIndexed();

              if (indexed) {
                return this.drawTileQueryIndex(x, y, z);
              } else {
                return this.drawTileQueryAll(x, y, z);
              }
            };

            FeatureTiles.prototype.drawTileQueryIndex = function (x, y, z) {
              console.log('Draw tile query index');
              var boundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, z);
              var width = 256;
              var height = 256;
              var positionAndScale = TileBoundingBoxUtils.determinePositionAndScale(boundingBox, height, width, new BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244), height * (1 << z), width * (1 << z));
              var xTranslate = -positionAndScale.xPositionInFinalTileStart;
              var yTranslate = -positionAndScale.yPositionInFinalTileStart;
              var pointPixelRadius = 5;
              var pointKilometers = (boundingBox.maxLatitude - boundingBox.minLatitude) / height * pointPixelRadius / 1000;
              var image = pureimage.make(width, height);
              var context = image.getContext('2d');
              context.imageSmoothingEnabled = true;
              context.clearRect(0, 0, width, height);
              context.strokeStyle = 'blue';
              context.fillStyle = 'rgba(0, 0, 255, .3)';
              context.lineWidth = this.lineStrokeWidth; // context.beginPath();
              console.time('Creating image');
              var srs = this.featureDao.getSrs();
              var iterator = this.featureDao.fastQueryWebMercatorBoundingBox(boundingBox);

              for (var featureRow of iterator) {
                var gj = featureRow.getGeometry().geometry.toGeoJSON();

                if (srs.organization !== 'EPSG' || srs.organization_coordsys_id !== 4326) {
                  gj = reproject_1.toWgs84(gj, this.featureDao.projection);
                }

                if (gj.type === 'Polygon') {
                  gj = PolyToLine(gj);
                }

                this.addFeatureToBatch(gj, context, xTranslate, yTranslate, z, pointKilometers);
              }

              console.timeEnd('Creating image');
              return new Promise(function (resolve, reject) {
                var pngData = [];
                var passThroughStream = new PassThrough();
                passThroughStream.on('data', function (chunk) {
                  pngData.push(chunk);
                });
                passThroughStream.on('end', function () {
                  resolve(Buffer.concat(pngData));
                });
                pureimage.encodePNGToStream(image, passThroughStream);
              });
            };

            FeatureTiles.prototype.drawTileQueryAll = function (x, y, zoom) {
              var boundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, zoom);
              var count = this.featureDao.getCount();
              var totalCount;

              if (this.maxFeaturesPerTile) {
                totalCount = count;
              }

              if (!this.maxFeaturesPerTile || totalCount <= this.maxFeaturesPerTile) {
                return this.drawTileWithBoundingBox(boundingBox, zoom);
              } else {
                // draw the unindexed max features tile
                return;
              }
            };

            FeatureTiles.prototype.drawTileWithBoundingBox = function (boundingBox, zoom) {
              var width = 256;
              var height = 256;
              var positionAndScale = TileBoundingBoxUtils.determinePositionAndScale(boundingBox, height, width, new BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244), height * (1 << zoom), width * (1 << zoom));
              var xTranslate = -positionAndScale.xPositionInFinalTileStart;
              var yTranslate = -positionAndScale.yPositionInFinalTileStart;
              var pointPixelRadius = 5;
              var pointKilometers = (boundingBox.maxLatitude - boundingBox.minLatitude) / height * pointPixelRadius / 1000;
              var image = pureimage.make(width, height);
              var context = image.getContext('2d');
              context.clearRect(0, 0, width, height);
              context.strokeStyle = 'blue';
              context.fillStyle = 'rgba(0, 0, 255, .3)';
              context.lineWidth = this.lineStrokeWidth;
              var featureDao = this.featureDao;
              var srs = featureDao.getSrs();
              var each = featureDao.queryForEach();

              for (var row of each) {
                var fr = featureDao.getRow(row);
                var gj = fr.getGeometry().geometry.toGeoJSON();

                if (srs.organization !== 'EPSG' || srs.organization_coordsys_id !== 4326) {
                  gj = reproject_1.toWgs84(gj, featureDao.projection);
                }

                if (gj.type === 'Polygon') {
                  gj = PolyToLine(gj);
                }

                this.addFeatureToBatch(gj, context, xTranslate, yTranslate, zoom, pointKilometers);
              }

              return new Promise(function (resolve, reject) {
                var pngData = [];
                var passThroughStream = new PassThrough();
                passThroughStream.on('data', function (chunk) {
                  pngData.push(chunk);
                });
                passThroughStream.on('end', function () {
                  resolve(Buffer.concat(pngData));
                });
                pureimage.encodePNGToStream(image, passThroughStream);
              });
            };

            FeatureTiles.prototype.addFeatureToBatch = function (geoJson, context, xTranslate, yTranslate, zoom, pointKilometers) {
              var pi = Math.PI,
                  tau = 2 * pi;
              var drawProjection = mercator().scale((1 << zoom) * 256 / tau).center([-180, 85.0511287798066]).translate([xTranslate, yTranslate]);
              var path = new index().context(context).projection(drawProjection);
              context.beginPath();

              if (geoJson.type === 'Point') {
                console.log('pointKilometers', pointKilometers);

                if (pointKilometers > 1) {
                  path(geoJson);
                } else {
                  console.time('turf circle');
                  var circle = TurfCircle(geoJson, pointKilometers, {
                    units: 'kilometers'
                  });
                  console.timeEnd('turf circle');
                  path(circle); // context.closePath();
                }

                context.stroke(); // context.fill();
              } else {
                path(geoJson);
                context.stroke();
              }
            };

            var GeoPackageAPI = {};
            /**
             * In Node, open a GeoPackage file at the given path, or in a browser, load an
             * in-memory GeoPackage from the given byte array.
             * @param  {String|Uint8Array} gppathOrByteArray path to the GeoPackage file or `Uint8Array` of GeoPackage bytes
             * @param  {geopackageCallback=} callback called with an `Error` if one occurred and the open `GeoPackage` object
             * @return {Promise} promise that resolves with the open {@link module:geoPackage~GeoPackage} object or rejects with an `Error`
             */

            GeoPackageAPI.open = function (gppathOrByteArray, callback) {
              return new Promise(function (resolve, reject) {
                var valid = typeof gppathOrByteArray !== 'string' || typeof gppathOrByteArray === 'string' && (gppathOrByteArray.indexOf('http') === 0 || !exports.validateGeoPackageExtension(gppathOrByteArray));

                if (!valid) {
                  reject(new Error('Invalid GeoPackage - Invalid GeoPackage Extension'));
                } else {
                  resolve(gppathOrByteArray);
                }
              }).then(function () {
                return connect(gppathOrByteArray);
              }).then(function (connection) {
                if (gppathOrByteArray && typeof gppathOrByteArray === 'string') {
                  return new GeoPackage(path.basename(gppathOrByteArray), gppathOrByteArray, connection);
                } else {
                  return new GeoPackage('geopackage', undefined, connection);
                }
              }).then(function (geoPackage) {
                if (exports.hasMinimumTables(geoPackage)) {
                  return geoPackage;
                } else {
                  throw new Error('Invalid GeoPackage - GeoPackage does not have the minimum required tables');
                }
              }).then(function (geoPackage) {
                if (callback) callback(null, geoPackage);
                return geoPackage;
              }).catch(function (error) {
                if (callback) {
                  callback(error);
                } else {
                  throw error;
                }
              });
            };
            /**
             * In Node, create a GeoPackage file at the given file path, or in a browser,
             * create an in-memory GeoPackage.
             * @param  {String|geopackageCallback} gppath path of the created GeoPackage file; ignored in the browser
             * @param  {geopackageCallback=} callback called with an `Error` if one occurred and the open {@link module:geoPackage~GeoPackage} object
             * @return {Promise} promise that resolves with the open {@link module:geoPackage~GeoPackage} object or rejects with an  `Error`
             */


            GeoPackageAPI.create = function (gppath, callback) {
              if (typeof gppath == 'function') {
                callback = gppath;
                gppath = undefined;
              }

              var valid = typeof gppath !== 'string' || typeof gppath === 'string' && !exports.validateGeoPackageExtension(gppath);

              if (!valid) {
                if (callback) {
                  return callback(new Error('Invalid GeoPackage'));
                }

                return Promise.reject(new Error('Invalid GeoPackage'));
              }

              var promise = new Promise(function (resolve, reject) {
                if (typeof process !== 'undefined' && process.version && gppath) {
                  fs.mkdirSync(path.dirname(gppath));
                }

                resolve(gppath);
              }).catch(function (error) {// could not create directory, just move on
              }).then(function () {
                return connect(gppath);
              }).then(function (connection) {
                connection.setApplicationId();
                return connection;
              }).then(function (connection) {
                if (gppath) {
                  return new GeoPackage(path.basename(gppath), gppath, connection);
                } else {
                  return new GeoPackage('geopackage', undefined, connection);
                }
              }).then(function (geopackage) {
                return geopackage.createRequiredTables();
              }).then(function (geopackage) {
                return geopackage.createSupportedExtensions();
              }).then(function (geopackage) {
                if (callback) callback(null, geopackage);
                return geopackage;
              }).catch(function (error) {
                console.log('error', error);

                if (callback) {
                  callback(error);
                } else {
                  throw error;
                }
              });
              return promise;
            };
            /**
             * Create the [tables and rows](https://www.geopackage.org/spec121/index.html#tiles)
             * necessary to store tiles according to the ubiquitous [XYZ web/slippy-map tiles](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames) scheme.
             * The extent for the [contents table]{@link module:core/contents~Contents} row,
             * `contentsBoundingBox`, is [informational only](https://www.geopackage.org/spec121/index.html#gpkg_contents_cols),
             * and need not match the [tile matrix set]{@link module:tiles/matrixset~TileMatrixSet}
             * extent, `tileMatrixSetBoundingBox`, which should be the precise bounding box
             * used to calculate the tile row and column coordinates of all tiles in the
             * tile set.  The two SRS ID parameters, `contentsSrsId` and `tileMatrixSetSrsId`,
             * must match, however.  See {@link module:tiles/matrixset~TileMatrixSet} for
             * more information about how GeoPackage consumers use the bouding boxes for a
             * tile set.
             *
             * @param {module:geoPackage~GeoPackage} geopackage the GeoPackage that will store the tiles
             * @param {string} tableName the name of the table that will store the tiles
             * @param {BoundingBox} contentsBoundingBox the bounds stored in the [`gpkg_contents`]{@link module:core/contents~Contents} table row for the tile matrix set
             * @param {SRSRef} contentsSrsId the ID of a [spatial reference system]{@link module:core/srs~SpatialReferenceSystem}; must match `tileMatrixSetSrsId`
             * @param {BoundingBox} tileMatrixSetBoundingBox the bounds stored in the [`gpkg_tile_matrix_set`]{@link module:tiles/matrixset~TileMatrixSet} table row
             * @param {SRSRef} tileMatrixSetSrsId the ID of a [spatial reference system]{@link module:core/srs~SpatialReferenceSystem}
             *   for the [tile matrix set](https://www.geopackage.org/spec121/index.html#_tile_matrix_set) table; must match `contentsSrsId`
             * @param {number} minZoom the zoom level of the lowest resolution [tile matrix]{@link module:tiles/matrix~TileMatrix} in the tile matrix set
             * @param {number} maxZoom the zoom level of the highest resolution [tile matrix]{@link module:tiles/matrix~TileMatrix} in the tile matrix set
             * @param {number=} tileSize the width and height in pixels of the tile images; defaults to 256
             * @returns {Promise} a `Promise` that resolves with the created {@link module:tiles/matrixset~TileMatrixSet} object, or rejects with an `Error`
             *
             * @todo make `tileMatrixSetSrsId` optional because it always has to be the same anyway
             */


            GeoPackageAPI.createStandardWebMercatorTileTable = function (geopackage, tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId, minZoom, maxZoom, tileSize) {
              tileSize = tileSize || 256;
              return geopackage.createTileTableWithTableName(tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId).then(function (tileMatrixSet) {
                geopackage.createStandardWebMercatorTileMatrix(tileMatrixSetBoundingBox, tileMatrixSet, minZoom, maxZoom, tileSize);
                return tileMatrixSet;
              });
            };

            GeoPackageAPI.createFeatureTable = function (geopackage, tableName, geometryColumn, featureColumns) {
              return GeoPackageAPI.createFeatureTableWithDataColumns(geopackage, tableName, geometryColumn, featureColumns, null);
            };

            GeoPackageAPI.createFeatureTableWithDataColumns = function (geopackage, tableName, geometryColumn, featureColumns, dataColumns) {
              var boundingBox = new BoundingBox(-180, 180, -90, 90);
              return GeoPackageAPI.createFeatureTableWithDataColumnsAndBoundingBox(geopackage, tableName, geometryColumn, featureColumns, dataColumns, boundingBox, 4326);
            };

            GeoPackageAPI.createFeatureTableWithDataColumnsAndBoundingBox = function (geopackage, tableName, geometryColumn, featureColumns, dataColumns, boundingBox, boundingBoxSrsId) {
              return geopackage.createFeatureTableWithGeometryColumnsAndDataColumns(geometryColumn, boundingBox, boundingBoxSrsId, featureColumns, dataColumns).then(function () {
                return geopackage.getFeatureDao(tableName);
              });
            };
            /**
             * Create a feature table with the properties specified.
             * @param {module:geoPackage~GeoPackage} geopackage the geopackage object
             * @param {Object[]} properties properties to create columns from
             * @param {string} properties.name name of the column
             * @param {string} properties.dataType name of the data type
             * @return {Promise}
             */


            GeoPackageAPI.createFeatureTableWithProperties = function (geopackage, tableName, properties) {
              var geometryColumns = new GeometryColumns();
              geometryColumns.table_name = tableName;
              geometryColumns.column_name = 'geometry';
              geometryColumns.geometry_type_name = 'GEOMETRY';
              geometryColumns.z = 0;
              geometryColumns.m = 0;
              var boundingBox = new BoundingBox(-180, 180, -80, 80);
              var columns = [];
              var columnNumber = 0;
              columns.push(FeatureColumn.createPrimaryKeyColumnWithIndexAndName(columnNumber++, 'id'));
              columns.push(FeatureColumn.createGeometryColumn(columnNumber++, 'geometry', 'GEOMETRY', false, null));

              for (var i = 0; i < properties.length; i++) {
                var property = properties[i];
                columns.push(FeatureColumn.createColumnWithIndex(columnNumber++, property.name, types.fromName(property.dataType)));
              }

              return geopackage.createFeatureTableWithGeometryColumns(geometryColumns, boundingBox, 4326, columns);
            };
            /**
             * Create a feature table with the properties specified.
             * @param {module:geoPackage~GeoPackage} geopackage the geopackage object
             * @param {Object[]} properties properties to create columns from
             * @param {string} properties.name name of the column
             * @param {string} properties.dataType name of the data type
             * @return {Promise}
             */


            GeoPackageAPI.createAttributeTableWithProperties = function (geopackage, tableName, properties) {
              var columns = [];
              var columnNumber = 0;
              columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(columnNumber++, 'id'));
              var dataColumns = [];

              for (var i = 0; i < properties.length; i++) {
                var property = properties[i];
                columns.push(UserColumn.createColumnWithIndex(columnNumber++, property.name, types.fromName(property.dataType)));

                if (property.dataColumn) {
                  var dc = new DataColumns();
                  dc.table_name = property.dataColumn.table_name;
                  dc.column_name = property.dataColumn.column_name;
                  dc.name = property.dataColumn.name;
                  dc.title = property.dataColumn.title;
                  dc.description = property.dataColumn.description;
                  dc.mime_type = property.dataColumn.mime_type;
                  dc.constraint_name = property.dataColumn.constraint_name;
                  dataColumns.push(dc);
                }
              }

              return geopackage.createAttributeTable(tableName, columns, dataColumns.length ? dataColumns : undefined);
            };

            GeoPackageAPI.addAttributeRow = function (geopackage, tableName, row) {
              var attributeDao = geopackage.getAttributeDaoWithTableName(tableName);
              var attributeRow = attributeDao.newRow(row);
              return attributeDao.create(attributeRow);
            };
            /**
             * Create a simple attributes table with the properties specified.
             * @param {module:geoPackage~GeoPackage} geopackage the geopackage object
             * @param {Object[]} properties properties to create columns from
             * @param {string} properties.name name of the column
             * @param {string} properties.dataType name of the data type
             * @return {Promise}
             */


            GeoPackageAPI.createSimpleAttributesTableWithProperties = function (geopackage, tableName, properties) {
              var relatedTables = geopackage.getRelatedTablesExtension();
              var columns = [];
              var columnNumber = SimpleAttributesTable.numRequiredColumns();

              if (properties) {
                for (var i = 0; i < properties.length; i++) {
                  var property = properties[i];
                  columns.push(UserColumn.createColumnWithIndex(columnNumber++, property.name, types.fromName(property.dataType), true));
                }
              }

              var simpleAttributesTable = SimpleAttributesTable.create(tableName, columns);
              relatedTables.createRelatedTable(simpleAttributesTable);
              return relatedTables.getSimpleAttributesDao(simpleAttributesTable);
            };
            /**
             * Create a media table with the properties specified.  These properties are added to the required columns
             * @param {module:geoPackage~GeoPackage} geopackage the geopackage object
             * @param {Object[]} properties properties to create columns from
             * @param {string} properties.name name of the column
             * @param {string} properties.dataType name of the data type
             * @return {Promise}
             */


            GeoPackageAPI.createMediaTableWithProperties = function (geopackage, tableName, properties) {
              var relatedTables = geopackage.getRelatedTablesExtension();
              var columns = [];
              var columnNumber = MediaTable.numRequiredColumns();

              if (properties) {
                for (var i = 0; i < properties.length; i++) {
                  var property = properties[i];
                  columns.push(UserColumn.createColumnWithIndex(columnNumber++, property.name, types.fromName(property.dataType)));
                }
              }

              var mediaTable = MediaTable.create(tableName, columns);
              relatedTables.createRelatedTable(mediaTable);
              return relatedTables.getMediaDao(mediaTable);
            };

            GeoPackageAPI.addMedia = function (geopackage, tableName, dataBuffer, contentType, additionalProperties) {
              var relatedTables = geopackage.getRelatedTablesExtension();
              var mediaDao = relatedTables.getMediaDao(tableName);
              var row = mediaDao.newRow();
              row.setContentType(contentType);
              row.setData(dataBuffer);

              for (var key in additionalProperties) {
                row.setValueWithColumnName(key, additionalProperties[key]);
              }

              return mediaDao.create(row);
            };

            GeoPackageAPI.linkMedia = function (geopackage, baseTableName, baseId, mediaTableName, mediaId) {
              var relatedTables = geopackage.getRelatedTablesExtension();
              return relatedTables.linkRelatedIds(baseTableName, baseId, mediaTableName, mediaId, RelationType.MEDIA);
            };

            GeoPackageAPI.getLinkedMedia = function (geopackage, baseTableName, baseId) {
              var relationships = GeoPackageAPI.getRelatedRows(geopackage, baseTableName, baseId);
              var mediaRelationships = [];

              for (var i = 0; i < relationships.length; i++) {
                var relationship = relationships[i];

                if (relationship.relation_name === RelationType.MEDIA.name) {
                  for (var r = 0; r < relationship.mappingRows.length; r++) {
                    var row = relationship.mappingRows[r].row;
                    mediaRelationships.push(row);
                  }
                }
              }

              return mediaRelationships;
            };

            GeoPackageAPI.getRelatedRows = function (geopackage, baseTableName, baseId) {
              return geopackage.getRelatedTablesExtension().getRelatedRows(baseTableName, baseId);
            };
            /**
             * Adds a GeoJSON feature to the GeoPackage
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {object}   feature    GeoJSON feature to add
             * @param  {String}   tableName  name of the table that will store the feature
             */


            GeoPackageAPI.addGeoJSONFeatureToGeoPackage = function (geopackage, feature, tableName) {
              var featureDao = geopackage.getFeatureDao(tableName);
              var srs = featureDao.getSrs();
              var featureRow = featureDao.newRow();
              var geometryData = new GeometryData();
              geometryData.setSrsId(srs.srs_id);
              var srs = featureDao.getSrs();

              if (!(srs.organization === 'EPSG' && srs.organization_coordsys_id === 4326)) {
                feature = reproject_1.reproject(feature, 'EPSG:4326', featureDao.projection);
              }

              var featureGeometry = typeof feature.geometry === 'string' ? JSON.parse(feature.geometry) : feature.geometry;
              var geometry = Geometry.parseGeoJSON(featureGeometry);
              geometryData.setGeometry(geometry);
              featureRow.setGeometry(geometryData);

              for (var propertyKey in feature.properties) {
                if (feature.properties.hasOwnProperty(propertyKey)) {
                  featureRow.setValueWithColumnName(propertyKey, feature.properties[propertyKey]);
                }
              }

              return featureDao.create(featureRow);
            };
            /**
             * Adds a GeoJSON feature to the GeoPackage and updates the FeatureTableIndex extension if it exists
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {object}   feature    GeoJSON feature to add
             * @param  {String}   tableName  name of the table that will store the feature
             */


            GeoPackageAPI.addGeoJSONFeatureToGeoPackageAndIndex = function (geopackage, feature, tableName) {
              var featureDao = geopackage.getFeatureDao(tableName);
              if (!featureDao) throw new Error('No feature Dao for table ', +tableName);
              var srs = featureDao.getSrs();
              var featureRow = featureDao.newRow();
              var geometryData = new GeometryData();
              geometryData.setSrsId(srs.srs_id);
              var reprojectedFeature = reproject_1.reproject(feature, 'EPSG:4326', featureDao.projection);
              var featureGeometry = typeof reprojectedFeature.geometry === 'string' ? JSON.parse(reprojectedFeature.geometry) : reprojectedFeature.geometry;
              var geometry = Geometry.parseGeoJSON(featureGeometry);
              geometryData.setGeometry(geometry);
              featureRow.setGeometry(geometryData);

              for (var propertyKey in feature.properties) {
                if (feature.properties.hasOwnProperty(propertyKey)) {
                  featureRow.setValueWithColumnName(propertyKey, feature.properties[propertyKey]);
                }
              }

              var id = featureDao.create(featureRow);
              var fti = featureDao.featureTableIndex;
              var tableIndex = fti.getTableIndex();
              if (!tableIndex) return id;
              fti.indexRow(tableIndex, id, geometryData);
              fti.updateLastIndexed(tableIndex);
              return id;
            };
            /**
             * Queries for GeoJSON features in a feature tables
             * @param  {String}   geoPackagePath  path to the GeoPackage file
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} callback    Caled with err, featureArray
             */


            GeoPackageAPI.queryForGeoJSONFeaturesInTableFromPath = function (geoPackagePath, tableName, boundingBox) {
              return GeoPackageAPI.open(geoPackagePath).then(function (geoPackage) {
                var features = geoPackage.queryForGeoJSONFeaturesInTable(tableName, boundingBox);
                geoPackage.close();
                return features;
              });
            };
            /**
             * Queries for GeoJSON features in a feature tables
             * @param  {module:geoPackage~GeoPackage}   geoPackage  open GeoPackage object
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} callback    Caled with err, featureArray
             */


            GeoPackageAPI.queryForGeoJSONFeaturesInTable = function (geoPackage, tableName, boundingBox) {
              return geoPackage.queryForGeoJSONFeaturesInTable(tableName, boundingBox);
            };
            /**
             * Iterates GeoJSON features in a feature table that matches the bounding box
             * @param  {module:geoPackage~GeoPackage}   geoPackage  open GeoPackage object
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} rowCallback    Caled with err, and GeoJSON feature
             * @param  {Function} doneCallback    Caled with err if one occurred
             */


            GeoPackageAPI.iterateGeoJSONFeaturesInTableWithinBoundingBox = function (geoPackage, tableName, boundingBox) {
              return geoPackage.iterateGeoJSONFeaturesInTableWithinBoundingBox(tableName, boundingBox);
            };
            /**
             * Iterates GeoJSON features in a feature table that matches the bounding box
             * @param  {String}   geoPackagePath  path to the GeoPackage file
             * @param  {String}   tableName   Table name to query
             * @param  {BoundingBox}   boundingBox BoundingBox to query
             * @param  {Function} rowCallback    Caled with err, and GeoJSON feature
             * @param  {Function} doneCallback    Caled with err if one occurred
             */


            GeoPackageAPI.iterateGeoJSONFeaturesFromPathInTableWithinBoundingBox = function (geoPackagePath, tableName, boundingBox) {
              return GeoPackageAPI.open(geoPackagePath).then(function (geoPackage) {
                return geoPackage.iterateGeoJSONFeaturesInTableWithinBoundingBox(tableName, boundingBox);
              });
            };

            GeoPackageAPI.createDataColumnMap = function (featureDao) {
              var columnMap = {};
              var dcd = new DataColumnsDao(featureDao.geoPackage);
              featureDao.table.columns.forEach(function (column) {
                var dataColumn = dcd.getDataColumns(featureDao.table.table_name, column.name);
                columnMap[column.name] = {
                  index: column.index,
                  name: column.name,
                  max: column.max,
                  min: column.min,
                  notNull: column.notNull,
                  primaryKey: column.primaryKey,
                  dataType: column.dataType ? types.name(column.dataType) : '',
                  displayName: dataColumn && dataColumn.name ? dataColumn.name : column.name,
                  dataColumn: dataColumn
                };
              }.bind(this));
              return columnMap;
            };
            /**
             * Iterate GeoJSON features from table
             * @param  {module:geoPackage~GeoPackage} geopackage      open GeoPackage object
             * @param  {String} table           Table name to Iterate
             * @return {Iterator<module:user/feature/featureRow~FeatureRow>}
             */


            GeoPackageAPI.iterateGeoJSONFeaturesFromTable = function (geopackage, table) {
              var featureDao = geopackage.getFeatureDao(table);

              if (!featureDao) {
                throw new Error('No Table exists with the name ' + table);
              }

              var columnMap = GeoPackageAPI.createDataColumnMap(featureDao);
              var srs = featureDao.getSrs();
              var iterator = featureDao.queryForEach();
              return {
                srs: srs,
                featureDao: featureDao,
                results: {
                  [Symbol.iterator]() {
                    return this;
                  },

                  next: function () {
                    var nextRow = iterator.next();

                    if (!nextRow.done) {
                      var featureRow;
                      var geometry;

                      while (!nextRow.done && !geometry) {
                        featureRow = featureDao.getRow(nextRow.value);
                        return {
                          value: GeoPackageAPI.parseFeatureRowIntoGeoJSON(featureRow, srs, columnMap),
                          done: false
                        };
                      }
                    }

                    return {
                      done: true
                    };
                  }.bind(this)
                }
              };
            };
            /**
             * Gets a GeoJSON feature from the table by id
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the table to get the feature from
             * @param  {Number}   featureId  ID of the feature
             * @param  {Function} callback   called with an error if one occurred and the GeoJSON feature
             */


            GeoPackageAPI.getFeature = function (geopackage, table, featureId) {
              var srs;
              var featureDao = geopackage.getFeatureDao(table);
              srs = featureDao.getSrs();
              var feature = featureDao.queryForId(featureId);

              if (!feature) {
                var features = featureDao.queryForAllEq('_feature_id', featureId);

                if (features.length) {
                  feature = featureDao.getRow(features[0]);
                } else {
                  var features = featureDao.queryForAllEq('_properties_id', featureId);

                  if (features.length) {
                    feature = featureDao.getRow(features[0]);
                  }
                }
              }

              if (feature) {
                return GeoPackageAPI.parseFeatureRowIntoGeoJSON(feature, srs);
              }
            };

            GeoPackageAPI.parseFeatureRowIntoGeoJSON = function (featureRow, srs, columnMap) {
              var geoJson = {
                type: 'Feature',
                properties: {}
              };
              var geometry = featureRow.getGeometry();

              if (geometry && geometry.geometry) {
                var geom = geometry.geometry;
                var geoJsonGeom = geometry.geometry.toGeoJSON();

                if (srs.definition && srs.definition !== 'undefined' && srs.organization.toUpperCase() + ':' + srs.organization_coordsys_id != 'EPSG:4326') {
                  // geoJsonGeom = reproject.reproject(geoJsonGeom, srs.organization.toUpperCase() + ':' + srs.organization_coordsys_id, 'EPSG:4326');
                  geoJsonGeom = reproject_1.reproject(geoJsonGeom, srs.getProjection(), 'EPSG:4326');
                }

                geoJson.geometry = geoJsonGeom;
              }

              for (var key in featureRow.values) {
                if (featureRow.values.hasOwnProperty(key) && key != featureRow.getGeometryColumn().name && key != 'id') {
                  if (key.toLowerCase() == '_feature_id') {
                    geoJson.id = featureRow.values[key];
                  } else if (key.toLowerCase() == '_properties_id') {
                    geoJson.properties[key.substring(12)] = featureRow.values[key];
                  } else if (columnMap && columnMap[key]) {
                    geoJson.properties[columnMap[key].displayName] = featureRow.values[key];
                  } else {
                    geoJson.properties[key] = featureRow.values[key];
                  }
                } else if (featureRow.getGeometryColumn().name === key) ;
              }

              geoJson.id = geoJson.id || featureRow.getId();
              return geoJson;
            };
            /**
             * Gets a tile from the specified table
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the table to get the tile from
             * @param  {Number}   zoom       zoom level of the tile
             * @param  {Number}   tileRow    row of the tile
             * @param  {Number}   tileColumn column of the tile
             *
             * @todo jsdoc return value
             */


            GeoPackageAPI.getTileFromTable = function (geopackage, table, zoom, tileRow, tileColumn) {
              var tileDao = geopackage.getTileDao(table);
              return tileDao.queryForTile(tileColumn, tileRow, zoom);
            };
            /**
             * Gets the tiles in the EPSG:4326 bounding box
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the tile table
             * @param  {Number}   zoom       Zoom of the tiles to query for
             * @param  {Number}   west       EPSG:4326 western boundary
             * @param  {Number}   east       EPSG:4326 eastern boundary
             * @param  {Number}   south      EPSG:4326 southern boundary
             * @param  {Number}   north      EPSG:4326 northern boundary
             * @param  {Function} callback   called with an error if one occurred and a tiles object describing the tiles
             */


            GeoPackageAPI.getTilesInBoundingBox = function (geopackage, table, zoom, west, east, south, north) {
              var tiles = {};
              var tileDao = geopackage.getTileDao(table);

              if (zoom < tileDao.minZoom || zoom > tileDao.maxZoom) {
                return;
              }

              tiles.columns = [];

              for (var i = 0; i < tileDao.table.columns.length; i++) {
                var column = tileDao.table.columns[i];
                tiles.columns.push({
                  index: column.index,
                  name: column.name,
                  max: column.max,
                  min: column.min,
                  notNull: column.notNull,
                  primaryKey: column.primaryKey
                });
              }

              var srs = tileDao.getSrs();
              tiles.srs = srs;
              tiles.tiles = [];
              var tms = tileDao.tileMatrixSet;
              var tm = tileDao.getTileMatrixWithZoomLevel(zoom);

              if (!tm) {
                return tiles;
              }

              var mapBoundingBox = new BoundingBox(Math.max(-180, west), Math.min(east, 180), south, north);
              tiles.west = Math.max(-180, west).toFixed(2);
              tiles.east = Math.min(east, 180).toFixed(2);
              tiles.south = south.toFixed(2);
              tiles.north = north.toFixed(2);
              tiles.zoom = zoom;
              mapBoundingBox = mapBoundingBox.projectBoundingBox('EPSG:4326', tileDao.srs.organization.toUpperCase() + ':' + tileDao.srs.organization_coordsys_id);
              var grid = TileBoundingBoxUtils.getTileGridWithTotalBoundingBox(tms.getBoundingBox(), tm.matrix_width, tm.matrix_height, mapBoundingBox);
              var iterator = tileDao.queryByTileGrid(grid, zoom);

              for (var row of iterator) {
                var tile = {};
                tile.tableName = table;
                tile.id = row.getId();
                var tileBB = TileBoundingBoxUtils.getTileBoundingBox(tms.getBoundingBox(), tm, row.getTileColumn(), row.getRow());
                tile.minLongitude = tileBB.minLongitude;
                tile.maxLongitude = tileBB.maxLongitude;
                tile.minLatitude = tileBB.minLatitude;
                tile.maxLatitude = tileBB.maxLatitude;
                tile.projection = tileDao.srs.organization.toUpperCase() + ':' + tileDao.srs.organization_coordsys_id;
                tile.values = [];

                for (var i = 0; i < tiles.columns.length; i++) {
                  var value = row.values[tiles.columns[i].name];

                  if (tiles.columns[i].name === 'tile_data') {
                    tile.values.push('data');
                  } else if (value === null || value === 'null') {
                    tile.values.push('');
                  } else {
                    tile.values.push(value.toString());
                    tile[tiles.columns[i].name] = value;
                  }
                }

                tiles.tiles.push(tile);
              }

              return tiles;
            };
            /**
             * Gets the tiles in the EPSG:4326 bounding box
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the tile table
             * @param  {Number}   zoom       Zoom of the tiles to query for
             * @param  {Number}   west       EPSG:4326 western boundary
             * @param  {Number}   east       EPSG:4326 eastern boundary
             * @param  {Number}   south      EPSG:4326 southern boundary
             * @param  {Number}   north      EPSG:4326 northern boundary
             * @param  {Function} callback   called with an error if one occurred and a tiles object describing the tiles
             */


            GeoPackageAPI.getTilesInBoundingBoxWebZoom = function (geopackage, table, webZoom, west, east, south, north) {
              var tiles = {};
              var tileDao = geopackage.getTileDao(table);

              if (webZoom < tileDao.minWebZoom || webZoom > tileDao.maxWebZoom) {
                return;
              }

              tiles.columns = [];

              for (var i = 0; i < tileDao.table.columns.length; i++) {
                var column = tileDao.table.columns[i];
                tiles.columns.push({
                  index: column.index,
                  name: column.name,
                  max: column.max,
                  min: column.min,
                  notNull: column.notNull,
                  primaryKey: column.primaryKey
                });
              }

              var srs = tileDao.getSrs();
              tiles.srs = srs;
              tiles.tiles = [];
              var zoom = tileDao.webZoomToGeoPackageZoom(webZoom);
              var tms = tileDao.tileMatrixSet;
              var tm = tileDao.getTileMatrixWithZoomLevel(zoom);

              if (!tm) {
                return tiles;
              }

              var mapBoundingBox = new BoundingBox(Math.max(-180, west), Math.min(east, 180), south, north);
              tiles.west = Math.max(-180, west).toFixed(2);
              tiles.east = Math.min(east, 180).toFixed(2);
              tiles.south = south.toFixed(2);
              tiles.north = north.toFixed(2);
              tiles.zoom = zoom;
              mapBoundingBox = mapBoundingBox.projectBoundingBox('EPSG:4326', tileDao.srs.organization.toUpperCase() + ':' + tileDao.srs.organization_coordsys_id);
              var grid = TileBoundingBoxUtils.getTileGridWithTotalBoundingBox(tms.getBoundingBox(), tm.matrix_width, tm.matrix_height, mapBoundingBox);
              var iterator = tileDao.queryByTileGrid(grid, zoom);

              for (var row of iterator) {
                var tile = {};
                tile.tableName = table;
                tile.id = row.getId();
                var tileBB = TileBoundingBoxUtils.getTileBoundingBox(tms.getBoundingBox(), tm, row.getTileColumn(), row.getRow());
                tile.minLongitude = tileBB.minLongitude;
                tile.maxLongitude = tileBB.maxLongitude;
                tile.minLatitude = tileBB.minLatitude;
                tile.maxLatitude = tileBB.maxLatitude;
                tile.projection = tileDao.srs.organization.toUpperCase() + ':' + tileDao.srs.organization_coordsys_id;
                tile.values = [];

                for (var i = 0; i < tiles.columns.length; i++) {
                  var value = row.values[tiles.columns[i].name];

                  if (tiles.columns[i].name === 'tile_data') {
                    tile.values.push('data');
                  } else if (value === null || value === 'null') {
                    tile.values.push('');
                  } else {
                    tile.values.push(value.toString());
                    tile[tiles.columns[i].name] = value;
                  }
                }

                tiles.tiles.push(tile);
              }

              return tiles;
            };

            GeoPackageAPI.getFeatureTileFromXYZ = function (geopackage, table, x, y, z, width, height) {
              x = Number(x);
              y = Number(y);
              z = Number(z);
              width = Number(width);
              height = Number(height);
              var featureDao = geopackage.getFeatureDao(table);
              if (!featureDao) return;
              var ft = new FeatureTiles(featureDao, width, height);
              return ft.drawTile(x, y, z);
            };
            /**
             * Gets the features in the EPSG:4326 bounding box
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the feature table
             * @param  {Number}   west       EPSG:4326 western boundary
             * @param  {Number}   east       EPSG:4326 eastern boundary
             * @param  {Number}   south      EPSG:4326 southern boundary
             * @param  {Number}   north      EPSG:4326 northern boundary
             */


            GeoPackageAPI.getGeoJSONFeaturesInTile = function (geopackage, table, x, y, z, skipVerification) {
              var webMercatorBoundingBox = TileBoundingBoxUtils.getWebMercatorBoundingBoxFromXYZ(x, y, z);
              var bb = webMercatorBoundingBox.projectBoundingBox('EPSG:3857', 'EPSG:4326');
              bb.minLongitude = Math.max(-180.0, bb.minLongitude);
              bb.maxLongitude = Math.min(180.0, bb.maxLongitude);
              return geopackage.indexFeatureTable(table).then(function (indexed) {
                return geopackage.getFeatureDao(table);
              }).then(function (featureDao) {
                if (!featureDao) return;
                var features = [];
                var iterator = featureDao.queryForGeoJSONIndexedFeaturesWithBoundingBox(bb, skipVerification);

                for (var feature of iterator) {
                  features.push(feature);
                }

                return features;
              }).catch(function (error) {
                console.log('error', error);
              });
            };

            GeoPackageAPI.convertPBFToVectorTile = function (pbf$1) {
              return new vectorTile.VectorTile(new pbf(pbf$1));
            };
            /**
             * Gets a mapbox VectorTile for the x y z web mercator tile specified
             * @param  {module:geoPackage~GeoPackage} geopackage open GeoPackage object
             * @param  {String} table      table name
             * @param  {Number} x          x tile
             * @param  {Number} y          y tile
             * @param  {Number} z          web zoom
             * @return {VectorTile}
             */


            GeoPackageAPI.getVectorTile = function (geopackage, table, x, y, z) {
              return GeoPackageAPI.getVectorTileProtobuf(geopackage, table, x, y, z).then(function (pbf$1) {
                return new vectorTile.VectorTile(new pbf(pbf$1));
              });
            };
            /**
             * Gets a protobuf for the x y z web mercator tile specified
             * @param  {module:geoPackage~GeoPackage} geopackage open GeoPackage object
             * @param  {String} table      table name
             * @param  {Number} x          x tile
             * @param  {Number} y          y tile
             * @param  {Number} z          web zoom
             * @return {Protobuf}
             */


            GeoPackageAPI.getVectorTileProtobuf = function (geopackage, table, x, y, z) {
              return GeoPackageAPI.getGeoJSONFeaturesInTile(geopackage, table, x, y, z, true).then(function (features) {
                var featureCollection = {
                  type: 'FeatureCollection',
                  features: features
                };
                var tileBuffer = 8;
                var tileIndex = geojsonvt(featureCollection, {
                  buffer: tileBuffer * 8,
                  maxZoom: z
                });
                var tile = tileIndex.getTile(z, x, y);
                var gjvt = {};

                if (tile) {
                  gjvt[table] = tile;
                } else {
                  gjvt[table] = {
                    features: []
                  };
                }

                return vtPbf.fromGeojsonVt(gjvt);
              });
            };
            /**
             * Gets the features in the EPSG:4326 bounding box
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the feature table
             * @param  {Number}   west       EPSG:4326 western boundary
             * @param  {Number}   east       EPSG:4326 eastern boundary
             * @param  {Number}   south      EPSG:4326 southern boundary
             * @param  {Number}   north      EPSG:4326 northern boundary
             */


            GeoPackageAPI.getFeaturesInBoundingBox = function (geopackage, table, west, east, south, north) {
              return geopackage.indexFeatureTable(table).then(function (indexed) {
                var featureDao = geopackage.getFeatureDao(table);
                if (!featureDao) throw new Error('Unable to find table ' + table);
                var bb = new BoundingBox(west, east, south, north);
                var iterator = featureDao.queryIndexedFeaturesWithBoundingBox(bb);
                return iterator;
              });
            };
            /**
             * Gets a tile image for an XYZ tile pyramid location
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the table containing the tiles
             * @param  {Number}   x          x index of the tile
             * @param  {Number}   y          y index of the tile
             * @param  {Number}   z          zoom level of the tile
             * @param  {Number}   width      width of the resulting tile
             * @param  {Number}   height     height of the resulting tile
             * @return {Promise}
             */


            GeoPackageAPI.getTileFromXYZ = function (geopackage, table, x, y, z, width, height) {
              x = Number(x);
              y = Number(y);
              z = Number(z);
              width = Number(width);
              height = Number(height);
              var tileDao = geopackage.getTileDao(table);
              var retriever = new GeoPackageTileRetriever(tileDao, width, height);
              return retriever.getTile(x, y, z);
            };
            /**
             * Draws an XYZ tile pyramid location into the provided canvas
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the table containing the tiles
             * @param  {Number}   x          x index of the tile
             * @param  {Number}   y          y index of the tile
             * @param  {Number}   z          zoom level of the tile
             * @param  {Number}   width      width of the resulting tile
             * @param  {Number}   height     height of the resulting tile
             * @param  {Canvas}   canvas     canvas element to draw the tile into
             */


            GeoPackageAPI.drawXYZTileInCanvas = function (geopackage, table, x, y, z, width, height, canvas) {
              x = Number(x);
              y = Number(y);
              z = Number(z);
              width = Number(width);
              height = Number(height);
              var tileDao = geopackage.getTileDao(table);
              var retriever = new GeoPackageTileRetriever(tileDao, width, height);
              return retriever.drawTileIn(x, y, z, canvas);
            };
            /**
             * Draws a tile specified by the bounds in EPSG:4326 into the canvas
             * @param  {module:geoPackage~GeoPackage}   geopackage open GeoPackage object
             * @param  {String}   table      name of the table containing the tiles
             * @param  {Number}   minLat     minimum latitude bounds of tile
             * @param  {Number}   minLon     minimum longitude bounds of tile
             * @param  {Number}   maxLat     maximum latitude bounds of tile
             * @param  {Number}   maxLon     maximum longitude bounds of tile
             * @param  {Number}   z          zoom level of the tile
             * @param  {Number}   width      width of the resulting tile
             * @param  {Number}   height     height of the resulting tile
             * @param  {Canvas}   canvas     canvas element to draw the tile into
             */


            GeoPackageAPI.draw4326TileInCanvas = function (geopackage, table, minLat, minLon, maxLat, maxLon, z, width, height, canvas) {
              z = Number(z);
              width = Number(width);
              height = Number(height);
              var tileDao = geopackage.getTileDao(table);
              var retriever = new GeoPackageTileRetriever(tileDao, width, height);
              var bounds = new BoundingBox(minLon, maxLon, minLat, maxLat);
              return retriever.drawTileWithWgs84BoundsInProjection(bounds, z, 'EPSG:4326', canvas);
            }; ///////////////////
            // JSDoc Globals //
            ///////////////////

            /**
             * @callback geopackageCallback
             * @param {?Error} error
             * @param {module:geoPackage~GeoPackage=} geopackage a GeoPackage instance
             */

            /**
             * An integer database key referencing a {@link module:core/srs~SpatialReferenceSystem} row in a GeoPackage database
             * @typedef {number} SRSRef
             * @see https://www.geopackage.org/spec121/index.html#spatial_ref_sys
             */

            /**
             * @module  extension/relatedTables
             */

            /**
             * Dublin Core Metadata Initiative term types
             * @class
             */
            function DublinCoreType() {}
            /**
             * A point or period of time associated with an event in the lifecycle of
             * the resource.
             * @type {Object}
             */

            DublinCoreType.DATE = {
              name: 'date'
            };
            /**
             * An account of the resource.
             * @type {Object}
             */

            DublinCoreType.DESCRIPTION = {
              name: 'description'
            };
            /**
             * The file format, physical medium, or dimensions of the resource.
             * @type {Object}
             */

            DublinCoreType.FORMAT = {
              name: 'format',
              synonyms: ['content_type']
            };
            /**
             * An unambiguous reference to the resource within a given context.
             * @type {Object}
             */

            DublinCoreType.IDENTIFIER = {
              name: 'identifier',
              synonyms: ['id']
            };
            /**
             * A related resource from which the described resource is derived.
             * @type {Object}
             */

            DublinCoreType.SOURCE = {
              name: 'source'
            };
            /**
             * A name given to the resource.
             * @type {Object}
             */

            DublinCoreType.TITLE = {
              name: 'title'
            };
            /**
             * Get the Dublin Core Type from the name
             * @param  {string} name name
             * @return {module:extension/relatedTables~DublinCoreType}
             */

            DublinCoreType.fromName = function (name) {
              for (var prop in DublinCoreType) {
                var type = DublinCoreType[prop];

                if (type.name === name) {
                  return type;
                }
              }

              for (var prop in DublinCoreType) {
                var type = DublinCoreType[prop];

                if (type.synonyms) {
                  for (var i = 0; i < type.synonyms.length; i++) {
                    if (type.synonyms[i] === name) {
                      return type;
                    }
                  }
                }
              }
            };

            /**
             * Base Extension
             * @module extension/baseExtension
             */
            /**
             * Abstract base GeoPackage extension
             * @class
             */

            var BaseExtension$1 = function (geoPackage) {
              this.geoPackage = geoPackage;
              this.connection = geoPackage.connection;
              this.extensionsDao = geoPackage.getExtensionDao();
            };
            /**
             * Get the extension or create as needed
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             * @param  {String}   definition    extension definition
             * @param  {String}   scopeType     extension scope type
             * @return {Promise<module:extension/baseExtension~BaseExtension>}
             */

            BaseExtension$1.prototype.getOrCreate = function (extensionName, tableName, columnName, definition, scopeType) {
              var extension = this.getExtension(extensionName, tableName, columnName);

              if (extension) {
                return Promise.resolve(extension);
              }

              return this.extensionsDao.createTable().then(function () {
                return this.createExtension(extensionName, tableName, columnName, definition, scopeType);
              }.bind(this));
            };
            /**
             * Get the extension for the name, table name and column name
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             * @param  {Function} callback      Called with err if one occurred and the extension
             */


            BaseExtension$1.prototype.getExtension = function (extensionName, tableName, columnName) {
              if (!this.extensionsDao.isTableExists()) {
                return false;
              }

              return this.extensionsDao.queryByExtensionAndTableNameAndColumnName(extensionName, tableName, columnName);
            };
            /**
             * Determine if the GeoPackage has the extension
             * @param  {String}   extensionName extension name
             * @param  {String}   tableName     table name
             * @param  {String}   columnName    column name
             */


            BaseExtension$1.prototype.hasExtension = function (extensionName, tableName, columnName) {
              var exists = this.getExtension(extensionName, tableName, columnName);
              return !!this.getExtension(extensionName, tableName, columnName).length;
            };

            BaseExtension$1.prototype.createExtension = function (extensionName, tableName, columnName, definition, scopeType) {
              var extension = new Extension();
              extension.table_name = tableName;
              extension.column_name = columnName;
              extension.extension_name = extensionName;
              extension.definition = definition;
              extension.scope = scopeType;
              return this.extensionsDao.create(extension);
            };

            /**
             * MetadataExtension module.
             * @module extension/metadata
             */
            /**
             * Metadata extension
             * @param  {module:geoPackage~GeoPackage} geoPackage GeoPackage object
             * @class
             * @extends {module:extension/baseExtension~BaseExtension}
             */

            var MetadataExtension = function (geoPackage) {
              BaseExtension$1.call(this, geoPackage);
              this.extensionName = MetadataExtension.EXTENSION_NAME;
              this.extensionDefinition = MetadataExtension.EXTENSION_Metadata_DEFINITION;
            };

            util.inherits(MetadataExtension, BaseExtension$1);
            /**
             * Get or create the metadata extension
             * @return {Promise}
             */

            MetadataExtension.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(this.extensionName, null, null, this.extensionDefinition, Extension.READ_WRITE);
            };

            MetadataExtension.EXTENSION_NAME = 'gpkg_metadata';
            MetadataExtension.EXTENSION_Metadata_AUTHOR = 'gpkg';
            MetadataExtension.EXTENSION_Metadata_NAME_NO_AUTHOR = 'metadata';
            MetadataExtension.EXTENSION_Metadata_DEFINITION = 'http://www.geopackage.org/spec/#extension_metadata';

            /**
             * WebPExtension module.
             * @module WebPExtension
             * @see module:extension/BaseExtension
             */

            var WebPExtension = function (geoPackage, tableName) {
              BaseExtension.call(this, geoPackage);
              this.tableName = tableName;
            };

            util.inherits(WebPExtension, BaseExtension);

            WebPExtension.prototype.getOrCreateExtension = function () {
              return this.getOrCreate(WebPExtension.EXTENSION_NAME, this.tableName, 'tile_data', WebPExtension.EXTENSION_WEBP_DEFINITION, Extension.READ_WRITE);
            };

            WebPExtension.EXTENSION_NAME = 'gpkg_webp';
            WebPExtension.EXTENSION_WEBP_AUTHOR = 'gpkg';
            WebPExtension.EXTENSION_WEBP_NAME_NO_AUTHOR = 'webp';
            WebPExtension.EXTENSION_WEBP_DEFINITION = 'http://www.geopackage.org/spec/#extension_webp';

            exports.BoundingBox = BoundingBox;
            exports.CrsWktExtension = CrsWktExtension;
            exports.DataColumnConstraints = DataColumnConstraints;
            exports.DataColumnConstraintsDao = DataColumnConstraintsDao;
            exports.DataColumns = DataColumns;
            exports.DataColumnsDao = DataColumnsDao;
            exports.DataTypes = types;
            exports.DublinCoreType = DublinCoreType;
            exports.FeatureColumn = FeatureColumn;
            exports.GeoPackage = GeoPackageAPI;
            exports.GeoPackageConnection = GeoPackageConnection;
            exports.GeoPackageTileRetriever = GeoPackageTileRetriever;
            exports.GeometryColumns = GeometryColumns;
            exports.GeometryColumnsDao = GeometryColumnsDao;
            exports.GeometryData = GeometryData;
            exports.MediaTable = MediaTable;
            exports.Metadata = Metadata;
            exports.MetadataDao = MetadataDao;
            exports.MetadataExtension = MetadataExtension;
            exports.MetadataReference = MetadataReference;
            exports.MetadataReferenceDao = MetadataReferenceDao;
            exports.RTreeIndex = RTreeIndex;
            exports.RTreeIndexDao = RTreeIndexDao;
            exports.SchemaExtension = SchemaExtension;
            exports.TableCreator = TableCreator;
            exports.TileColumn = TileColumn;
            exports.TileUtilities = TileUtilities;
            exports.UserColumn = UserColumn;
            exports.UserMappingTable = UserMappingTable;
            exports.WebPExtension = WebPExtension;
            exports.proj4Defs = proj4Defs;

            Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=geopackage.min.js.map
